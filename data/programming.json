[
  {
    "question": "How do I start a new JavaScript file?",
    "answer": "// In terminal:\nnode filename.js\n\n// Or in HTML:\n<script src=\"filename.js\"></script>",
    "type": "javascript",
    "tags": ["javascript"],
    "code": "// Example JavaScript file\nconsole.log('Hello, World!');\n\n// Function example\nfunction greet(name) {\n    return `Hello, ${name}!`;\n}\n\nconsole.log(greet('EVERMIND'));"
  },
  {
    "question": "How do I start a new Python file?",
    "answer": "# In terminal:\npython filename.py\n\n# Or:\npython3 filename.py",
    "type": "python",
    "tags": ["python"],
    "code": "# Example Python file\nprint('Hello, World!')\n\n# Function example\ndef greet(name):\n    return f'Hello, {name}!'\n\nprint(greet('EVERMIND'))"
  },
  {
    "question": "How do I start a new C program/file?",
    "answer": "// Compile:\ngcc filename.c -o filename\n\n// Run:\n./filename",
    "type": "c",
    "tags": ["c"]
  },
  {
    "question": "How do I start a new C++ program/file?",
    "answer": "// Compile:\ng++ filename.cpp -o filename\n\n// Run:\n./filename",
    "type": "c",
    "tags": ["c"]
  },
  {
    "question": "How do I start a Playwright file in CMD?",
    "answer": "# Install Playwright:\nnpm install playwright\n\n# Run test:\nnpx playwright test filename.spec.js",
    "type": "javascript",
    "tags": ["javascript", "playwright"]
  },
  {
    "question": "What does API stand for?",
    "answer": "API stands for Application Programming Interface.\n\nIt's a set of rules and protocols that allows different software applications to communicate with each other.",
    "type": "html",
    "tags": ["api"]
  },
  {
    "question": "What are the names of these symbols: () [] <> {} / \\ |",
    "answer": "() - Parentheses\n[] - Square brackets / Brackets\n<> - Angle brackets\n{} - Curly braces / Braces\n/ - Forward slash\n\\ - Backslash\n| - Pipe / Vertical bar",
    "type": "html",
    "tags": ["symbols"]
  },
  {
    "question": "How do I make a commit and push changes to GitHub?",
    "answer": "git add .\ngit commit -m \"Your commit message\"\ngit push origin main",
    "type": "shell",
    "tags": ["git"]
  },
  {
    "question": "How do I see the commit history?",
    "answer": "git log\n\n# Optional for a one-line view:\ngit log --oneline",
    "type": "shell",
    "tags": ["git"]
  },
  {
    "question": "How do I view tags?",
    "answer": "git tag",
    "type": "shell",
    "tags": ["git"]
  },
  {
    "question": "How do I create a tag?",
    "answer": "git tag <tag-name>\n\n# For annotated tag:\ngit tag -a <tag-name> -m \"Tag message\"",
    "type": "shell",
    "tags": ["git"]
  },
  {
    "question": "How do I push tags to GitHub?",
    "answer": "# Push a single tag:\ngit push origin <tag-name>\n\n# Push all tags:\ngit push origin --tags",
    "type": "shell",
    "tags": ["git"]
  },
  {
    "question": "How do I delete a tag?",
    "answer": "# Delete locally:\ngit tag -d <tag-name>\n\n# Delete remotely:\ngit push origin --delete <tag-name>",
    "type": "shell",
    "tags": ["git"]
  },
  {
    "question": "How do I check the current branch?",
    "answer": "git branch\n\n# Or just the current branch:\ngit branch --show-current",
    "type": "shell",
    "tags": ["git"]
  },
  {
  "question": "How do you open Command Prompt or PowerShell directly from File Explorer in a directory?",
  "answer": "Go to the folder location in File Explorer. To open Command Prompt, click the address/search bar, type `cmd`, and press Enter. To open PowerShell, click the address bar, type `powershell`, and press Enter. Alternatively, you can hold Shift, then right-click on an empty area in the folder and choose 'Open PowerShell window here' or 'Open Command window here' if the option is available.",
    "type": "shell",
    "tags": ["terminal", "windows"]
  },

  {
    "question": "How do you run scrcpy?",
    "answer": "Use the following steps:\n\n1. Run `adb kill-server`\n2. Run `adb start-server`\n3. Connect your device using `adb connect <ip-address>`\n4. Launch scrcpy by typing `scrcpy`",
    "type": "shell",
    "tags": ["adb", "scrcpy", "android"]
  },
  {
    "question": "How do you start a localhost server on port 8000 using Python and Node.js?",
    "answer": "* Python (Works for both Python 2 and 3):\n  Run: `python -m http.server 8000`\n  Then visit: http://localhost:8000\n\n* Node.js:\n  First install: `npm install -g http-server`\n  Then run: `http-server -p 8000`",
    "type": "shell",
    "tags": ["python", "nodejs", "server"]
  },
  {
    "question": "What does IP stand for?",
    "answer": "Internet Protocol.",
    "type": "networking",
    "tags": ["ip", "protocol"]
  },
  {
    "question": "What does HTTP stand for?",
    "answer": "HyperText Transfer Protocol.",
    "type": "networking",
    "tags": ["http", "protocol"]
  },
  {
    "question": "What does URL stand for?",
    "answer": "Uniform Resource Locator.",
    "type": "networking",
    "tags": ["url", "web"]
  },
  {
    "question": "What does DNS stand for, and what does it mean?",
    "answer": "Domain Name System — it translates human-readable domain names (like google.com) into IP addresses that computers use to identify each other.",
    "type": "networking",
    "tags": ["dns", "domain"]
  },
  {
    "question": "What does HTML stand for, and what does it mean?",
    "answer": "HyperText Markup Language — the standard language used to structure and display content on the web.",
    "type": "html",
    "tags": ["html", "markup"]
  },
  {
    "question": "What does CSS stand for, and what does it mean?",
    "answer": "Cascading Style Sheets — it controls the layout, colors, and overall appearance of a webpage.",
    "type": "css",
    "tags": ["css", "styling"]
  },
  {
    "question": "What was the previous name of JavaScript?",
    "answer": "ECMAScript.",
    "type": "javascript",
    "tags": ["javascript", "history"]
  },
  {
    "question": "What does DOM stand for?",
    "answer": "Document Object Model.",
    "type": "javascript",
    "tags": ["dom", "web"]
  },
  {
    "question": "What does NPM stand for?",
    "answer": "Node Package Manager — it's used to install and manage packages in Node.js projects.",
    "type": "javascript",
    "tags": ["npm", "nodejs"]
  },
  {
    "question": "What does SaaS stand for, and what does it mean?",
    "answer": "Software as a Service — software delivered over the internet, usually through a subscription, like Google Docs or Slack.",
    "type": "concepts",
    "tags": ["saas", "cloud"]
  },
  {
    "question": "What does JSON mean?",
    "answer": "JavaScript Object Notation — a lightweight format for storing and transferring data between systems.",
    "type": "javascript",
    "tags": ["json", "data"]
  },
  {
    "question": "Give an example of how systems communicate.",
    "answer": "The client sends a GET request to the server. The server responds with status codes like 200 (OK), 400 (client error), or 500 (server error).",
    "type": "networking",
    "tags": ["http", "communication"]
  },
  {
    "question": "What is a tech stack, what does it stand for, and give examples.",
    "answer": "A combination of technologies used to build an application. Examples include:\n\n* LAMP: Linux, Apache, MySQL, PHP\n* MEAN: MongoDB, Express, Angular, Node.js\n  It usually includes a front-end framework, an API, and a backend layer.",
    "type": "concepts",
    "tags": ["stack", "architecture"]
  },
  {
    "question": "What does LLM stand for?",
    "answer": "Large Language Model — an AI model trained on vast amounts of text data to understand and generate human-like language.",
    "type": "ai",
    "tags": ["llm", "ai", "machine-learning"]
  },
  {
    "question": "How do you kill an active port like localhost:8000?",
    "answer": "Use one of these methods:\n\n**Windows:**\n`netstat -ano | findstr :8000` (find the PID)\n`taskkill /PID <PID> /F` (kill the process)\n\n**Mac/Linux:**\n`lsof -ti:8000 | xargs kill -9`\n\n**Alternative:**\n`npx kill-port 8000` (if you have kill-port installed)",
    "type": "command-line",
    "tags": ["port", "kill", "terminal"]
  },
  {
    "question": "What is a CPU made up of?",
    "answer": "A CPU (Central Processing Unit) is made up of:\n\n• **Control Unit (CU)** - Manages instruction execution\n• **Arithmetic Logic Unit (ALU)** - Performs calculations and logic operations\n• **Registers** - Small, fast storage locations\n• **Cache Memory** - High-speed memory for frequently used data\n• **Clock** - Synchronizes operations\n• **Bus Interface** - Connects to other computer components",
    "type": "hardware",
    "tags": ["hardware"]
  },
  {
    "question": "What is the smallest form of data?",
    "answer": "A **bit** (binary digit) is the smallest form of data. It can only have two values: 0 or 1.",
    "type": "data",
    "tags": ["data"]
  },
  {
    "question": "How many bits make up 1 byte and how many combinations can it make?",
    "answer": "1 byte is made up of **8 bits** and can make **256 different combinations** (2^8 = 256).",
    "type": "data",
    "tags": ["data"]
  },
  {
    "question": "Explain the difference between interpreter and compiler.",
    "answer": "**Interpreter:**\n• Translates and executes code line by line\n• No separate compilation step\n• Slower execution but faster development\n• Examples: Python, JavaScript, Ruby\n\n**Compiler:**\n• Translates entire program to machine code before execution\n• Creates executable file\n• Faster execution but slower development\n• Examples: C, C++, Go, Rust\n\n**Hybrid (JIT):**\n• Compiles code at runtime\n• Examples: Java, C#",
    "type": "programming-concepts",
    "tags": ["programming"]
  },

  {
    "question": "Write the default HTML skeleton structure.",
    "answer": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n    \n</body>\n</html>\n```",
    "type": "html",
    "tags": ["html", "skeleton", "structure", "doctype"],
    "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>EVERMIND Test</title>\n</head>\n<body>\n    <h1>Welcome to EVERMIND</h1>\n    <p>This is a test HTML page.</p>\n</body>\n</html>"
  },
  {
    "question": "Why do we name files index.html?",
    "answer": "We name files `index.html` because:\n\n• **Default behavior** - Web servers automatically serve `index.html` when no specific file is requested\n• **Convention** - It's the standard name for the main/home page of a website\n• **User-friendly** - Visitors can access your site with just the domain name (e.g., `example.com` instead of `example.com/index.html`)\n• **SEO benefits** - Search engines recognize it as the primary page",
    "type": "html",
    "tags": ["html", "naming"]
  },
  {
    "question": "Explain how HTML indentation works with parent, sibling, child, and grandparent tags.",
    "answer": "**HTML Indentation Structure:**\n\n```html\n<html>                    <!-- Grandparent -->\n  <head>                  <!-- Parent of title -->\n    <title>Title</title>  <!-- Child of head, sibling of meta -->\n    <meta charset=\"UTF-8\"> <!-- Child of head, sibling of title -->\n  </head>                 <!-- Parent of title, child of html -->\n  <body>                  <!-- Parent of div, child of html -->\n    <div>                 <!-- Child of body, parent of p -->\n      <p>Text</p>         <!-- Child of div, grandchild of body -->\n    </div>\n  </body>\n</html>\n```\n\n• **Parent**: Contains other elements\n• **Child**: Nested inside another element\n• **Sibling**: Elements at the same level\n• **Grandparent**: Two levels up in the hierarchy",
    "type": "html",
    "tags": ["html", "structure"]
  },
  {
    "question": "What is the title tag used for and write a short code example?",
    "answer": "The `<title>` tag is used to:\n\n• **Set the browser tab title**\n• **Define the page title** for search engines\n• **Provide the title** when bookmarking\n• **Display in search results**\n\n**Example:**\n```html\n<title>Chuks Test</title>\n```\n\nThis will show \"Chuks Test\" in the browser tab and search results.",
    "type": "html",
    "tags": ["html", "seo"]
  },
  {
    "question": "How many types of headers are there in HTML and give an example?",
    "answer": "There are **6 types of headers** in HTML: `<h1>` through `<h6>`\n\n• `<h1>` - Most important (largest)\n• `<h2>` - Second level\n• `<h3>` - Third level\n• `<h4>` - Fourth level\n• `<h5>` - Fifth level\n• `<h6>` - Least important (smallest)\n\n**Example:**\n```html\n<h1>Main Title</h1>\n<h2>Section Title</h2>\n<h3>Subsection Title</h3>\n```",
    "type": "html",
    "tags": ["html", "headers"]
  },
  {
    "question": "How do you write a paragraph in HTML?",
    "answer": "Use the `<p>` tag to create paragraphs:\n\n```html\n<p>This is a paragraph of text.</p>\n<p>This is another paragraph.</p>\n```\n\nEach `<p>` tag creates a new paragraph with automatic spacing between them.",
    "type": "html",
    "tags": ["html", "text"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Paragraph Example</title>\n</head>\n<body>\n    <p>This is the first paragraph of text.</p>\n    <p>This is the second paragraph with more content.</p>\n    <p>Each paragraph appears on a new line with spacing.</p>\n</body>\n</html>"
  },
  {
    "question": "How do you make text both italic and bold in a paragraph?",
    "answer": "Use nested `<b>` and `<i>` tags:\n\n```html\n<p>This is <b><i>italic and bolded text</i></b> in a paragraph.</p>\n```\n\n**Alternative modern approach:**\n```html\n<p>This is <strong><em>italic and bolded text</em></strong> in a paragraph.</p>\n```\n\nNote: `<strong>` and `<em>` are preferred for semantic meaning.",
    "type": "html",
    "tags": ["html", "formatting"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Text Formatting</title>\n</head>\n<body>\n    <p>This is <b><i>italic and bolded text</i></b> in a paragraph.</p>\n    <p>This is <strong><em>modern semantic formatting</em></strong>.</p>\n    <p>Regular text with <b>bold</b> and <i>italic</i> separately.</p>\n</body>\n</html>"
  },
  {
    "question": "How do you create a new line in HTML?",
    "answer": "Use the `<br>` or `<br/>` tag:\n\n```html\n<p>This is the first line.<br>This is the second line.</p>\n```\n\n**Note:** `<br>` is a self-closing tag, so both `<br>` and `<br/>` work the same way.",
    "type": "html",
    "tags": ["html", "formatting"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Line Breaks</title>\n</head>\n<body>\n    <p>This is the first line.<br>This is the second line.</p>\n    <p>Line 1<br/>Line 2<br/>Line 3</p>\n    <p>Without br tags, everything stays on one line.</p>\n</body>\n</html>"
  },
  {
    "question": "How do you create a horizontal line in HTML?",
    "answer": "Use the `<hr>` or `<hr/>` tag:\n\n```html\n<p>Content above the line</p>\n<hr>\n<p>Content below the line</p>\n```\n\nThis creates a horizontal line that spans the width of its container.",
    "type": "html",
    "tags": ["html", "formatting"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Horizontal Lines</title>\n</head>\n<body>\n    <h1>Section 1</h1>\n    <p>Content above the line</p>\n    <hr>\n    <h2>Section 2</h2>\n    <p>Content below the line</p>\n    <hr/>\n    <h3>Section 3</h3>\n    <p>Another section after another line</p>\n</body>\n</html>"
  },
  {
    "question": "What is the git command to create a new branch?",
    "answer": "Use the `git switch -c` command:\n\n```bash\ngit switch -c <name-of-new-branch>\n```\n\n**Alternative methods:**\n```bash\n# Create and switch to new branch\ngit checkout -b <branch-name>\n\n# Just create branch (stay on current)\ngit branch <branch-name>\n```\n\n**Example:**\n```bash\ngit switch -c feature-login\n```",
    "type": "git",
    "tags": ["git", "branch"],
    "code": "# Create and switch to new branch\ngit switch -c feature-login\n\n# Alternative method\ngit checkout -b feature-login\n\n# Just create branch (stay on current)\ngit branch feature-login\n\n# Check current branch\ngit branch\n\n# Switch to existing branch\ngit switch main"
  },
  {
    "question": "How do you merge git branches?",
    "answer": "**To merge your branch into main:**\n\n```bash\n# Switch to main branch\ngit checkout main\n\n# Merge your branch\ngit merge new-branch-name\n\n# Push the changes\ngit push origin main\n```\n\n**Alternative (if using git switch):**\n```bash\ngit switch main\ngit merge feature-branch\ngit push origin main\n```",
    "type": "git",
    "tags": ["git", "merge"],
    "code": "# Switch to main branch\ngit checkout main\n\n# Merge your branch\ngit merge feature-login\n\n# Push the changes\ngit push origin main\n\n# Alternative using git switch\ngit switch main\ngit merge feature-login\ngit push origin main\n\n# Check merge status\ngit status"
  },
  {
    "question": "How do you make text big or small in HTML?",
    "answer": "Use the `<big>` and `<small>` tags:\n\n```html\n<p>This is <big>big text</big> and this is <small>small text</small>.</p>\n```\n\n**Note:** These tags are deprecated in HTML5. Modern approach uses CSS:\n```html\n<p>This is <span style=\"font-size: larger;\">big text</span> and this is <span style=\"font-size: smaller;\">small text</span>.</p>\n```",
    "type": "html",
    "tags": ["html", "formatting"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Text Size</title>\n</head>\n<body>\n    <p>This is <big>big text</big> and this is <small>small text</small>.</p>\n    <p>Modern approach: <span style=\"font-size: larger;\">larger text</span> and <span style=\"font-size: smaller;\">smaller text</span>.</p>\n    <p>Normal size text for comparison.</p>\n</body>\n</html>"
  },
  {
    "question": "What are subscript and superscript in HTML and give examples?",
    "answer": "**Subscript** (`<sub>`) - Text below the baseline\n**Superscript** (`<sup>`) - Text above the baseline\n\n**Examples:**\n```html\n<p>H<sub>2</sub>O (water molecule)</p>\n<p>E=mc<sup>2</sup> (Einstein's equation)</p>\n<p>2<sup>3</sup> = 8 (2 to the power of 3)</p>\n<p>CO<sub>2</sub> (carbon dioxide)</p>\n```",
    "type": "html",
    "tags": ["html", "formatting"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Subscript and Superscript</title>\n</head>\n<body>\n    <h2>Chemistry Examples</h2>\n    <p>Water: H<sub>2</sub>O</p>\n    <p>Carbon dioxide: CO<sub>2</sub></p>\n    <p>Sulfuric acid: H<sub>2</sub>SO<sub>4</sub></p>\n    \n    <h2>Math Examples</h2>\n    <p>Einstein's equation: E=mc<sup>2</sup></p>\n    <p>Power of 2: 2<sup>3</sup> = 8</p>\n    <p>Square root: √<sup>2</sup></p>\n</body>\n</html>"
  },
  {
    "question": "How do you write comments in HTML?",
    "answer": "Use the `<!-- -->` syntax:\n\n```html\n<!-- This is a single-line comment -->\n\n<!--\n  This is a\n  multi-line comment\n-->\n\n<p>Visible content</p> <!-- Inline comment -->\n```\n\n**Note:** Comments are not displayed in the browser but are visible in the HTML source code.",
    "type": "html",
    "tags": ["html", "syntax"]
  },
  {
    "question": "How do you change the color of a paragraph in HTML?",
    "answer": "Use the `style` attribute with `color`:\n\n```html\n<p style=\"color: red;\">This text is red</p>\n<p style=\"color: blue;\">This text is blue</p>\n<p style=\"color: #ff0000;\">This text is red (hex)</p>\n```\n\n**Common colors:** red, blue, green, yellow, purple, orange, black, white",
    "type": "html",
    "tags": ["html", "css"]
  },
  {
    "question": "How do you change the background color of a paragraph in HTML?",
    "answer": "Use the `style` attribute with `background-color`:\n\n```html\n<p style=\"background-color: green;\">This paragraph has a green background</p>\n<p style=\"background-color: yellow;\">This paragraph has a yellow background</p>\n<p style=\"background-color: #00ff00;\">This paragraph has a green background (hex)</p>\n```\n\n**Note:** The correct property is `background-color`, not `backgrounf-color`.",
    "type": "html",
    "tags": ["html", "css"]
  },
  {
    "question": "How do you change the entire background color of a website?",
    "answer": "Add the `background-color` style to the `<body>` tag:\n\n```html\n<body style=\"background-color: lightblue;\">\n  <h1>My Website</h1>\n  <p>Content here</p>\n</body>\n```\n\n**Alternative using CSS:**\n```html\n<style>\n  body {\n    background-color: lightblue;\n  }\n</style>\n```",
    "type": "html",
    "tags": ["html", "css"]
  },
  {
    "question": "What is the proper format of HTML code with header, main, and footer?",
    "answer": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n    <header>\n        <h1>Website Header</h1>\n        <nav>Navigation links</nav>\n    </header>\n    \n    <main>\n        <h2>Main Content</h2>\n        <p>Your main content goes here</p>\n    </main>\n    \n    <footer>\n        <p>&copy; 2024 Your Website</p>\n    </footer>\n</body>\n</html>\n```",
    "type": "html",
    "tags": ["html", "semantic"]
  },
  {
    "question": "What HTML tag do you use for navigation items in the header?",
    "answer": "Use the `<nav>` tag for navigation items:\n\n```html\n<header>\n    <h1>My Website</h1>\n    <nav>\n        <a href=\"#home\">Home</a>\n        <a href=\"#about\">About</a>\n        <a href=\"#contact\">Contact</a>\n    </nav>\n</header>\n```\n\nThe `<nav>` tag semantically indicates that the content is for navigation purposes.",
    "type": "html",
    "tags": ["html", "semantic"]
  },
  {
    "question": "What HTML tag do you use for blog posts and how do you divide into sections?",
    "answer": "Use the `<article>` tag for blog posts and `<section>` tags to divide into sections:\n\n```html\n<article>\n    <h2>Blog Post Title</h2>\n    \n    <section>\n        <h3>Introduction</h3>\n        <p>Introduction content...</p>\n    </section>\n    \n    <section>\n        <h3>Main Content</h3>\n        <p>Main content...</p>\n    </section>\n    \n    <section>\n        <h3>Conclusion</h3>\n        <p>Conclusion content...</p>\n    </section>\n</article>\n```",
    "type": "html",
    "tags": ["html", "semantic"]
  },
  {
    "question": "What HTML tag do you use to show content that's not directly related to the main site?",
    "answer": "Use the `<aside>` tag for content not directly related to the main site:\n\n```html\n<main>\n    <article>\n        <h2>Main Article</h2>\n        <p>Main content...</p>\n    </article>\n    \n    <aside>\n        <h3>Related Links</h3>\n        <ul>\n            <li><a href=\"#\">Related Article 1</a></li>\n            <li><a href=\"#\">Related Article 2</a></li>\n        </ul>\n        \n        <h3>Advertisement</h3>\n        <p>Ad content...</p>\n    </aside>\n</main>\n```\n\nCommon uses: sidebars, advertisements, related links, author info.",
    "type": "html",
    "tags": ["html", "semantic"]
  },
  {
    "question": "How to ping websites? Example: ping google.com",
    "answer": "**Windows Command:**\n```cmd\nping google.com\nping 8.8.8.8\n```\n\n**What ping does:**\n- Sends packets to test connectivity\n- Measures response time (latency)\n- Shows if website/server is reachable\n\n**Example output:**\n```\nPinging google.com [142.250.191.14] with 32 bytes of data:\nReply from 142.250.191.14: bytes=32 time=15ms TTL=54\nReply from 142.250.191.14: bytes=32 time=12ms TTL=54\n```\n\n**Useful options:**\n- `ping -t google.com` (continuous ping)\n- `ping -n 4 google.com` (send 4 packets)\n- `ping -l 1000 google.com` (send 1000 byte packets)",
    "type": "networking",
    "tags": ["ping", "networking", "command-line"]
  },
 
  {
    "question": "How to check all files in a project? Use: dir",
    "answer": "**Windows Command:**\n```cmd\ndir\n```\n\n**What it shows:**\n- All files and folders in current directory\n- File sizes\n- Creation dates\n- File types\n\n**Useful variations:**\n```cmd\ndir /p          # Pause between screens\ndir /w          # Wide format\ndir *.js        # Show only .js files\ndir /s          # Show subdirectories too\ndir /a          # Show hidden files\n```\n\n**Example output:**\n```\nDirectory of C:\\MyProject\n\nindex.html    1,234 bytes  10/13/2025\nstyle.css     2,456 bytes  10/13/2025\nscript.js     3,789 bytes  10/13/2025\nREADME.md     456 bytes    10/13/2025\n```\n\n**Linux/Mac equivalent:**\n```bash\nls -la\n```",
    "type": "command-line",
    "tags": ["dir", "files", "directory", "windows"]
  },
  {
    "question": "How to check what's inside a file? Use: type filename",
    "answer": "**Windows Command:**\n```cmd\ntype filename.txt\ntype index.html\ntype script.js\n```\n\n**What it does:**\n- Displays the entire contents of a file\n- Shows text files in the terminal\n- Useful for quick file inspection\n\n**Example:**\n```cmd\ntype README.md\n```\n\n**Output:**\n```\n# My Project\nThis is a sample README file.\n\n## Features\n- Feature 1\n- Feature 2\n```\n\n**Useful for:**\n- Quick file preview\n- Checking file contents\n- Reading configuration files\n\n**Linux/Mac equivalent:**\n```bash\ncat filename\nless filename\nmore filename\n```",
    "type": "command-line",
    "tags": ["type", "files", "content", "windows"]
  },
  {
    "question": "What does 'git status porcelain' mean?",
    "answer": "**Git Status Porcelain:**\n\n**What it is:**\n- `git status --porcelain` gives machine-readable output\n- Designed for scripts and automation\n- Clean, consistent format\n\n**Regular git status:**\n```\nOn branch main\nChanges not staged for commit:\n  modified:   file.txt\n  new file:   newfile.js\n```\n\n**Porcelain format:**\n```\n M file.txt\n?? newfile.js\n```\n\n**Status codes:**\n- `M` = Modified\n- `A` = Added\n- `D` = Deleted\n- `??` = Untracked\n- `R` = Renamed\n\n**Why use it:**\n- Scripts can parse it easily\n- Consistent output format\n- No human-friendly text to filter out\n\n**Example:**\n```bash\ngit status --porcelain | grep \"^ M\"\n```",
    "type": "git",
    "tags": ["git", "status", "porcelain", "automation"]
  },
  {
    "question": "How to add links in HTML?",
    "answer": "**Different types of links:**\n\n**Link to another website:**\n```html\n<a href=\"https://www.google.com\">Google Homepage</a>\n```\n\n**Link to another HTML file in project directory:**\n```html\n<a href=\"about.html\">About Page</a>\n```\n\n**Link to HTML file in different folder:**\n```html\n<a href=\"pages/contact.html\">Contact Page</a>\n```\n\n**Link to image in directory:**\n```html\n<a href=\"images/photo.jpg\">View Photo</a>\n```\n\n**Link to image outside HTML folder:**\n```html\n<a href=\"../assets/logo.png\">Company Logo</a>\n```\n\n**Important:** Always include `https://` for external websites!",
    "type": "html",
    "tags": ["html", "links", "anchors"]
  },
  {
    "question": "How to make links open in a new tab?",
    "answer": "Use `target=\"_blank\"` attribute:\n\n```html\n<a href=\"https://www.google.com\" target=\"_blank\">Google (New Tab)</a>\n```\n\n**What it does:**\n- Opens the link in a new browser tab\n- Keeps the original page open\n- Useful for external links",
    "type": "html",
    "tags": ["html", "links", "target"]
  },
  {
    "question": "How to create image tags in HTML?",
    "answer": "**Basic image tag:**\n```html\n<img src=\"image.jpg\" alt=\"Description\">\n```\n\n**Image from internet:**\n```html\n<img src=\"https://example.com/image.jpg\" alt=\"Online Image\">\n```\n\n**Image from directory:**\n```html\n<img src=\"images/photo.jpg\" alt=\"Local Photo\">\n```\n\n**With size control:**\n```html\n<img src=\"image.jpg\" alt=\"Description\" width=\"300\" height=\"200\">\n```\n\n**Important:** Always include `alt` attribute for accessibility!",
    "type": "html",
    "tags": ["html", "images", "alt"]
  },
  {
    "question": "How to edit image size in HTML?",
    "answer": "**Set both width and height:**\n```html\n<img src=\"image.jpg\" width=\"300\" height=\"200\" alt=\"Description\">\n```\n\n**Set only width (height auto-adjusts):**\n```html\n<img src=\"image.jpg\" width=\"300\" alt=\"Description\">\n```\n\n**Set only height (width auto-adjusts):**\n```html\n<img src=\"image.jpg\" height=\"200\" alt=\"Description\">\n```\n\n**Tips:**\n- You can check image dimensions before setting\n- Setting only one dimension maintains aspect ratio\n- `alt` is very important for accessibility",
    "type": "html",
    "tags": ["html", "images", "sizing"]
  },
  {
    "question": "How to add videos to HTML?",
    "answer": "**Basic video tag:**\n```html\n<video src=\"video.mp4\" controls width=\"400\"></video>\n```\n\n**With thumbnail (poster):**\n```html\n<video src=\"video.mp4\" poster=\"thumbnail.jpg\" controls width=\"400\"></video>\n```\n\n**Auto-play and loop:**\n```html\n<video src=\"video.mp4\" autoplay loop muted controls></video>\n```\n\n**Full example:**\n```html\n<video src=\"video.mp4\" poster=\"thumb.jpg\" controls width=\"500\" height=\"300\" autoplay loop muted>\n    Your browser doesn't support video.\n</video>\n```\n\n**Note:** Use `muted` with `autoplay` for browser compatibility",
    "type": "html",
    "tags": ["html", "video", "multimedia"]
  },
  {
    "question": "How to add YouTube videos to HTML?",
    "answer": "**Get embedded link from YouTube:**\n1. Go to YouTube video\n2. Click \"Share\" → \"Embed\"\n3. Copy the iframe code\n\n**Use the iframe code:**\n```html\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/VIDEO_ID\" frameborder=\"0\" allowfullscreen></iframe>\n```\n\n**Example:**\n```html\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/dQw4w9WgXcQ\" frameborder=\"0\" allowfullscreen></iframe>\n```\n\n**Same process as regular videos, just use the YouTube embed link!**",
    "type": "html",
    "tags": ["html", "youtube", "iframe"]
  },
  {
    "question": "How to create unordered lists in HTML?",
    "answer": "**Basic unordered list:**\n```html\n<ul>\n    <li>Item 1</li>\n    <li>Item 2</li>\n    <li>Item 3</li>\n</ul>\n```\n\n**With links:**\n```html\n<ul>\n    <li><a href=\"home.html\">Home</a></li>\n    <li><a href=\"about.html\">About</a></li>\n    <li><a href=\"contact.html\">Contact</a></li>\n</ul>\n```\n\n**When to use:**\n- Navigation menus\n- Feature lists\n- Any items without specific order\n- Bullet points",
    "type": "html",
    "tags": ["html", "lists", "navigation"]
  },
  {
    "question": "How to create ordered lists in HTML?",
    "answer": "**Basic ordered list:**\n```html\n<ol>\n    <li>First item</li>\n    <li>Second item</li>\n    <li>Third item</li>\n</ol>\n```\n\n**Different number formats:**\n```html\n<!-- Numbers (default) -->\n<ol type=\"1\">\n    <li>Item 1</li>\n    <li>Item 2</li>\n</ol>\n\n<!-- Letters -->\n<ol type=\"A\">\n    <li>Item A</li>\n    <li>Item B</li>\n</ol>\n\n<!-- Roman numerals -->\n<ol type=\"I\">\n    <li>Item I</li>\n    <li>Item II</li>\n</ol>\n```\n\n**When to use:**\n- Step-by-step instructions\n- Rankings\n- Any items with specific order",
    "type": "html",
    "tags": ["html", "lists", "ordered"]
  },
  {
    "question": "How to create description lists in HTML?",
    "answer": "**Description list structure:**\n```html\n<dl>\n    <dt>Term 1</dt>\n    <dd>Description of term 1</dd>\n    \n    <dt>Term 2</dt>\n    <dd>Description of term 2</dd>\n</dl>\n```\n\n**Example:**\n```html\n<dl>\n    <dt>HTML</dt>\n    <dd>HyperText Markup Language - used for web pages</dd>\n    \n    <dt>CSS</dt>\n    <dd>Cascading Style Sheets - used for styling</dd>\n    \n    <dt>JavaScript</dt>\n    <dd>Programming language for web interactivity</dd>\n</dl>\n```\n\n**When to use:**\n- Glossaries\n- Definitions\n- Terms with descriptions\n- FAQ sections",
    "type": "html",
    "tags": ["html", "lists", "descriptions"]
  },
  {
    "question": "How to create tables in HTML?",
    "answer": "**Basic table:**\n```html\n<table>\n    <tr>\n        <td>Cell 1</td>\n        <td>Cell 2</td>\n    </tr>\n    <tr>\n        <td>Cell 3</td>\n        <td>Cell 4</td>\n    </tr>\n</table>\n```\n\n**With headers:**\n```html\n<table>\n    <caption>Student Grades</caption>\n    <tr>\n        <th>Name</th>\n        <th>Math</th>\n        <th>Science</th>\n    </tr>\n    <tr>\n        <td>John</td>\n        <td>85</td>\n        <td>90</td>\n    </tr>\n</table>\n```\n\n**With formatting:**\n```html\n<table>\n    <thead>\n        <tr><th>Header 1</th><th>Header 2</th></tr>\n    </thead>\n    <tbody>\n        <tr><td>Data 1</td><td>Data 2</td></tr>\n    </tbody>\n</table>\n```",
    "type": "html",
    "tags": ["html", "tables", "data"]
  },
  {
    "question": "How to make table cells span multiple columns?",
    "answer": "Use `colspan` attribute:\n\n```html\n<table>\n    <tr>\n        <th>Name</th>\n        <th>Subject</th>\n        <th>Grade</th>\n    </tr>\n    <tr>\n        <td>John</td>\n        <td colspan=\"2\">Math - A</td>\n    </tr>\n    <tr>\n        <td>Jane</td>\n        <td>Science</td>\n        <td>B+</td>\n    </tr>\n</table>\n```\n\n**What `colspan=\"2\"` does:**\n- Makes the cell span 2 columns\n- Useful for headers that cover multiple columns\n- Adjusts the table layout automatically",
    "type": "html",
    "tags": ["html", "tables", "colspan"]
  },
  {
    "question": "What's the difference between inline and block elements?",
    "answer": "**Inline Elements:**\n- Stay next to each other on the same line\n- Only take up as much space as needed\n- Examples: `<a>`, `<span>`, `<img>`, `<strong>`\n\n```html\n<a href=\"#\">Link 1</a>\n<a href=\"#\">Link 2</a>\n<!-- These stay on the same line -->\n```\n\n**Block Elements:**\n- Take up the entire width of their container\n- Start on a new line\n- Examples: `<p>`, `<div>`, `<h1>`, `<ul>`\n\n```html\n<p>Paragraph 1</p>\n<p>Paragraph 2</p>\n<!-- These are on separate lines -->\n```\n\n**Containers:**\n- `<span>` = inline container\n- `<div>` = block container\n\nBoth can be used to group and style content!",
    "type": "html",
    "tags": ["html", "inline", "block", "elements"]
  },
  {
    "question": "How to create different input types in HTML forms?",
    "answer": "**Text inputs:**\n```html\n<!-- Text -->\n<input type=\"text\" placeholder=\"Enter your name\">\n\n<!-- Password -->\n<input type=\"password\" placeholder=\"Enter password\">\n\n<!-- Email -->\n<input type=\"email\" placeholder=\"Enter email\">\n\n<!-- Phone -->\n<input type=\"tel\" placeholder=\"Enter phone number\">\n\n<!-- Date -->\n<input type=\"date\">\n\n<!-- Number -->\n<input type=\"number\" min=\"1\" max=\"100\">\n\n<!-- Range -->\n<input type=\"range\" min=\"0\" max=\"100\">\n\n<!-- File -->\n<input type=\"file\">\n\n<!-- Checkbox -->\n<input type=\"checkbox\" id=\"agree\">\n<label for=\"agree\">I agree</label>\n\n<!-- Radio buttons -->\n<input type=\"radio\" name=\"gender\" value=\"male\"> Male\n<input type=\"radio\" name=\"gender\" value=\"female\"> Female\n\n<!-- Button -->\n<input type=\"submit\" value=\"Submit\">\n```\n\n**Default values:**\n```html\n<input type=\"text\" value=\"Default text\">\n```\n\n**Note:** Radio buttons with the same `name` allow only one selection!",
    "type": "html",
    "tags": ["html", "forms", "input", "validation"]
  },
  {
    "question": "What is a textarea used for in HTML?",
    "answer": "**Textarea is used for:**\n- Multi-line text input\n- Comments, messages, descriptions\n- Longer text that doesn't fit in regular input\n\n**How to write it:**\n```html\n<textarea rows=\"4\" cols=\"50\" placeholder=\"Enter your message here...\"></textarea>\n```\n\n**With default text:**\n```html\n<textarea rows=\"4\" cols=\"50\">Default message text</textarea>\n```\n\n**Attributes:**\n- `rows` = number of visible lines\n- `cols` = number of visible characters per line\n- `placeholder` = hint text\n- `maxlength` = maximum characters allowed\n\n**Example:**\n```html\n<label for=\"comment\">Your Comment:</label>\n<textarea id=\"comment\" name=\"comment\" rows=\"5\" cols=\"40\" placeholder=\"Write your comment here...\"></textarea>\n```",
    "type": "html",
    "tags": ["html", "forms", "textarea", "multiline"]
  },
  {
    "question": "What is a form in HTML and how to write it?",
    "answer": "**What forms are used for:**\n- Collecting user input\n- Submitting data to servers\n- User registration, contact forms, surveys\n\n**Basic form structure:**\n```html\n<form action=\"submit.php\" method=\"POST\">\n    <label for=\"name\">Name:</label>\n    <input type=\"text\" id=\"name\" name=\"name\" required>\n    \n    <label for=\"email\">Email:</label>\n    <input type=\"email\" id=\"email\" name=\"email\" required>\n    \n    <label for=\"message\">Message:</label>\n    <textarea id=\"message\" name=\"message\" rows=\"4\"></textarea>\n    \n    <input type=\"submit\" value=\"Send Message\">\n</form>\n```\n\n**Form attributes:**\n- `action` = where to send the data\n- `method` = GET or POST\n- `required` = makes field mandatory\n\n**Example with different inputs:**\n```html\n<form action=\"process.php\" method=\"POST\">\n    <input type=\"text\" name=\"username\" placeholder=\"Username\">\n    <input type=\"password\" name=\"password\" placeholder=\"Password\">\n    <input type=\"checkbox\" name=\"remember\"> Remember me\n    <input type=\"submit\" value=\"Login\">\n</form>\n```",
    "type": "html",
    "tags": ["html", "forms", "submission", "data"]
  },
  {
    "question": "What is an iframe in HTML?",
    "answer": "**What iframe does:**\n- Embeds another webpage inside your page\n- Creates a \"window\" to another site\n- Useful for videos, maps, external content\n\n**Basic iframe:**\n```html\n<iframe src=\"https://www.example.com\" width=\"600\" height=\"400\" frameborder=\"0\"></iframe>\n```\n\n**With fallback text:**\n```html\n<iframe src=\"https://www.example.com\" width=\"600\" height=\"400\" frameborder=\"0\">\n    Your browser doesn't support iframes.\n</iframe>\n```\n\n**Common uses:**\n- YouTube videos\n- Google Maps\n- External widgets\n- Embedded content\n\n**Important:**\n- Some websites block iframe embedding (like Amazon)\n- Always include fallback text\n- Use `frameborder=\"0\"` for cleaner look\n\n**Example:**\n```html\n<iframe src=\"https://www.google.com/maps/embed?pb=...\" width=\"400\" height=\"300\" frameborder=\"0\" allowfullscreen></iframe>\n```",
    "type": "html",
    "tags": ["html", "iframe", "embedding", "external"]
  },
  {
    "question": "What are meta tags in HTML?",
    "answer": "**Meta tags provide information about the webpage:**\n\n**Character encoding:**\n```html\n<meta charset=\"UTF-8\">\n```\n\n**Page description:**\n```html\n<meta name=\"description\" content=\"This is a great website about programming\">\n```\n\n**Author information:**\n```html\n<meta name=\"author\" content=\"John Doe\">\n```\n\n**Keywords for SEO:**\n```html\n<meta name=\"keywords\" content=\"html, css, javascript, web development\">\n```\n\n**Viewport for mobile:**\n```html\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n```\n\n**Complete example:**\n```html\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"description\" content=\"Learn HTML, CSS, and JavaScript\">\n    <meta name=\"author\" content=\"Web Developer\">\n    <meta name=\"keywords\" content=\"html, css, javascript\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>My Website</title>\n</head>\n```\n\n**Purpose:**\n- SEO optimization\n- Browser compatibility\n- Mobile responsiveness\n- Search engine information",
    "type": "html",
    "tags": ["html", "meta", "seo", "head"]
  },
  {
    "question": "What is the difference between Git and GitHub?",
    "answer": "**Git:**\n- Free, open-source version control system\n- Runs on your local computer\n- Tracks changes in your code\n- Command-line tool\n\n**GitHub:**\n- Online platform that hosts Git repositories\n- Web-based service\n- Provides collaboration features\n- Stores your code in the cloud\n\n**Analogy:**\n- Git = The engine of a car (does the work)\n- GitHub = The garage where you park the car (stores it)\n\n**Git manages your code changes locally**\n**GitHub stores and shares your code online**\n\n**Think of it like:**\n- Git = Your personal filing system\n- GitHub = The shared office where everyone can access files",
    "type": "git",
    "tags": ["git", "github", "version-control", "collaboration"]
  },
  {
    "question": "Explain these Git terms simply:",
    "answer": "**Directory:**\nA folder on your computer that contains files and other folders.\n\n**Terminal/Command Line:**\nA text-based way to interact with your computer (like talking to your computer with text commands).\n\n**CLI:**\nCommand Line Interface - another name for terminal/command line.\n\n**cd (Change Directory):**\nCommand to move between folders: `cd folder-name`\n\n**Code Editor:**\nA program for writing code (like VS Code, Sublime Text, Atom).\n\n**Repository:**\nA project folder that Git is tracking (contains your code and Git history).\n\n**GitHub:**\nOnline platform where you can store and share your Git repositories.\n\n**README.md:**\nA file that explains what your project is about (like a project description).",
    "type": "git",
    "tags": ["git", "terminology", "basics", "concepts"]
  },
  {
    "question": "Explain these Git commands simply:",
    "answer": "**Clone:**\n`git clone` - Downloads a copy of a repository from GitHub to your computer.\n\n**Add:**\n`git add` - Tells Git to start tracking changes in your files (stages them).\n\n**Commit:**\n`git commit` - Saves your changes with a message (like saving a snapshot).\n\n**Push:**\n`git push` - Uploads your local changes to GitHub (sends your work to the cloud).\n\n**Pull:**\n`git pull` - Downloads the latest changes from GitHub to your computer.\n\n**Simple workflow:**\n1. `git add .` (stage changes)\n2. `git commit -m \"message\"` (save snapshot)\n3. `git push` (upload to GitHub)\n\n**Think of it like:**\n- Add = Put items in a box\n- Commit = Seal the box with a label\n- Push = Send the box to storage\n- Pull = Get the latest box from storage",
    "type": "git",
    "tags": ["git", "commands", "workflow", "basics"]
  },
  {
    "question": "How to check if Git is installed?",
    "answer": "**Command:**\n```bash\ngit --version\n```\n\n**What it shows:**\n- If Git is installed: Shows version number (e.g., `git version 2.34.1`)\n- If Git is NOT installed: Shows error message\n\n**Example output:**\n```bash\n$ git --version\ngit version 2.34.1\n```\n\n**If Git is not installed:**\n- Download from: https://git-scm.com/\n- Install the program\n- Restart your terminal\n- Run `git --version` again\n\n**This is the first command to run when learning Git!**",
    "type": "git",
    "tags": ["git", "installation", "check", "version"]
  },
  {
    "question": "How to check files that haven't been committed yet?",
    "answer": "**Command:**\n```bash\ngit status\n```\n\n**What it shows:**\n- Files that are modified but not staged\n- Files that are staged but not committed\n- Files that are untracked (new files)\n\n**Example output:**\n```bash\n$ git status\nOn branch main\nChanges not staged for commit:\n  modified:   index.html\n  modified:   style.css\n\nUntracked files:\n  new-file.js\n\nChanges to be committed:\n  modified:   README.md\n```\n\n**What the colors mean:**\n- **Red** = Modified but not staged\n- **Green** = Staged and ready to commit\n- **Untracked** = New files Git doesn't know about\n\n**This is your Git dashboard - shows what's changed!**",
    "type": "git",
    "tags": ["git", "status", "tracking", "changes"]
  },
  {
    "question": "How to add files in Git?",
    "answer": "**Add individual file:**\n```bash\ngit add filename.html\n```\n\n**Add all files:**\n```bash\ngit add .\n```\n\n**Examples:**\n```bash\n# Add specific file\ngit add index.html\n\n# Add all files in current directory\ngit add .\n\n# Add all HTML files\ngit add *.html\n\n# Add all files in a folder\ngit add css/\n```\n\n**What `git add` does:**\n- Stages files for commit\n- Tells Git \"I want to save these changes\"\n- Prepares files to be committed\n\n**Think of it like:**\n- Putting items in a shopping cart\n- Selecting files to save\n- Preparing for checkout (commit)\n\n**After `git add`, use `git commit` to save!**",
    "type": "git",
    "tags": ["git", "add", "staging", "files"]
  },
  {
    "question": "How does the /folder/ path work to move between files?",
    "answer": "**Path navigation explained:**\n\n**Current directory:**\n```bash\n.\n```\n\n**Parent directory (go up one level):**\n```bash\n..\n```\n\n**Examples:**\n```bash\n# Go to parent directory\ncd ..\n\n# Go to grandparent directory\ncd ../..\n\n# Go to sibling directory\ncd ../sibling-folder\n\n# Go to specific path\ncd ../demo-repo2\n```\n\n**Real-world analogy:**\n- Think of folders like rooms in a house\n- `.` = current room\n- `..` = parent room (one level up)\n- `../..` = grandparent room (two levels up)\n\n**File structure example:**\n```\nhome/\n├── user/\n│   ├── project1/\n│   └── project2/\n└── documents/\n```\n\n**From project1 to project2:**\n```bash\ncd ../project2\n```\n\n**From project1 to documents:**\n```bash\ncd ../../documents\n```",
    "type": "git",
    "tags": ["git", "paths", "navigation", "directories"]
  },
  {
    "question": "How to solve 'origin does not appear to be a git repo' error?",
    "answer": "**The error means:**\nGit doesn't know where to send your code (no remote repository set up).\n\n**How to solve:**\n\n**Step 1: Create repository on GitHub**\n- Go to GitHub.com\n- Click \"New repository\"\n- Give it a name\n- Click \"Create repository\"\n\n**Step 2: Copy the repository URL**\n- Copy the HTTPS or SSH URL from GitHub\n- Example: `https://github.com/username/repo-name.git`\n\n**Step 3: Connect your local repo to GitHub**\n```bash\ngit remote add origin https://github.com/username/repo-name.git\n```\n\n**Step 4: Verify it worked**\n```bash\ngit remote -v\n```\n\n**Step 5: Push your code**\n```bash\ngit push -u origin main\n```\n\n**What this does:**\n- `remote add origin` = tells Git where GitHub repo is\n- `remote -v` = shows connected repositories\n- `push -u origin main` = uploads code and sets default branch",
    "type": "git",
    "tags": ["git", "error", "origin", "remote", "github"]
  },
  {
    "question": "How to set shortcut so you don't always type 'origin main'?",
    "answer": "**Use the `-u` flag:**\n```bash\ngit push -u origin main\n```\n\n**What `-u` does:**\n- Sets up tracking between local and remote branch\n- Creates a shortcut for future pushes\n- Links your local `main` branch to `origin/main`\n\n**After using `-u` once:**\n```bash\n# Instead of this:\ngit push origin main\n\n# You can just do:\ngit push\n```\n\n**Same works for pull:**\n```bash\n# Instead of:\ngit pull origin main\n\n# You can do:\ngit pull\n```\n\n**Think of `-u` as:**\n- Setting up a \"favorite\" connection\n- Creating a shortcut\n- Telling Git \"remember this connection\"\n\n**One-time setup, then simple commands forever!**",
    "type": "git",
    "tags": ["git", "shortcut", "upstream", "tracking"]
  },
  {
    "question": "How to switch between branches and check differences?",
    "answer": "**Switch to existing branch:**\n```bash\ngit checkout branch-name\n```\n\n**Create and switch to new branch:**\n```bash\ngit checkout -b new-branch-name\n```\n\n**Check differences between branches:**\n```bash\ngit diff feature-branch\n```\n\n**Examples:**\n```bash\n# Switch to main branch\ngit checkout main\n\n# Switch to feature branch\ngit checkout feature-login\n\n# Create new branch\ngit checkout -b feature-signup\n\n# See what's different\ngit diff main\n```\n\n**What `git diff` shows:**\n- Lines added (+)\n- Lines removed (-)\n- Files that changed\n- Detailed differences\n\n**Think of branches like:**\n- Different versions of your project\n- Parallel universes\n- Separate workspaces\n\n**Use `git branch` to see all branches!**",
    "type": "git",
    "tags": ["git", "branches", "switching", "differences"]
  },
  {
    "question": "What is a Pull Request (PR) and how does it work?",
    "answer": "**What is a Pull Request:**\nA way to propose changes to a project and get them reviewed before merging.\n\n**Sample scenario:**\n\n**1. You make changes:**\n```bash\ngit checkout -b feature-login\ngit add .\ngit commit -m \"Add login form\"\ngit push origin feature-login\n```\n\n**2. Create PR on GitHub:**\n- Go to your repository\n- Click \"Compare & pull request\"\n- Add description of changes\n- Click \"Create pull request\"\n\n**3. Team reviews:**\n- Others can see your changes\n- Leave comments and suggestions\n- Approve or request changes\n\n**4. Merge the PR:**\n- Once approved, merge into main branch\n- Your changes become part of the project\n\n**Why use PRs:**\n- Code review before merging\n- Discussion about changes\n- Quality control\n- Team collaboration\n\n**Think of PR as:**\n- Asking permission to add your changes\n- Getting feedback before finalizing\n- Professional way to contribute",
    "type": "git",
    "tags": ["git", "pull-request", "collaboration", "review"]
  },
  {
    "question": "How to delete branches in Git?",
    "answer": "**Delete local branch:**\n```bash\ngit branch -d branch-name\n```\n\n**Force delete (if branch has unmerged changes):**\n```bash\ngit branch -D branch-name\n```\n\n**Delete remote branch:**\n```bash\ngit push origin --delete branch-name\n```\n\n**Examples:**\n```bash\n# Delete local feature branch\ngit branch -d feature-login\n\n# Force delete (careful!)\ngit branch -D old-feature\n\n# Delete remote branch\ngit push origin --delete feature-signup\n```\n\n**What happens:**\n- `-d` = safe delete (only if merged)\n- `-D` = force delete (even if not merged)\n- Remote delete = removes from GitHub\n\n**Best practice:**\n- Delete branches after merging\n- Keep main branches (main, develop)\n- Clean up old feature branches\n\n**Think of it like:**\n- Throwing away old drafts\n- Cleaning up your workspace\n- Keeping only what you need",
    "type": "git",
    "tags": ["git", "branches", "delete", "cleanup"]
  },
  {
    "question": "How to undo staging in Git?",
    "answer": "**Undo staging for single file:**\n```bash\ngit reset filename\n```\n\n**Undo staging for all files:**\n```bash\ngit reset\n```\n\n**Examples:**\n```bash\n# Unstage specific file\ngit reset index.html\n\n# Unstage all files\ngit reset\n\n# Unstage all files in directory\ngit reset css/\n```\n\n**What `git reset` does:**\n- Removes files from staging area\n- Files go back to \"modified\" status\n- Changes are still there, just not staged\n\n**Before reset:**\n```bash\n$ git status\nChanges to be committed:\n  modified:   index.html\n  modified:   style.css\n```\n\n**After `git reset index.html`:**\n```bash\n$ git status\nChanges to be committed:\n  modified:   style.css\n\nChanges not staged for commit:\n  modified:   index.html\n```\n\n**Think of it like:**\n- Taking items out of shopping cart\n- Unchecking files you don't want to commit\n- Going back to \"modified\" status",
    "type": "git",
    "tags": ["git", "reset", "unstage", "undo"]
  },
  {
    "question": "What is forking code and give a simple analogy?",
    "answer": "**What is forking:**\nCreating your own copy of someone else's project that you can modify independently.\n\n**Simple analogy:**\n**Forking is like photocopying a recipe book:**\n\n1. **Original recipe book** = Someone else's project on GitHub\n2. **Photocopy the book** = Fork their repository\n3. **Your copy** = You can now modify recipes without affecting the original\n4. **Make changes** = Add your own recipes or modify existing ones\n5. **Share back** = Send your improvements back to the original author\n\n**Real example:**\n- You find a cool open-source project on GitHub\n- You fork it (copy to your account)\n- You make improvements or add features\n- You can submit a pull request to share your changes\n\n**Why fork:**\n- Contribute to open-source projects\n- Use someone's code as a starting point\n- Experiment without affecting the original\n- Learn from other people's code\n\n**Fork = Personal copy you can modify!**",
    "type": "git",
    "tags": ["git", "forking", "copying", "collaboration"]
  },
  {
    "question": "What is the fastest method to learn programming through real experience?",
    "answer": "The fastest way is the **Build → Break → Fix method**:\n\n**Step 1: Build**\n- Create a small working feature or project\n- Start with something simple that actually works\n\n**Step 2: Break**\n- Break it on purpose by deleting, renaming, or changing something\n- Make it stop working intentionally\n\n**Step 3: Fix**\n- Fix the errors without starting over\n- Debug and troubleshoot like a real developer\n\n**Why this method works fast:**\n- You debug like a real developer\n- You understand how files, routes, and logic connect\n- You stop being scared of errors\n- You gain real experience in less time than watching tutorials\n\n**The result:**\nThis method turns 1 hour into the experience of 10 hours because you're actively solving problems, not just consuming information. You learn by doing, not just by watching.",
    "type": "programming-methods",
    "tags": ["programming", "learning", "debugging", "experience", "methodology"]
  },
  {
    "question": "List and explain the three ways to apply CSS: inline, internal, and external",
    "answer": "**1. Inline CSS:**\nApplied directly to HTML elements using the `style` attribute.\n\n**2. Internal CSS:**\nWritten inside the `<head>` section using `<style>` tags.\n\n**3. External CSS:**\nWritten in a separate `.css` file and linked to HTML using `<link>` tag.",
    "type": "css",
    "tags": ["css", "styling", "methods"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>CSS Methods</title>\n    <!-- Internal CSS -->\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n        .internal-style {\n            color: blue;\n            font-size: 18px;\n        }\n    </style>\n</head>\n<body>\n    <!-- Inline CSS -->\n    <h1 style=\"color: red; text-align: center;\">Inline CSS Example</h1>\n    \n    <p class=\"internal-style\">This uses internal CSS</p>\n    \n    <p style=\"background-color: yellow; padding: 10px;\">This uses inline CSS</p>\n    \n    <div style=\"border: 2px solid green; margin: 10px; padding: 15px;\">\n        <h2>Mixed Styling</h2>\n        <p>This div combines inline and internal CSS</p>\n    </div>\n</body>\n</html>"
  },
  {
    "question": "How to use internal style sheet in head of HTML document to edit body, headers (h1) and paragraphs?",
    "answer": "Use `<style>` tags inside the `<head>` section:\n\n```html\n<head>\n    <style>\n        body {\n            background-color: black;\n            color: white;\n        }\n        h1 {\n            color: red;\n            font-size: 24px;\n        }\n        p {\n            color: blue;\n            font-size: 16px;\n        }\n    </style>\n</head>\n```",
    "type": "css",
    "tags": ["css", "internal", "styling"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Internal CSS Example</title>\n    <style>\n        body {\n            background-color: black;\n            color: white;\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n        h1 {\n            color: red;\n            font-size: 28px;\n            text-align: center;\n        }\n        h2 {\n            color: yellow;\n            font-size: 22px;\n        }\n        p {\n            color: lightblue;\n            font-size: 16px;\n            line-height: 1.5;\n        }\n    </style>\n</head>\n<body>\n    <h1>Main Heading</h1>\n    <h2>Sub Heading</h2>\n    <p>This paragraph uses internal CSS styling.</p>\n    <p>Another paragraph with the same styling applied.</p>\n</body>\n</html>"
  },
  {
    "question": "How to link external style sheet in directory and not in directory to main HTML code?",
    "answer": "**In same directory:**\n```html\n<link rel=\"stylesheet\" href=\"style.css\">\n```\n\n**In different directory:**\n```html\n<link rel=\"stylesheet\" href=\"css/style.css\">\n<link rel=\"stylesheet\" href=\"../styles/style.css\">\n```\n\n**External style sheet content (style.css):**\n```css\nbody {\n    color: red;\n    font-family: Arial, sans-serif;\n}\n```",
    "type": "css",
    "tags": ["css", "external", "linking"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>External CSS</title>\n    <!-- Link to external CSS file -->\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <h1>External CSS Example</h1>\n    <p>This text is styled by external CSS file.</p>\n    <div class=\"box\">\n        <h2>Styled Box</h2>\n        <p>Content inside styled box</p>\n    </div>\n</body>\n</html>\n\n<!-- style.css content would be:\nbody {\n    color: red;\n    font-family: Arial, sans-serif;\n    margin: 20px;\n}\n\n.box {\n    background-color: lightgray;\n    padding: 20px;\n    border: 2px solid blue;\n    margin: 10px;\n}\n\nh1, h2 {\n    color: darkblue;\n}\n-->"
  },

  {
    "question": "Give an example of how to give ID to paragraph and headers and how to edit it in style.css file",
    "answer": "**HTML with IDs:**\n```html\n<p id=\"p1\">This paragraph has ID p1</p>\n<h1 id=\"main-title\">Main Title</h1>\n<h2 id=\"subtitle\">Subtitle</h2>\n```\n\n**CSS styling with IDs:**\n```css\n#p1 {\n    color: red;\n    font-size: 18px;\n}\n\n#main-title {\n    color: blue;\n    text-align: center;\n}\n\n#subtitle {\n    color: green;\n    font-style: italic;\n}\n```",
    "type": "css",
    "tags": ["css", "id", "selectors"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>CSS IDs Example</title>\n    <style>\n        #p1 {\n            color: red;\n            font-size: 18px;\n            background-color: lightyellow;\n            padding: 10px;\n        }\n        \n        #main-title {\n            color: blue;\n            text-align: center;\n            font-size: 32px;\n            margin-bottom: 20px;\n        }\n        \n        #subtitle {\n            color: green;\n            font-style: italic;\n            font-size: 20px;\n            border-bottom: 2px solid green;\n        }\n        \n        #special-paragraph {\n            background-color: lightblue;\n            border: 2px solid darkblue;\n            padding: 15px;\n            margin: 10px;\n        }\n    </style>\n</head>\n<body>\n    <h1 id=\"main-title\">Main Title with ID</h1>\n    <h2 id=\"subtitle\">Subtitle with ID</h2>\n    <p id=\"p1\">This paragraph has ID p1</p>\n    <p id=\"special-paragraph\">This is a special paragraph with unique styling</p>\n    <p>Regular paragraph without ID</p>\n</body>\n</html>"
  },
  {
    "question": "Give an example how to give class to paragraphs and other elements and how to edit with CSS",
    "answer": "**HTML with Classes:**\n```html\n<p class=\"highlight\">Highlighted paragraph</p>\n<div class=\"box\">Box content</div>\n<h1 class=\"title\">Title with class</h1>\n```\n\n**CSS styling with Classes:**\n```css\n.highlight {\n    background-color: yellow;\n    font-weight: bold;\n}\n\n.box {\n    border: 2px solid black;\n    padding: 20px;\n    margin: 10px;\n}\n\n.title {\n    color: red;\n    text-align: center;\n}\n```",
    "type": "css",
    "tags": ["css", "class", "selectors"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>CSS Classes Example</title>\n    <style>\n        .highlight {\n            background-color: yellow;\n            font-weight: bold;\n            padding: 5px;\n        }\n        \n        .box {\n            border: 2px solid black;\n            padding: 20px;\n            margin: 10px;\n            background-color: lightgray;\n        }\n        \n        .title {\n            color: red;\n            text-align: center;\n            font-size: 24px;\n        }\n        \n        .warning {\n            background-color: orange;\n            color: white;\n            padding: 10px;\n            border-radius: 5px;\n        }\n        \n        .success {\n            background-color: green;\n            color: white;\n            padding: 10px;\n            border-radius: 5px;\n        }\n    </style>\n</head>\n<body>\n    <h1 class=\"title\">Title with Class</h1>\n    <p class=\"highlight\">This paragraph has a highlight class</p>\n    <div class=\"box\">\n        <h2>Box Content</h2>\n        <p>This div has a box class</p>\n    </div>\n    <p class=\"warning\">Warning message with class</p>\n    <p class=\"success\">Success message with class</p>\n    <p>Regular paragraph without class</p>\n</body>\n</html>"
  },
  {
    "question": "How to change font style using CSS in style.css with contingencies?",
    "answer": "**Font Family with Fallbacks:**\n```css\np {\n    color: red;\n    font-family: \"Arial\", \"Helvetica\", sans-serif;\n}\n\nh1 {\n    font-family: \"Times New Roman\", \"Times\", serif;\n}\n\n.code {\n    font-family: \"Consolas\", \"Monaco\", \"Courier New\", monospace;\n}\n```\n\n**Why use multiple fonts:**\n- If first font isn't available, browser tries the next one\n- Ensures text displays even if preferred font fails to load\n- Provides consistent appearance across different systems",
    "type": "css",
    "tags": ["css", "fonts", "typography"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Font Family Examples</title>\n    <style>\n        body {\n            font-family: \"Arial\", \"Helvetica\", sans-serif;\n            margin: 20px;\n        }\n        \n        .serif-text {\n            font-family: \"Times New Roman\", \"Times\", serif;\n            font-size: 18px;\n            color: blue;\n        }\n        \n        .sans-serif-text {\n            font-family: \"Arial\", \"Helvetica\", sans-serif;\n            font-size: 18px;\n            color: green;\n        }\n        \n        .monospace-text {\n            font-family: \"Consolas\", \"Monaco\", \"Courier New\", monospace;\n            font-size: 18px;\n            color: red;\n            background-color: lightgray;\n            padding: 10px;\n        }\n        \n        .fancy-text {\n            font-family: \"Georgia\", \"Times New Roman\", serif;\n            font-size: 20px;\n            font-style: italic;\n            color: purple;\n        }\n    </style>\n</head>\n<body>\n    <h1>Font Family Examples</h1>\n    <p class=\"serif-text\">This text uses serif fonts with fallbacks</p>\n    <p class=\"sans-serif-text\">This text uses sans-serif fonts with fallbacks</p>\n    <p class=\"monospace-text\">This text uses monospace fonts (good for code)</p>\n    <p class=\"fancy-text\">This text uses a fancy serif font</p>\n    <p>Default body text with Arial fallback</p>\n</body>\n</html>"
  },
  {
    "question": "How to use Google Fonts (fonts.google.com) for custom fonts?",
    "answer": "**Steps to use Google Fonts:**\n\n1. **Go to fonts.google.com**\n2. **Select your font style**\n3. **Go to 'View selected families'**\n4. **Copy the href link**\n5. **Paste in HTML `<head>`:**\n```html\n<link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;700&display=swap\" rel=\"stylesheet\">\n```\n6. **Use in CSS:**\n```css\nbody {\n    font-family: 'Roboto', sans-serif;\n}\n```",
    "type": "css",
    "tags": ["css", "google-fonts", "typography"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Google Fonts Example</title>\n    <!-- Google Fonts Link -->\n    <link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;700&family=Dancing+Script:wght@400;700&display=swap\" rel=\"stylesheet\">\n    <style>\n        body {\n            font-family: 'Roboto', sans-serif;\n            margin: 20px;\n            line-height: 1.6;\n        }\n        \n        .light-text {\n            font-family: 'Roboto', sans-serif;\n            font-weight: 300;\n            font-size: 18px;\n            color: #666;\n        }\n        \n        .normal-text {\n            font-family: 'Roboto', sans-serif;\n            font-weight: 400;\n            font-size: 18px;\n            color: #333;\n        }\n        \n        .bold-text {\n            font-family: 'Roboto', sans-serif;\n            font-weight: 700;\n            font-size: 20px;\n            color: #000;\n        }\n        \n        .script-text {\n            font-family: 'Dancing Script', cursive;\n            font-size: 24px;\n            color: #8B4513;\n        }\n    </style>\n</head>\n<body>\n    <h1 class=\"bold-text\">Google Fonts Demo</h1>\n    <p class=\"light-text\">This is Roboto Light (300 weight)</p>\n    <p class=\"normal-text\">This is Roboto Normal (400 weight)</p>\n    <p class=\"bold-text\">This is Roboto Bold (700 weight)</p>\n    <p class=\"script-text\">This is Dancing Script - a cursive font!</p>\n</body>\n</html>"
  },
  {
    "question": "Give the code to add font style, weight and size to HTML code",
    "answer": "**Font Properties:**\n```css\np {\n    font-style: italic;        /* normal, italic, oblique */\n    font-weight: bold;         /* normal, bold, 100-900 */\n    font-size: 18px;           /* px, em, rem, % */\n}\n\nh1 {\n    font-style: normal;\n    font-weight: 700;\n    font-size: 2.5em;\n}\n```\n\n**Shorthand:**\n```css\n.text {\n    font: italic bold 16px Arial, sans-serif;\n}\n```",
    "type": "css",
    "tags": ["css", "fonts", "typography"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Font Properties</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n        \n        .normal-text {\n            font-style: normal;\n            font-weight: normal;\n            font-size: 16px;\n        }\n        \n        .italic-text {\n            font-style: italic;\n            font-weight: normal;\n            font-size: 18px;\n        }\n        \n        .bold-text {\n            font-style: normal;\n            font-weight: bold;\n            font-size: 20px;\n        }\n        \n        .bold-italic {\n            font-style: italic;\n            font-weight: bold;\n            font-size: 22px;\n        }\n        \n        .large-text {\n            font-size: 24px;\n            font-weight: 300;\n        }\n        \n        .shorthand-example {\n            font: italic bold 18px Georgia, serif;\n        }\n    </style>\n</head>\n<body>\n    <h1>Font Properties Examples</h1>\n    <p class=\"normal-text\">Normal text (normal style, normal weight, 16px)</p>\n    <p class=\"italic-text\">Italic text (italic style, normal weight, 18px)</p>\n    <p class=\"bold-text\">Bold text (normal style, bold weight, 20px)</p>\n    <p class=\"bold-italic\">Bold italic text (italic style, bold weight, 22px)</p>\n    <p class=\"large-text\">Large light text (24px, weight 300)</p>\n    <p class=\"shorthand-example\">Shorthand font property example</p>\n</body>\n</html>"
  },
  {
    "question": "What are some ways to design your text? Give example of text-decoration",
    "answer": "**Text Decoration Options:**\n```css\n.underline {\n    text-decoration: underline;\n}\n\n.overline {\n    text-decoration: overline;\n}\n\n.line-through {\n    text-decoration: line-through;\n}\n\n.dotted-underline {\n    text-decoration: cyan dotted underline;\n}\n\n.wavy-underline {\n    text-decoration: red wavy underline;\n}\n\n.no-decoration {\n    text-decoration: none;\n}\n```",
    "type": "css",
    "tags": ["css", "text-decoration", "styling"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Text Decoration Examples</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            line-height: 2;\n        }\n        \n        .underline {\n            text-decoration: underline;\n        }\n        \n        .overline {\n            text-decoration: overline;\n        }\n        \n        .line-through {\n            text-decoration: line-through;\n        }\n        \n        .dotted-underline {\n            text-decoration: cyan dotted underline;\n        }\n        \n        .wavy-underline {\n            text-decoration: red wavy underline;\n        }\n        \n        .double-underline {\n            text-decoration: blue double underline;\n        }\n        \n        .dashed-overline {\n            text-decoration: green dashed overline;\n        }\n        \n        .no-decoration {\n            text-decoration: none;\n        }\n        \n        .link {\n            color: blue;\n            text-decoration: underline;\n        }\n        \n        .link:hover {\n            text-decoration: none;\n        }\n    </style>\n</head>\n<body>\n    <h1>Text Decoration Examples</h1>\n    <p class=\"underline\">This text has underline decoration</p>\n    <p class=\"overline\">This text has overline decoration</p>\n    <p class=\"line-through\">This text has line-through decoration</p>\n    <p class=\"dotted-underline\">This text has cyan dotted underline</p>\n    <p class=\"wavy-underline\">This text has red wavy underline</p>\n    <p class=\"double-underline\">This text has blue double underline</p>\n    <p class=\"dashed-overline\">This text has green dashed overline</p>\n    <p class=\"no-decoration\">This text has no decoration</p>\n    <a href=\"#\" class=\"link\">This link has underline (hover to remove)</a>\n</body>\n</html>"
  },
  {
    "question": "How to add size, color, design, radius, padding to border on HTML and list common border styles?",
    "answer": "**Border Properties:**\n```css\n.box {\n    border-width: 3px;\n    border-color: red;\n    border-style: solid;\n    border-radius: 10px;\n    padding: 20px;\n}\n\n/* Shorthand */\n.box2 {\n    border: 2px dashed blue;\n    border-radius: 5px;\n    padding: 15px;\n}\n```\n\n**Common Border Styles:**\n- `solid` - solid line\n- `dashed` - dashed line\n- `dotted` - dotted line\n- `double` - double line\n- `ridge` - 3D ridged border\n- `groove` - 3D grooved border\n- `inset` - 3D inset border\n- `outset` - 3D outset border",
    "type": "css",
    "tags": ["css", "borders", "styling"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Border Examples</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n        \n        .solid-border {\n            border: 3px solid red;\n            border-radius: 10px;\n            padding: 20px;\n            margin: 10px;\n        }\n        \n        .dashed-border {\n            border: 2px dashed blue;\n            border-radius: 5px;\n            padding: 15px;\n            margin: 10px;\n        }\n        \n        .dotted-border {\n            border: 2px dotted green;\n            border-radius: 15px;\n            padding: 15px;\n            margin: 10px;\n        }\n        \n        .double-border {\n            border: 4px double purple;\n            border-radius: 8px;\n            padding: 20px;\n            margin: 10px;\n        }\n        \n        .ridge-border {\n            border: 5px ridge orange;\n            border-radius: 12px;\n            padding: 20px;\n            margin: 10px;\n        }\n        \n        .groove-border {\n            border: 5px groove teal;\n            border-radius: 12px;\n            padding: 20px;\n            margin: 10px;\n        }\n        \n        .inset-border {\n            border: 5px inset brown;\n            border-radius: 12px;\n            padding: 20px;\n            margin: 10px;\n        }\n        \n        .outset-border {\n            border: 5px outset pink;\n            border-radius: 12px;\n            padding: 20px;\n            margin: 10px;\n        }\n    </style>\n</head>\n<body>\n    <h1>Border Style Examples</h1>\n    <div class=\"solid-border\">Solid Border</div>\n    <div class=\"dashed-border\">Dashed Border</div>\n    <div class=\"dotted-border\">Dotted Border</div>\n    <div class=\"double-border\">Double Border</div>\n    <div class=\"ridge-border\">Ridge Border (3D)</div>\n    <div class=\"groove-border\">Groove Border (3D)</div>\n    <div class=\"inset-border\">Inset Border (3D)</div>\n    <div class=\"outset-border\">Outset Border (3D)</div>\n</body>\n</html>"
  },
  {
    "question": "How to edit individual dimensions of border in CSS (left, right, top, bottom)?",
    "answer": "**Individual Border Properties:**\n```css\nh1 {\n    border-top-style: solid;\n    border-bottom-style: dashed;\n    border-left-style: dotted;\n    border-right-style: double;\n}\n\n.box {\n    border-top-width: 5px;\n    border-bottom-width: 3px;\n    border-left-width: 2px;\n    border-right-width: 4px;\n    \n    border-top-color: red;\n    border-bottom-color: blue;\n    border-left-color: green;\n    border-right-color: yellow;\n}\n```",
    "type": "css",
    "tags": ["css", "borders", "individual"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Individual Border Properties</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n        \n        .mixed-styles {\n            border-top-style: solid;\n            border-bottom-style: dashed;\n            border-left-style: dotted;\n            border-right-style: double;\n            border-top-width: 3px;\n            border-bottom-width: 2px;\n            border-left-width: 4px;\n            border-right-width: 1px;\n            padding: 20px;\n            margin: 10px;\n        }\n        \n        .mixed-colors {\n            border-top-color: red;\n            border-bottom-color: blue;\n            border-left-color: green;\n            border-right-color: yellow;\n            border-width: 5px;\n            border-style: solid;\n            padding: 20px;\n            margin: 10px;\n        }\n        \n        .asymmetric {\n            border-top: 8px solid purple;\n            border-bottom: 2px dashed orange;\n            border-left: 6px dotted teal;\n            border-right: 4px ridge pink;\n            padding: 20px;\n            margin: 10px;\n        }\n    </style>\n</head>\n<body>\n    <h1>Individual Border Properties</h1>\n    <div class=\"mixed-styles\">Different styles on each side</div>\n    <div class=\"mixed-colors\">Different colors on each side</div>\n    <div class=\"asymmetric\">Asymmetric borders with different styles and colors</div>\n</body>\n</html>"
  },
  {
    "question": "How to set multiple colors as background in CSS and how to control position of a certain color?",
    "answer": "**Linear Gradient Backgrounds:**\n```css\n.gradient1 {\n    background: linear-gradient(blue, red);\n}\n\n.gradient2 {\n    background: linear-gradient(to top, blue, red);\n}\n\n.gradient3 {\n    background: linear-gradient(to bottom, blue, red);\n}\n\n.gradient4 {\n    background: linear-gradient(to right, blue, red);\n}\n\n.gradient5 {\n    background: linear-gradient(to left, blue, red);\n}\n\n.gradient6 {\n    background: linear-gradient(45deg, blue, red, green);\n}\n```",
    "type": "css",
    "tags": ["css", "backgrounds", "gradients"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Background Gradients</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n        \n        .gradient1 {\n            background: linear-gradient(blue, red);\n            padding: 30px;\n            margin: 10px;\n            color: white;\n            text-align: center;\n        }\n        \n        .gradient2 {\n            background: linear-gradient(to top, blue, red);\n            padding: 30px;\n            margin: 10px;\n            color: white;\n            text-align: center;\n        }\n        \n        .gradient3 {\n            background: linear-gradient(to bottom, blue, red);\n            padding: 30px;\n            margin: 10px;\n            color: white;\n            text-align: center;\n        }\n        \n        .gradient4 {\n            background: linear-gradient(to right, blue, red);\n            padding: 30px;\n            margin: 10px;\n            color: white;\n            text-align: center;\n        }\n        \n        .gradient5 {\n            background: linear-gradient(to left, blue, red);\n            padding: 30px;\n            margin: 10px;\n            color: white;\n            text-align: center;\n        }\n        \n        .gradient6 {\n            background: linear-gradient(45deg, blue, red, green);\n            padding: 30px;\n            margin: 10px;\n            color: white;\n            text-align: center;\n        }\n        \n        .gradient7 {\n            background: linear-gradient(90deg, yellow, orange, red);\n            padding: 30px;\n            margin: 10px;\n            color: white;\n            text-align: center;\n        }\n    </style>\n</head>\n<body>\n    <h1>Background Gradient Examples</h1>\n    <div class=\"gradient1\">Default Gradient (top to bottom)</div>\n    <div class=\"gradient2\">To Top Gradient</div>\n    <div class=\"gradient3\">To Bottom Gradient</div>\n    <div class=\"gradient4\">To Right Gradient</div>\n    <div class=\"gradient5\">To Left Gradient</div>\n    <div class=\"gradient6\">45 Degree Angle with 3 Colors</div>\n    <div class=\"gradient7\">90 Degree with Multiple Colors</div>\n</body>\n</html>"
  },
  {
    "question": "How to stop background from repeating and fix empty background with background-attachment: fixed?",
    "answer": "**Background Repeat Control:**\n```css\n.no-repeat {\n    background-repeat: no-repeat;\n}\n\n.fixed-background {\n    background-attachment: fixed;\n    background-repeat: no-repeat;\n}\n\n.cover-background {\n    background-size: cover;\n    background-repeat: no-repeat;\n}\n```\n\n**Common with gradients:**\n- Gradients don't repeat by default\n- Use `background-attachment: fixed` to keep background in place when scrolling\n- Use `background-size: cover` to make image fit screen",
    "type": "css",
    "tags": ["css", "backgrounds", "repeating"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Background Repeat Control</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 0;\n            padding: 20px;\n        }\n        \n        .repeat-example {\n            background-image: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"50\" height=\"50\"><rect width=\"50\" height=\"50\" fill=\"%23ff0000\"/><circle cx=\"25\" cy=\"25\" r=\"10\" fill=\"%23ffffff\"/></svg>');\n            background-repeat: repeat;\n            padding: 50px;\n            margin: 10px;\n            border: 2px solid black;\n        }\n        \n        .no-repeat {\n            background-image: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100\" height=\"100\"><rect width=\"100\" height=\"100\" fill=\"%2300ff00\"/><circle cx=\"50\" cy=\"50\" r=\"20\" fill=\"%23ffffff\"/></svg>');\n            background-repeat: no-repeat;\n            background-position: center;\n            padding: 50px;\n            margin: 10px;\n            border: 2px solid black;\n        }\n        \n        .gradient-no-repeat {\n            background: linear-gradient(45deg, blue, red);\n            background-repeat: no-repeat;\n            padding: 50px;\n            margin: 10px;\n            border: 2px solid black;\n            color: white;\n            text-align: center;\n        }\n        \n        .fixed-background {\n            background: linear-gradient(135deg, purple, pink);\n            background-attachment: fixed;\n            background-repeat: no-repeat;\n            padding: 50px;\n            margin: 10px;\n            border: 2px solid black;\n            color: white;\n            text-align: center;\n        }\n    </style>\n</head>\n<body>\n    <h1>Background Repeat Control Examples</h1>\n    <div class=\"repeat-example\">Background with repeat (default)</div>\n    <div class=\"no-repeat\">Background with no-repeat</div>\n    <div class=\"gradient-no-repeat\">Gradient with no-repeat</div>\n    <div class=\"fixed-background\">Fixed background attachment</div>\n    <div style=\"height: 200px; background: lightgray; margin: 10px; padding: 20px;\">\n        <p>Scroll to see the fixed background effect above</p>\n    </div>\n</body>\n</html>"
  },
  {
    "question": "How to set image as background in CSS, make image stay in middle and make image fit the screen?",
    "answer": "**Background Image Properties:**\n```css\nbody {\n    background-image: url('my-background.jpg');\n    background-position: center;\n    background-size: cover;\n    background-repeat: no-repeat;\n}\n\n/* Alternative sizes */\n.contain {\n    background-size: contain;\n}\n\n.specific-size {\n    background-size: 800px 600px;\n}\n\n.percentage {\n    background-size: 100% 100%;\n}\n```",
    "type": "css",
    "tags": ["css", "backgrounds", "images"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Background Image Examples</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 0;\n            padding: 20px;\n        }\n        \n        .background-example {\n            background-image: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"200\" height=\"200\"><rect width=\"200\" height=\"200\" fill=\"%23ff6b6b\"/><circle cx=\"100\" cy=\"100\" r=\"50\" fill=\"%23ffffff\"/><text x=\"100\" y=\"110\" text-anchor=\"middle\" fill=\"%23ff6b6b\" font-size=\"20\">BG</text></svg>');\n            background-position: center;\n            background-size: cover;\n            background-repeat: no-repeat;\n            height: 300px;\n            margin: 10px;\n            border: 2px solid black;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            color: white;\n            font-size: 24px;\n            font-weight: bold;\n        }\n        \n        .contain-example {\n            background-image: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"150\" height=\"150\"><rect width=\"150\" height=\"150\" fill=\"%234ecdc4\"/><polygon points=\"75,25 125,75 75,125 25,75\" fill=\"%23ffffff\"/></svg>');\n            background-position: center;\n            background-size: contain;\n            background-repeat: no-repeat;\n            height: 300px;\n            margin: 10px;\n            border: 2px solid black;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            color: white;\n            font-size: 24px;\n            font-weight: bold;\n        }\n        \n        .specific-size {\n            background-image: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100\" height=\"100\"><rect width=\"100\" height=\"100\" fill=\"%2345b7d1\"/><rect x=\"25\" y=\"25\" width=\"50\" height=\"50\" fill=\"%23ffffff\"/></svg>');\n            background-position: center;\n            background-size: 100px 100px;\n            background-repeat: no-repeat;\n            height: 300px;\n            margin: 10px;\n            border: 2px solid black;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            color: white;\n            font-size: 24px;\n            font-weight: bold;\n        }\n    </style>\n</head>\n<body>\n    <h1>Background Image Examples</h1>\n    <div class=\"background-example\">Cover - Fits screen</div>\n    <div class=\"contain-example\">Contain - Shows full image</div>\n    <div class=\"specific-size\">Specific Size - 100px x 100px</div>\n</body>\n</html>"
  },
  {
    "question": "What is a margin and what is padding? Give examples of margin code for top, left, right, bottom, and one line for all",
    "answer": "**Margin vs Padding:**\n- **Margin**: Space outside the element (between elements)\n- **Padding**: Space inside the element (between content and border)\n\n**Individual Margins:**\n```css\n.box {\n    margin-top: 20px;\n    margin-left: 15px;\n    margin-right: 10px;\n    margin-bottom: 25px;\n}\n```\n\n**One Line Margin:**\n```css\n.box {\n    margin: 20px;           /* All sides */\n    margin: 10px 20px;      /* top/bottom left/right */\n    margin: 10px 20px 15px; /* top left/right bottom */\n    margin: 10px 20px 15px 5px; /* top right bottom left */\n}\n```\n\n**Zero Margin:**\n```css\n.no-margin {\n    margin: 0px; /* Border will touch edge of website */\n}\n```",
    "type": "css",
    "tags": ["css", "margin", "padding", "spacing"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Margin and Padding Examples</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 0;\n            padding: 20px;\n            background-color: #f0f0f0;\n        }\n        \n        .margin-example {\n            background-color: lightblue;\n            border: 3px solid blue;\n            padding: 20px;\n            margin-top: 20px;\n            margin-left: 15px;\n            margin-right: 10px;\n            margin-bottom: 25px;\n        }\n        \n        .padding-example {\n            background-color: lightgreen;\n            border: 3px solid green;\n            margin: 20px;\n            padding-top: 30px;\n            padding-left: 25px;\n            padding-right: 20px;\n            padding-bottom: 35px;\n        }\n        \n        .one-line-margin {\n            background-color: lightcoral;\n            border: 3px solid red;\n            padding: 20px;\n            margin: 20px; /* All sides equal */\n        }\n        \n        .different-margins {\n            background-color: lightyellow;\n            border: 3px solid orange;\n            padding: 20px;\n            margin: 10px 30px 20px 5px; /* top right bottom left */\n        }\n        \n        .no-margin {\n            background-color: lightgray;\n            border: 3px solid black;\n            padding: 20px;\n            margin: 0px; /* Touches edge */\n        }\n        \n        .container {\n            background-color: white;\n            border: 2px dashed #333;\n            margin: 10px;\n            padding: 10px;\n        }\n    </style>\n</head>\n<body>\n    <h1>Margin and Padding Examples</h1>\n    <div class=\"container\">\n        <div class=\"margin-example\">Individual margins (top: 20px, left: 15px, right: 10px, bottom: 25px)</div>\n        <div class=\"padding-example\">Individual padding (top: 30px, left: 25px, right: 20px, bottom: 35px)</div>\n        <div class=\"one-line-margin\">One line margin: 20px all sides</div>\n        <div class=\"different-margins\">Different margins: 10px 30px 20px 5px (top right bottom left)</div>\n        <div class=\"no-margin\">No margin (0px) - touches edges</div>\n    </div>\n</body>\n</html>"
  },
  {
    "question": "How to make div stick to left or right and center regardless of browser size?",
    "answer": "**Centering with Auto Margins:**\n```css\n.center {\n    margin-left: auto;\n    margin-right: auto;\n    width: 300px;\n}\n\n.left {\n    margin-left: 0;\n    margin-right: auto;\n}\n\n.right {\n    margin-left: auto;\n    margin-right: 0;\n}\n```\n\n**Note:** Setting both left and right to auto makes div stay in the middle regardless of browser size.",
    "type": "css",
    "tags": ["css", "centering", "layout"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Div Positioning</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 0;\n            padding: 20px;\n            background-color: #f0f0f0;\n        }\n        \n        .center {\n            background-color: lightblue;\n            border: 3px solid blue;\n            padding: 20px;\n            margin-left: auto;\n            margin-right: auto;\n            width: 300px;\n            text-align: center;\n        }\n        \n        .left {\n            background-color: lightgreen;\n            border: 3px solid green;\n            padding: 20px;\n            margin-left: 0;\n            margin-right: auto;\n            width: 250px;\n        }\n        \n        .right {\n            background-color: lightcoral;\n            border: 3px solid red;\n            padding: 20px;\n            margin-left: auto;\n            margin-right: 0;\n            width: 250px;\n        }\n        \n        .container {\n            background-color: white;\n            border: 2px dashed #333;\n            padding: 20px;\n            margin: 10px;\n        }\n    </style>\n</head>\n<body>\n    <h1>Div Positioning Examples</h1>\n    <div class=\"container\">\n        <div class=\"center\">Centered Div (auto margins)</div>\n        <div class=\"left\">Left Aligned Div</div>\n        <div class=\"right\">Right Aligned Div</div>\n    </div>\n    <p>Resize browser window to see how the centered div stays in the middle!</p>\n</body>\n</html>"
  },
  {
    "question": "What is the float property in CSS and how to use it?",
    "answer": "**Float Property:**\n```css\nimg {\n    float: left;    /* Takes all images to top left */\n}\n\nimg {\n    float: right;   /* Takes images to top right */\n}\n\n.clear {\n    clear: both;    /* Stops floating elements */\n}\n```\n\n**Popular for wrapping text around images:**\n- `float: left` - Element floats to left, text wraps around right\n- `float: right` - Element floats to right, text wraps around left\n- `clear: left/right/both` - Stops elements from floating",
    "type": "css",
    "tags": ["css", "float", "layout"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Float Property Examples</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            line-height: 1.6;\n        }\n        \n        .float-left {\n            float: left;\n            width: 150px;\n            height: 100px;\n            background-color: lightblue;\n            border: 2px solid blue;\n            margin: 10px 15px 10px 0;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-weight: bold;\n        }\n        \n        .float-right {\n            float: right;\n            width: 150px;\n            height: 100px;\n            background-color: lightcoral;\n            border: 2px solid red;\n            margin: 10px 0 10px 15px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-weight: bold;\n        }\n        \n        .clear {\n            clear: both;\n            background-color: lightyellow;\n            padding: 20px;\n            border: 2px solid orange;\n            margin: 20px 0;\n        }\n        \n        .container {\n            background-color: white;\n            border: 2px dashed #333;\n            padding: 20px;\n            margin: 10px 0;\n        }\n    </style>\n</head>\n<body>\n    <h1>Float Property Examples</h1>\n    <div class=\"container\">\n        <div class=\"float-left\">Float Left</div>\n        <p>This text wraps around the left-floating element. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>\n        \n        <div class=\"float-right\">Float Right</div>\n        <p>This text wraps around the right-floating element. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>\n        \n        <div class=\"clear\">This div clears both floats and appears below all floating elements.</div>\n    </div>\n</body>\n</html>"
  },
  {
    "question": "How to change location of text in HTML and CSS (inline and external)?",
    "answer": "**Text Alignment:**\n```css\n.center {\n    text-align: center;\n}\n\n.left {\n    text-align: left;\n}\n\n.right {\n    text-align: right;\n}\n\n.justify {\n    text-align: justify;\n}\n```\n\n**Inline CSS:**\n```html\n<h1 style=\"text-align: center;\">Centered Heading</h1>\n<p style=\"text-align: right;\">Right-aligned paragraph</p>\n```\n\n**External CSS:**\n```css\nh1 { text-align: center; }\np { text-align: justify; }\n```",
    "type": "css",
    "tags": ["css", "text-align", "alignment"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Text Alignment Examples</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            line-height: 1.6;\n        }\n        \n        .center {\n            text-align: center;\n            background-color: lightblue;\n            padding: 20px;\n            margin: 10px;\n            border: 2px solid blue;\n        }\n        \n        .left {\n            text-align: left;\n            background-color: lightgreen;\n            padding: 20px;\n            margin: 10px;\n            border: 2px solid green;\n        }\n        \n        .right {\n            text-align: right;\n            background-color: lightcoral;\n            padding: 20px;\n            margin: 10px;\n            border: 2px solid red;\n        }\n        \n        .justify {\n            text-align: justify;\n            background-color: lightyellow;\n            padding: 20px;\n            margin: 10px;\n            border: 2px solid orange;\n        }\n        \n        .inline-example {\n            background-color: lightgray;\n            padding: 20px;\n            margin: 10px;\n            border: 2px solid gray;\n        }\n    </style>\n</head>\n<body>\n    <h1>Text Alignment Examples</h1>\n    <div class=\"center\">This text is centered using CSS</div>\n    <div class=\"left\">This text is left-aligned using CSS</div>\n    <div class=\"right\">This text is right-aligned using CSS</div>\n    <div class=\"justify\">This text is justified using CSS. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</div>\n    \n    <div class=\"inline-example\">\n        <h2 style=\"text-align: center;\">Inline CSS Example</h2>\n        <p style=\"text-align: right;\">This paragraph uses inline CSS for right alignment</p>\n    </div>\n</body>\n</html>"
  },
  {
    "question": "How to stop paragraph from wrapping with float function?",
    "answer": "**Clear Property:**\n```css\n.float-left {\n    float: left;\n}\n\n.clear-left {\n    clear: left;\n}\n\n.clear-both {\n    clear: both;\n}\n\n.clear-right {\n    clear: right;\n}\n```\n\n**If float: left, use:**\n- `clear: left` - Stops left-floating elements\n- `clear: both` - Stops all floating elements\n\n**If float: right, use:**\n- `clear: right` - Stops right-floating elements\n- `clear: both` - Stops all floating elements",
    "type": "css",
    "tags": ["css", "float", "clear", "layout"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Clear Property Examples</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            line-height: 1.6;\n        }\n        \n        .float-left {\n            float: left;\n            width: 120px;\n            height: 80px;\n            background-color: lightblue;\n            border: 2px solid blue;\n            margin: 10px 15px 10px 0;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-weight: bold;\n        }\n        \n        .float-right {\n            float: right;\n            width: 120px;\n            height: 80px;\n            background-color: lightcoral;\n            border: 2px solid red;\n            margin: 10px 0 10px 15px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-weight: bold;\n        }\n        \n        .clear-left {\n            clear: left;\n            background-color: lightgreen;\n            padding: 15px;\n            border: 2px solid green;\n            margin: 10px 0;\n        }\n        \n        .clear-right {\n            clear: right;\n            background-color: lightyellow;\n            padding: 15px;\n            border: 2px solid orange;\n            margin: 10px 0;\n        }\n        \n        .clear-both {\n            clear: both;\n            background-color: lightpink;\n            padding: 15px;\n            border: 2px solid pink;\n            margin: 10px 0;\n        }\n        \n        .container {\n            background-color: white;\n            border: 2px dashed #333;\n            padding: 20px;\n            margin: 10px 0;\n        }\n    </style>\n</head>\n<body>\n    <h1>Clear Property Examples</h1>\n    <div class=\"container\">\n        <div class=\"float-left\">Float Left</div>\n        <div class=\"float-right\">Float Right</div>\n        <p>This text wraps around both floating elements. Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n        \n        <div class=\"clear-left\">Clear Left - Stops left-floating elements</div>\n        <p>This text continues after clearing left floats.</p>\n        \n        <div class=\"clear-right\">Clear Right - Stops right-floating elements</div>\n        <p>This text continues after clearing right floats.</p>\n        \n        <div class=\"clear-both\">Clear Both - Stops all floating elements</div>\n        <p>This text appears below all floating elements.</p>\n    </div>\n</body>\n</html>"
  },
  {
    "question": "Discuss static positions, how to use and its offsets and examples",
    "answer": "**Static Position (Default):**\n```css\n.static {\n    position: static;\n    top: 50px;    /* Ignored - no effect */\n    left: 50px;   /* Ignored - no effect */\n}\n```\n\n**Static Position:**\n- Default position for all elements\n- Elements flow normally in document\n- `top`, `left`, `right`, `bottom` properties have NO effect\n- Cannot be moved with offset properties\n- Elements appear in normal document flow",
    "type": "css",
    "tags": ["css", "positioning", "static"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Static Position Examples</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            line-height: 1.6;\n        }\n        \n        .static-box {\n            position: static;\n            background-color: lightblue;\n            border: 3px solid blue;\n            padding: 20px;\n            margin: 10px;\n            /* These properties are ignored in static position */\n            top: 100px;\n            left: 100px;\n            right: 100px;\n            bottom: 100px;\n        }\n        \n        .normal-box {\n            background-color: lightgreen;\n            border: 3px solid green;\n            padding: 20px;\n            margin: 10px;\n        }\n        \n        .container {\n            background-color: white;\n            border: 2px dashed #333;\n            padding: 20px;\n            margin: 10px;\n        }\n    </style>\n</head>\n<body>\n    <h1>Static Position Examples</h1>\n    <div class=\"container\">\n        <div class=\"normal-box\">Normal Box (default static)</div>\n        <div class=\"static-box\">Static Box with ignored offset properties</div>\n        <div class=\"normal-box\">Another Normal Box</div>\n    </div>\n    <p><strong>Note:</strong> Static position ignores top, left, right, bottom properties. Elements flow normally in the document.</p>\n</body>\n</html>"
  },
  {
    "question": "Discuss relative positions, how to use, its offset and examples",
    "answer": "**Relative Position:**\n```css\n.relative {\n    position: relative;\n    top: 50px;\n    left: 50px;\n}\n```\n\n**Relative Position:**\n- Element positioned relative to its normal position\n- `top`, `left`, `right`, `bottom` properties work\n- Original space is preserved (other elements don't move)\n- Element moves from its original position\n- Useful for fine-tuning element placement",
    "type": "css",
    "tags": ["css", "positioning", "relative"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Relative Position Examples</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            line-height: 1.6;\n        }\n        \n        .normal-box {\n            background-color: lightgray;\n            border: 2px solid gray;\n            padding: 20px;\n            margin: 10px;\n        }\n        \n        .relative-box {\n            position: relative;\n            background-color: lightblue;\n            border: 3px solid blue;\n            padding: 20px;\n            margin: 10px;\n            top: 30px;\n            left: 50px;\n        }\n        \n        .relative-negative {\n            position: relative;\n            background-color: lightcoral;\n            border: 3px solid red;\n            padding: 20px;\n            margin: 10px;\n            top: -20px;\n            left: -30px;\n        }\n        \n        .container {\n            background-color: white;\n            border: 2px dashed #333;\n            padding: 20px;\n            margin: 10px;\n        }\n    </style>\n</head>\n<body>\n    <h1>Relative Position Examples</h1>\n    <div class=\"container\">\n        <div class=\"normal-box\">Normal Box 1</div>\n        <div class=\"relative-box\">Relative Box (moved down 30px, right 50px)</div>\n        <div class=\"normal-box\">Normal Box 2 (space preserved)</div>\n        <div class=\"relative-negative\">Relative Box (moved up 20px, left 30px)</div>\n        <div class=\"normal-box\">Normal Box 3</div>\n    </div>\n    <p><strong>Note:</strong> Relative positioning moves elements from their original position while preserving the original space.</p>\n</body>\n</html>"
  },
  {
    "question": "Discuss absolute positions, how to use, its offset and examples",
    "answer": "**Absolute Position:**\n```css\n.absolute {\n    position: absolute;\n    top: 0;\n    left: 0;\n}\n```\n\n**Absolute Position:**\n- Element positioned relative to nearest positioned ancestor\n- If no positioned ancestor, positioned relative to document body\n- Removed from normal document flow\n- Other elements act as if it doesn't exist\n- `top`, `left`, `right`, `bottom` properties work\n- Used for overlays, modals, tooltips",
    "type": "css",
    "tags": ["css", "positioning", "absolute"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Absolute Position Examples</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            line-height: 1.6;\n        }\n        \n        .container {\n            position: relative;\n            background-color: lightgray;\n            border: 3px solid gray;\n            padding: 40px;\n            margin: 20px;\n            height: 300px;\n        }\n        \n        .absolute-top-left {\n            position: absolute;\n            top: 0;\n            left: 0;\n            background-color: lightblue;\n            border: 2px solid blue;\n            padding: 15px;\n            width: 100px;\n        }\n        \n        .absolute-top-right {\n            position: absolute;\n            top: 0;\n            right: 0;\n            background-color: lightcoral;\n            border: 2px solid red;\n            padding: 15px;\n            width: 100px;\n        }\n        \n        .absolute-bottom-left {\n            position: absolute;\n            bottom: 0;\n            left: 0;\n            background-color: lightgreen;\n            border: 2px solid green;\n            padding: 15px;\n            width: 100px;\n        }\n        \n        .absolute-center {\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%);\n            background-color: lightyellow;\n            border: 2px solid orange;\n            padding: 15px;\n            width: 120px;\n            text-align: center;\n        }\n        \n        .normal-box {\n            background-color: white;\n            border: 2px solid black;\n            padding: 20px;\n            margin: 10px;\n        }\n    </style>\n</head>\n<body>\n    <h1>Absolute Position Examples</h1>\n    <div class=\"normal-box\">Normal Box (not affected by absolute elements)</div>\n    \n    <div class=\"container\">\n        <div class=\"absolute-top-left\">Top Left</div>\n        <div class=\"absolute-top-right\">Top Right</div>\n        <div class=\"absolute-bottom-left\">Bottom Left</div>\n        <div class=\"absolute-center\">Center</div>\n        <p>This container has relative positioning, so absolute elements position relative to it.</p>\n    </div>\n    \n    <div class=\"normal-box\">Another Normal Box</div>\n    <p><strong>Note:</strong> Absolute positioning removes elements from normal flow and positions them relative to the nearest positioned ancestor.</p>\n</body>\n</html>"
  },
  {
    "question": "Discuss fixed positions, how to use, its offset and examples",
    "answer": "**Fixed Position:**\n```css\n.fixed {\n    position: fixed;\n    top: 0;\n    left: 0;\n}\n```\n\n**Fixed Position:**\n- Element positioned relative to viewport (browser window)\n- Stays in same position when scrolling\n- Removed from normal document flow\n- `top`, `left`, `right`, `bottom` properties work\n- Used for navigation bars, chat buttons, back-to-top buttons\n- Always visible regardless of scroll position",
    "type": "css",
    "tags": ["css", "positioning", "fixed"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Fixed Position Examples</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 0;\n            padding: 20px;\n            line-height: 1.6;\n        }\n        \n        .fixed-header {\n            position: fixed;\n            top: 0;\n            left: 0;\n            right: 0;\n            background-color: #333;\n            color: white;\n            padding: 15px;\n            text-align: center;\n            z-index: 1000;\n        }\n        \n        .fixed-sidebar {\n            position: fixed;\n            top: 80px;\n            right: 0;\n            width: 200px;\n            background-color: lightblue;\n            border: 2px solid blue;\n            padding: 20px;\n            z-index: 999;\n        }\n        \n        .fixed-button {\n            position: fixed;\n            bottom: 20px;\n            right: 20px;\n            background-color: red;\n            color: white;\n            border: none;\n            padding: 15px;\n            border-radius: 50%;\n            cursor: pointer;\n            z-index: 1000;\n        }\n        \n        .content {\n            margin-top: 80px;\n            margin-right: 250px;\n            padding: 20px;\n        }\n        \n        .scroll-content {\n            height: 2000px;\n            background: linear-gradient(to bottom, lightgray, white);\n            padding: 20px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"fixed-header\">Fixed Header - Always Visible</div>\n    \n    <div class=\"fixed-sidebar\">\n        <h3>Fixed Sidebar</h3>\n        <p>This sidebar stays in place when scrolling</p>\n    </div>\n    \n    <button class=\"fixed-button\" onclick=\"alert('Back to top!')\">↑</button>\n    \n    <div class=\"content\">\n        <h1>Fixed Position Examples</h1>\n        <div class=\"scroll-content\">\n            <h2>Scrollable Content</h2>\n            <p>This content is scrollable. Notice how the fixed elements stay in place:</p>\n            <ul>\n                <li>Fixed header at the top</li>\n                <li>Fixed sidebar on the right</li>\n                <li>Fixed button at bottom right</li>\n            </ul>\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>\n            <p>Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>\n            <p>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.</p>\n        </div>\n    </div>\n</body>\n</html>"
  },
  {
    "question": "What is the transform in CSS and give some examples?",
    "answer": "**CSS Transform Properties:**\n```css\n.translate {\n    transform: translateX(50px);\n    transform: translateY(30px);\n    transform: translate(50px, 30px);\n}\n\n.rotate {\n    transform: rotateX(45deg);\n    transform: rotateY(30deg);\n    transform: rotateZ(90deg);\n    transform: rotate(45deg);\n}\n\n.scale {\n    transform: scaleX(1.5);\n    transform: scaleY(0.8);\n    transform: scale(1.2, 0.9);\n}\n\n.skew {\n    transform: skewX(20deg);\n    transform: skewY(15deg);\n    transform: skew(20deg, 15deg);\n}\n```",
    "type": "css",
    "tags": ["css", "transform", "animation"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>CSS Transform Examples</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            background-color: #f0f0f0;\n        }\n        \n        .container {\n            display: flex;\n            flex-wrap: wrap;\n            gap: 20px;\n            margin: 20px 0;\n        }\n        \n        .box {\n            width: 100px;\n            height: 100px;\n            background-color: lightblue;\n            border: 3px solid blue;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-weight: bold;\n            margin: 10px;\n        }\n        \n        .translate-x {\n            transform: translateX(50px);\n        }\n        \n        .translate-y {\n            transform: translateY(30px);\n        }\n        \n        .translate {\n            transform: translate(50px, 30px);\n        }\n        \n        .rotate {\n            transform: rotate(45deg);\n        }\n        \n        .rotate-z {\n            transform: rotateZ(90deg);\n        }\n        \n        .scale {\n            transform: scale(1.5);\n        }\n        \n        .scale-x {\n            transform: scaleX(1.5);\n        }\n        \n        .scale-y {\n            transform: scaleY(1.5);\n        }\n        \n        .skew {\n            transform: skew(20deg, 10deg);\n        }\n        \n        .skew-x {\n            transform: skewX(30deg);\n        }\n        \n        .skew-y {\n            transform: skewY(20deg);\n        }\n        \n        .multiple {\n            transform: translate(30px, 20px) rotate(45deg) scale(1.2);\n        }\n    </style>\n</head>\n<body>\n    <h1>CSS Transform Examples</h1>\n    <div class=\"container\">\n        <div class=\"box\">Normal</div>\n        <div class=\"box translate-x\">TranslateX</div>\n        <div class=\"box translate-y\">TranslateY</div>\n        <div class=\"box translate\">Translate</div>\n        <div class=\"box rotate\">Rotate</div>\n        <div class=\"box rotate-z\">RotateZ</div>\n        <div class=\"box scale\">Scale</div>\n        <div class=\"box scale-x\">ScaleX</div>\n        <div class=\"box scale-y\">ScaleY</div>\n        <div class=\"box skew\">Skew</div>\n        <div class=\"box skew-x\">SkewX</div>\n        <div class=\"box skew-y\">SkewY</div>\n        <div class=\"box multiple\">Multiple</div>\n    </div>\n</body>\n</html>"
  },
  {
    "question": "What are pseudo-classes and how to use them? Give examples with links and buttons",
    "answer": "**Pseudo-classes:**\nSpecial keywords added to selectors that specify a special state of the element.\n\n**Link Pseudo-classes:**\n```css\na:link { color: blue; }        /* Unvisited link */\na:visited { color: purple; }   /* Visited link */\na:hover { color: red; }         /* Mouse over */\na:active { color: green; }      /* Clicked */\n```\n\n**Button Pseudo-classes:**\n```css\nbutton:hover { background: yellow; }\nbutton:active { background: orange; }\nbutton:focus { outline: 2px solid blue; }\n```\n\n**Common Pseudo-classes:**\n- `:hover` - Mouse over element\n- `:active` - Element being clicked\n- `:focus` - Element has keyboard focus\n- `:visited` - Visited link\n- `:link` - Unvisited link",
    "type": "css",
    "tags": ["css", "pseudo-classes", "interactive"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Pseudo-classes Examples</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            line-height: 1.6;\n        }\n        \n        /* Link pseudo-classes */\n        a:link {\n            color: blue;\n            text-decoration: underline;\n        }\n        \n        a:visited {\n            color: purple;\n        }\n        \n        a:hover {\n            color: red;\n            text-decoration: none;\n            font-weight: bold;\n        }\n        \n        a:active {\n            color: green;\n            background-color: yellow;\n        }\n        \n        /* Button pseudo-classes */\n        .button {\n            background-color: #4CAF50;\n            color: white;\n            padding: 15px 30px;\n            border: none;\n            border-radius: 5px;\n            cursor: pointer;\n            font-size: 16px;\n            margin: 10px;\n            transition: all 0.3s;\n        }\n        \n        .button:hover {\n            background-color: #45a049;\n            transform: scale(1.05);\n        }\n        \n        .button:active {\n            background-color: #3e8e41;\n            transform: scale(0.95);\n        }\n        \n        .button:focus {\n            outline: 3px solid #2196F3;\n        }\n        \n        /* Input pseudo-classes */\n        input {\n            padding: 10px;\n            margin: 10px;\n            border: 2px solid #ccc;\n            border-radius: 4px;\n        }\n        \n        input:focus {\n            border-color: #4CAF50;\n            outline: none;\n        }\n        \n        input:hover {\n            border-color: #45a049;\n        }\n        \n        /* Div pseudo-classes */\n        .hover-box {\n            background-color: lightblue;\n            padding: 20px;\n            margin: 10px;\n            border: 2px solid blue;\n            transition: all 0.3s;\n        }\n        \n        .hover-box:hover {\n            background-color: lightcoral;\n            transform: translateY(-5px);\n            box-shadow: 0 5px 15px rgba(0,0,0,0.3);\n        }\n    </style>\n</head>\n<body>\n    <h1>Pseudo-classes Examples</h1>\n    \n    <h2>Link Pseudo-classes</h2>\n    <p><a href=\"#\">This is a link - hover over it!</a></p>\n    <p><a href=\"#visited\">This link changes when visited</a></p>\n    \n    <h2>Button Pseudo-classes</h2>\n    <button class=\"button\">Hover Button</button>\n    <button class=\"button\">Focus Button (click then press Tab)</button>\n    \n    <h2>Input Pseudo-classes</h2>\n    <input type=\"text\" placeholder=\"Focus and hover over this input\">\n    <input type=\"email\" placeholder=\"Email input\">\n    \n    <h2>Div Hover Effect</h2>\n    <div class=\"hover-box\">Hover over this box!</div>\n    \n    <p><strong>Try:</strong> Hovering, clicking, focusing, and visiting links to see different pseudo-class effects!</p>\n</body>\n</html>"
  },
  {
    "question": "How to write comments in CSS?",
    "answer": "**CSS Comments:**\n```css\n/* This is a single-line comment */\n\n/*\nThis is a\nmulti-line comment\nin CSS\n*/\n\np {\n    color: red;\n    /* This is an inline comment */\n    font-size: 16px;\n}\n```\n\n**Important:**\n- CSS comments use `/* */` syntax\n- Comments are ignored by the browser\n- Useful for documentation and debugging\n- Can span multiple lines\n- Cannot be nested",
    "type": "css",
    "tags": ["css", "comments", "syntax"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>CSS Comments Example</title>\n    <style>\n        /* This is a single-line comment */\n        \n        /*\n        This is a multi-line comment\n        that spans several lines\n        */\n        \n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            /* This is an inline comment */\n        }\n        \n        /* Header styling */\n        h1 {\n            color: blue;\n            text-align: center;\n        }\n        \n        /* Paragraph styling with comments */\n        p {\n            color: #333;\n            line-height: 1.6;\n            /* margin: 10px; */ /* This line is commented out */\n        }\n        \n        /*\n        .commented-out {\n            background-color: red;\n            padding: 20px;\n        }\n        */\n        \n        .active {\n            background-color: lightblue;\n            padding: 15px;\n            border: 2px solid blue;\n            /* border-radius: 5px; */ /* Commented out property */\n        }\n    </style>\n</head>\n<body>\n    <h1>CSS Comments Example</h1>\n    <p>This page demonstrates CSS comments. Check the source code to see the comments!</p>\n    <div class=\"active\">This div has active styling</div>\n    <p>Comments in CSS use /* */ syntax and are ignored by the browser.</p>\n</body>\n</html>"
  },
  {
    "question": "How to make a div animation in CSS using keyframes?",
    "answer": "**CSS Animations with Keyframes:**\n```css\n@keyframes myslide {\n    from { margin-left: 100px; }\n    to { margin-left: 0px; }\n}\n\n@keyframes myrotate {\n    100% { transform: rotateZ(360deg); }\n}\n\n@keyframes myopacity {\n    100% { opacity: 0; }\n}\n\n@keyframes mycolorchange {\n    20% { background-color: red; }\n    40% { background-color: orange; }\n    60% { background-color: yellow; }\n    80% { background-color: blue; }\n    100% { background-color: purple; }\n}\n\n.animated {\n    animation: myslide 3s linear 0s infinite running;\n}\n```\n\n**Animation Properties:**\n- `animation-name` - Name of keyframe\n- `animation-duration` - How long animation lasts\n- `animation-iteration-count` - How many times to repeat\n- `animation-timing-function` - Speed curve\n- `animation-delay` - Delay before starting",
    "type": "css",
    "tags": ["css", "animations", "keyframes"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>CSS Animations with Keyframes</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            background-color: #f0f0f0;\n        }\n        \n        .box {\n            width: 100px;\n            height: 100px;\n            margin: 20px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-weight: bold;\n            color: white;\n        }\n        \n        /* Slide animation */\n        @keyframes myslide {\n            from { margin-left: 100px; }\n            to { margin-left: 0px; }\n        }\n        \n        .slide {\n            background-color: lightblue;\n            animation: myslide 2s ease-in-out infinite alternate;\n        }\n        \n        /* Rotate animation */\n        @keyframes myrotate {\n            100% { transform: rotateZ(360deg); }\n        }\n        \n        .rotate {\n            background-color: lightcoral;\n            animation: myrotate 3s linear infinite;\n        }\n        \n        /* Opacity animation */\n        @keyframes myopacity {\n            0% { opacity: 1; }\n            50% { opacity: 0.3; }\n            100% { opacity: 1; }\n        }\n        \n        .opacity {\n            background-color: lightgreen;\n            animation: myopacity 2s ease-in-out infinite;\n        }\n        \n        /* Color change animation */\n        @keyframes mycolorchange {\n            0% { background-color: red; }\n            25% { background-color: orange; }\n            50% { background-color: yellow; }\n            75% { background-color: blue; }\n            100% { background-color: purple; }\n        }\n        \n        .colorchange {\n            background-color: red;\n            animation: mycolorchange 4s ease-in-out infinite;\n        }\n        \n        /* Scale animation */\n        @keyframes myscale {\n            0% { transform: scale(1); }\n            50% { transform: scale(1.5); }\n            100% { transform: scale(1); }\n        }\n        \n        .scale {\n            background-color: lightyellow;\n            animation: myscale 2s ease-in-out infinite;\n        }\n        \n        /* Multiple animations */\n        @keyframes multiple {\n            0% { transform: translateX(0) rotate(0deg) scale(1); }\n            50% { transform: translateX(50px) rotate(180deg) scale(1.2); }\n            100% { transform: translateX(0) rotate(360deg) scale(1); }\n        }\n        \n        .multiple {\n            background-color: lightpink;\n            animation: multiple 3s ease-in-out infinite;\n        }\n    </style>\n</head>\n<body>\n    <h1>CSS Animations with Keyframes</h1>\n    <div class=\"box slide\">Slide</div>\n    <div class=\"box rotate\">Rotate</div>\n    <div class=\"box opacity\">Opacity</div>\n    <div class=\"box colorchange\">Colors</div>\n    <div class=\"box scale\">Scale</div>\n    <div class=\"box multiple\">Multiple</div>\n    \n    <h2>Animation Properties Used:</h2>\n    <ul>\n        <li><strong>animation-name:</strong> Name of the keyframe</li>\n        <li><strong>animation-duration:</strong> How long the animation lasts</li>\n        <li><strong>animation-iteration-count:</strong> How many times to repeat (infinite)</li>\n        <li><strong>animation-timing-function:</strong> Speed curve (ease-in-out, linear)</li>\n        <li><strong>animation-direction:</strong> Direction (alternate, normal)</li>\n    </ul>\n</body>\n</html>"
  },
  {
    "question": "How to create .env, .html, .js and other type of files from CMD?",
    "answer": "**Creating Files from Command Prompt:**\n\n**Method 1: Using `notepad` command**\n```cmd\nnotepad filename.env\nnotepad index.html\nnotepad script.js\nnotepad style.css\n```\n\n**Method 2: Using `echo` command**\n```cmd\necho. > filename.env\necho. > index.html\necho. > script.js\necho. > style.css\n```\n\n**Method 3: Using `type nul` command**\n```cmd\ntype nul > filename.env\ntype nul > index.html\ntype nul > script.js\ntype nul > style.css\n```\n\n**Method 4: Using `copy con` command**\n```cmd\ncopy con filename.env\n(press Ctrl+Z then Enter to save)\n```\n\n**Note:** `notepad` opens the file for editing, while other methods create empty files.",
    "type": "command-line",
    "tags": ["cmd", "files", "creation", "windows"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>CMD File Creation Examples</title>\n    <style>\n        body {\n            font-family: 'Courier New', monospace;\n            margin: 20px;\n            background-color: #1e1e1e;\n            color: #ffffff;\n        }\n        \n        .cmd-window {\n            background-color: #0c0c0c;\n            border: 2px solid #00ff00;\n            padding: 20px;\n            margin: 10px;\n            border-radius: 5px;\n            font-family: 'Courier New', monospace;\n        }\n        \n        .cmd-prompt {\n            color: #00ff00;\n        }\n        \n        .cmd-command {\n            color: #ffff00;\n        }\n        \n        .cmd-comment {\n            color: #888888;\n            font-style: italic;\n        }\n        \n        .method {\n            background-color: #2d2d2d;\n            padding: 15px;\n            margin: 10px 0;\n            border-left: 4px solid #007acc;\n        }\n        \n        .file-types {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n            gap: 10px;\n            margin: 20px 0;\n        }\n        \n        .file-type {\n            background-color: #333;\n            padding: 10px;\n            border-radius: 5px;\n            text-align: center;\n        }\n    </style>\n</head>\n<body>\n    <h1>Creating Files from CMD</h1>\n    \n    <div class=\"method\">\n        <h3>Method 1: Using notepad command</h3>\n        <div class=\"cmd-window\">\n            <span class=\"cmd-prompt\">C:\\Users\\YourName></span>\n            <span class=\"cmd-command\">notepad filename.env</span><br>\n            <span class=\"cmd-prompt\">C:\\Users\\YourName></span>\n            <span class=\"cmd-command\">notepad index.html</span><br>\n            <span class=\"cmd-prompt\">C:\\Users\\YourName></span>\n            <span class=\"cmd-command\">notepad script.js</span><br>\n            <span class=\"cmd-prompt\">C:\\Users\\YourName></span>\n            <span class=\"cmd-command\">notepad style.css</span>\n        </div>\n        <p class=\"cmd-comment\">Opens files in Notepad for editing</p>\n    </div>\n    \n    <div class=\"method\">\n        <h3>Method 2: Using echo command</h3>\n        <div class=\"cmd-window\">\n            <span class=\"cmd-prompt\">C:\\Users\\YourName></span>\n            <span class=\"cmd-command\">echo. > filename.env</span><br>\n            <span class=\"cmd-prompt\">C:\\Users\\YourName></span>\n            <span class=\"cmd-command\">echo. > index.html</span><br>\n            <span class=\"cmd-prompt\">C:\\Users\\YourName></span>\n            <span class=\"cmd-command\">echo. > script.js</span><br>\n            <span class=\"cmd-prompt\">C:\\Users\\YourName></span>\n            <span class=\"cmd-command\">echo. > style.css</span>\n        </div>\n        <p class=\"cmd-comment\">Creates empty files</p>\n    </div>\n    \n    <div class=\"method\">\n        <h3>Method 3: Using type nul command</h3>\n        <div class=\"cmd-window\">\n            <span class=\"cmd-prompt\">C:\\Users\\YourName></span>\n            <span class=\"cmd-command\">type nul > filename.env</span><br>\n            <span class=\"cmd-prompt\">C:\\Users\\YourName></span>\n            <span class=\"cmd-command\">type nul > index.html</span><br>\n            <span class=\"cmd-prompt\">C:\\Users\\YourName></span>\n            <span class=\"cmd-command\">type nul > script.js</span><br>\n            <span class=\"cmd-prompt\">C:\\Users\\YourName></span>\n            <span class=\"cmd-command\">type nul > style.css</span>\n        </div>\n        <p class=\"cmd-comment\">Creates empty files (alternative method)</p>\n    </div>\n    \n    <h2>Common File Types You Can Create:</h2>\n    <div class=\"file-types\">\n        <div class=\"file-type\">\n            <strong>.env</strong><br>\n            Environment variables\n        </div>\n        <div class=\"file-type\">\n            <strong>.html</strong><br>\n            Web pages\n        </div>\n        <div class=\"file-type\">\n            <strong>.js</strong><br>\n            JavaScript files\n        </div>\n        <div class=\"file-type\">\n            <strong>.css</strong><br>\n            Stylesheets\n        </div>\n        <div class=\"file-type\">\n            <strong>.json</strong><br>\n            Data files\n        </div>\n        <div class=\"file-type\">\n            <strong>.txt</strong><br>\n            Text files\n        </div>\n    </div>\n    \n    <div class=\"method\">\n        <h3>Example: Creating a complete project</h3>\n        <div class=\"cmd-window\">\n            <span class=\"cmd-prompt\">C:\\Users\\YourName></span>\n            <span class=\"cmd-command\">mkdir my-project</span><br>\n            <span class=\"cmd-prompt\">C:\\Users\\YourName></span>\n            <span class=\"cmd-command\">cd my-project</span><br>\n            <span class=\"cmd-prompt\">C:\\Users\\YourName\\my-project></span>\n            <span class=\"cmd-command\">notepad index.html</span><br>\n            <span class=\"cmd-prompt\">C:\\Users\\YourName\\my-project></span>\n            <span class=\"cmd-command\">notepad style.css</span><br>\n            <span class=\"cmd-prompt\">C:\\Users\\YourName\\my-project></span>\n            <span class=\"cmd-command\">notepad script.js</span><br>\n            <span class=\"cmd-prompt\">C:\\Users\\YourName\\my-project></span>\n            <span class=\"cmd-command\">notepad .env</span>\n        </div>\n    </div>\n</body>\n</html>"
  },
  {
    "question": "How to create a flexbox in CSS?",
    "answer": "**CSS Flexbox Complete Guide:**\n\n**Basic Flexbox Setup:**\n```css\n.box {\n    display: flex;\n}\n```\n\n**Complete Flexbox Properties:**\n\n**1. flex-wrap:**\n- `wrap` - Items wrap to next line\n- `nowrap` - Items stay on single line (default)\n- `wrap-reverse` - Items wrap in reverse order\n\n**2. align-content:**\n- `flex-start` - Pack items at start\n- `flex-end` - Pack items at end\n- `center` - Pack items at center\n- `space-between` - Distribute items evenly\n- `space-around` - Distribute items with space around\n- `space-evenly` - Distribute items with equal space\n- `stretch` - Stretch items to fill container (default)\n\n**3. flex-direction:**\n- `row` - Items in row (default)\n- `row-reverse` - Items in row, reversed\n- `column` - Items in column\n- `column-reverse` - Items in column, reversed\n\n**4. justify-content:**\n- `flex-start` - Pack items at start (default)\n- `flex-end` - Pack items at end\n- `center` - Pack items at center\n- `space-between` - Distribute items evenly\n- `space-around` - Distribute items with space around\n- `space-evenly` - Distribute items with equal space\n\n**5. align-items:**\n- `flex-start` - Align items at start\n- `flex-end` - Align items at end\n- `center` - Align items at center\n- `baseline` - Align items at baseline\n- `stretch` - Stretch items to fill container (default)\n\n**6. align-self:**\n- `auto` - Inherit from parent (default)\n- `flex-start` - Align item at start\n- `flex-end` - Align item at end\n- `center` - Align item at center\n- `baseline` - Align item at baseline\n- `stretch` - Stretch item to fill container\n\n**7. Gap Properties:**\n- `gap` - Space between items\n- `row-gap` - Space between rows\n- `column-gap` - Space between columns\n\n**8. Order:**\n- `order: 0` - Default order\n- `order: 1` - Higher numbers appear later\n- `order: -1` - Lower numbers appear earlier",
    "type": "css",
    "tags": ["css", "flexbox", "layout"],
    "code": "<!DOCTYPE html><html><head><title>CSS Flexbox Complete Guide</title><style>body{font-family:Arial,sans-serif;margin:20px;background:#f8f9fa}.container{max-width:1200px;margin:0 auto}.demo-section{background:white;padding:25px;margin:20px 0;border-radius:10px;box-shadow:0 2px 5px rgba(0,0,0,0.1)}.demo-title{color:#2c3e50;font-size:20px;font-weight:bold;margin-bottom:15px}.flex-container{display:flex;background:#e3f2fd;padding:20px;border-radius:8px;margin:15px 0;min-height:100px;border:2px solid #2196f3}.flex-item{background:#ff6b6b;color:white;padding:15px;margin:5px;border-radius:5px;text-align:center;font-weight:bold;min-width:80px}.flex-item:nth-child(2){background:#4ecdc4}.flex-item:nth-child(3){background:#45b7d1}.flex-item:nth-child(4){background:#96ceb4}.flex-item:nth-child(5){background:#feca57}.code-block{background:#2c3e50;color:#ecf0f1;padding:15px;border-radius:5px;font-family:monospace;margin:15px 0;overflow-x:auto}.controls{background:#fff3cd;padding:15px;border-radius:5px;margin:15px 0;border-left:4px solid #ffc107}.control-group{margin:10px 0}.control-group label{display:inline-block;width:150px;font-weight:bold}.control-group select{padding:5px;border-radius:3px;border:1px solid #ccc}.property-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(300px,1fr));gap:20px;margin:20px 0}.property-card{background:#f8f9fa;padding:15px;border-radius:5px;border-left:4px solid #007bff}.property-title{font-weight:bold;color:#2c3e50;margin-bottom:10px}.property-values{color:#666;font-size:14px}</style></head><body><div class=\"container\"><h1 style=\"text-align:center;color:#2c3e50\">🎯 CSS Flexbox Complete Guide</h1><div class=\"demo-section\"><div class=\"demo-title\">Interactive Flexbox Demo</div><div class=\"controls\"><div class=\"control-group\"><label>flex-direction:</label><select id=\"flexDirection\" onchange=\"updateFlexbox()\"><option value=\"row\">row</option><option value=\"row-reverse\">row-reverse</option><option value=\"column\">column</option><option value=\"column-reverse\">column-reverse</option></select></div><div class=\"control-group\"><label>justify-content:</label><select id=\"justifyContent\" onchange=\"updateFlexbox()\"><option value=\"flex-start\">flex-start</option><option value=\"flex-end\">flex-end</option><option value=\"center\">center</option><option value=\"space-between\">space-between</option><option value=\"space-around\">space-around</option><option value=\"space-evenly\">space-evenly</option></select></div><div class=\"control-group\"><label>align-items:</label><select id=\"alignItems\" onchange=\"updateFlexbox()\"><option value=\"flex-start\">flex-start</option><option value=\"flex-end\">flex-end</option><option value=\"center\">center</option><option value=\"baseline\">baseline</option><option value=\"stretch\">stretch</option></select></div><div class=\"control-group\"><label>flex-wrap:</label><select id=\"flexWrap\" onchange=\"updateFlexbox()\"><option value=\"nowrap\">nowrap</option><option value=\"wrap\">wrap</option><option value=\"wrap-reverse\">wrap-reverse</option></select></div><div class=\"control-group\"><label>align-content:</label><select id=\"alignContent\" onchange=\"updateFlexbox()\"><option value=\"stretch\">stretch</option><option value=\"flex-start\">flex-start</option><option value=\"flex-end\">flex-end</option><option value=\"center\">center</option><option value=\"space-between\">space-between</option><option value=\"space-around\">space-around</option><option value=\"space-evenly\">space-evenly</option></select></div><div class=\"control-group\"><label>gap:</label><select id=\"gap\" onchange=\"updateFlexbox()\"><option value=\"0\">0px</option><option value=\"10px\">10px</option><option value=\"20px\">20px</option><option value=\"30px\">30px</option></select></div></div><div class=\"flex-container\" id=\"flexContainer\"><div class=\"flex-item\">Item 1</div><div class=\"flex-item\">Item 2</div><div class=\"flex-item\">Item 3</div><div class=\"flex-item\">Item 4</div><div class=\"flex-item\">Item 5</div></div></div><div class=\"demo-section\"><div class=\"demo-title\">Flexbox Properties Reference</div><div class=\"property-grid\"><div class=\"property-card\"><div class=\"property-title\">flex-direction</div><div class=\"property-values\">row, row-reverse, column, column-reverse</div></div><div class=\"property-card\"><div class=\"property-title\">justify-content</div><div class=\"property-values\">flex-start, flex-end, center, space-between, space-around, space-evenly</div></div><div class=\"property-card\"><div class=\"property-title\">align-items</div><div class=\"property-values\">flex-start, flex-end, center, baseline, stretch</div></div><div class=\"property-card\"><div class=\"property-title\">flex-wrap</div><div class=\"property-values\">nowrap, wrap, wrap-reverse</div></div><div class=\"property-card\"><div class=\"property-title\">align-content</div><div class=\"property-values\">stretch, flex-start, flex-end, center, space-between, space-around, space-evenly</div></div><div class=\"property-card\"><div class=\"property-title\">align-self</div><div class=\"property-values\">auto, flex-start, flex-end, center, baseline, stretch</div></div><div class=\"property-card\"><div class=\"property-title\">gap</div><div class=\"property-values\">Any length value (px, em, rem, %)</div></div><div class=\"property-card\"><div class=\"property-title\">order</div><div class=\"property-values\">Any integer (0, 1, -1, 2, etc.)</div></div></div></div><div class=\"demo-section\"><div class=\"demo-title\">Complete Flexbox Example</div><div class=\"code-block\">.box {<br>&nbsp;&nbsp;display: flex;<br>&nbsp;&nbsp;flex-direction: row;<br>&nbsp;&nbsp;flex-wrap: wrap;<br>&nbsp;&nbsp;justify-content: space-between;<br>&nbsp;&nbsp;align-items: center;<br>&nbsp;&nbsp;align-content: flex-start;<br>&nbsp;&nbsp;gap: 20px;<br>&nbsp;&nbsp;row-gap: 10px;<br>&nbsp;&nbsp;column-gap: 30px;<br>&nbsp;&nbsp;height: 90vh;<br>&nbsp;&nbsp;border: 10px solid #ccc;<br>}<br><br>#box1 {<br>&nbsp;&nbsp;background-color: hsl(0, 100%, 70%);<br>&nbsp;&nbsp;align-self: center;<br>&nbsp;&nbsp;order: 1;<br>}</div></div></div><script>function updateFlexbox(){const container=document.getElementById('flexContainer');const flexDirection=document.getElementById('flexDirection').value;const justifyContent=document.getElementById('justifyContent').value;const alignItems=document.getElementById('alignItems').value;const flexWrap=document.getElementById('flexWrap').value;const alignContent=document.getElementById('alignContent').value;const gap=document.getElementById('gap').value;container.style.flexDirection=flexDirection;container.style.justifyContent=justifyContent;container.style.alignItems=alignItems;container.style.flexWrap=flexWrap;container.style.alignContent=alignContent;container.style.gap=gap;}</script></body></html>"
  },
  {
    "question": "What is CSS Grid?",
    "answer": "**CSS Grid:**\nA two-dimensional layout system that allows you to create complex grid-based layouts with rows and columns.\n\n**Key Features:**\n- **Two-dimensional** - Control both rows and columns\n- **Grid lines** - Invisible lines that divide the grid\n- **Grid tracks** - Space between grid lines\n- **Grid cells** - Intersection of row and column\n- **Grid areas** - Named areas spanning multiple cells\n\n**Grid vs Flexbox:**\n- **Grid:** Two-dimensional (rows + columns)\n- **Flexbox:** One-dimensional (row OR column)\n- **Grid:** Better for overall page layout\n- **Flexbox:** Better for component layout\n\n**Grid Properties:**\n- `display: grid` - Create grid container\n- `grid-template-rows` - Define row sizes\n- `grid-template-columns` - Define column sizes\n- `grid-gap` - Space between grid items\n- `grid-area` - Place items in named areas\n- `grid-row` - Specify row placement\n- `grid-column` - Specify column placement",
    "type": "css",
    "tags": ["css", "grid", "layout"],
    "code": "<!DOCTYPE html><html><head><title>CSS Grid Overview</title><style>body{font-family:Arial,sans-serif;margin:20px;background:#f8f9fa}.container{max-width:1000px;margin:0 auto}.demo-section{background:white;padding:25px;margin:20px 0;border-radius:10px;box-shadow:0 2px 5px rgba(0,0,0,0.1)}.demo-title{color:#2c3e50;font-size:20px;font-weight:bold;margin-bottom:15px}.grid-container{display:grid;background:#e3f2fd;padding:20px;border-radius:8px;margin:15px 0;border:2px solid #2196f3}.grid-item{background:#ff6b6b;color:white;padding:20px;border-radius:5px;text-align:center;font-weight:bold}.grid-item:nth-child(2){background:#4ecdc4}.grid-item:nth-child(3){background:#45b7d1}.grid-item:nth-child(4){background:#96ceb4}.grid-item:nth-child(5){background:#feca57}.grid-item:nth-child(6){background:#ff9ff3}.code-block{background:#2c3e50;color:#ecf0f1;padding:15px;border-radius:5px;font-family:monospace;margin:15px 0;overflow-x:auto}.comparison-table{width:100%;border-collapse:collapse;margin:20px 0}.comparison-table th,.comparison-table td{border:1px solid #ddd;padding:12px;text-align:left}.comparison-table th{background:#f8f9fa;font-weight:bold}.feature-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(250px,1fr));gap:20px;margin:20px 0}.feature-card{background:#f8f9fa;padding:15px;border-radius:5px;border-left:4px solid #007bff}.feature-title{font-weight:bold;color:#2c3e50;margin-bottom:10px}</style></head><body><div class=\"container\"><h1 style=\"text-align:center;color:#2c3e50\">📐 CSS Grid Complete Guide</h1><div class=\"demo-section\"><div class=\"demo-title\">Basic CSS Grid Example</div><div class=\"grid-container\" style=\"grid-template-columns:repeat(3,1fr);grid-template-rows:repeat(2,100px);gap:10px\"><div class=\"grid-item\">Item 1</div><div class=\"grid-item\">Item 2</div><div class=\"grid-item\">Item 3</div><div class=\"grid-item\">Item 4</div><div class=\"grid-item\">Item 5</div><div class=\"grid-item\">Item 6</div></div><div class=\"code-block\">.grid-container {<br>&nbsp;&nbsp;display: grid;<br>&nbsp;&nbsp;grid-template-columns: repeat(3, 1fr);<br>&nbsp;&nbsp;grid-template-rows: repeat(2, 100px);<br>&nbsp;&nbsp;gap: 10px;<br>}</div></div><div class=\"demo-section\"><div class=\"demo-title\">Grid vs Flexbox Comparison</div><table class=\"comparison-table\"><thead><tr><th>Feature</th><th>CSS Grid</th><th>Flexbox</th></tr></thead><tbody><tr><td>Dimensions</td><td>Two-dimensional (rows + columns)</td><td>One-dimensional (row OR column)</td></tr><tr><td>Use Case</td><td>Overall page layout</td><td>Component layout</td></tr><tr><td>Alignment</td><td>Built-in alignment</td><td>Flexible alignment</td></tr><tr><td>Browser Support</td><td>Modern browsers</td><td>Excellent support</td></tr><tr><td>Learning Curve</td><td>Steeper</td><td>Easier</td></tr></tbody></table></div><div class=\"demo-section\"><div class=\"demo-title\">CSS Grid Key Features</div><div class=\"feature-grid\"><div class=\"feature-card\"><div class=\"feature-title\">Two-Dimensional</div><p>Control both rows and columns simultaneously</p></div><div class=\"feature-card\"><div class=\"feature-title\">Grid Lines</div><p>Invisible lines that divide the grid</p></div><div class=\"feature-card\"><div class=\"feature-title\">Grid Tracks</div><p>Space between grid lines</p></div><div class=\"feature-card\"><div class=\"feature-title\">Grid Cells</div><p>Intersection of row and column</p></div><div class=\"feature-card\"><div class=\"feature-title\">Grid Areas</div><p>Named areas spanning multiple cells</p></div><div class=\"feature-card\"><div class=\"feature-title\">Responsive</div><p>Easy responsive layouts with auto-fit</p></div></div></div><div class=\"demo-section\"><div class=\"demo-title\">Grid Properties Overview</div><div class=\"code-block\">/* Container Properties */<br>display: grid;<br>grid-template-rows: 100px 200px 100px;<br>grid-template-columns: 1fr 2fr 1fr;<br>grid-gap: 20px;<br>grid-template-areas:<br>&nbsp;&nbsp;\"header header header\"<br>&nbsp;&nbsp;\"sidebar main main\"<br>&nbsp;&nbsp;\"footer footer footer\";<br><br>/* Item Properties */<br>grid-row: 1 / 3;<br>grid-column: 1 / 4;<br>grid-area: header;</div></div></div></body></html>"
  },
  {
    "question": "How do you create a CSS grid with n rows and n columns?",
    "answer": "**Creating CSS Grid with n rows and n columns:**\n\n**Basic Grid Setup:**\n```css\n.container {\n    display: grid;\n    grid-template-rows: /* row sizes */;\n    grid-template-columns: /* column sizes */;\n}\n```\n\n**Complete Grid Properties:**\n\n**1. grid-template-rows:**\n- `100px 200px 100px` - Fixed sizes\n- `1fr 2fr 1fr` - Fractional units\n- `repeat(3, 100px)` - Repeat function\n- `minmax(100px, 1fr)` - Min/max sizing\n- `auto` - Auto size\n- `min-content` - Minimum content size\n- `max-content` - Maximum content size\n\n**2. grid-template-columns:**\n- `100px 200px 100px` - Fixed sizes\n- `1fr 2fr 1fr` - Fractional units\n- `repeat(4, 1fr)` - Repeat function\n- `minmax(200px, 1fr)` - Min/max sizing\n- `auto` - Auto size\n- `min-content` - Minimum content size\n- `max-content` - Maximum content size\n\n**3. justify-content:**\n- `start` - Pack items at start\n- `end` - Pack items at end\n- `center` - Pack items at center\n- `stretch` - Stretch items to fill\n- `space-around` - Distribute with space around\n- `space-between` - Distribute evenly\n- `space-evenly` - Distribute with equal space\n\n**4. align-content:**\n- `start` - Pack items at start\n- `end` - Pack items at end\n- `center` - Pack items at center\n- `stretch` - Stretch items to fill\n- `space-around` - Distribute with space around\n- `space-between` - Distribute evenly\n- `space-evenly` - Distribute with equal space\n\n**5. Grid Gap:**\n- `grid-gap: 20px` - Space between all items\n- `row-gap: 10px` - Space between rows\n- `column-gap: 15px` - Space between columns",
    "type": "css",
    "tags": ["css", "grid", "layout", "rows", "columns"],
    "code": "<!DOCTYPE html><html><head><title>CSS Grid Rows and Columns</title><style>body{font-family:Arial,sans-serif;margin:20px;background:#f8f9fa}.container{max-width:1200px;margin:0 auto}.demo-section{background:white;padding:25px;margin:20px 0;border-radius:10px;box-shadow:0 2px 5px rgba(0,0,0,0.1)}.demo-title{color:#2c3e50;font-size:20px;font-weight:bold;margin-bottom:15px}.grid-container{display:grid;background:#e3f2fd;padding:20px;border-radius:8px;margin:15px 0;border:2px solid #2196f3}.grid-item{background:#ff6b6b;color:white;padding:15px;border-radius:5px;text-align:center;font-weight:bold}.grid-item:nth-child(2){background:#4ecdc4}.grid-item:nth-child(3){background:#45b7d1}.grid-item:nth-child(4){background:#96ceb4}.grid-item:nth-child(5){background:#feca57}.grid-item:nth-child(6){background:#ff9ff3}.grid-item:nth-child(7){background:#a8e6cf}.grid-item:nth-child(8){background:#ffd3a5}.grid-item:nth-child(9){background:#fd79a8}.code-block{background:#2c3e50;color:#ecf0f1;padding:15px;border-radius:5px;font-family:monospace;margin:15px 0;overflow-x:auto}.controls{background:#fff3cd;padding:15px;border-radius:5px;margin:15px 0;border-left:4px solid #ffc107}.control-group{margin:10px 0}.control-group label{display:inline-block;width:200px;font-weight:bold}.control-group select{padding:5px;border-radius:3px;border:1px solid #ccc}.example-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(300px,1fr));gap:20px;margin:20px 0}.example-card{background:#f8f9fa;padding:15px;border-radius:5px;border-left:4px solid #007bff}.example-title{font-weight:bold;color:#2c3e50;margin-bottom:10px}</style></head><body><div class=\"container\"><h1 style=\"text-align:center;color:#2c3e50\">📐 CSS Grid: Rows and Columns</h1><div class=\"demo-section\"><div class=\"demo-title\">Interactive Grid Demo</div><div class=\"controls\"><div class=\"control-group\"><label>grid-template-columns:</label><select id=\"gridColumns\" onchange=\"updateGrid()\"><option value=\"repeat(3,1fr)\">repeat(3, 1fr)</option><option value=\"repeat(4,1fr)\">repeat(4, 1fr)</option><option value=\"repeat(5,1fr)\">repeat(5, 1fr)</option><option value=\"1fr 2fr 1fr\">1fr 2fr 1fr</option><option value=\"100px 200px 100px\">100px 200px 100px</option><option value=\"minmax(100px,1fr) minmax(200px,1fr)\">minmax(100px,1fr) minmax(200px,1fr)</option></select></div><div class=\"control-group\"><label>grid-template-rows:</label><select id=\"gridRows\" onchange=\"updateGrid()\"><option value=\"repeat(2,100px)\">repeat(2, 100px)</option><option value=\"repeat(3,100px)\">repeat(3, 100px)</option><option value=\"100px 200px 100px\">100px 200px 100px</option><option value=\"1fr 2fr 1fr\">1fr 2fr 1fr</option><option value=\"auto auto auto\">auto auto auto</option></select></div><div class=\"control-group\"><label>gap:</label><select id=\"gridGap\" onchange=\"updateGrid()\"><option value=\"10px\">10px</option><option value=\"20px\">20px</option><option value=\"30px\">30px</option><option value=\"0\">0px</option></select></div></div><div class=\"grid-container\" id=\"gridContainer\"><div class=\"grid-item\">Item 1</div><div class=\"grid-item\">Item 2</div><div class=\"grid-item\">Item 3</div><div class=\"grid-item\">Item 4</div><div class=\"grid-item\">Item 5</div><div class=\"grid-item\">Item 6</div><div class=\"grid-item\">Item 7</div><div class=\"grid-item\">Item 8</div><div class=\"grid-item\">Item 9</div></div></div><div class=\"demo-section\"><div class=\"demo-title\">Grid Template Examples</div><div class=\"example-grid\"><div class=\"example-card\"><div class=\"example-title\">Fixed Sizes</div><div class=\"code-block\">grid-template-columns: 100px 200px 100px;<br>grid-template-rows: 100px 200px 100px;</div></div><div class=\"example-card\"><div class=\"example-title\">Fractional Units</div><div class=\"code-block\">grid-template-columns: 1fr 2fr 1fr;<br>grid-template-rows: 1fr 2fr 1fr;</div></div><div class=\"example-card\"><div class=\"example-title\">Repeat Function</div><div class=\"code-block\">grid-template-columns: repeat(3, 1fr);<br>grid-template-rows: repeat(3, 100px);</div></div><div class=\"example-card\"><div class=\"example-title\">Minmax Function</div><div class=\"code-block\">grid-template-columns: minmax(100px, 1fr);<br>grid-template-rows: minmax(100px, 1fr);</div></div><div class=\"example-card\"><div class=\"example-title\">Auto Sizing</div><div class=\"code-block\">grid-template-columns: auto auto auto;<br>grid-template-rows: auto auto auto;</div></div><div class=\"example-card\"><div class=\"example-title\">Mixed Units</div><div class=\"code-block\">grid-template-columns: 200px 1fr 100px;<br>grid-template-rows: auto 1fr auto;</div></div></div></div><div class=\"demo-section\"><div class=\"demo-title\">Complete Grid Properties</div><div class=\"code-block\">.container {<br>&nbsp;&nbsp;display: grid;<br>&nbsp;&nbsp;grid-template-rows: repeat(3, 100px);<br>&nbsp;&nbsp;grid-template-columns: repeat(4, 1fr);<br>&nbsp;&nbsp;gap: 20px;<br>&nbsp;&nbsp;row-gap: 10px;<br>&nbsp;&nbsp;column-gap: 30px;<br>&nbsp;&nbsp;justify-content: space-evenly;<br>&nbsp;&nbsp;align-content: center;<br>&nbsp;&nbsp;height: 90vh;<br>&nbsp;&nbsp;border: 10px solid #ccc;<br>}</div></div></div><script>function updateGrid(){const container=document.getElementById('gridContainer');const columns=document.getElementById('gridColumns').value;const rows=document.getElementById('gridRows').value;const gap=document.getElementById('gridGap').value;container.style.gridTemplateColumns=columns;container.style.gridTemplateRows=rows;container.style.gap=gap;}</script></body></html>"
  },
  {
    "question": "How to make responsive grids?",
    "answer": "**Responsive CSS Grid:**\n\n**Answer:** `grid-template-columns: repeat(auto-fit, minmax(100px, 1fr))`\n\n**Complete Responsive Grid Methods:**\n\n**1. Auto-fit with minmax:**\n```css\n.grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n    gap: 20px;\n}\n```\n\n**2. Auto-fill with minmax:**\n```css\n.grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));\n    gap: 15px;\n}\n```\n\n**3. Media Queries for Different Breakpoints:**\n```css\n.grid {\n    display: grid;\n    grid-template-columns: 1fr;\n    gap: 10px;\n}\n\n@media (min-width: 768px) {\n    .grid {\n        grid-template-columns: repeat(2, 1fr);\n    }\n}\n\n@media (min-width: 1024px) {\n    .grid {\n        grid-template-columns: repeat(3, 1fr);\n    }\n}\n```\n\n**4. Fractional Units:**\n```css\n.grid {\n    display: grid;\n    grid-template-columns: repeat(12, 1fr);\n    gap: 1rem;\n}\n```\n\n**5. CSS Grid with CSS Variables:**\n```css\n.grid {\n    display: grid;\n    grid-template-columns: repeat(var(--columns, 1), 1fr);\n    gap: var(--gap, 1rem);\n}\n\n@media (min-width: 768px) {\n    .grid {\n        --columns: 2;\n        --gap: 2rem;\n    }\n}\n```\n\n**Key Differences:**\n- **auto-fit:** Collapses empty tracks\n- **auto-fill:** Keeps empty tracks\n- **minmax():** Sets minimum and maximum sizes\n- **fr:** Fractional unit for flexible sizing",
    "type": "css",
    "tags": ["css", "grid", "responsive", "layout"],
    "code": "<!DOCTYPE html><html><head><title>Responsive CSS Grid</title><style>body{font-family:Arial,sans-serif;margin:20px;background:#f8f9fa}.container{max-width:1200px;margin:0 auto}.demo-section{background:white;padding:25px;margin:20px 0;border-radius:10px;box-shadow:0 2px 5px rgba(0,0,0,0.1)}.demo-title{color:#2c3e50;font-size:20px;font-weight:bold;margin-bottom:15px}.responsive-grid{display:grid;background:#e3f2fd;padding:20px;border-radius:8px;margin:15px 0;border:2px solid #2196f3}.grid-item{background:#ff6b6b;color:white;padding:20px;border-radius:5px;text-align:center;font-weight:bold}.grid-item:nth-child(2){background:#4ecdc4}.grid-item:nth-child(3){background:#45b7d1}.grid-item:nth-child(4){background:#96ceb4}.grid-item:nth-child(5){background:#feca57}.grid-item:nth-child(6){background:#ff9ff3}.grid-item:nth-child(7){background:#a8e6cf}.grid-item:nth-child(8){background:#ffd3a5}.code-block{background:#2c3e50;color:#ecf0f1;padding:15px;border-radius:5px;font-family:monospace;margin:15px 0;overflow-x:auto}.method-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(300px,1fr));gap:20px;margin:20px 0}.method-card{background:#f8f9fa;padding:15px;border-radius:5px;border-left:4px solid #007bff}.method-title{font-weight:bold;color:#2c3e50;margin-bottom:10px}.controls{background:#fff3cd;padding:15px;border-radius:5px;margin:15px 0;border-left:4px solid #ffc107}.control-group{margin:10px 0}.control-group label{display:inline-block;width:200px;font-weight:bold}.control-group select{padding:5px;border-radius:3px;border:1px solid #ccc}</style></head><body><div class=\"container\"><h1 style=\"text-align:center;color:#2c3e50\">📱 Responsive CSS Grid</h1><div class=\"demo-section\"><div class=\"demo-title\">Interactive Responsive Grid Demo</div><div class=\"controls\"><div class=\"control-group\"><label>Grid Method:</label><select id=\"gridMethod\" onchange=\"updateResponsiveGrid()\"><option value=\"auto-fit\">auto-fit with minmax</option><option value=\"auto-fill\">auto-fill with minmax</option><option value=\"media-queries\">Media Queries</option><option value=\"fractional\">Fractional Units</option></select></div><div class=\"control-group\"><label>Min Size:</label><select id=\"minSize\" onchange=\"updateResponsiveGrid()\"><option value=\"100px\">100px</option><option value=\"150px\">150px</option><option value=\"200px\">200px</option><option value=\"250px\">250px</option></select></div></div><div class=\"responsive-grid\" id=\"responsiveGrid\"><div class=\"grid-item\">Item 1</div><div class=\"grid-item\">Item 2</div><div class=\"grid-item\">Item 3</div><div class=\"grid-item\">Item 4</div><div class=\"grid-item\">Item 5</div><div class=\"grid-item\">Item 6</div><div class=\"grid-item\">Item 7</div><div class=\"grid-item\">Item 8</div></div></div><div class=\"demo-section\"><div class=\"demo-title\">Responsive Grid Methods</div><div class=\"method-grid\"><div class=\"method-card\"><div class=\"method-title\">1. Auto-fit with minmax</div><div class=\"code-block\">.grid {<br>&nbsp;&nbsp;display: grid;<br>&nbsp;&nbsp;grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));<br>&nbsp;&nbsp;gap: 20px;<br>}</div><p><strong>Use:</strong> Collapses empty tracks</p></div><div class=\"method-card\"><div class=\"method-title\">2. Auto-fill with minmax</div><div class=\"code-block\">.grid {<br>&nbsp;&nbsp;display: grid;<br>&nbsp;&nbsp;grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));<br>&nbsp;&nbsp;gap: 15px;<br>}</div><p><strong>Use:</strong> Keeps empty tracks</p></div><div class=\"method-card\"><div class=\"method-title\">3. Media Queries</div><div class=\"code-block\">.grid {<br>&nbsp;&nbsp;display: grid;<br>&nbsp;&nbsp;grid-template-columns: 1fr;<br>}<br><br>@media (min-width: 768px) {<br>&nbsp;&nbsp;.grid {<br>&nbsp;&nbsp;&nbsp;&nbsp;grid-template-columns: repeat(2, 1fr);<br>&nbsp;&nbsp;}<br>}</div><p><strong>Use:</strong> Different layouts per breakpoint</p></div><div class=\"method-card\"><div class=\"method-title\">4. CSS Variables</div><div class=\"code-block\">.grid {<br>&nbsp;&nbsp;display: grid;<br>&nbsp;&nbsp;grid-template-columns: repeat(var(--columns, 1), 1fr);<br>&nbsp;&nbsp;gap: var(--gap, 1rem);<br>}<br><br>@media (min-width: 768px) {<br>&nbsp;&nbsp;.grid {<br>&nbsp;&nbsp;&nbsp;&nbsp;--columns: 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;--gap: 2rem;<br>&nbsp;&nbsp;}<br>}</div><p><strong>Use:</strong> Dynamic responsive behavior</p></div></div></div><div class=\"demo-section\"><div class=\"demo-title\">Key Differences</div><div class=\"code-block\">/* auto-fit: Collapses empty tracks */<br>grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));<br><br>/* auto-fill: Keeps empty tracks */<br>grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));<br><br>/* minmax(): Sets min and max sizes */<br>minmax(100px, 1fr)<br><br>/* fr: Fractional unit for flexible sizing */<br>1fr 2fr 1fr</div></div></div><script>function updateResponsiveGrid(){const grid=document.getElementById('responsiveGrid');const method=document.getElementById('gridMethod').value;const minSize=document.getElementById('minSize').value;switch(method){case 'auto-fit':grid.style.gridTemplateColumns=`repeat(auto-fit, minmax(${minSize}, 1fr))`;break;case 'auto-fill':grid.style.gridTemplateColumns=`repeat(auto-fill, minmax(${minSize}, 1fr))`;break;case 'media-queries':grid.style.gridTemplateColumns='repeat(2, 1fr)';break;case 'fractional':grid.style.gridTemplateColumns='repeat(12, 1fr)';break;}}</script></body></html>"
  },
  {
    "question": "What is a media query, why is it called that, and what does it do in the code?",
    "answer": "**CSS Media Queries:**\n\n**What is a Media Query?**\nA CSS feature that allows you to apply styles conditionally based on device characteristics.\n\n**Why is it called \"Media Query\"?**\n- **Media:** Refers to the output medium (screen, print, etc.)\n- **Query:** Asks questions about device capabilities\n- **Media Query:** \"Query the media about its characteristics\"\n\n**What Media Queries Do:**\n- **Responsive Design:** Adapt layout to different screen sizes\n- **Device Targeting:** Apply styles for specific devices\n- **Feature Detection:** Check for device capabilities\n- **Print Styles:** Different styles for printing\n- **Accessibility:** High contrast, reduced motion\n\n**Complete Media Query Syntax:**\n```css\n@media media-type and (condition) {\n    /* CSS rules */\n}\n```\n\n**Media Types:**\n- `all` - All media types (default)\n- `screen` - Computer screens, tablets, phones\n- `print` - Printers and print preview\n- `speech` - Screen readers\n- `handheld` - Handheld devices (deprecated)\n\n**Common Media Features:**\n- `width` - Viewport width\n- `height` - Viewport height\n- `min-width` - Minimum viewport width\n- `max-width` - Maximum viewport width\n- `orientation` - Portrait or landscape\n- `resolution` - Device pixel ratio\n- `aspect-ratio` - Width to height ratio\n- `color` - Number of color bits\n- `hover` - Hover capability\n- `pointer` - Pointer type (coarse, fine)\n\n**Breakpoint Examples:**\n- **Mobile:** `@media (max-width: 767px)`\n- **Tablet:** `@media (min-width: 768px) and (max-width: 1023px)`\n- **Desktop:** `@media (min-width: 1024px)`\n- **Large Desktop:** `@media (min-width: 1440px)`",
    "type": "css",
    "tags": ["css", "media-queries", "responsive", "breakpoints"],
    "code": "<!DOCTYPE html><html><head><title>CSS Media Queries Guide</title><style>body{font-family:Arial,sans-serif;margin:20px;background:#f8f9fa}.container{max-width:1000px;margin:0 auto}.demo-section{background:white;padding:25px;margin:20px 0;border-radius:10px;box-shadow:0 2px 5px rgba(0,0,0,0.1)}.demo-title{color:#2c3e50;font-size:20px;font-weight:bold;margin-bottom:15px}.responsive-demo{background:#e3f2fd;padding:20px;border-radius:8px;margin:15px 0;border:2px solid #2196f3;text-align:center}.code-block{background:#2c3e50;color:#ecf0f1;padding:15px;border-radius:5px;font-family:monospace;margin:15px 0;overflow-x:auto}.breakpoint-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(200px,1fr));gap:15px;margin:20px 0}.breakpoint-card{background:#f8f9fa;padding:15px;border-radius:5px;border-left:4px solid #007bff}.breakpoint-title{font-weight:bold;color:#2c3e50;margin-bottom:10px}.feature-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(250px,1fr));gap:15px;margin:20px 0}.feature-card{background:#fff3cd;padding:15px;border-radius:5px;border-left:4px solid #ffc107}.feature-title{font-weight:bold;color:#2c3e50;margin-bottom:10px}.example-section{background:#e8f5e8;padding:20px;border-radius:5px;margin:20px 0;border-left:4px solid #27ae60}.example-title{font-weight:bold;color:#2c3e50;margin-bottom:15px}.current-size{background:#ff6b6b;color:white;padding:10px;border-radius:5px;margin:10px 0;font-weight:bold}</style></head><body><div class=\"container\"><h1 style=\"text-align:center;color:#2c3e50\">📱 CSS Media Queries Complete Guide</h1><div class=\"demo-section\"><div class=\"demo-title\">What is a Media Query?</div><p>A CSS feature that allows you to apply styles conditionally based on device characteristics like screen size, orientation, and capabilities.</p><div class=\"responsive-demo\"><div class=\"current-size\" id=\"currentSize\">Current Viewport: <span id=\"viewportSize\">Loading...</span></div><div style=\"background:#4ecdc4;color:white;padding:15px;border-radius:5px;margin:10px 0\">This content changes based on screen size!</div></div></div><div class=\"demo-section\"><div class=\"demo-title\">Why is it called \"Media Query\"?</div><div class=\"feature-grid\"><div class=\"feature-card\"><div class=\"feature-title\">Media</div><p>Refers to the output medium (screen, print, speech, etc.)</p></div><div class=\"feature-card\"><div class=\"feature-title\">Query</div><p>Asks questions about device capabilities and characteristics</p></div><div class=\"feature-card\"><div class=\"feature-title\">Media Query</div><p>\"Query the media about its characteristics\"</p></div></div></div><div class=\"demo-section\"><div class=\"demo-title\">What Media Queries Do</div><div class=\"feature-grid\"><div class=\"feature-card\"><div class=\"feature-title\">Responsive Design</div><p>Adapt layout to different screen sizes</p></div><div class=\"feature-card\"><div class=\"feature-title\">Device Targeting</div><p>Apply styles for specific devices</p></div><div class=\"feature-card\"><div class=\"feature-title\">Feature Detection</div><p>Check for device capabilities</p></div><div class=\"feature-card\"><div class=\"feature-title\">Print Styles</div><p>Different styles for printing</p></div><div class=\"feature-card\"><div class=\"feature-title\">Accessibility</div><p>High contrast, reduced motion</p></div></div></div><div class=\"demo-section\"><div class=\"demo-title\">Media Query Syntax</div><div class=\"code-block\">@media media-type and (condition) {<br>&nbsp;&nbsp;/* CSS rules */<br>}</div><div class=\"example-section\"><div class=\"example-title\">Basic Examples:</div><div class=\"code-block\">/* All devices */<br>@media all {<br>&nbsp;&nbsp;body { font-size: 16px; }<br>}<br><br>/* Screen devices only */<br>@media screen {<br>&nbsp;&nbsp;body { background: white; }<br>}<br><br>/* Print media */<br>@media print {<br>&nbsp;&nbsp;body { background: white; color: black; }<br>}</div></div></div><div class=\"demo-section\"><div class=\"demo-title\">Common Breakpoints</div><div class=\"breakpoint-grid\"><div class=\"breakpoint-card\"><div class=\"breakpoint-title\">Mobile</div><div class=\"code-block\">@media (max-width: 767px) {<br>&nbsp;&nbsp;/* Mobile styles */<br>}</div></div><div class=\"breakpoint-card\"><div class=\"breakpoint-title\">Tablet</div><div class=\"code-block\">@media (min-width: 768px) and (max-width: 1023px) {<br>&nbsp;&nbsp;/* Tablet styles */<br>}</div></div><div class=\"breakpoint-card\"><div class=\"breakpoint-title\">Desktop</div><div class=\"code-block\">@media (min-width: 1024px) {<br>&nbsp;&nbsp;/* Desktop styles */<br>}</div></div><div class=\"breakpoint-card\"><div class=\"breakpoint-title\">Large Desktop</div><div class=\"code-block\">@media (min-width: 1440px) {<br>&nbsp;&nbsp;/* Large desktop styles */<br>}</div></div></div></div><div class=\"demo-section\"><div class=\"demo-title\">Media Features</div><div class=\"code-block\">/* Width-based */<br>@media (min-width: 768px) { }<br>@media (max-width: 1024px) { }<br>@media (width: 800px) { }<br><br>/* Orientation */<br>@media (orientation: portrait) { }<br>@media (orientation: landscape) { }<br><br>/* Resolution */<br>@media (min-resolution: 2dppx) { }<br>@media (-webkit-min-device-pixel-ratio: 2) { }<br><br>/* Hover capability */<br>@media (hover: hover) { }<br>@media (hover: none) { }<br><br>/* Pointer type */<br>@media (pointer: coarse) { }<br>@media (pointer: fine) { }</div></div><div class=\"demo-section\"><div class=\"demo-title\">Complete Responsive Example</div><div class=\"code-block\">/* Mobile First Approach */<br>.container {<br>&nbsp;&nbsp;width: 100%;<br>&nbsp;&nbsp;padding: 10px;<br>}<br><br>/* Tablet */<br>@media (min-width: 768px) {<br>&nbsp;&nbsp;.container {<br>&nbsp;&nbsp;&nbsp;&nbsp;width: 80%;<br>&nbsp;&nbsp;&nbsp;&nbsp;padding: 20px;<br>&nbsp;&nbsp;}<br>}<br><br>/* Desktop */<br>@media (min-width: 1024px) {<br>&nbsp;&nbsp;.container {<br>&nbsp;&nbsp;&nbsp;&nbsp;width: 1200px;<br>&nbsp;&nbsp;&nbsp;&nbsp;margin: 0 auto;<br>&nbsp;&nbsp;&nbsp;&nbsp;padding: 30px;<br>&nbsp;&nbsp;}<br>}</div></div></div><script>function updateViewportSize(){const width=window.innerWidth;const height=window.innerHeight;document.getElementById('viewportSize').textContent=`${width}px × ${height}px`;let device='Mobile';if(width>=1440){device='Large Desktop';}else if(width>=1024){device='Desktop';}else if(width>=768){device='Tablet';}document.getElementById('currentSize').innerHTML=`Current Viewport: <span id=\"viewportSize\">${width}px × ${height}px</span> - ${device}`;}window.addEventListener('resize',updateViewportSize);updateViewportSize();</script></body></html>"
  },
  {
    "question": "How do you add items to grid?",
    "answer": "**Adding Items to CSS Grid:**\n\n**Complete Grid Placement Methods:**\n\n**1. Individual Properties:**\n```css\n.item {\n    grid-row-start: 1;\n    grid-row-end: 3;\n    grid-column-start: 1;\n    grid-column-end: 5;\n}\n```\n\n**2. Shorthand Properties:**\n```css\n.item {\n    grid-row: 1 / 3;\n    grid-column: 1 / 5;\n}\n```\n\n**3. Span Properties:**\n```css\n.item {\n    grid-row: span 2;\n    grid-column: span 3;\n}\n```\n\n**4. Grid Area (Named Areas):**\n```css\n.item {\n    grid-area: row-start / col-start / row-end / col-end;\n}\n```\n\n**5. Grid Area with Named Areas:**\n```css\n.container {\n    grid-template-areas:\n        \"header header header\"\n        \"sidebar main main\"\n        \"footer footer footer\";\n}\n\n.item {\n    grid-area: header;\n}\n```\n\n**Complete Grid Placement Values:**\n\n**Grid Row/Column Values:**\n- `1` - Line number\n- `1 / 3` - Start / End\n- `span 2` - Span 2 tracks\n- `auto` - Auto placement\n- `-1` - Last line\n- `-2` - Second to last line\n\n**Grid Area Values:**\n- `header` - Named area\n- `1 / 1 / 3 / 4` - Row-start / Col-start / Row-end / Col-end\n- `auto` - Auto placement\n\n**Grid Gap:**\n- `grid-gap: 20px` - Space between all items\n- `row-gap: 10px` - Space between rows\n- `column-gap: 15px` - Space between columns",
    "type": "css",
    "tags": ["css", "grid", "placement", "positioning"],
    "code": "<!DOCTYPE html><html><head><title>CSS Grid Item Placement</title><style>body{font-family:Arial,sans-serif;margin:20px;background:#f8f9fa}.container{max-width:1200px;margin:0 auto}.demo-section{background:white;padding:25px;margin:20px 0;border-radius:10px;box-shadow:0 2px 5px rgba(0,0,0,0.1)}.demo-title{color:#2c3e50;font-size:20px;font-weight:bold;margin-bottom:15px}.grid-container{display:grid;background:#e3f2fd;padding:20px;border-radius:8px;margin:15px 0;border:2px solid #2196f3}.grid-item{background:#ff6b6b;color:white;padding:15px;border-radius:5px;text-align:center;font-weight:bold}.grid-item:nth-child(2){background:#4ecdc4}.grid-item:nth-child(3){background:#45b7d1}.grid-item:nth-child(4){background:#96ceb4}.grid-item:nth-child(5){background:#feca57}.grid-item:nth-child(6){background:#ff9ff3}.code-block{background:#2c3e50;color:#ecf0f1;padding:15px;border-radius:5px;font-family:monospace;margin:15px 0;overflow-x:auto}.method-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(300px,1fr));gap:20px;margin:20px 0}.method-card{background:#f8f9fa;padding:15px;border-radius:5px;border-left:4px solid #007bff}.method-title{font-weight:bold;color:#2c3e50;margin-bottom:10px}.controls{background:#fff3cd;padding:15px;border-radius:5px;margin:15px 0;border-left:4px solid #ffc107}.control-group{margin:10px 0}.control-group label{display:inline-block;width:200px;font-weight:bold}.control-group select{padding:5px;border-radius:3px;border:1px solid #ccc}.example-section{background:#e8f5e8;padding:20px;border-radius:5px;margin:20px 0;border-left:4px solid #27ae60}.example-title{font-weight:bold;color:#2c3e50;margin-bottom:15px}</style></head><body><div class=\"container\"><h1 style=\"text-align:center;color:#2c3e50\">📍 CSS Grid Item Placement</h1><div class=\"demo-section\"><div class=\"demo-title\">Interactive Grid Placement Demo</div><div class=\"controls\"><div class=\"control-group\"><label>Placement Method:</label><select id=\"placementMethod\" onchange=\"updateGridPlacement()\"><option value=\"individual\">Individual Properties</option><option value=\"shorthand\">Shorthand Properties</option><option value=\"span\">Span Properties</option><option value=\"named-areas\">Named Areas</option></select></div></div><div class=\"grid-container\" id=\"gridContainer\" style=\"grid-template-columns:repeat(4,1fr);grid-template-rows:repeat(3,100px);gap:10px\"><div class=\"grid-item\" id=\"item1\">Item 1</div><div class=\"grid-item\" id=\"item2\">Item 2</div><div class=\"grid-item\" id=\"item3\">Item 3</div><div class=\"grid-item\" id=\"item4\">Item 4</div><div class=\"grid-item\" id=\"item5\">Item 5</div><div class=\"grid-item\" id=\"item6\">Item 6</div></div></div><div class=\"demo-section\"><div class=\"demo-title\">Grid Placement Methods</div><div class=\"method-grid\"><div class=\"method-card\"><div class=\"method-title\">1. Individual Properties</div><div class=\"code-block\">.item {<br>&nbsp;&nbsp;grid-row-start: 1;<br>&nbsp;&nbsp;grid-row-end: 3;<br>&nbsp;&nbsp;grid-column-start: 1;<br>&nbsp;&nbsp;grid-column-end: 5;<br>}</div></div><div class=\"method-card\"><div class=\"method-title\">2. Shorthand Properties</div><div class=\"code-block\">.item {<br>&nbsp;&nbsp;grid-row: 1 / 3;<br>&nbsp;&nbsp;grid-column: 1 / 5;<br>}</div></div><div class=\"method-card\"><div class=\"method-title\">3. Span Properties</div><div class=\"code-block\">.item {<br>&nbsp;&nbsp;grid-row: span 2;<br>&nbsp;&nbsp;grid-column: span 3;<br>}</div></div><div class=\"method-card\"><div class=\"method-title\">4. Grid Area</div><div class=\"code-block\">.item {<br>&nbsp;&nbsp;grid-area: 1 / 1 / 3 / 4;<br>}<br><br>/* Row-start / Col-start / Row-end / Col-end */</div></div></div></div><div class=\"demo-section\"><div class=\"demo-title\">Named Grid Areas</div><div class=\"example-section\"><div class=\"example-title\">Container Setup:</div><div class=\"code-block\">.container {<br>&nbsp;&nbsp;display: grid;<br>&nbsp;&nbsp;grid-template-areas:<br>&nbsp;&nbsp;&nbsp;&nbsp;\"header header header\"<br>&nbsp;&nbsp;&nbsp;&nbsp;\"sidebar main main\"<br>&nbsp;&nbsp;&nbsp;&nbsp;\"footer footer footer\";<br>&nbsp;&nbsp;grid-template-columns: 1fr 2fr 1fr;<br>&nbsp;&nbsp;grid-template-rows: auto 1fr auto;<br>&nbsp;&nbsp;gap: 20px;<br>}</div><div class=\"example-title\">Item Placement:</div><div class=\"code-block\">.header { grid-area: header; }<br>.sidebar { grid-area: sidebar; }<br>.main { grid-area: main; }<br>.footer { grid-area: footer; }</div></div></div><div class=\"demo-section\"><div class=\"demo-title\">Complete Grid Placement Values</div><div class=\"code-block\">/* Line Numbers */<br>grid-row: 1;<br>grid-column: 2;<br><br>/* Start / End */<br>grid-row: 1 / 3;<br>grid-column: 1 / 4;<br><br>/* Span */<br>grid-row: span 2;<br>grid-column: span 3;<br><br>/* Auto */<br>grid-row: auto;<br>grid-column: auto;<br><br>/* Negative Values */<br>grid-row: 1 / -1;<br>grid-column: -2 / -1;</div></div><div class=\"demo-section\"><div class=\"demo-title\">Grid Gap Properties</div><div class=\"code-block\">/* All gaps */<br>grid-gap: 20px;<br><br>/* Individual gaps */<br>row-gap: 10px;<br>column-gap: 15px;<br><br>/* Shorthand */<br>gap: 10px 20px; /* row-gap column-gap */</div></div></div><script>function updateGridPlacement(){const method=document.getElementById('placementMethod').value;const item1=document.getElementById('item1');const item2=document.getElementById('item2');switch(method){case 'individual':item1.style.gridRowStart='1';item1.style.gridRowEnd='3';item1.style.gridColumnStart='1';item1.style.gridColumnEnd='3';break;case 'shorthand':item1.style.gridRow='1 / 3';item1.style.gridColumn='1 / 3';break;case 'span':item1.style.gridRow='span 2';item1.style.gridColumn='span 2';break;case 'named-areas':item1.style.gridArea='1 / 1 / 3 / 3';break;}}</script></body></html>"
  },
  {
    "question": "Explain implicit and explicit grid",
    "answer": "**CSS Grid: Implicit vs Explicit Grid:**\n\n**Explicit Grid:**\n- **Definition:** Grid tracks you explicitly define\n- **Properties:** `grid-template-rows` and `grid-template-columns`\n- **Control:** You have full control over size and placement\n- **Example:** `grid-template-columns: repeat(3, 1fr)`\n\n**Implicit Grid:**\n- **Definition:** Grid tracks created automatically when items are placed outside explicit grid\n- **Properties:** `grid-auto-rows` and `grid-auto-columns`\n- **Control:** Browser creates tracks as needed\n- **Example:** Items placed in row 4 when only 3 rows defined\n\n**Complete Grid Auto Properties:**\n\n**1. grid-auto-rows:**\n- `auto` - Size based on content (default)\n- `100px` - Fixed size\n- `1fr` - Fractional unit\n- `minmax(100px, 1fr)` - Min/max sizing\n- `min-content` - Minimum content size\n- `max-content` - Maximum content size\n\n**2. grid-auto-columns:**\n- `auto` - Size based on content (default)\n- `150px` - Fixed size\n- `1fr` - Fractional unit\n- `minmax(150px, 1fr)` - Min/max sizing\n- `min-content` - Minimum content size\n- `max-content` - Maximum content size\n\n**3. grid-auto-flow:**\n- `row` - Fill rows first (default)\n- `column` - Fill columns first\n- `dense` - Fill gaps in grid\n- `row dense` - Fill rows first, then gaps\n- `column dense` - Fill columns first, then gaps\n\n**4. grid-auto-flow Properties:**\n- `grid-auto-flow: row` - Items flow horizontally\n- `grid-auto-flow: column` - Items flow vertically\n- `grid-auto-flow: dense` - Fill gaps\n- `grid-auto-flow: row dense` - Row-first with gap filling\n- `grid-auto-flow: column dense` - Column-first with gap filling",
    "type": "css",
    "tags": ["css", "grid", "implicit", "explicit"],
    "code": "<!DOCTYPE html><html><head><title>CSS Grid: Implicit vs Explicit</title><style>body{font-family:Arial,sans-serif;margin:20px;background:#f8f9fa}.container{max-width:1200px;margin:0 auto}.demo-section{background:white;padding:25px;margin:20px 0;border-radius:10px;box-shadow:0 2px 5px rgba(0,0,0,0.1)}.demo-title{color:#2c3e50;font-size:20px;font-weight:bold;margin-bottom:15px}.grid-container{display:grid;background:#e3f2fd;padding:20px;border-radius:8px;margin:15px 0;border:2px solid #2196f3}.grid-item{background:#ff6b6b;color:white;padding:15px;border-radius:5px;text-align:center;font-weight:bold}.grid-item:nth-child(2){background:#4ecdc4}.grid-item:nth-child(3){background:#45b7d1}.grid-item:nth-child(4){background:#96ceb4}.grid-item:nth-child(5){background:#feca57}.grid-item:nth-child(6){background:#ff9ff3}.grid-item:nth-child(7){background:#a8e6cf}.grid-item:nth-child(8){background:#ffd3a5}.code-block{background:#2c3e50;color:#ecf0f1;padding:15px;border-radius:5px;font-family:monospace;margin:15px 0;overflow-x:auto}.comparison-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(300px,1fr));gap:20px;margin:20px 0}.comparison-card{background:#f8f9fa;padding:15px;border-radius:5px;border-left:4px solid #007bff}.comparison-title{font-weight:bold;color:#2c3e50;margin-bottom:10px}.controls{background:#fff3cd;padding:15px;border-radius:5px;margin:15px 0;border-left:4px solid #ffc107}.control-group{margin:10px 0}.control-group label{display:inline-block;width:200px;font-weight:bold}.control-group select{padding:5px;border-radius:3px;border:1px solid #ccc}.example-section{background:#e8f5e8;padding:20px;border-radius:5px;margin:20px 0;border-left:4px solid #27ae60}.example-title{font-weight:bold;color:#2c3e50;margin-bottom:15px}</style></head><body><div class=\"container\"><h1 style=\"text-align:center;color:#2c3e50\">🔍 CSS Grid: Implicit vs Explicit</h1><div class=\"demo-section\"><div class=\"demo-title\">Interactive Grid Demo</div><div class=\"controls\"><div class=\"control-group\"><label>Grid Type:</label><select id=\"gridType\" onchange=\"updateGridType()\"><option value=\"explicit\">Explicit Grid</option><option value=\"implicit\">Implicit Grid</option><option value=\"mixed\">Mixed Grid</option></select></div><div class=\"control-group\"><label>Auto Flow:</label><select id=\"autoFlow\" onchange=\"updateGridType()\"><option value=\"row\">row</option><option value=\"column\">column</option><option value=\"dense\">dense</option><option value=\"row-dense\">row dense</option><option value=\"column-dense\">column dense</option></select></div></div><div class=\"grid-container\" id=\"gridContainer\"><div class=\"grid-item\">Item 1</div><div class=\"grid-item\">Item 2</div><div class=\"grid-item\">Item 3</div><div class=\"grid-item\">Item 4</div><div class=\"grid-item\">Item 5</div><div class=\"grid-item\">Item 6</div><div class=\"grid-item\">Item 7</div><div class=\"grid-item\">Item 8</div></div></div><div class=\"demo-section\"><div class=\"demo-title\">Explicit vs Implicit Grid</div><div class=\"comparison-grid\"><div class=\"comparison-card\"><div class=\"comparison-title\">Explicit Grid</div><p><strong>Definition:</strong> Grid tracks you explicitly define</p><p><strong>Properties:</strong></p><ul><li>grid-template-rows</li><li>grid-template-columns</li></ul><p><strong>Control:</strong> Full control over size and placement</p><div class=\"code-block\">grid-template-columns: repeat(3, 1fr);<br>grid-template-rows: repeat(2, 100px);</div></div><div class=\"comparison-card\"><div class=\"comparison-title\">Implicit Grid</div><p><strong>Definition:</strong> Grid tracks created automatically</p><p><strong>Properties:</strong></p><ul><li>grid-auto-rows</li><li>grid-auto-columns</li><li>grid-auto-flow</li></ul><p><strong>Control:</strong> Browser creates tracks as needed</p><div class=\"code-block\">grid-auto-rows: 100px;<br>grid-auto-columns: 1fr;<br>grid-auto-flow: row;</div></div></div></div><div class=\"demo-section\"><div class=\"demo-title\">Grid Auto Properties</div><div class=\"example-section\"><div class=\"example-title\">grid-auto-rows Values:</div><div class=\"code-block\">grid-auto-rows: auto; /* Default - size based on content */<br>grid-auto-rows: 100px; /* Fixed size */<br>grid-auto-rows: 1fr; /* Fractional unit */<br>grid-auto-rows: minmax(100px, 1fr); /* Min/max sizing */<br>grid-auto-rows: min-content; /* Minimum content size */<br>grid-auto-rows: max-content; /* Maximum content size */</div><div class=\"example-title\">grid-auto-columns Values:</div><div class=\"code-block\">grid-auto-columns: auto; /* Default - size based on content */<br>grid-auto-columns: 150px; /* Fixed size */<br>grid-auto-columns: 1fr; /* Fractional unit */<br>grid-auto-columns: minmax(150px, 1fr); /* Min/max sizing */<br>grid-auto-columns: min-content; /* Minimum content size */<br>grid-auto-columns: max-content; /* Maximum content size */</div><div class=\"example-title\">grid-auto-flow Values:</div><div class=\"code-block\">grid-auto-flow: row; /* Fill rows first (default) */<br>grid-auto-flow: column; /* Fill columns first */<br>grid-auto-flow: dense; /* Fill gaps in grid */<br>grid-auto-flow: row dense; /* Fill rows first, then gaps */<br>grid-auto-flow: column dense; /* Fill columns first, then gaps */</div></div></div><div class=\"demo-section\"><div class=\"demo-title\">Complete Example</div><div class=\"code-block\">.container {<br>&nbsp;&nbsp;display: grid;<br>&nbsp;&nbsp;/* Explicit Grid */<br>&nbsp;&nbsp;grid-template-columns: repeat(3, 1fr);<br>&nbsp;&nbsp;grid-template-rows: repeat(2, 100px);<br>&nbsp;&nbsp;/* Implicit Grid */<br>&nbsp;&nbsp;grid-auto-rows: 80px;<br>&nbsp;&nbsp;grid-auto-columns: 1fr;<br>&nbsp;&nbsp;grid-auto-flow: row dense;<br>&nbsp;&nbsp;gap: 10px;<br>}</div></div></div><script>function updateGridType(){const container=document.getElementById('gridContainer');const type=document.getElementById('gridType').value;const flow=document.getElementById('autoFlow').value;switch(type){case 'explicit':container.style.gridTemplateColumns='repeat(3, 1fr)';container.style.gridTemplateRows='repeat(2, 100px)';container.style.gridAutoRows='';container.style.gridAutoColumns='';break;case 'implicit':container.style.gridTemplateColumns='';container.style.gridTemplateRows='';container.style.gridAutoRows='100px';container.style.gridAutoColumns='1fr';break;case 'mixed':container.style.gridTemplateColumns='repeat(2, 1fr)';container.style.gridTemplateRows='repeat(2, 100px)';container.style.gridAutoRows='80px';container.style.gridAutoColumns='1fr';break;}container.style.gridAutoFlow=flow;}</script></body></html>"
  },
  {
    "question": "How to use grid template areas?",
    "answer": "**CSS Grid Template Areas:**\n\n**Complete Grid Template Areas Guide:**\n\n**1. Basic Setup:**\n```css\n.container {\n    display: grid;\n    grid-template-areas:\n        \"header header header\"\n        \"sidebar main main\"\n        \"footer footer footer\";\n}\n```\n\n**2. Item Placement:**\n```css\n.item-1 { grid-area: header; }\n.item-2 { grid-area: sidebar; }\n.item-3 { grid-area: main; }\n.item-4 { grid-area: footer; }\n```\n\n**Complete Grid Template Areas Rules:**\n\n**Area Naming Rules:**\n- Use single quotes for each row\n- Each row must have same number of areas\n- Use dots (.) for empty areas\n- Use same name for spanning areas\n\n**Area Values:**\n- `header` - Named area\n- `main` - Named area\n- `.` - Empty area\n- `sidebar` - Named area\n- `footer` - Named area\n\n**Grid Template Areas Examples:**\n\n**1. Basic Layout:**\n```css\n.container {\n    grid-template-areas:\n        \"header header header\"\n        \"sidebar main main\"\n        \"footer footer footer\";\n}\n```\n\n**2. Complex Layout:**\n```css\n.container {\n    grid-template-areas:\n        \"nav nav nav nav\"\n        \"sidebar main main aside\"\n        \"sidebar main main aside\"\n        \"footer footer footer footer\";\n}\n```\n\n**3. Empty Areas:**\n```css\n.container {\n    grid-template-areas:\n        \"header header header\"\n        \". main main\"\n        \"footer footer footer\";\n}\n```\n\n**4. Responsive Areas:**\n```css\n.container {\n    grid-template-areas:\n        \"header\"\n        \"main\"\n        \"footer\";\n}\n\n@media (min-width: 768px) {\n    .container {\n        grid-template-areas:\n            \"header header\"\n            \"sidebar main\"\n            \"footer footer\";\n    }\n}\n```",
    "type": "css",
    "tags": ["css", "grid", "template-areas", "layout"],
    "code": "<!DOCTYPE html><html><head><title>CSS Grid Template Areas</title><style>body{font-family:Arial,sans-serif;margin:20px;background:#f8f9fa}.container{max-width:1200px;margin:0 auto}.demo-section{background:white;padding:25px;margin:20px 0;border-radius:10px;box-shadow:0 2px 5px rgba(0,0,0,0.1)}.demo-title{color:#2c3e50;font-size:20px;font-weight:bold;margin-bottom:15px}.grid-container{display:grid;background:#e3f2fd;padding:20px;border-radius:8px;margin:15px 0;border:2px solid #2196f3}.grid-item{color:white;padding:15px;border-radius:5px;text-align:center;font-weight:bold}.header{background:#ff6b6b;grid-area:header}.sidebar{background:#4ecdc4;grid-area:sidebar}.main{background:#45b7d1;grid-area:main}.aside{background:#96ceb4;grid-area:aside}.footer{background:#feca57;grid-area:footer}.code-block{background:#2c3e50;color:#ecf0f1;padding:15px;border-radius:5px;font-family:monospace;margin:15px 0;overflow-x:auto}.example-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(300px,1fr));gap:20px;margin:20px 0}.example-card{background:#f8f9fa;padding:15px;border-radius:5px;border-left:4px solid #007bff}.example-title{font-weight:bold;color:#2c3e50;margin-bottom:10px}.controls{background:#fff3cd;padding:15px;border-radius:5px;margin:15px 0;border-left:4px solid #ffc107}.control-group{margin:10px 0}.control-group label{display:inline-block;width:200px;font-weight:bold}.control-group select{padding:5px;border-radius:3px;border:1px solid #ccc}.example-section{background:#e8f5e8;padding:20px;border-radius:5px;margin:20px 0;border-left:4px solid #27ae60}.example-title{font-weight:bold;color:#2c3e50;margin-bottom:15px}</style></head><body><div class=\"container\"><h1 style=\"text-align:center;color:#2c3e50\">🏗️ CSS Grid Template Areas</h1><div class=\"demo-section\"><div class=\"demo-title\">Interactive Grid Template Areas Demo</div><div class=\"controls\"><div class=\"control-group\"><label>Layout Type:</label><select id=\"layoutType\" onchange=\"updateLayout()\"><option value=\"basic\">Basic Layout</option><option value=\"complex\">Complex Layout</option><option value=\"empty\">Empty Areas</option><option value=\"responsive\">Responsive Layout</option></select></div></div><div class=\"grid-container\" id=\"gridContainer\"><div class=\"grid-item header\">Header</div><div class=\"grid-item sidebar\">Sidebar</div><div class=\"grid-item main\">Main Content</div><div class=\"grid-item aside\">Aside</div><div class=\"grid-item footer\">Footer</div></div></div><div class=\"demo-section\"><div class=\"demo-title\">Grid Template Areas Examples</div><div class=\"example-grid\"><div class=\"example-card\"><div class=\"example-title\">1. Basic Layout</div><div class=\"code-block\">.container {<br>&nbsp;&nbsp;display: grid;<br>&nbsp;&nbsp;grid-template-areas:<br>&nbsp;&nbsp;&nbsp;&nbsp;\"header header header\"<br>&nbsp;&nbsp;&nbsp;&nbsp;\"sidebar main main\"<br>&nbsp;&nbsp;&nbsp;&nbsp;\"footer footer footer\";<br>}<br><br>.header { grid-area: header; }<br>.sidebar { grid-area: sidebar; }<br>.main { grid-area: main; }<br>.footer { grid-area: footer; }</div></div><div class=\"example-card\"><div class=\"example-title\">2. Complex Layout</div><div class=\"code-block\">.container {<br>&nbsp;&nbsp;display: grid;<br>&nbsp;&nbsp;grid-template-areas:<br>&nbsp;&nbsp;&nbsp;&nbsp;\"nav nav nav nav\"<br>&nbsp;&nbsp;&nbsp;&nbsp;\"sidebar main main aside\"<br>&nbsp;&nbsp;&nbsp;&nbsp;\"sidebar main main aside\"<br>&nbsp;&nbsp;&nbsp;&nbsp;\"footer footer footer footer\";<br>}</div></div><div class=\"example-card\"><div class=\"example-title\">3. Empty Areas</div><div class=\"code-block\">.container {<br>&nbsp;&nbsp;display: grid;<br>&nbsp;&nbsp;grid-template-areas:<br>&nbsp;&nbsp;&nbsp;&nbsp;\"header header header\"<br>&nbsp;&nbsp;&nbsp;&nbsp;\". main main\"<br>&nbsp;&nbsp;&nbsp;&nbsp;\"footer footer footer\";<br>}</div></div><div class=\"example-card\"><div class=\"example-title\">4. Responsive Areas</div><div class=\"code-block\">.container {<br>&nbsp;&nbsp;grid-template-areas:<br>&nbsp;&nbsp;&nbsp;&nbsp;\"header\"<br>&nbsp;&nbsp;&nbsp;&nbsp;\"main\"<br>&nbsp;&nbsp;&nbsp;&nbsp;\"footer\";<br>}<br><br>@media (min-width: 768px) {<br>&nbsp;&nbsp;.container {<br>&nbsp;&nbsp;&nbsp;&nbsp;grid-template-areas:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"header header\"<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"sidebar main\"<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"footer footer\";<br>&nbsp;&nbsp;}<br>}</div></div></div></div><div class=\"demo-section\"><div class=\"demo-title\">Grid Template Areas Rules</div><div class=\"example-section\"><div class=\"example-title\">Area Naming Rules:</div><ul><li>Use single quotes for each row</li><li>Each row must have same number of areas</li><li>Use dots (.) for empty areas</li><li>Use same name for spanning areas</li></ul><div class=\"example-title\">Area Values:</div><ul><li><code>header</code> - Named area</li><li><code>main</code> - Named area</li><li><code>.</code> - Empty area</li><li><code>sidebar</code> - Named area</li><li><code>footer</code> - Named area</li></ul></div></div><div class=\"demo-section\"><div class=\"demo-title\">Complete Grid Template Areas Example</div><div class=\"code-block\">.container {<br>&nbsp;&nbsp;display: grid;<br>&nbsp;&nbsp;grid-template-areas:<br>&nbsp;&nbsp;&nbsp;&nbsp;\"header header header\"<br>&nbsp;&nbsp;&nbsp;&nbsp;\"sidebar main main\"<br>&nbsp;&nbsp;&nbsp;&nbsp;\"footer footer footer\";<br>&nbsp;&nbsp;grid-template-columns: 1fr 2fr 1fr;<br>&nbsp;&nbsp;grid-template-rows: auto 1fr auto;<br>&nbsp;&nbsp;gap: 20px;<br>&nbsp;&nbsp;height: 100vh;<br>}<br><br>.header { grid-area: header; }<br>.sidebar { grid-area: sidebar; }<br>.main { grid-area: main; }<br>.footer { grid-area: footer; }</div></div></div><script>function updateLayout(){const container=document.getElementById('gridContainer');const type=document.getElementById('layoutType').value;switch(type){case 'basic':container.style.gridTemplateAreas='\"header header header\" \"sidebar main main\" \"footer footer footer\"';container.style.gridTemplateColumns='1fr 2fr 1fr';container.style.gridTemplateRows='auto 1fr auto';break;case 'complex':container.style.gridTemplateAreas='\"nav nav nav nav\" \"sidebar main main aside\" \"sidebar main main aside\" \"footer footer footer footer\"';container.style.gridTemplateColumns='1fr 2fr 2fr 1fr';container.style.gridTemplateRows='auto 1fr 1fr auto';break;case 'empty':container.style.gridTemplateAreas='\"header header header\" \". main main\" \"footer footer footer\"';container.style.gridTemplateColumns='1fr 2fr 1fr';container.style.gridTemplateRows='auto 1fr auto';break;case 'responsive':container.style.gridTemplateAreas='\"header\" \"main\" \"footer\"';container.style.gridTemplateColumns='1fr';container.style.gridTemplateRows='auto 1fr auto';break;}}</script></body></html>"
  },
  {
    "question": "Can you give elements both class and id?",
    "answer": "**Yes! Elements can have both class and id:**\n\n**HTML Example:**\n```html\n<div id=\"unique-element\" class=\"container primary\">\n    <h1 id=\"main-title\" class=\"heading large\">Title</h1>\n    <p id=\"intro-text\" class=\"text description\">Content</p>\n</div>\n```\n\n**CSS Targeting:**\n```css\n/* Target by ID */\n#unique-element {\n    background: blue;\n}\n\n/* Target by Class */\n.container {\n    padding: 20px;\n}\n\n/* Target by both ID and Class */\n#unique-element.container {\n    border: 2px solid red;\n}\n```\n\n**Key Differences:**\n\n**ID:**\n- **Unique:** Only one element per page\n- **Specificity:** Higher specificity (100)\n- **JavaScript:** `document.getElementById()`\n- **CSS:** `#id-name`\n- **Use:** Unique elements (header, main, navigation)\n\n**Class:**\n- **Reusable:** Multiple elements can have same class\n- **Specificity:** Lower specificity (10)\n- **JavaScript:** `document.getElementsByClassName()`\n- **CSS:** `.class-name`\n- **Use:** Reusable styles (buttons, cards, text)\n\n**Multiple Classes:**\n```html\n<div class=\"container primary large\">Content</div>\n```\n\n**CSS Specificity Order:**\n1. Inline styles (1000)\n2. IDs (100)\n3. Classes (10)\n4. Elements (1)\n\n**Best Practices:**\n- Use IDs for unique elements\n- Use classes for reusable styles\n- Combine both for specific targeting\n- Keep class names semantic\n- Use descriptive ID names",
    "type": "html",
    "tags": ["html", "css", "id", "class", "selectors"],
    "code": "<!DOCTYPE html><html><head><title>ID vs Class in HTML</title><style>body{font-family:Arial,sans-serif;margin:20px;background:#f8f9fa}.container{max-width:1000px;margin:0 auto}.demo-section{background:white;padding:25px;margin:20px 0;border-radius:10px;box-shadow:0 2px 5px rgba(0,0,0,0.1)}.demo-title{color:#2c3e50;font-size:20px;font-weight:bold;margin-bottom:15px}.code-block{background:#2c3e50;color:#ecf0f1;padding:15px;border-radius:5px;font-family:monospace;margin:15px 0;overflow-x:auto}.comparison-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(300px,1fr));gap:20px;margin:20px 0}.comparison-card{background:#f8f9fa;padding:15px;border-radius:5px;border-left:4px solid #007bff}.comparison-title{font-weight:bold;color:#2c3e50;margin-bottom:10px}.example-section{background:#e8f5e8;padding:20px;border-radius:5px;margin:20px 0;border-left:4px solid #27ae60}.example-title{font-weight:bold;color:#2c3e50;margin-bottom:15px}.demo-element{background:#ff6b6b;color:white;padding:15px;border-radius:5px;margin:10px 0;text-align:center;font-weight:bold}.demo-element.container{background:#4ecdc4}.demo-element.primary{background:#45b7d1}.demo-element.large{background:#96ceb4}.demo-element#unique-demo{background:#feca57;border:3px solid #ff6b6b}</style></head><body><div class=\"container\"><h1 style=\"text-align:center;color:#2c3e50\">🏷️ ID vs Class in HTML</h1><div class=\"demo-section\"><div class=\"demo-title\">Elements with Both ID and Class</div><div class=\"demo-element container primary large\" id=\"unique-demo\">This element has both ID and multiple classes!</div><div class=\"demo-element container primary\">This element has only classes</div><div class=\"demo-element large\">This element has only one class</div></div><div class=\"demo-section\"><div class=\"demo-title\">HTML Example</div><div class=\"code-block\">&lt;div id=\"unique-element\" class=\"container primary\"&gt;<br>&nbsp;&nbsp;&lt;h1 id=\"main-title\" class=\"heading large\"&gt;Title&lt;/h1&gt;<br>&nbsp;&nbsp;&lt;p id=\"intro-text\" class=\"text description\"&gt;Content&lt;/p&gt;<br>&lt;/div&gt;</div></div><div class=\"demo-section\"><div class=\"demo-title\">CSS Targeting</div><div class=\"code-block\">/* Target by ID */<br>#unique-element {<br>&nbsp;&nbsp;background: blue;<br>}<br><br>/* Target by Class */<br>.container {<br>&nbsp;&nbsp;padding: 20px;<br>}<br><br>/* Target by both ID and Class */<br>#unique-element.container {<br>&nbsp;&nbsp;border: 2px solid red;<br>}</div></div><div class=\"demo-section\"><div class=\"demo-title\">ID vs Class Comparison</div><div class=\"comparison-grid\"><div class=\"comparison-card\"><div class=\"comparison-title\">ID</div><ul><li><strong>Unique:</strong> Only one element per page</li><li><strong>Specificity:</strong> Higher specificity (100)</li><li><strong>JavaScript:</strong> document.getElementById()</li><li><strong>CSS:</strong> #id-name</li><li><strong>Use:</strong> Unique elements (header, main, navigation)</li></ul></div><div class=\"comparison-card\"><div class=\"comparison-title\">Class</div><ul><li><strong>Reusable:</strong> Multiple elements can have same class</li><li><strong>Specificity:</strong> Lower specificity (10)</li><li><strong>JavaScript:</strong> document.getElementsByClassName()</li><li><strong>CSS:</strong> .class-name</li><li><strong>Use:</strong> Reusable styles (buttons, cards, text)</li></ul></div></div></div><div class=\"demo-section\"><div class=\"demo-title\">CSS Specificity Order</div><div class=\"example-section\"><div class=\"example-title\">Specificity Values:</div><ol><li><strong>Inline styles:</strong> 1000 points</li><li><strong>IDs:</strong> 100 points</li><li><strong>Classes:</strong> 10 points</li><li><strong>Elements:</strong> 1 point</li></ol><div class=\"example-title\">Example:</div><div class=\"code-block\">/* Specificity: 1 */<br>div { color: black; }<br><br>/* Specificity: 10 */<br>.container { color: blue; }<br><br>/* Specificity: 100 */<br>#unique { color: red; }<br><br>/* Specificity: 111 */<br>#unique.container div { color: green; }</div></div></div><div class=\"demo-section\"><div class=\"demo-title\">Best Practices</div><div class=\"example-section\"><div class=\"example-title\">When to Use ID:</div><ul><li>Unique elements (header, main, navigation)</li><li>JavaScript targeting</li><li>Anchor links</li><li>Form labels</li></ul><div class=\"example-title\">When to Use Class:</div><ul><li>Reusable styles (buttons, cards, text)</li><li>Component styling</li><li>State changes (active, disabled)</li><li>Layout utilities</li></ul><div class=\"example-title\">Multiple Classes:</div><div class=\"code-block\">&lt;div class=\"container primary large\"&gt;Content&lt;/div&gt;</div></div></div></div></div></body></html>"
  },
  {
    "question": "Difference between em, px and fr",
    "answer": "**CSS Units Comparison: em, px, and fr:**\n\n**1. px (Pixels):**\n- **Definition:** Absolute unit, fixed size\n- **Behavior:** Always same size regardless of context\n- **Use:** Fixed measurements, borders, precise positioning\n- **Example:** `width: 200px`\n- **Responsive:** No, doesn't scale with font size\n\n**2. em (Relative to parent):**\n- **Definition:** Relative unit, based on parent's font-size\n- **Behavior:** Scales with parent's font-size\n- **Use:** Typography, spacing, scalable layouts\n- **Example:** `font-size: 1.5em` (1.5 × parent font-size)\n- **Responsive:** Yes, scales with font size\n\n**3. fr (Fractional unit):**\n- **Definition:** Fractional unit for CSS Grid\n- **Behavior:** Takes available space in grid container\n- **Use:** Grid layouts, flexible sizing\n- **Example:** `grid-template-columns: 1fr 2fr 1fr`\n- **Responsive:** Yes, flexible grid sizing\n\n**Complete Units Comparison:**\n\n**px (Pixels):**\n- `10px` - Fixed 10 pixels\n- `100px` - Fixed 100 pixels\n- `0px` - No size\n- `1px` - Minimum visible size\n\n**em (Relative to parent):**\n- `1em` - Same as parent font-size\n- `1.5em` - 1.5 × parent font-size\n- `0.5em` - Half of parent font-size\n- `2em` - Double parent font-size\n\n**fr (Fractional):**\n- `1fr` - One fraction of available space\n- `2fr` - Two fractions of available space\n- `0.5fr` - Half fraction of available space\n- `auto` - Size based on content\n\n**Other Related Units:**\n- `rem` - Relative to root font-size\n- `%` - Percentage of parent element\n- `vw/vh` - Viewport width/height\n- `ch` - Width of character \"0\"\n- `ex` - Height of lowercase \"x\"",
    "type": "css",
    "tags": ["css", "units", "px", "em", "fr"],
    "code": "<!DOCTYPE html><html><head><title>CSS Units: px, em, fr</title><style>body{font-family:Arial,sans-serif;margin:20px;background:#f8f9fa}.container{max-width:1000px;margin:0 auto}.demo-section{background:white;padding:25px;margin:20px 0;border-radius:10px;box-shadow:0 2px 5px rgba(0,0,0,0.1)}.demo-title{color:#2c3e50;font-size:20px;font-weight:bold;margin-bottom:15px}.code-block{background:#2c3e50;color:#ecf0f1;padding:15px;border-radius:5px;font-family:monospace;margin:15px 0;overflow-x:auto}.comparison-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(300px,1fr));gap:20px;margin:20px 0}.comparison-card{background:#f8f9fa;padding:15px;border-radius:5px;border-left:4px solid #007bff}.comparison-title{font-weight:bold;color:#2c3e50;margin-bottom:10px}.demo-container{background:#e3f2fd;padding:20px;border-radius:8px;margin:15px 0;border:2px solid #2196f3}.demo-element{background:#ff6b6b;color:white;padding:10px;border-radius:5px;margin:5px 0;text-align:center;font-weight:bold}.px-demo{width:200px;background:#4ecdc4}.em-demo{width:10em;background:#45b7d1}.fr-demo{background:#96ceb4}.grid-demo{display:grid;grid-template-columns:1fr 2fr 1fr;gap:10px;margin:10px 0}.grid-item{background:#feca57;color:white;padding:15px;border-radius:5px;text-align:center;font-weight:bold}.controls{background:#fff3cd;padding:15px;border-radius:5px;margin:15px 0;border-left:4px solid #ffc107}.control-group{margin:10px 0}.control-group label{display:inline-block;width:150px;font-weight:bold}.control-group select{padding:5px;border-radius:3px;border:1px solid #ccc}.example-section{background:#e8f5e8;padding:20px;border-radius:5px;margin:20px 0;border-left:4px solid #27ae60}.example-title{font-weight:bold;color:#2c3e50;margin-bottom:15px}</style></head><body><div class=\"container\"><h1 style=\"text-align:center;color:#2c3e50\">📏 CSS Units: px, em, fr</h1><div class=\"demo-section\"><div class=\"demo-title\">Interactive Units Demo</div><div class=\"controls\"><div class=\"control-group\"><label>Font Size:</label><select id=\"fontSize\" onchange=\"updateUnits()\"><option value=\"16px\">16px (Default)</option><option value=\"20px\">20px (Large)</option><option value=\"12px\">12px (Small)</option></select></div></div><div class=\"demo-container\" id=\"demoContainer\"><div class=\"demo-element px-demo\">px: 200px (Fixed)</div><div class=\"demo-element em-demo\">em: 10em (Relative)</div><div class=\"grid-demo\"><div class=\"grid-item fr-demo\">1fr</div><div class=\"grid-item fr-demo\">2fr</div><div class=\"grid-item fr-demo\">1fr</div></div></div></div><div class=\"demo-section\"><div class=\"demo-title\">Units Comparison</div><div class=\"comparison-grid\"><div class=\"comparison-card\"><div class=\"comparison-title\">px (Pixels)</div><ul><li><strong>Type:</strong> Absolute unit</li><li><strong>Behavior:</strong> Fixed size</li><li><strong>Use:</strong> Borders, precise positioning</li><li><strong>Responsive:</strong> No</li><li><strong>Example:</strong> width: 200px</li></ul><div class=\"code-block\">.element {<br>&nbsp;&nbsp;width: 200px;<br>&nbsp;&nbsp;height: 100px;<br>&nbsp;&nbsp;border: 1px solid black;<br>}</div></div><div class=\"comparison-card\"><div class=\"comparison-title\">em (Relative to parent)</div><ul><li><strong>Type:</strong> Relative unit</li><li><strong>Behavior:</strong> Scales with parent</li><li><strong>Use:</strong> Typography, spacing</li><li><strong>Responsive:</strong> Yes</li><li><strong>Example:</strong> font-size: 1.5em</li></ul><div class=\"code-block\">.element {<br>&nbsp;&nbsp;font-size: 1.5em;<br>&nbsp;&nbsp;margin: 2em;<br>&nbsp;&nbsp;padding: 0.5em;<br>}</div></div><div class=\"comparison-card\"><div class=\"comparison-title\">fr (Fractional)</div><ul><li><strong>Type:</strong> Grid unit</li><li><strong>Behavior:</strong> Takes available space</li><li><strong>Use:</strong> Grid layouts</li><li><strong>Responsive:</strong> Yes</li><li><strong>Example:</strong> 1fr 2fr 1fr</li></ul><div class=\"code-block\">.grid {<br>&nbsp;&nbsp;display: grid;<br>&nbsp;&nbsp;grid-template-columns: 1fr 2fr 1fr;<br>&nbsp;&nbsp;gap: 1rem;<br>}</div></div></div></div><div class=\"demo-section\"><div class=\"demo-title\">Complete Units Reference</div><div class=\"example-section\"><div class=\"example-title\">px Values:</div><div class=\"code-block\">width: 10px;   /* Fixed 10 pixels */<br>width: 100px;  /* Fixed 100 pixels */<br>width: 0px;    /* No size */<br>width: 1px;   /* Minimum visible size */</div><div class=\"example-title\">em Values:</div><div class=\"code-block\">font-size: 1em;   /* Same as parent */<br>font-size: 1.5em; /* 1.5 × parent */<br>font-size: 0.5em; /* Half of parent */<br>font-size: 2em;   /* Double parent */</div><div class=\"example-title\">fr Values:</div><div class=\"code-block\">grid-template-columns: 1fr;    /* One fraction */<br>grid-template-columns: 2fr;    /* Two fractions */<br>grid-template-columns: 0.5fr;  /* Half fraction */<br>grid-template-columns: auto;  /* Content-based */</div></div></div><div class=\"demo-section\"><div class=\"demo-title\">Other CSS Units</div><div class=\"code-block\">/* Relative Units */<br>font-size: 1rem;    /* Root font-size */<br>width: 50%;         /* 50% of parent */<br>width: 100vw;       /* 100% viewport width */<br>height: 100vh;      /* 100% viewport height */<br><br>/* Typography Units */<br>width: 20ch;        /* 20 characters wide */<br>height: 2ex;        /* 2 × height of 'x' */<br><br>/* Modern Units */<br>width: 100dvw;      /* Dynamic viewport width */<br>height: 100dvh;     /* Dynamic viewport height */</div></div></div><script>function updateUnits(){const container=document.getElementById('demoContainer');const fontSize=document.getElementById('fontSize').value;container.style.fontSize=fontSize;}</script></body></html>"
  },
  {
    "question": "How to see hidden files in CMD and PowerShell?",
    "answer": "**PowerShell:**\n```powershell\n# Show all files including hidden\nGet-ChildItem -Force\n\n# Or use alias\nls -Force\n```\n\n**CMD (Command Prompt):**\n```cmd\n# Show all files\nDir /a\n\n# Show all files with details\nDir /a /q\n\n# Show all files recursively\nDir /a /s\n\n# /a = all files (hidden, system, etc.)\n# /q = show ownership information\n# /s = include subdirectories recursively\n```\n\n**Explanation:**\n- Hidden files start with a dot (.) or have hidden attribute\n- `/a` shows all file attributes\n- `/q` adds ownership details\n- `/s` searches subdirectories"
  },
  {
    "question": "How do you apply a single commit from another branch to main without merging the whole branch?",
    "answer": "**Git Cherry-Pick:**\n\n**What it does:**\n- Applies a specific commit from one branch to another\n- Copies the commit without merging the entire branch\n- Useful for applying hotfixes or specific features\n\n**Command:**\n```bash\ngit cherry-pick <commit-hash>\n```\n\n**Steps:**\n1. Switch to target branch (main)\n2. Find the commit hash you want to apply\n3. Run cherry-pick command\n4. Resolve any conflicts if they occur\n\n**Example:**\n```bash\n# Switch to main branch\ngit checkout main\n\n# Apply specific commit\ngit cherry-pick abc1234\n\n# If conflicts occur, resolve them\ngit add .\ngit cherry-pick --continue\n```\n\n**Use Cases:**\n- Apply hotfixes to production\n- Move specific features between branches\n- Extract commits from feature branches\n- Apply bug fixes without full merge\n\n**Benefits:**\n- Selective commit application\n- Clean commit history\n- No unwanted changes\n- Precise control over what gets merged"
  },
  { 
     "question": "How to go back to a previous branch or commit in Git?",
    "answer": "**Git: Going Back to Previous Commits**\n\n**1. Just go back and look at a previous commit (no history change):**\n```bash\ngit checkout <commit-hash>\n```\n- Use this if you just want your files to match that commit temporarily\n- Creates a \"detached HEAD\" state\n- No permanent changes to your branch history\n- Files will match the state at that commit\n\n**2. Permanently move your branch back to an older commit (history rewrite):**\n```bash\ngit reset --hard <commit-hash>\n```\n- Permanently moves your current branch back to the specified commit\n- **WARNING:** This rewrites history and can lose commits\n- All commits after the specified commit will be lost\n- Use with caution, especially on shared branches\n\n**Additional Options:**\n```bash\n# Soft reset (keeps changes in staging area)\ngit reset --soft <commit-hash>\n\n# Mixed reset (keeps changes in working directory)\ngit reset --mixed <commit-hash>\n\n# Go back to previous commit\ngit reset --hard HEAD~1\n\n# Go back 3 commits\ngit reset --hard HEAD~3\n```\n\n**Best Practices:**\n- Use `git checkout` for temporary inspection\n- Use `git reset --hard` only when you're sure about losing commits\n- Create a backup branch before using `git reset --hard`\n- Never use `git reset --hard` on shared/public branches",
    "type": "git",
    "tags": ["git", "version-control", "commits", "branches"],
    "code": "// Example workflow:\n// 1. Check commit history\ngit log --oneline\n\n// 2. Go back temporarily to inspect\ngit checkout abc1234\n\n// 3. Return to latest commit\ngit checkout main\n\n// 4. Permanently reset (DANGEROUS!)\ngit reset --hard abc1234\n\n// 5. Create backup before reset\ngit branch backup-branch\ngit reset --hard abc1234"
  },
  {
    "question": "How to change a section or div from rectangle to square?",
    "answer": "**Add width and height:**\n\n```css\n.square {\n    width: 200px;\n    height: 200px;\n}\n```\n\n**Key points:**\n- Set both `width` and `height` to the same value\n- Use any unit: `px`, `em`, `rem`, `%`, `vh`, `vw`\n- The element will become a perfect square\n\n**Example:**\n```css\n/* Rectangle */\n.rectangle {\n    width: 300px;\n    height: 100px;\n}\n\n/* Square */\n.square {\n    width: 200px;\n    height: 200px;\n}\n```",
    "type": "css",
    "tags": ["css", "layout", "shapes"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Rectangle to Square</title>\n    <style>\n        .container {\n            display: flex;\n            gap: 20px;\n            padding: 20px;\n        }\n        \n        .rectangle {\n            width: 300px;\n            height: 100px;\n            background-color: #ff6b6b;\n            border-radius: 8px;\n        }\n        \n        .square {\n            width: 200px;\n            height: 200px;\n            background-color: #4ecdc4;\n            border-radius: 8px;\n        }\n        \n        .label {\n            text-align: center;\n            margin-top: 10px;\n            font-weight: bold;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div>\n            <div class=\"rectangle\"></div>\n            <div class=\"label\">Rectangle (300x100)</div>\n        </div>\n        <div>\n            <div class=\"square\"></div>\n            <div class=\"label\">Square (200x200)</div>\n        </div>\n    </div>\n</body>\n</html>"
  },
  {
    "question": "How to make text bold?",
    "answer": "**Use `font-weight` property:**\n\n```css\n.bold-text {\n    font-weight: bold;\n}\n```\n\n**Font-weight values:**\n- `normal` - Regular text (default)\n- `bold` - Bold text\n- `bolder` - Bolder than parent\n- `lighter` - Lighter than parent\n- `100-900` - Numeric values (100=lightest, 900=boldest)\n\n**Examples:**\n```css\n.light-text { font-weight: 300; }\n.normal-text { font-weight: normal; }\n.bold-text { font-weight: bold; }\n.heavy-text { font-weight: 900; }\n```\n\n**HTML alternative:**\n```html\n<b>Bold text</b>\n<strong>Strong text</strong>\n```",
    "type": "css",
    "tags": ["css", "typography", "font"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Font Weight Examples</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            background-color: #f8f9fa;\n        }\n        \n        .example {\n            margin: 15px 0;\n            padding: 15px;\n            background: white;\n            border-radius: 8px;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n        }\n        \n        .light { font-weight: 300; }\n        .normal { font-weight: normal; }\n        .bold { font-weight: bold; }\n        .heavy { font-weight: 900; }\n        \n        .label {\n            color: #666;\n            font-size: 14px;\n            margin-bottom: 5px;\n        }\n    </style>\n</head>\n<body>\n    <h1>Font Weight Examples</h1>\n    \n    <div class=\"example\">\n        <div class=\"label\">font-weight: 300 (light)</div>\n        <div class=\"light\">This is light text</div>\n    </div>\n    \n    <div class=\"example\">\n        <div class=\"label\">font-weight: normal</div>\n        <div class=\"normal\">This is normal text</div>\n    </div>\n    \n    <div class=\"example\">\n        <div class=\"label\">font-weight: bold</div>\n        <div class=\"bold\">This is bold text</div>\n    </div>\n    \n    <div class=\"example\">\n        <div class=\"label\">font-weight: 900 (heavy)</div>\n        <div class=\"heavy\">This is heavy text</div>\n    </div>\n</body>\n</html>"
  },
  {
    "question": "How to make single and multi-line text align center?",
    "answer": "**Single Line Text:**\n```css\n.single-line {\n    line-height: 50px;  /* Same as height */\n    text-align: center;\n    height: 50px;\n}\n```\n\n**Multi-line Text:**\n```css\n.multi-line {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    text-align: center;\n    height: 100px;\n}\n```\n\n**Alternative for multi-line:**\n```css\n.multi-line-alt {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 100px;\n}\n```\n\n**Key differences:**\n- **Single line:** Use `line-height = height`\n- **Multi-line:** Use `display: flex` with `align-items: center`",
    "type": "css",
    "tags": ["css", "alignment", "text", "flexbox"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Text Alignment</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            background-color: #f8f9fa;\n        }\n        \n        .example {\n            margin: 20px 0;\n            padding: 20px;\n            background: white;\n            border-radius: 8px;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n        }\n        \n        .single-line {\n            line-height: 50px;\n            text-align: center;\n            height: 50px;\n            background-color: #e3f2fd;\n            border: 2px solid #2196f3;\n        }\n        \n        .multi-line {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            text-align: center;\n            height: 100px;\n            background-color: #f3e5f5;\n            border: 2px solid #9c27b0;\n        }\n        \n        .label {\n            color: #666;\n            font-size: 14px;\n            margin-bottom: 10px;\n            font-weight: bold;\n        }\n    </style>\n</head>\n<body>\n    <h1>Text Alignment Examples</h1>\n    \n    <div class=\"example\">\n        <div class=\"label\">Single Line Text (line-height = height)</div>\n        <div class=\"single-line\">This is single line text</div>\n    </div>\n    \n    <div class=\"example\">\n        <div class=\"label\">Multi-line Text (display: flex)</div>\n        <div class=\"multi-line\">This is multi-line text that can wrap to multiple lines and still stay centered</div>\n    </div>\n</body>\n</html>"
  },
  {
    "question": "Can users send data directly to databases?",
    "answer": "**Not exactly** — you can't write `action=\"mongodb\"` directly, because:\n\n**Why it doesn't work:**\n- The `action` must be a URL or file path (something the browser can send a request to)\n- MongoDB is a database, not a web page or file\n- Browsers can't send data directly to a database — only to a server\n\n**How it actually works:**\n```html\n<!-- ❌ This won't work -->\n<form action=\"mongodb://localhost:27017\">\n\n<!-- ✅ This works -->\n<form action=\"/api/save-data\" method=\"POST\">\n    <input name=\"username\" type=\"text\">\n    <button type=\"submit\">Save</button>\n</form>\n```\n\n**The flow:**\n1. **Browser** → sends data to **server** (PHP, Node.js, Python)\n2. **Server** → processes data and talks to **database**\n3. **Database** → stores the data\n4. **Server** → sends response back to **browser**\n\n**Server examples:**\n- PHP file: `action=\"save.php\"`\n- Node.js: `action=\"/api/users\"`\n- Python: `action=\"/submit\"`",
    "type": "web",
    "tags": ["html", "database", "forms", "server"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Form Submission Examples</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            background-color: #f8f9fa;\n        }\n        \n        .example {\n            margin: 20px 0;\n            padding: 20px;\n            background: white;\n            border-radius: 8px;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n        }\n        \n        .wrong {\n            border: 2px solid #f44336;\n            background-color: #ffebee;\n        }\n        \n        .right {\n            border: 2px solid #4caf50;\n            background-color: #e8f5e8;\n        }\n        \n        form {\n            margin: 10px 0;\n        }\n        \n        input, button {\n            padding: 8px;\n            margin: 5px;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n        }\n        \n        button {\n            background-color: #2196f3;\n            color: white;\n            cursor: pointer;\n        }\n    </style>\n</head>\n<body>\n    <h1>Form Submission Examples</h1>\n    \n    <div class=\"example wrong\">\n        <h3>❌ Wrong Way (Won't Work)</h3>\n        <p>Browsers can't send data directly to databases:</p>\n        <form action=\"mongodb://localhost:27017\">\n            <input name=\"username\" placeholder=\"Username\" type=\"text\">\n            <button type=\"submit\">Save to MongoDB</button>\n        </form>\n    </div>\n    \n    <div class=\"example right\">\n        <h3>✅ Right Way (Will Work)</h3>\n        <p>Send data to a server that talks to the database:</p>\n        <form action=\"/api/save-user\" method=\"POST\">\n            <input name=\"username\" placeholder=\"Username\" type=\"text\">\n            <button type=\"submit\">Save User</button>\n        </form>\n    </div>\n    \n    <div class=\"example\">\n        <h3>📋 The Flow:</h3>\n        <ol>\n            <li><strong>Browser</strong> → sends data to <strong>Server</strong></li>\n            <li><strong>Server</strong> → processes data and talks to <strong>Database</strong></li>\n            <li><strong>Database</strong> → stores the data</li>\n            <li><strong>Server</strong> → sends response back to <strong>Browser</strong></li>\n        </ol>\n    </div>\n</body>\n</html>"
  },
  {
    "question": "Explain POST and GET methods",
    "answer": "**GET Method:**\n- Sends data in the URL\n- Example: `https://example.com/search?name=John&age=20`\n- Used for searches, filters, page navigation\n- **Not good for passwords** or private info (visible in URL)\n- Data is visible in browser history\n\n**POST Method:**\n- Sends data hidden inside the request body (not in URL)\n- Used for logins, forms, messages, file uploads\n- **Safer for sensitive data** (not visible in URL)\n- Data is not stored in browser history\n\n**When to use each:**\n\n**Use GET for:**\n- Search queries\n- Filtering data\n- Page navigation\n- Getting information\n\n**Use POST for:**\n- User login\n- Form submissions\n- File uploads\n- Sensitive data\n- Creating/updating data",
    "type": "web",
    "tags": ["http", "methods", "forms", "security"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>GET vs POST Methods</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            background-color: #f8f9fa;\n        }\n        \n        .example {\n            margin: 20px 0;\n            padding: 20px;\n            background: white;\n            border-radius: 8px;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n        }\n        \n        .get-example {\n            border-left: 4px solid #4caf50;\n        }\n        \n        .post-example {\n            border-left: 4px solid #2196f3;\n        }\n        \n        form {\n            margin: 10px 0;\n        }\n        \n        input, button {\n            padding: 8px;\n            margin: 5px;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n        }\n        \n        button {\n            cursor: pointer;\n        }\n        \n        .get-btn {\n            background-color: #4caf50;\n            color: white;\n        }\n        \n        .post-btn {\n            background-color: #2196f3;\n            color: white;\n        }\n        \n        .url-example {\n            background-color: #f5f5f5;\n            padding: 10px;\n            border-radius: 4px;\n            font-family: monospace;\n            margin: 10px 0;\n        }\n    </style>\n</head>\n<body>\n    <h1>GET vs POST Methods</h1>\n    \n    <div class=\"example get-example\">\n        <h3>🔍 GET Method</h3>\n        <p><strong>Data sent in URL:</strong></p>\n        <div class=\"url-example\">https://example.com/search?name=John&age=20</div>\n        \n        <form method=\"GET\" action=\"#\">\n            <input name=\"search\" placeholder=\"Search term\" type=\"text\">\n            <button type=\"submit\" class=\"get-btn\">Search (GET)</button>\n        </form>\n        \n        <p><strong>Use for:</strong> Searches, filters, page navigation</p>\n        <p><strong>⚠️ Not secure:</strong> Data visible in URL</p>\n    </div>\n    \n    <div class=\"example post-example\">\n        <h3>📝 POST Method</h3>\n        <p><strong>Data sent in request body:</strong></p>\n        <div class=\"url-example\">https://example.com/login (data hidden)</div>\n        \n        <form method=\"POST\" action=\"#\">\n            <input name=\"username\" placeholder=\"Username\" type=\"text\">\n            <input name=\"password\" placeholder=\"Password\" type=\"password\">\n            <button type=\"submit\" class=\"post-btn\">Login (POST)</button>\n        </form>\n        \n        <p><strong>Use for:</strong> Logins, forms, sensitive data</p>\n        <p><strong>✅ Secure:</strong> Data not visible in URL</p>\n    </div>\n</body>\n</html>"
  },
  {
    "question": "What are some ways to change the cursor appearance when interacting with elements?",
    "answer": "**Use the `cursor` property:**\n\n```css\n.clickable {\n    cursor: pointer;\n}\n```\n\n**Cursor Types:**\n\n| Cursor Type | What it looks like | When to use |\n|-------------|-------------------|-------------|\n| `default` | Regular arrow | Normal state |\n| `pointer` | Hand icon | Clickable items (buttons, links) |\n| `text` | I-beam (text cursor) | Editable text or input fields |\n| `move` | Four arrows | Dragging or moving things |\n| `wait` | Loading spinner | When something's loading |\n| `not-allowed` | 🚫 symbol | When action isn't allowed |\n| `help` | Question mark | For help or info icons |\n| `crosshair` | + symbol | For precise selection |\n| `zoom-in` | Magnifying glass with + | For zoom functionality |\n\n**Examples:**\n```css\n.button { cursor: pointer; }\n.input { cursor: text; }\n.draggable { cursor: move; }\n.disabled { cursor: not-allowed; }\n```",
    "type": "css",
    "tags": ["css", "cursor", "interaction", "ui"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Cursor Types</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            background-color: #f8f9fa;\n        }\n        \n        .cursor-demo {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n            gap: 15px;\n            margin: 20px 0;\n        }\n        \n        .cursor-item {\n            padding: 20px;\n            background: white;\n            border-radius: 8px;\n            text-align: center;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n            border: 2px solid transparent;\n            transition: border-color 0.3s;\n        }\n        \n        .cursor-item:hover {\n            border-color: #2196f3;\n        }\n        \n        .default { cursor: default; }\n        .pointer { cursor: pointer; }\n        .text { cursor: text; }\n        .move { cursor: move; }\n        .wait { cursor: wait; }\n        .not-allowed { cursor: not-allowed; }\n        .help { cursor: help; }\n        .crosshair { cursor: crosshair; }\n        .zoom-in { cursor: zoom-in; }\n        \n        .label {\n            font-weight: bold;\n            margin-bottom: 10px;\n            color: #333;\n        }\n        \n        .description {\n            font-size: 12px;\n            color: #666;\n        }\n    </style>\n</head>\n<body>\n    <h1>CSS Cursor Types</h1>\n    <p>Hover over each element to see different cursor types:</p>\n    \n    <div class=\"cursor-demo\">\n        <div class=\"cursor-item default\">\n            <div class=\"label\">default</div>\n            <div class=\"description\">Regular arrow</div>\n        </div>\n        \n        <div class=\"cursor-item pointer\">\n            <div class=\"label\">pointer</div>\n            <div class=\"description\">Hand icon (clickable)</div>\n        </div>\n        \n        <div class=\"cursor-item text\">\n            <div class=\"label\">text</div>\n            <div class=\"description\">I-beam (editable)</div>\n        </div>\n        \n        <div class=\"cursor-item move\">\n            <div class=\"label\">move</div>\n            <div class=\"description\">Four arrows (draggable)</div>\n        </div>\n        \n        <div class=\"cursor-item wait\">\n            <div class=\"label\">wait</div>\n            <div class=\"description\">Loading spinner</div>\n        </div>\n        \n        <div class=\"cursor-item not-allowed\">\n            <div class=\"label\">not-allowed</div>\n            <div class=\"description\">🚫 symbol (disabled)</div>\n        </div>\n        \n        <div class=\"cursor-item help\">\n            <div class=\"label\">help</div>\n            <div class=\"description\">Question mark</div>\n        </div>\n        \n        <div class=\"cursor-item crosshair\">\n            <div class=\"label\">crosshair</div>\n            <div class=\"description\">+ symbol (precise)</div>\n        </div>\n        \n        <div class=\"cursor-item zoom-in\">\n            <div class=\"label\">zoom-in</div>\n            <div class=\"description\">Magnifying glass</div>\n        </div>\n    </div>\n</body>\n</html>"
  },
  {
    "question": "What is a container?",
    "answer": "**✅ A container is an HTML element (like a `<div>`) that holds other elements inside it.**\n\n**Purpose:**\n- Groups related elements together\n- Provides structure and organization\n- Makes styling easier\n- Controls layout and positioning\n\n**Common container elements:**\n```html\n<div>          <!-- Generic container -->\n<section>      <!-- Semantic container for content sections -->\n<article>       <!-- Container for articles/blog posts -->\n<header>        <!-- Container for page header -->\n<footer>        <!-- Container for page footer -->\n<nav>           <!-- Container for navigation -->\n<main>          <!-- Container for main content -->\n<aside>         <!-- Container for sidebar content -->\n```\n\n**Example:**\n```html\n<div class=\"card-container\">\n    <h2>Card Title</h2>\n    <p>Card content goes here</p>\n    <button>Click me</button>\n</div>\n```\n\n**CSS styling:**\n```css\n.card-container {\n    border: 1px solid #ccc;\n    padding: 20px;\n    margin: 10px;\n    border-radius: 8px;\n}\n```",
    "type": "html",
    "tags": ["html", "container", "structure", "layout"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>HTML Containers</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            background-color: #f8f9fa;\n        }\n        \n        .container {\n            max-width: 1200px;\n            margin: 0 auto;\n            padding: 20px;\n        }\n        \n        .card-container {\n            border: 2px solid #e0e0e0;\n            padding: 20px;\n            margin: 15px 0;\n            border-radius: 8px;\n            background: white;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n        }\n        \n        .section-container {\n            background-color: #e3f2fd;\n            padding: 20px;\n            margin: 15px 0;\n            border-radius: 8px;\n            border-left: 4px solid #2196f3;\n        }\n        \n        .article-container {\n            background-color: #f3e5f5;\n            padding: 20px;\n            margin: 15px 0;\n            border-radius: 8px;\n            border-left: 4px solid #9c27b0;\n        }\n        \n        .nav-container {\n            background-color: #e8f5e8;\n            padding: 15px;\n            margin: 15px 0;\n            border-radius: 8px;\n            border-left: 4px solid #4caf50;\n        }\n        \n        .nav-container a {\n            margin-right: 20px;\n            text-decoration: none;\n            color: #333;\n            font-weight: bold;\n        }\n        \n        .nav-container a:hover {\n            color: #2196f3;\n        }\n        \n        h1, h2 {\n            color: #333;\n        }\n        \n        p {\n            line-height: 1.6;\n            color: #666;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>HTML Container Examples</h1>\n        \n        <nav class=\"nav-container\">\n            <h2>Navigation Container</h2>\n            <a href=\"#\">Home</a>\n            <a href=\"#\">About</a>\n            <a href=\"#\">Contact</a>\n        </nav>\n        \n        <section class=\"section-container\">\n            <h2>Section Container</h2>\n            <p>This is a semantic container for grouping related content together.</p>\n        </section>\n        \n        <article class=\"article-container\">\n            <h2>Article Container</h2>\n            <p>This container holds article content like blog posts or news articles.</p>\n        </article>\n        \n        <div class=\"card-container\">\n            <h2>Generic Div Container</h2>\n            <p>This is a generic container that groups elements together for styling and layout purposes.</p>\n            <button style=\"background-color: #2196f3; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer;\">Click me</button>\n        </div>\n    </div>\n</body>\n</html>"
  },
  {
    "question": "Why do we separate multiple class names in HTML with spaces instead of commas?",
    "answer": "**HTML Class Names - Space Separation**\n\n**Why spaces, not commas:**\nBecause in HTML, the `class` attribute is defined as a space-separated list of class names, not comma-separated. Each word is treated as a separate class.\n\n**What happens with commas:**\nIf you use commas, the browser will treat them as part of the class name — and your CSS selectors won't match.\n\n**Correct way:**\n```html\n<div class=\"card highlight large\"></div>\n```\n\n**Wrong way:**\n```html\n<div class=\"card, highlight, large\"></div>\n```\n\n**Important note:**\nIn contrast, CSS uses commas to separate multiple selectors, meaning \"apply this rule to either selector.\"\n\n**CSS example:**\n```css\n.card, .highlight, .large {\n    /* This applies to elements with ANY of these classes */\n}\n```",
    "type": "html",
    "tags": ["html", "css", "classes", "syntax"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <style>\n        /* CSS uses commas to separate selectors */\n        .card, .highlight, .large {\n            border: 2px solid blue;\n        }\n    </style>\n</head>\n<body>\n    <!-- HTML uses spaces to separate class names -->\n    <div class=\"card highlight large\">Correct way</div>\n    \n    <!-- This is WRONG - commas become part of the class name -->\n    <div class=\"card, highlight, large\">Wrong way</div>\n</body>\n</html>"
  },
  {
    "question": "Can you give an element multiple classes or IDs in HTML?",
    "answer": "**Multiple Classes vs Multiple IDs**\n\n**Multiple classes:**\n✅ **YES** - You can give an element multiple classes (separated by spaces)\n\n**Multiple IDs:**\n❌ **NO** - You can only give one ID per element\n\n**Why:**\n- IDs must be unique in a page\n- Classes can be reused and combined\n\n**Example:**\n```html\n<div id=\"main\" class=\"card highlight large\"></div>\n```\n\n**Key rules:**\n- ✅ Multiple classes → OK\n- ✅ Same class on multiple elements → OK\n- ❌ Multiple IDs on one element → Not allowed\n- ❌ Same ID on multiple elements → Not allowed",
    "type": "html",
    "tags": ["html", "classes", "ids", "attributes"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <style>\n        .card { padding: 20px; }\n        .highlight { background: yellow; }\n        .large { font-size: 24px; }\n        #main { border: 3px solid red; }\n    </style>\n</head>\n<body>\n    <!-- ✅ CORRECT: Multiple classes, one ID -->\n    <div id=\"main\" class=\"card highlight large\">\n        This element has 1 ID and 3 classes\n    </div>\n    \n    <!-- ✅ CORRECT: Different ID, multiple classes -->\n    <div id=\"sidebar\" class=\"card highlight\">\n        This element has 1 ID and 2 classes\n    </div>\n    \n    <!-- ❌ WRONG: Two IDs (not allowed) -->\n    <!-- <div id=\"main\" id=\"sidebar\">Wrong!</div> -->\n</body>\n</html>"
  },
  {
    "question": "How do you write comments in JavaScript?",
    "answer": "**JavaScript Comments**\n\n**1. Single-line comment:**\n```javascript\n// This is a single-line comment\n```\n\n**2. Multi-line comment:**\n```javascript\n/* This is a\n   multi-line\n   comment */\n```\n\n**When to use comments:**\n- Explain complex code\n- Temporarily disable code\n- Add notes for yourself or other developers\n- Document functions and logic\n\n**Best practices:**\n- Use `//` for short, single-line comments\n- Use `/* */` for longer explanations or multiple lines\n- Don't over-comment obvious code\n- Keep comments up to date with code changes",
    "type": "javascript",
    "tags": ["javascript", "comments", "syntax"],
    "code": "// Single-line comment example\nvar name = \"John\"; // You can also put comments at the end of a line\n\n/* Multi-line comment example\n   This can span multiple lines\n   and is useful for longer explanations */\n\nfunction calculateTotal(price, tax) {\n    // Calculate the total with tax\n    var total = price + (price * tax);\n    \n    /* You can also use multi-line comments\n       to temporarily disable code:\n    console.log(\"Debug info\");\n    alert(\"Testing\");\n    */\n    \n    return total; // Return the calculated total\n}\n\nconsole.log(calculateTotal(100, 0.15)); // Output: 115"
  },
  {
    "question": "What are the seven data types in JavaScript?",
    "answer": "**JavaScript Data Types**\n\n| Type | What It's Like | Example |\n|------|----------------|----------|\n| **undefined** | An empty box you haven't used yet | `let a;` |\n| **null** | An empty box on purpose | `let a = null;` |\n| **boolean** | A light switch | `true` / `false` |\n| **number** | A math number | `8`, `3.5` |\n| **string** | Words or text in quotes | `'Hello'` |\n| **BigInt** | A really big number | `9007199254740991n` |\n| **object** | A box holding labeled mini boxes | `{name: 'Luna', age: 7}` |\n\n**Key differences:**\n\n**undefined vs null:**\n- `undefined` = Variable declared but not assigned\n- `null` = Intentionally empty value\n\n**number vs BigInt:**\n- `number` = Regular numbers (up to 2^53 - 1)\n- `BigInt` = Very large integers (add `n` at the end)\n\n**Primitive vs Object:**\n- Primitive: undefined, null, boolean, number, string, BigInt\n- Object: Arrays, objects, functions, etc.",
    "type": "javascript",
    "tags": ["javascript", "data-types", "variables"],
    "code": "// 1. undefined - declared but not assigned\nlet a;\nconsole.log(a); // undefined\n\n// 2. null - intentionally empty\nlet b = null;\nconsole.log(b); // null\n\n// 3. boolean - true or false\nlet c = true;\nlet d = false;\n\n// 4. number - regular numbers\nlet e = 42;\nlet f = 3.14;\n\n// 5. string - text\nlet g = 'Hello';\nlet h = \"World\";\n\n// 6. BigInt - very large integers\nlet i = 9007199254740991n;\n\n// 7. object - collections of data\nlet j = {name: 'Luna', age: 7};\nlet k = [1, 2, 3]; // Arrays are objects too\n\n// Check data types\nconsole.log(typeof a); // undefined\nconsole.log(typeof b); // object (null is a special case)\nconsole.log(typeof c); // boolean\nconsole.log(typeof e); // number\nconsole.log(typeof g); // string\nconsole.log(typeof i); // bigint\nconsole.log(typeof j); // object"
  },
  {
    "question": "What are the three ways to declare a variable in JavaScript?",
    "answer": "**Three Ways to Declare Variables**\n\n**1. var** - The old way\n- Can be re-assigned\n- Can be re-declared\n- Function-scoped (or globally scoped)\n- Can be accessed before declaration (hoisting)\n\n**2. let** - The modern way\n- Can be re-assigned\n- Cannot be re-declared in same scope\n- Block-scoped\n- Better for variables that change\n\n**3. const** - The permanent way\n- Cannot be re-assigned\n- Cannot be re-declared\n- Block-scoped\n- Use for values that shouldn't change\n\n**Simple analogy:**\n- **var** — the old sticker. You can keep sticking it on new toys or moving it to another toy, even find it in far-away rooms! But sometimes it slips off without warning.\n- **let** — the modern sticky note: Just for THIS room (or block). You can change what's written, but you can't put two sticky notes with the same name here.\n- **const** — the permanent label: Once you stick it and write a name, that's it! You can't change it. The toy is always called that name.",
    "type": "javascript",
    "tags": ["javascript", "variables", "var", "let", "const"],
    "code": "// 1. var - old way (function/global scope)\nvar name = \"John\";\nvar name = \"Jane\"; // Can re-declare\nname = \"Bob\"; // Can re-assign\n\n// 2. let - modern way (block scope)\nlet age = 25;\n// let age = 30; // ERROR: Cannot re-declare\nage = 30; // Can re-assign\n\n// 3. const - permanent (block scope)\nconst PI = 3.14159;\n// const PI = 3.14; // ERROR: Cannot re-declare\n// PI = 3.14; // ERROR: Cannot re-assign\n\n// Block scope example\nif (true) {\n    var x = 1; // Available outside block\n    let y = 2; // Only available inside block\n    const z = 3; // Only available inside block\n}\n\nconsole.log(x); // 1 (works)\n// console.log(y); // ERROR: y is not defined\n// console.log(z); // ERROR: z is not defined\n\n// Best practice: Use const by default, let when needed, avoid var"
  },
  {
    "question": "What is the difference between declaring and declaring & assigning a variable?",
    "answer": "**Declaring vs Declaring & Assigning**\n\n**Declaring a variable:**\nTelling JavaScript, \"I want a box, but I don't know what will go inside yet!\"\n```javascript\nvar a; // Making the box (nothing inside yet)\n```\n\n**Declaring AND Assigning:**\nMaking the box AND choosing what goes inside, all at once!\n```javascript\nvar b = 2; // Making the box and putting '2' inside\n```\n\n**What happens:**\n```javascript\nvar a; // declaring only\nvar b = 2; // declaring and assigning\n\nconsole.log(a); // undefined (box exists but empty)\n\na = 7; // Now assigning a value\nb = a; // Copying value from a to b\n\nconsole.log(a); // 7\n```\n\n**Key point:**\nA declared variable without assignment has the value `undefined`.",
    "type": "javascript",
    "tags": ["javascript", "variables", "declaration", "assignment"],
    "code": "// Example 1: Declaring only\nvar a;\nconsole.log(a); // undefined - box exists but empty\n\n// Example 2: Declaring and assigning\nvar b = 2;\nconsole.log(b); // 2 - box has a value\n\n// Example 3: Assigning later\na = 7;\nconsole.log(a); // 7 - now the box has a value\n\n// Example 4: Copying values\nb = a;\nconsole.log(b); // 7 - b now has the same value as a\n\n// With let and const\nlet x; // OK - can declare without assigning\nx = 10; // Then assign later\n\nconst y = 20; // MUST assign when declaring\n// const z; // ERROR: const must be initialized"
  },
  {
    "question": "How do you write in camelCase?",
    "answer": "**CamelCase Naming Convention**\n\n**Format:**\n- Start with lowercase letter\n- Capitalize the first letter of each new word\n- No spaces or underscores\n\n**Example:**\n```javascript\nweWriteItLikeThis\n```\n\n**Common uses:**\n```javascript\nvar firstName = \"John\";\nvar lastName = \"Doe\";\nvar myAge = 25;\nvar userEmailAddress = \"john@example.com\";\n\nfunction calculateTotalPrice() {\n    // code here\n}\n\nfunction getUserData() {\n    // code here\n}\n```\n\n**Why use camelCase:**\n- Standard convention in JavaScript\n- Easy to read without spaces\n- Distinguishes variables from constants (UPPER_CASE)\n- Distinguishes from classes (PascalCase)",
    "type": "javascript",
    "tags": ["javascript", "naming", "conventions", "camelCase"],
    "code": "// ✅ CORRECT: camelCase examples\nvar firstName = \"John\";\nvar lastName = \"Doe\";\nvar myAge = 25;\nvar userEmailAddress = \"john@example.com\";\nvar numberOfStudents = 30;\nvar isLoggedIn = true;\n\nfunction calculateTotalPrice(price, tax) {\n    return price + tax;\n}\n\nfunction getUserData() {\n    return {firstName: \"John\", lastName: \"Doe\"};\n}\n\n// ❌ WRONG: Not camelCase\nvar first_name = \"John\"; // snake_case (Python style)\nvar First_Name = \"John\"; // Mixed\nvar firstname = \"John\"; // All lowercase (hard to read)\nvar FIRSTNAME = \"John\"; // All uppercase (for constants only)\n\n// PascalCase (for classes/constructors)\nclass UserProfile {\n    constructor(name) {\n        this.name = name;\n    }\n}"
  },
  {
    "question": "How to perform addition, subtraction, multiplication, and division in JavaScript?",
    "answer": "**Arithmetic Operators in JavaScript**\n\n**Basic operators:**\n```javascript\n+ // Addition\n- // Subtraction\n* // Multiplication\n/ // Division\n```\n\n**Examples:**\n```javascript\nvar sum = 10 + 5;        // 15 (addition)\nvar difference = 10 - 5; // 5 (subtraction)\nvar product = 10 * 5;    // 50 (multiplication)\nvar quotient = 10 / 5;   // 2 (division)\n```\n\n**Additional operators:**\n```javascript\n% // Modulus (remainder)\n** // Exponentiation (power)\n```\n\n**Examples:**\n```javascript\nvar remainder = 10 % 3;  // 1 (10 divided by 3, remainder 1)\nvar power = 2 ** 3;      // 8 (2 to the power of 3)\n```",
    "type": "javascript",
    "tags": ["javascript", "arithmetic", "operators", "math"],
    "code": "// Basic arithmetic operations\nvar a = 10;\nvar b = 5;\n\n// Addition\nvar sum = a + b;\nconsole.log(\"Addition: \" + a + \" + \" + b + \" = \" + sum); // 15\n\n// Subtraction\nvar difference = a - b;\nconsole.log(\"Subtraction: \" + a + \" - \" + b + \" = \" + difference); // 5\n\n// Multiplication\nvar product = a * b;\nconsole.log(\"Multiplication: \" + a + \" * \" + b + \" = \" + product); // 50\n\n// Division\nvar quotient = a / b;\nconsole.log(\"Division: \" + a + \" / \" + b + \" = \" + quotient); // 2\n\n// Modulus (remainder)\nvar remainder = 10 % 3;\nconsole.log(\"Modulus: 10 % 3 = \" + remainder); // 1\n\n// Exponentiation (power)\nvar power = 2 ** 3;\nconsole.log(\"Exponentiation: 2 ** 3 = \" + power); // 8\n\n// Order of operations (PEMDAS)\nvar result = (10 + 5) * 2 / 3;\nconsole.log(\"Order of operations: (10 + 5) * 2 / 3 = \" + result); // 10"
  },
  {
    "question": "What are the shorthand assignment operators in JavaScript?",
    "answer": "**Shorthand Assignment Operators**\n\n**Basic operators:**\n```javascript\n+= // Add and assign\n-= // Subtract and assign\n*= // Multiply and assign\n/= // Divide and assign\n```\n\n**How they work:**\n```javascript\nx += 5;  // Same as: x = x + 5\nx -= 3;  // Same as: x = x - 3\nx *= 2;  // Same as: x = x * 2\nx /= 4;  // Same as: x = x / 4\n```\n\n**Additional operators:**\n```javascript\n%= // Modulus and assign\n**= // Exponentiation and assign\n```\n\n**Examples:**\n```javascript\nvar num = 10;\nnum %= 3;   // num = num % 3 (remainder)\nnum **= 2;  // num = num ** 2 (power)\n```",
    "type": "javascript",
    "tags": ["javascript", "operators", "assignment", "shorthand"],
    "code": "// Shorthand assignment operators examples\n\n// Addition assignment\nvar x = 10;\nx += 5;  // Same as: x = x + 5\nconsole.log(x); // 15\n\n// Subtraction assignment\nvar y = 20;\ny -= 8;  // Same as: y = y - 8\nconsole.log(y); // 12\n\n// Multiplication assignment\nvar z = 5;\nz *= 3;  // Same as: z = z * 3\nconsole.log(z); // 15\n\n// Division assignment\nvar a = 20;\na /= 4;  // Same as: a = a / 4\nconsole.log(a); // 5\n\n// Modulus assignment\nvar b = 10;\nb %= 3;  // Same as: b = b % 3\nconsole.log(b); // 1\n\n// Exponentiation assignment\nvar c = 2;\nc **= 3;  // Same as: c = c ** 3\nconsole.log(c); // 8\n\n// Practical example\nvar score = 100;\nscore += 50;  // Earned 50 points\nscore -= 20;  // Lost 20 points\nscore *= 2;   // Double points bonus\nconsole.log(\"Final score: \" + score); // 260"
  },
  {
    "question": "How to increment and decrement a number in JavaScript?",
    "answer": "**Increment and Decrement Operators**\n\n**Increment (increase by 1):**\n```javascript\nnumber++;  // Add 1 to number\n++number;  // Add 1 to number\n```\n\n**Decrement (decrease by 1):**\n```javascript\nnumber--;  // Subtract 1 from number\n--number;  // Subtract 1 from number\n```\n\n**Difference between prefix and postfix:**\n\n**Postfix (number++):**\n- Returns the value FIRST\n- Then increments\n\n**Prefix (++number):**\n- Increments FIRST\n- Then returns the new value\n\n**Example:**\n```javascript\nvar a = 5;\nconsole.log(a++); // 5 (returns first, then increments)\nconsole.log(a);   // 6\n\nvar b = 5;\nconsole.log(++b); // 6 (increments first, then returns)\nconsole.log(b);   // 6\n```",
    "type": "javascript",
    "tags": ["javascript", "operators", "increment", "decrement"],
    "code": "// Increment examples\nvar num = 10;\nnum++;  // num is now 11\nconsole.log(num); // 11\n\nnum++;  // num is now 12\nconsole.log(num); // 12\n\n// Decrement examples\nvar count = 5;\ncount--;  // count is now 4\nconsole.log(count); // 4\n\ncount--;  // count is now 3\nconsole.log(count); // 3\n\n// Postfix vs Prefix\nvar a = 5;\nconsole.log(a++); // 5 (returns 5, then increments to 6)\nconsole.log(a);   // 6\n\nvar b = 5;\nconsole.log(++b); // 6 (increments to 6, then returns 6)\nconsole.log(b);   // 6\n\n// Practical example: loop counter\nfor (var i = 0; i < 5; i++) {\n    console.log(\"Loop iteration: \" + i);\n}\n\n// Countdown example\nvar countdown = 10;\nwhile (countdown > 0) {\n    console.log(countdown);\n    countdown--; // Decrease by 1 each time\n}\nconsole.log(\"Blast off!\");"
  },
  {
    "question": "How do you use quotes inside JavaScript strings?",
    "answer": "**Using Quotes Inside Strings**\n\n**Method 1: Escape quotes with backslash (\\\\)**\n```javascript\nvar myStr = \"I am a \\\"double\\\" quoted string\";\n```\n\n**Method 2: Use different quote types**\n```javascript\nvar myStr2 = 'I am a \"double\" quoted string';\nvar myStr3 = \"I am a 'single' quoted string\";\n```\n\n**Method 3: Use template literals (ES6)**\n```javascript\nvar myStr4 = `I can use both \"double\" and 'single' quotes`;\n```\n\n**Common escape characters:**\n```javascript\n\\\" // Double quote\n\\' // Single quote\n\\\\ // Backslash\n\\n // New line\n\\t // Tab\n```",
    "type": "javascript",
    "tags": ["javascript", "strings", "quotes", "escape-characters"],
    "code": "// Method 1: Escape quotes with backslash\nvar str1 = \"She said, \\\"Hello!\\\"\";\nconsole.log(str1); // She said, \"Hello!\"\n\n// Method 2: Mix quote types\nvar str2 = 'He said, \"Goodbye!\"';\nconsole.log(str2); // He said, \"Goodbye!\"\n\nvar str3 = \"It's a beautiful day\";\nconsole.log(str3); // It's a beautiful day\n\n// Method 3: Template literals (ES6)\nvar str4 = `Both \"double\" and 'single' quotes work here`;\nconsole.log(str4);\n\n// Other escape characters\nvar multiLine = \"Line 1\\nLine 2\\nLine 3\";\nconsole.log(multiLine);\n\nvar withTab = \"Name:\\tJohn\";\nconsole.log(withTab);\n\nvar withBackslash = \"C:\\\\Users\\\\Documents\";\nconsole.log(withBackslash); // C:\\Users\\Documents"
  },
  {
    "question": "How to find the length of a string in JavaScript?",
    "answer": "**String Length Property**\n\n**Use the `.length` property:**\n```javascript\nvar lastName = \"Lovelace\";\nvar lastNameLength = lastName.length;\n```\n\n**How it works:**\n- `.length` is a property (not a function)\n- Returns the number of characters in the string\n- Counts all characters including spaces\n- Returns 0 for empty strings\n\n**Examples:**\n```javascript\nvar name = \"John\";\nconsole.log(name.length); // 4\n\nvar sentence = \"Hello World\";\nconsole.log(sentence.length); // 11 (includes space)\n\nvar empty = \"\";\nconsole.log(empty.length); // 0\n```",
    "type": "javascript",
    "tags": ["javascript", "strings", "length", "properties"],
    "code": "// Basic string length\nvar lastName = \"Lovelace\";\nvar lastNameLength = lastName.length;\nconsole.log(lastNameLength); // 8\n\n// Various examples\nvar name = \"John\";\nconsole.log(name.length); // 4\n\nvar sentence = \"Hello World\";\nconsole.log(sentence.length); // 11 (includes space)\n\nvar empty = \"\";\nconsole.log(empty.length); // 0\n\nvar withSpaces = \"   Hello   \";\nconsole.log(withSpaces.length); // 12 (counts all spaces)\n\n// Practical example: password validation\nfunction validatePassword(password) {\n    if (password.length < 8) {\n        return \"Password too short! Must be at least 8 characters.\";\n    } else if (password.length > 20) {\n        return \"Password too long! Maximum 20 characters.\";\n    } else {\n        return \"Password length is valid.\";\n    }\n}\n\nconsole.log(validatePassword(\"abc\")); // Too short\nconsole.log(validatePassword(\"strongpassword123\")); // Valid"
  },
  {
    "question": "What is bracket notation in JavaScript?",
    "answer": "**Bracket Notation for Strings**\n\n**What it is:**\nBracket notation allows you to access individual characters in a string using their index position.\n\n**How it works:**\n```javascript\nvar firstName = \"Jack\";\nvar firstLetter = firstName[0];  // \"J\"\nvar secondLetter = firstName[1]; // \"a\"\n```\n\n**Key points:**\n- Indexing starts at 0 (first character is index 0)\n- Returns the character at that position\n- Returns `undefined` if index doesn't exist\n- Strings are zero-indexed\n\n**Index positions:**\n```\n\"Jack\"\n J a c k\n 0 1 2 3\n```",
    "type": "javascript",
    "tags": ["javascript", "strings", "bracket-notation", "indexing"],
    "code": "// Basic bracket notation\nvar firstName = \"Jack\";\nvar firstLetter = firstName[0];  // \"J\"\nvar secondLetter = firstName[1]; // \"a\"\nvar thirdLetter = firstName[2];  // \"c\"\nvar fourthLetter = firstName[3]; // \"k\"\n\nconsole.log(firstLetter);  // J\nconsole.log(secondLetter); // a\nconsole.log(thirdLetter);  // c\nconsole.log(fourthLetter); // k\n\n// Out of bounds\nconsole.log(firstName[10]); // undefined\n\n// Practical example\nvar name = \"JavaScript\";\nconsole.log(\"First letter: \" + name[0]); // J\nconsole.log(\"Second letter: \" + name[1]); // a\nconsole.log(\"Last letter: \" + name[name.length - 1]); // t\n\n// Get initials\nvar fullName = \"John Doe\";\nvar firstInitial = fullName[0];\nvar lastInitial = fullName[5];\nconsole.log(\"Initials: \" + firstInitial + \".\" + lastInitial + \".\"); // J.D."
  },
  {
    "question": "Can you use bracket notation to change letters in a string?",
    "answer": "**String Immutability**\n\n**No — strings are immutable in JavaScript.**\n\nYou can't change individual characters using bracket notation like `myStr[0] = \"h\"`.\n\n**Why:**\nStrings in JavaScript are immutable, meaning once created, they cannot be changed. You can only create a new string.\n\n**Wrong way:**\n```javascript\nvar myStr = \"Jello\";\nmyStr[0] = \"H\"; // This doesn't work!\nconsole.log(myStr); // Still \"Jello\"\n```\n\n**Right way:**\n```javascript\nmyStr = \"Hello\"; // Create a new string\nconsole.log(myStr); // \"Hello\"\n```\n\n**Alternative methods:**\n```javascript\n// Method 1: Reassign entire string\nvar str = \"Jello\";\nstr = \"Hello\";\n\n// Method 2: Use string methods\nvar str2 = \"Jello\";\nstr2 = str2.replace(\"J\", \"H\"); // \"Hello\"\n\n// Method 3: Build new string\nvar str3 = \"Jello\";\nstr3 = \"H\" + str3.substring(1); // \"Hello\"\n```",
    "type": "javascript",
    "tags": ["javascript", "strings", "immutability", "bracket-notation"],
    "code": "// ❌ WRONG: Can't change characters directly\nvar myStr = \"Jello\";\nmyStr[0] = \"H\"; // This doesn't work!\nconsole.log(myStr); // Still \"Jello\"\n\n// ✅ RIGHT: Create a new string\nmyStr = \"Hello\"; // Assign new string\nconsole.log(myStr); // \"Hello\"\n\n// Alternative method 1: replace()\nvar word = \"Jello\";\nword = word.replace(\"J\", \"H\");\nconsole.log(word); // \"Hello\"\n\n// Alternative method 2: substring()\nvar word2 = \"Jello\";\nword2 = \"H\" + word2.substring(1);\nconsole.log(word2); // \"Hello\"\n\n// Alternative method 3: split, modify, join\nvar word3 = \"Jello\";\nvar letters = word3.split(\"\"); // [\"J\", \"e\", \"l\", \"l\", \"o\"]\nletters[0] = \"H\"; // Modify array\nword3 = letters.join(\"\"); // \"Hello\"\nconsole.log(word3); // \"Hello\"\n\n// Practical example: capitalize first letter\nfunction capitalize(str) {\n    return str[0].toUpperCase() + str.substring(1).toLowerCase();\n}\n\nconsole.log(capitalize(\"hello\")); // \"Hello\"\nconsole.log(capitalize(\"jAVASCRIPT\")); // \"Javascript\""
  },
  {
    "question": "How to find the last letter of a string without knowing its length?",
    "answer": "**Finding the Last Character**\n\n**Use `string.length - 1`:**\n```javascript\nvar firstName = \"ada\";\nvar lastLetter = firstName[firstName.length - 1];\n```\n\n**Why `-1`:**\n- Strings are zero-indexed (start at 0)\n- If length is 3, indices are 0, 1, 2\n- Last index = length - 1\n\n**Other positions from the end:**\n```javascript\nfirstName[firstName.length - 2]  // Second-to-last letter\nfirstName[firstName.length - 3]  // Third-to-last letter\n```\n\n**Examples:**\n```\n\"ada\"\n a  d  a\n 0  1  2\nlength = 3\nlast index = 3 - 1 = 2\n```",
    "type": "javascript",
    "tags": ["javascript", "strings", "bracket-notation", "indexing"],
    "code": "// Find last letter\nvar firstName = \"ada\";\nvar lastLetter = firstName[firstName.length - 1];\nconsole.log(lastLetter); // \"a\"\n\n// Find second-to-last letter\nvar secondToLast = firstName[firstName.length - 2];\nconsole.log(secondToLast); // \"d\"\n\n// Find third-to-last letter\nvar thirdToLast = firstName[firstName.length - 3];\nconsole.log(thirdToLast); // \"a\"\n\n// Works with any length string\nvar longName = \"JavaScript\";\nconsole.log(\"Last letter: \" + longName[longName.length - 1]); // \"t\"\nconsole.log(\"Second-to-last: \" + longName[longName.length - 2]); // \"p\"\n\n// Practical example: check file extension\nfunction getFileExtension(filename) {\n    var lastThreeChars = \"\";\n    lastThreeChars += filename[filename.length - 3];\n    lastThreeChars += filename[filename.length - 2];\n    lastThreeChars += filename[filename.length - 1];\n    return lastThreeChars;\n}\n\nconsole.log(getFileExtension(\"document.pdf\")); // \"pdf\"\nconsole.log(getFileExtension(\"image.jpg\")); // \"jpg\""
  },
  {
    "question": "How do you link a JavaScript file in HTML?",
    "answer": "**Linking JavaScript Files**\n\n**Use the `<script>` tag with the `src` attribute:**\n```html\n<script src=\"yourfile.js\"></script>\n```\n\n**Where to place it:**\n\n**Option 1: Inside `<head>`**\n```html\n<head>\n    <script src=\"yourfile.js\"></script>\n</head>\n```\n\n**Option 2: Just before `</body>` (recommended)**\n```html\n<body>\n    <!-- Your HTML content -->\n    <script src=\"yourfile.js\"></script>\n</body>\n```\n\n**Why place before `</body>`:**\n- HTML loads first\n- JavaScript runs after page content loads\n- Prevents blocking page rendering\n- Better user experience\n\n**Multiple files:**\n```html\n<script src=\"file1.js\"></script>\n<script src=\"file2.js\"></script>\n<script src=\"file3.js\"></script>\n```",
    "type": "html",
    "tags": ["html", "javascript", "script-tag", "linking"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Linking JavaScript</title>\n    \n    <!-- Option 1: In head (loads before body) -->\n    <!-- <script src=\"header.js\"></script> -->\n</head>\n<body>\n    <h1>My Website</h1>\n    <p>Content goes here</p>\n    \n    <button onclick=\"myFunction()\">Click me</button>\n    \n    <!-- Option 2: Before closing body (RECOMMENDED) -->\n    <script src=\"main.js\"></script>\n    \n    <!-- Multiple scripts -->\n    <script src=\"utils.js\"></script>\n    <script src=\"app.js\"></script>\n    \n    <!-- Inline script (not recommended for large code) -->\n    <script>\n        function myFunction() {\n            alert(\"Hello!\");\n        }\n    </script>\n</body>\n</html>"
  },
  {
    "question": "How do you show an alert in JavaScript?",
    "answer": "**JavaScript Alert Function**\n\n**Use the `alert()` function:**\n```javascript\nalert(\"put text here\");\n```\n\n**How it works:**\n- Displays a popup dialog box\n- Shows your message to the user\n- Blocks code execution until user clicks OK\n- Cannot be styled with CSS\n\n**Examples:**\n```javascript\nalert(\"Hello, World!\");\nalert(\"Welcome to my website!\");\nalert(\"Error: Something went wrong!\");\n```\n\n**With variables:**\n```javascript\nvar name = \"John\";\nalert(\"Hello, \" + name + \"!\");\n```\n\n**Note:** Alerts are useful for testing, but for production websites, consider using modern UI elements like modals or notifications instead.",
    "type": "javascript",
    "tags": ["javascript", "alert", "popup", "dialog"],
    "code": "// Basic alert\nalert(\"Hello, World!\");\n\n// Alert with variable\nvar name = \"John\";\nalert(\"Welcome, \" + name + \"!\");\n\n// Alert with numbers\nvar age = 25;\nalert(\"You are \" + age + \" years old.\");\n\n// Alert from function\nfunction showMessage() {\n    alert(\"Button was clicked!\");\n}\n\n// Alert for debugging\nvar x = 10;\nvar y = 20;\nvar sum = x + y;\nalert(\"The sum is: \" + sum); // The sum is: 30\n\n// Alert with line break (use \\n)\nalert(\"Line 1\\nLine 2\\nLine 3\");\n\n// Confirm dialog (yes/no)\nvar result = confirm(\"Do you want to continue?\");\nif (result) {\n    alert(\"You clicked OK\");\n} else {\n    alert(\"You clicked Cancel\");\n}"
  },
  {
    "question": "What is concatenation in JavaScript and how to concatenate strings?",
    "answer": "**String Concatenation**\n\n**What it is:**\nConcatenation means sticking two or more pieces of text (strings) together to make a longer piece of text.\n\n**How to do it:**\nYou use the `+` sign:\n```javascript\n\"I am \" + \"happy\"  // becomes \"I am happy\"\n```\n\n**With variables:**\n```javascript\nlet name = \"Sam\";\nlet message = \"Hi \" + name;  // becomes \"Hi Sam\"\n```\n\n**Multiple concatenations:**\n```javascript\nvar first = \"Hello\";\nvar second = \"World\";\nvar result = first + \" \" + second;  // \"Hello World\"\n```\n\n**With numbers:**\n```javascript\nvar age = 25;\nvar text = \"I am \" + age + \" years old\";  // \"I am 25 years old\"\n```",
    "type": "javascript",
    "tags": ["javascript", "strings", "concatenation", "operators"],
    "code": "// Basic concatenation\nvar str1 = \"I am \" + \"happy\";\nconsole.log(str1); // \"I am happy\"\n\n// With variables\nlet name = \"Sam\";\nlet message = \"Hi \" + name;\nconsole.log(message); // \"Hi Sam\"\n\n// Multiple strings\nvar greeting = \"Hello\" + \" \" + \"World\" + \"!\";\nconsole.log(greeting); // \"Hello World!\"\n\n// With numbers\nvar age = 25;\nvar info = \"I am \" + age + \" years old\";\nconsole.log(info); // \"I am 25 years old\"\n\n// Building sentences\nvar firstName = \"John\";\nvar lastName = \"Doe\";\nvar fullName = firstName + \" \" + lastName;\nconsole.log(fullName); // \"John Doe\"\n\n// Be careful with numbers\nvar a = \"5\" + \"5\";\nconsole.log(a); // \"55\" (string concatenation)\n\nvar b = 5 + 5;\nconsole.log(b); // 10 (number addition)\n\nvar c = \"5\" + 5;\nconsole.log(c); // \"55\" (string concatenation)"
  },
  {
    "question": "How do spaces work when joining strings in JavaScript?",
    "answer": "**Spaces in String Concatenation**\n\n**JavaScript only puts in what you write.**\n\nIf you want spaces between words, you have to add them yourself.\n\n**With spaces:**\n```javascript\n\"Hello\" + \" \" + \"World\"  // \"Hello World\"\n```\n\n**Without spaces:**\n```javascript\n\"Hello\" + \"World\"  // \"HelloWorld\"\n```\n\n**Different ways to add spaces:**\n```javascript\n// Method 1: Space in separate string\n\"Hello\" + \" \" + \"World\"\n\n// Method 2: Space at end of first string\n\"Hello \" + \"World\"\n\n// Method 3: Space at start of second string\n\"Hello\" + \" World\"\n```\n\n**All three methods give the same result: \"Hello World\"**",
    "type": "javascript",
    "tags": ["javascript", "strings", "concatenation", "whitespace"],
    "code": "// ✅ WITH spaces\nvar str1 = \"Hello\" + \" \" + \"World\";\nconsole.log(str1); // \"Hello World\"\n\nvar str2 = \"Hello \" + \"World\";\nconsole.log(str2); // \"Hello World\"\n\nvar str3 = \"Hello\" + \" World\";\nconsole.log(str3); // \"Hello World\"\n\n// ❌ WITHOUT spaces\nvar str4 = \"Hello\" + \"World\";\nconsole.log(str4); // \"HelloWorld\"\n\n// Practical examples\nvar firstName = \"John\";\nvar lastName = \"Doe\";\n\n// Wrong: no space\nvar fullName1 = firstName + lastName;\nconsole.log(fullName1); // \"JohnDoe\"\n\n// Right: with space\nvar fullName2 = firstName + \" \" + lastName;\nconsole.log(fullName2); // \"John Doe\"\n\n// Building sentences\nvar name = \"Sarah\";\nvar age = 25;\nvar city = \"New York\";\nvar sentence = name + \" is \" + age + \" years old and lives in \" + city + \".\";\nconsole.log(sentence); // \"Sarah is 25 years old and lives in New York.\""
  },
  {
    "question": "Can you give an example of string concatenation with a JavaScript function?",
    "answer": "**Function with String Concatenation**\n\n**Example: wordBlanks function**\n```javascript\nfunction wordBlanks(myNoun, myAdjective, myVerb, myAdverb) {\n    return \"The \" + myAdjective + \" \" + myNoun + \" \" + myVerb + \" to the store \" + myAdverb + \".\";\n}\n\nconsole.log(wordBlanks(\"dog\", \"big\", \"ran\", \"quickly\"));\n// Output: The big dog ran to the store quickly.\n```\n\n**How it works:**\n- The function takes 4 parameters (noun, adjective, verb, adverb)\n- Concatenates them into a sentence with proper spacing\n- Returns the complete sentence\n- The words are combined in order: adjective, noun, verb, adverb\n\n**Why concatenation is useful in functions:**\n- Build dynamic strings based on inputs\n- Create customized messages\n- Generate HTML or formatted text\n- Build URLs or file paths",
    "type": "javascript",
    "tags": ["javascript", "functions", "strings", "concatenation"],
    "code": "// Main example: wordBlanks function\nfunction wordBlanks(myNoun, myAdjective, myVerb, myAdverb) {\n    return \"The \" + myAdjective + \" \" + myNoun + \" \" + myVerb + \" to the store \" + myAdverb + \".\";\n}\n\nconsole.log(wordBlanks(\"dog\", \"big\", \"ran\", \"quickly\"));\n// Output: The big dog ran to the store quickly.\n\nconsole.log(wordBlanks(\"cat\", \"small\", \"walked\", \"slowly\"));\n// Output: The small cat walked to the store slowly.\n\n// More examples with functions\n\n// Example 1: Greeting function\nfunction greet(name, time) {\n    return \"Good \" + time + \", \" + name + \"!\";\n}\n\nconsole.log(greet(\"Alice\", \"morning\")); // Good morning, Alice!\nconsole.log(greet(\"Bob\", \"evening\")); // Good evening, Bob!\n\n// Example 2: User info function\nfunction getUserInfo(firstName, lastName, age) {\n    return firstName + \" \" + lastName + \" is \" + age + \" years old.\";\n}\n\nconsole.log(getUserInfo(\"John\", \"Doe\", 30));\n// Output: John Doe is 30 years old.\n\n// Example 3: URL builder\nfunction buildURL(protocol, domain, page) {\n    return protocol + \"://\" + domain + \"/\" + page;\n}\n\nconsole.log(buildURL(\"https\", \"example.com\", \"about\"));\n// Output: https://example.com/about"
  },
  {
    "question": "What is an array in JavaScript and how to create one?",
    "answer": "**JavaScript Arrays**\n\n**What is an array:**\nArrays allow you to store several pieces of data in one variable. You can store different types of data together (strings, numbers, booleans, etc.).\n\n**How to create an array:**\n```javascript\nvar ourarray = [\"john\", \"mary\", \"gambit\", 23, 22, 10];\nconsole.log(ourarray);\n```\n\n**Key points:**\n- Arrays use square brackets `[]`\n- Items are separated by commas\n- Can contain different data types\n- Items are stored in order\n- Access items by index (starting at 0)\n\n**Examples:**\n```javascript\nvar numbers = [1, 2, 3, 4, 5];\nvar names = [\"Alice\", \"Bob\", \"Charlie\"];\nvar mixed = [\"text\", 42, true, null];\n```",
    "type": "javascript",
    "tags": ["javascript", "arrays", "data-structures"],
    "code": "// Basic array\nvar ourarray = [\"john\", \"mary\", \"gambit\", 23, 22, 10];\nconsole.log(ourarray);\n// Output: [\"john\", \"mary\", \"gambit\", 23, 22, 10]\n\n// Arrays of different types\nvar numbers = [1, 2, 3, 4, 5];\nvar names = [\"Alice\", \"Bob\", \"Charlie\"];\nvar booleans = [true, false, true];\nvar mixed = [\"text\", 42, true, null, [1, 2]];\n\n// Empty array\nvar empty = [];\n\n// Array with one item\nvar single = [\"only one\"];\n\n// Accessing array items\nvar fruits = [\"apple\", \"banana\", \"orange\"];\nconsole.log(fruits[0]); // \"apple\"\nconsole.log(fruits[1]); // \"banana\"\nconsole.log(fruits[2]); // \"orange\"\n\n// Array length\nconsole.log(fruits.length); // 3"
  },
  {
    "question": "What is a nested array (multi-dimensional array)?",
    "answer": "**Nested Arrays**\n\n**What is a nested array:**\nA nested array is an array within an array. It's also known as a multi-dimensional array.\n\n**Example:**\n```javascript\nvar ourarray = [\n    [\"john\", \"mary\", \"gambit\", 23, 22, 10],\n    [\"alice\", \"bob\", \"charlie\", 30, 35, 40],\n    [\"x\", \"y\", \"z\", 1, 2, 3]\n];\n```\n\n**Why use nested arrays:**\n- Store related groups of data\n- Create tables or grids\n- Represent 2D or 3D data\n- Organize complex data structures\n\n**Accessing nested arrays:**\n```javascript\nourarray[0]       // First inner array\nourarray[0][0]    // First item of first array\nourarray[1][2]    // Third item of second array\n```",
    "type": "javascript",
    "tags": ["javascript", "arrays", "nested-arrays", "multidimensional"],
    "code": "// Nested array example\nvar ourarray = [\n    [\"john\", \"mary\", \"gambit\", 23, 22, 10],\n    [\"alice\", \"bob\", \"charlie\", 30, 35, 40],\n    [\"x\", \"y\", \"z\", 1, 2, 3]\n];\n\nconsole.log(ourarray);\n\n// Accessing outer arrays\nconsole.log(ourarray[0]); // [\"john\", \"mary\", \"gambit\", 23, 22, 10]\nconsole.log(ourarray[1]); // [\"alice\", \"bob\", \"charlie\", 30, 35, 40]\nconsole.log(ourarray[2]); // [\"x\", \"y\", \"z\", 1, 2, 3]\n\n// Accessing individual elements\nconsole.log(ourarray[0][0]); // \"john\"\nconsole.log(ourarray[0][1]); // \"mary\"\nconsole.log(ourarray[1][2]); // \"charlie\"\nconsole.log(ourarray[2][3]); // 1\n\n// Practical example: grid/table\nvar grid = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\n\nconsole.log(grid[1][1]); // 5 (center of grid)\n\n// Student grades example\nvar studentGrades = [\n    [\"Alice\", 90, 85, 92],\n    [\"Bob\", 75, 80, 78],\n    [\"Charlie\", 95, 88, 91]\n];\n\nconsole.log(studentGrades[0][0] + \"'s first grade: \" + studentGrades[0][1]);\n// Output: Alice's first grade: 90"
  },
  {
    "question": "How to access elements in arrays and nested arrays with bracket notation?",
    "answer": "**Accessing Array Elements**\n\n**Single array:**\n```javascript\nvar ourarray = [\"john\", \"mary\", \"gambit\", 23, 22, 10];\nvar item = ourarray[1];  // \"mary\"\n```\n\n**Nested array:**\n```javascript\nvar nestedArray = [\n    [\"john\", \"mary\"],\n    [\"gambit\", 23, 22, 10]\n];\nvar lastArray = nestedArray[nestedArray.length - 1];\n// Gets the last inner array\n```\n\n**Individual elements in nested arrays:**\n```javascript\nvar element = ourarray[0][1];  // \"mary\"\n// [0] = first inner array\n// [1] = second element in that array\n```\n\n**Using length property:**\n```javascript\nnestedArray[nestedArray.length - 1]  // Last array\nourarray[ourarray.length - 1]        // Last element\n```",
    "type": "javascript",
    "tags": ["javascript", "arrays", "bracket-notation", "indexing"],
    "code": "// Single array access\nvar ourarray = [\"john\", \"mary\", \"gambit\", 23, 22, 10];\nvar item = ourarray[1];\nconsole.log(item); // \"mary\"\n\nconsole.log(ourarray[0]); // \"john\"\nconsole.log(ourarray[3]); // 23\nconsole.log(ourarray[ourarray.length - 1]); // 10 (last item)\n\n// Nested array access\nvar nestedArray = [\n    [\"john\", \"mary\", \"gambit\", 23, 22, 10],\n    [\"alice\", \"bob\"],\n    [\"x\", \"y\", \"z\"]\n];\n\n// Access inner arrays\nconsole.log(nestedArray[0]); // [\"john\", \"mary\", \"gambit\", 23, 22, 10]\nconsole.log(nestedArray[1]); // [\"alice\", \"bob\"]\nconsole.log(nestedArray[nestedArray.length - 1]); // [\"x\", \"y\", \"z\"] (last array)\n\n// Access individual elements\nvar access = nestedArray[0][1];\nconsole.log(access); // \"mary\"\n\nconsole.log(nestedArray[0][0]); // \"john\"\nconsole.log(nestedArray[1][1]); // \"bob\"\nconsole.log(nestedArray[2][2]); // \"z\"\n\n// Dynamic access\nvar outerIndex = 0;\nvar innerIndex = 2;\nconsole.log(nestedArray[outerIndex][innerIndex]); // \"gambit\""
  },
  {
    "question": "How to modify array elements using indexes?",
    "answer": "**Modifying Arrays with Indexes**\n\n**Unlike strings, arrays are mutable** - you can change individual elements.\n\n**How to modify:**\n```javascript\nourarray[1] = 1;\n```\n\n**Full example:**\n```javascript\nvar ourarray = [\"john\", \"mary\", \"gambit\", 23, 22, 10];\nourarray[1] = \"NEW VALUE\";\n// Now: [\"john\", \"NEW VALUE\", \"gambit\", 23, 22, 10]\n```\n\n**Key differences from strings:**\n- ✅ Arrays: Can change elements\n- ❌ Strings: Cannot change characters\n\n**Examples:**\n```javascript\nvar numbers = [1, 2, 3];\nnumbers[0] = 10;  // [10, 2, 3]\nnumbers[2] = 30;  // [10, 2, 30]\n```",
    "type": "javascript",
    "tags": ["javascript", "arrays", "mutability", "modification"],
    "code": "// Modifying array elements\nvar ourarray = [\"john\", \"mary\", \"gambit\", 23, 22, 10];\nconsole.log(\"Before:\", ourarray);\n\nourarray[1] = \"NEW VALUE\";\nconsole.log(\"After:\", ourarray);\n// [\"john\", \"NEW VALUE\", \"gambit\", 23, 22, 10]\n\n// Multiple modifications\nvar numbers = [1, 2, 3, 4, 5];\nconsole.log(\"Original:\", numbers);\n\nnumbers[0] = 10;\nnumbers[2] = 30;\nnumbers[4] = 50;\nconsole.log(\"Modified:\", numbers);\n// [10, 2, 30, 4, 50]\n\n// Changing data types\nvar mixed = [\"text\", 42, true];\nmixed[0] = 100;      // String to number\nmixed[1] = \"hello\";  // Number to string\nmixed[2] = null;     // Boolean to null\nconsole.log(mixed); // [100, \"hello\", null]\n\n// Modifying last element\nvar fruits = [\"apple\", \"banana\", \"orange\"];\nfruits[fruits.length - 1] = \"grape\";\nconsole.log(fruits); // [\"apple\", \"banana\", \"grape\"]\n\n// Nested array modification\nvar nested = [[1, 2], [3, 4]];\nnested[0][1] = 99;\nconsole.log(nested); // [[1, 99], [3, 4]]"
  },
  {
    "question": "How to add elements to an array with push()?",
    "answer": "**Array push() Method**\n\n**What it does:**\nAdds one or more elements to the END of an array.\n\n**Syntax:**\n```javascript\narray.push(element1, element2, ...);\n```\n\n**Example:**\n```javascript\nvar ourarray = [[\"john\", \"mary\", \"gambit\", 23, 22, 10]];\nourarray.push([42, 48]);\n// Now: [[\"john\", \"mary\", \"gambit\", 23, 22, 10], [42, 48]]\n```\n\n**Key points:**\n- Adds to the end of array\n- Can add multiple items at once\n- Modifies the original array\n- Returns new length of array\n\n**Common uses:**\n- Building arrays dynamically\n- Adding items to a list\n- Queue operations",
    "type": "javascript",
    "tags": ["javascript", "arrays", "push", "methods"],
    "code": "// Basic push example\nvar ourarray = [[\"john\", \"mary\", \"gambit\", 23, 22, 10]];\nconsole.log(\"Before:\", ourarray);\n\nourarray.push([42, 48]);\nconsole.log(\"After:\", ourarray);\n// [[\"john\", \"mary\", \"gambit\", 23, 22, 10], [42, 48]]\n\n// Push single items\nvar numbers = [1, 2, 3];\nnumbers.push(4);\nconsole.log(numbers); // [1, 2, 3, 4]\n\nnumbers.push(5);\nconsole.log(numbers); // [1, 2, 3, 4, 5]\n\n// Push multiple items\nvar fruits = [\"apple\"];\nfruits.push(\"banana\", \"orange\", \"grape\");\nconsole.log(fruits); // [\"apple\", \"banana\", \"orange\", \"grape\"]\n\n// Push returns new length\nvar letters = [\"a\", \"b\"];\nvar newLength = letters.push(\"c\", \"d\");\nconsole.log(\"New length:\", newLength); // 4\nconsole.log(\"Array:\", letters); // [\"a\", \"b\", \"c\", \"d\"]\n\n// Practical example: building a todo list\nvar todos = [];\ntodos.push(\"Buy groceries\");\ntodos.push(\"Walk dog\");\ntodos.push(\"Study JavaScript\");\nconsole.log(todos);\n// [\"Buy groceries\", \"Walk dog\", \"Study JavaScript\"]"
  },
  {
    "question": "How to remove elements from an array with pop()?",
    "answer": "**Array pop() Method**\n\n**What it does:**\nRemoves the LAST element from an array and returns it.\n\n**Syntax:**\n```javascript\nvar removed = array.pop();\n```\n\n**Example:**\n```javascript\nvar ourarray = [\"john\", \"mary\", \"gambit\", 23, 22, 10];\nvar remove = ourarray.pop();\nconsole.log(remove);  // 10 (removed item)\nconsole.log(ourarray); // [\"john\", \"mary\", \"gambit\", 23, 22]\n```\n\n**Nested arrays:**\n```javascript\nvar nestedArray = [[\"john\", \"mary\"], [\"gambit\", 23, 22, 10]];\nvar remove = nestedArray.pop();\n// remove = [\"gambit\", 23, 22, 10]\n// nestedArray = [[\"john\", \"mary\"]]\n```\n\n**Key points:**\n- Removes from the end\n- Returns the removed element\n- Modifies the original array\n- Returns `undefined` if array is empty",
    "type": "javascript",
    "tags": ["javascript", "arrays", "pop", "methods"],
    "code": "// Basic pop example\nvar ourarray = [\"john\", \"mary\", \"gambit\", 23, 22, 10];\nconsole.log(\"Before:\", ourarray);\n\nvar remove = ourarray.pop();\nconsole.log(\"Removed:\", remove); // 10\nconsole.log(\"After:\", ourarray);\n// [\"john\", \"mary\", \"gambit\", 23, 22]\n\n// Nested array pop\nvar nestedArray = [[\"john\", \"mary\"], [\"gambit\", 23, 22, 10]];\nvar remove1 = nestedArray.pop();\nconsole.log(\"Removed array:\", remove1); // [\"gambit\", 23, 22, 10]\nconsole.log(\"Remaining:\", nestedArray); // [[\"john\", \"mary\"]]\n\n// Multiple pops\nvar numbers = [1, 2, 3, 4, 5];\nconsole.log(numbers.pop()); // 5\nconsole.log(numbers.pop()); // 4\nconsole.log(numbers.pop()); // 3\nconsole.log(numbers); // [1, 2]\n\n// Empty array\nvar empty = [];\nconsole.log(empty.pop()); // undefined\n\n// Practical example: undo functionality\nvar history = [\"action1\", \"action2\", \"action3\"];\nfunction undo() {\n    var lastAction = history.pop();\n    console.log(\"Undoing:\", lastAction);\n    return lastAction;\n}\nundo(); // \"Undoing: action3\"\nconsole.log(history); // [\"action1\", \"action2\"]"
  },
  {
    "question": "How to use shift() to remove elements from the beginning of an array?",
    "answer": "**Array shift() Method**\n\n**What it does:**\nRemoves the FIRST element from an array and returns it.\n\n**Syntax:**\n```javascript\nvar removed = array.shift();\n```\n\n**Example:**\n```javascript\nvar ourarray = [\"john\", \"mary\", \"gambit\", 23, 22, 10];\nvar remove = ourarray.shift();\nconsole.log(remove);   // \"john\" (removed item)\nconsole.log(ourarray); // [\"mary\", \"gambit\", 23, 22, 10]\n```\n\n**Nested arrays:**\n```javascript\nvar nestedArray = [[\"john\", \"mary\"], [\"gambit\", 23, 22, 10], [\"x\", \"y\"]];\nvar remove1 = nestedArray.shift();\n// remove1 = [\"john\", \"mary\"]\n// nestedArray = [[\"gambit\", 23, 22, 10], [\"x\", \"y\"]]\n```\n\n**Key differences:**\n- `pop()` - Removes from END\n- `shift()` - Removes from BEGINNING",
    "type": "javascript",
    "tags": ["javascript", "arrays", "shift", "methods"],
    "code": "// Basic shift example\nvar ourarray = [\"john\", \"mary\", \"gambit\", 23, 22, 10];\nconsole.log(\"Before:\", ourarray);\n\nvar remove = ourarray.shift();\nconsole.log(\"Removed:\", remove); // \"john\"\nconsole.log(\"After:\", ourarray);\n// [\"mary\", \"gambit\", 23, 22, 10]\n\n// Nested array shift\nvar nestedArray = [\n    [\"john\", \"mary\"],\n    [\"gambit\", 23, 22, 10],\n    [\"x\", \"y\"]\n];\n\nvar remove1 = nestedArray.shift();\nconsole.log(\"Removed:\", remove1); // [\"john\", \"mary\"]\nconsole.log(\"Remaining:\", nestedArray);\n// [[\"gambit\", 23, 22, 10], [\"x\", \"y\"]]\n\n// Multiple shifts\nvar numbers = [1, 2, 3, 4, 5];\nconsole.log(numbers.shift()); // 1\nconsole.log(numbers.shift()); // 2\nconsole.log(numbers); // [3, 4, 5]\n\n// Practical example: queue (FIFO - First In First Out)\nvar queue = [\"first\", \"second\", \"third\"];\nvar served = queue.shift();\nconsole.log(\"Serving:\", served); // \"first\"\nconsole.log(\"Remaining in queue:\", queue);\n// [\"second\", \"third\"]"
  },
  {
    "question": "How to use unshift() to add elements to the beginning of an array?",
    "answer": "**Array unshift() Method**\n\n**What it does:**\nAdds one or more elements to the BEGINNING of an array.\n\n**Syntax:**\n```javascript\narray.unshift(element1, element2, ...);\n```\n\n**Example:**\n```javascript\nvar ourarray = [\"mary\", \"gambit\"];\nourarray.unshift(\"John\");\n// Now: [\"John\", \"mary\", \"gambit\"]\n```\n\n**With shift() and unshift():**\n```javascript\nvar ourarray = [\"john\", \"mary\", \"gambit\"];\nvar remove = ourarray.shift();  // Removes \"john\"\nourarray.unshift(\"John\");       // Adds \"John\" at start\n// Result: [\"John\", \"mary\", \"gambit\"]\n```\n\n**Nested arrays:**\n```javascript\nvar nestedArray = [[\"gambit\", 23], [\"x\", \"y\"]];\nnestedArray.unshift([\"Text1\", \"Text2\"]);\n// [[\"Text1\", \"Text2\"], [\"gambit\", 23], [\"x\", \"y\"]]\n```\n\n**Key differences:**\n- `push()` - Adds to END\n- `unshift()` - Adds to BEGINNING",
    "type": "javascript",
    "tags": ["javascript", "arrays", "unshift", "methods"],
    "code": "// Basic unshift example\nvar ourarray = [\"mary\", \"gambit\", 23, 22, 10];\nconsole.log(\"Before:\", ourarray);\n\nvar add = ourarray.unshift(\"John\");\nconsole.log(\"After:\", ourarray);\n// [\"John\", \"mary\", \"gambit\", 23, 22, 10]\nconsole.log(\"New length:\", add);\n\n// Shift then unshift\nvar ourarray2 = [\"john\", \"mary\", \"gambit\", 23, 22, 10];\nvar remove = ourarray2.shift();\nconsole.log(\"Removed:\", remove); // \"john\"\nconsole.log(\"After shift:\", ourarray2);\n\nvar add2 = ourarray2.unshift(\"John\");\nconsole.log(\"After unshift:\", ourarray2);\n// [\"John\", \"mary\", \"gambit\", 23, 22, 10]\n\n// Nested array unshift\nvar nestedArray = [[\"gambit\", 23, 22, 10], [\"x\", \"y\"]];\nconsole.log(\"Before:\", nestedArray);\n\nnestedArray.shift(); // Remove first\nconsole.log(\"After shift:\", nestedArray);\n\nnestedArray.unshift([\"Text1\", \"Text2\"]);\nconsole.log(\"After unshift:\", nestedArray);\n// [[\"Text1\", \"Text2\"], [\"x\", \"y\"]]\n\n// Multiple items\nvar numbers = [3, 4, 5];\nnumbers.unshift(1, 2);\nconsole.log(numbers); // [1, 2, 3, 4, 5]"
  },
  {
    "question": "Give an example of a shopping list array",
    "answer": "**Shopping List Array Example**\n\n**Format:**\nA nested array where each item is an array containing [item name, quantity].\n\n**Example:**\n```javascript\nvar mylist = [\n    [\"cereal\", 3],\n    [\"milk\", 2],\n    [\"banana\", 3]\n];\n```\n\n**Why use this format:**\n- Groups related data together\n- Each sub-array is one shopping item\n- First element: item name (string)\n- Second element: quantity (number)\n- Easy to add, remove, or modify items\n\n**Accessing data:**\n```javascript\nmylist[0][0]  // \"cereal\" (first item name)\nmylist[0][1]  // 3 (first item quantity)\nmylist[1][0]  // \"milk\" (second item name)\n```",
    "type": "javascript",
    "tags": ["javascript", "arrays", "nested-arrays", "examples"],
    "code": "// Shopping list array\nvar mylist = [\n    [\"cereal\", 3],\n    [\"milk\", 2],\n    [\"banana\", 3]\n];\n\nconsole.log(\"Shopping list:\", mylist);\n\n// Access items\nconsole.log(\"First item:\", mylist[0][0], \"- Quantity:\", mylist[0][1]);\n// cereal - Quantity: 3\n\nconsole.log(\"Second item:\", mylist[1][0], \"- Quantity:\", mylist[1][1]);\n// milk - Quantity: 2\n\n// Add new item\nmylist.push([\"bread\", 1]);\nconsole.log(\"After adding bread:\", mylist);\n\n// Remove first item\nmylist.shift();\nconsole.log(\"After removing first item:\", mylist);\n\n// Update quantity\nmylist[0][1] = 5; // Change milk quantity to 5\nconsole.log(\"After updating milk quantity:\", mylist);\n\n// Loop through shopping list\nfunction printShoppingList(list) {\n    console.log(\"\\n=== Shopping List ===\");\n    for (var i = 0; i < list.length; i++) {\n        console.log((i + 1) + \". \" + list[i][0] + \" x\" + list[i][1]);\n    }\n}\n\nprintShoppingList(mylist);\n// 1. milk x5\n// 2. banana x3\n// 3. bread x1"
  },
  {
    "question": "How do you write reusable code with functions?",
    "answer": "**JavaScript Functions**\n\n**What is a function:**\nA function is a block of reusable code that performs a specific task.\n\n**How to create a function:**\n```javascript\nfunction ourReusableFunction() {\n    console.log(\"BRUH,BRUH,BRUH\");\n}\n```\n\n**How to use (call) a function:**\n```javascript\nourReusableFunction();\n```\n\n**Why use functions:**\n- Reuse code without rewriting it\n- Organize code into logical blocks\n- Make code easier to read and maintain\n- Execute same code multiple times\n\n**Example:**\n```javascript\nfunction greet() {\n    console.log(\"Hello, World!\");\n}\n\ngreet();  // Calls the function\ngreet();  // Can call it again\n```",
    "type": "javascript",
    "tags": ["javascript", "functions", "reusability"],
    "code": "// Define a reusable function\nfunction ourReusableFunction() {\n    console.log(\"BRUH,BRUH,BRUH\");\n}\n\n// Call the function\nourReusableFunction();\n// Output: BRUH,BRUH,BRUH\n\n// Call it again\nourReusableFunction();\n// Output: BRUH,BRUH,BRUH\n\n// More examples\nfunction sayHello() {\n    console.log(\"Hello!\");\n}\n\n// Call multiple times\nsayHello();\nsayHello();\nsayHello();\n// Output:\n// Hello!\n// Hello!\n// Hello!\n\n// Function that does calculations\nfunction calculateSquare(num) {\n    return num * num;\n}\n\nconsole.log(calculateSquare(5));  // 25\nconsole.log(calculateSquare(10)); // 100\n\n// Without functions (repetitive):\nconsole.log(\"Hello!\");\nconsole.log(\"Hello!\");\nconsole.log(\"Hello!\");\n\n// With functions (reusable):\nfunction printHello() {\n    console.log(\"Hello!\");\n}\nprintHello();\nprintHello();\nprintHello();"
  },
  {
    "question": "How do you pass values to functions with arguments?",
    "answer": "**Function Parameters and Arguments**\n\n**What are parameters:**\nParameters are placeholders in the function definition.\n\n**What are arguments:**\nArguments are the actual values you pass when calling the function.\n\n**Example:**\n```javascript\nfunction ourFunctionWithArgs(a, b) {\n    console.log(a - b);\n}\n\nourFunctionWithArgs(10, 5);  // Output: 5\nourFunctionWithArgs(19, 10); // Output: 9\n```\n\n**Key points:**\n- Parameters: `a` and `b` (in function definition)\n- Arguments: `10, 5` or `19, 10` (when calling)\n- This function needs two inputs\n- You must give it two values when calling it\n\n**How it works:**\n```javascript\nfunction add(a, b) {\n    console.log(a + b);\n}\n\nadd(5, 3);  // a=5, b=3, Output: 8\n```",
    "type": "javascript",
    "tags": ["javascript", "functions", "parameters", "arguments"],
    "code": "// Function with parameters\nfunction ourFunctionWithArgs(a, b) {\n    console.log(a - b);\n}\n\n// Calling with arguments\nourFunctionWithArgs(10, 5);  // Output: 5\nourFunctionWithArgs(19, 10); // Output: 9\n\n// More examples\nfunction greet(name) {\n    console.log(\"Hello, \" + name + \"!\");\n}\n\ngreet(\"Alice\");  // Hello, Alice!\ngreet(\"Bob\");    // Hello, Bob!\n\n// Multiple parameters\nfunction introduce(firstName, lastName, age) {\n    console.log(\"I am \" + firstName + \" \" + lastName + \" and I am \" + age + \" years old.\");\n}\n\nintroduce(\"John\", \"Doe\", 25);\n// Output: I am John Doe and I am 25 years old.\n\n// Math operations\nfunction multiply(x, y) {\n    console.log(x * y);\n}\n\nmultiply(3, 4);   // 12\nmultiply(10, 5);  // 50\n\n// Without parameters (no inputs needed)\nfunction sayHello() {\n    console.log(\"Hello!\");\n}\n\nsayHello(); // Hello!"
  },
  {
    "question": "What are global and local scopes in JavaScript?",
    "answer": "**Scope in JavaScript**\n\n**What is scope:**\nScope means: Where can you see and use a variable in your code?\n\n**Global Scope:**\n- Variable defined OUTSIDE any function\n- Can be used ANYWHERE in your code (inside or outside functions)\n\n```javascript\nvar car = \"Volvo\";\nconsole.log(car); // Works here\nfunction myFunction() {\n    console.log(car); // Works here too\n}\n```\n\n**Function (Local) Scope:**\n- Variable defined INSIDE a function with `var`\n- Can ONLY be used inside that function\n\n```javascript\nfunction myFunction() {\n    var car = \"Volvo\"; // Only inside this function\n    console.log(car); // Works here\n}\nconsole.log(car); // ERROR! Can't use outside\n```\n\n**Without `var` in a function:**\n- Becomes global automatically (not recommended)\n\n```javascript\nfunction myFunction() {\n    car = \"Volvo\"; // No 'var', becomes global\n}\nmyFunction();\nconsole.log(car); // Works because it's global\n```",
    "type": "javascript",
    "tags": ["javascript", "scope", "variables", "global", "local"],
    "code": "// GLOBAL SCOPE\nvar car = \"Volvo\"; // Global variable\n\nconsole.log(car); // \"Volvo\" - works here\n\nfunction myFunction() {\n    console.log(car); // \"Volvo\" - works here too\n}\n\nmyFunction();\n\n// FUNCTION (LOCAL) SCOPE\nfunction anotherFunction() {\n    var bike = \"Honda\"; // Local variable\n    console.log(bike); // Works here\n}\n\nanotherFunction();\n// console.log(bike); // ERROR! bike is not defined\n\n// Without 'var' - becomes global\nfunction createGlobal() {\n    airplane = \"Boeing\"; // No 'var', becomes global\n}\n\ncreateGlobal();\nconsole.log(airplane); // \"Boeing\" - works because it's global\n\n// Best practice example\nvar globalCount = 0; // Global\n\nfunction increment() {\n    var localCount = 0; // Local to this function\n    localCount++;\n    globalCount++;\n    console.log(\"Local:\", localCount, \"Global:\", globalCount);\n}\n\nincrement(); // Local: 1, Global: 1\nincrement(); // Local: 1, Global: 2 (local resets, global persists)"
  },
  {
    "question": "How do you return a value from a function in JavaScript?",
    "answer": "**Function Return Statement**\n\n**What `return` does:**\nThe `return` statement sends a value back from a function.\n\n**Example:**\n```javascript\nfunction minusSeven(num) {\n    return num - 7;\n}\n\nconsole.log(minusSeven(10)); // Output: 3\n```\n\n**Key points:**\n- `return` sends a value back to where the function was called\n- The function stops executing after `return`\n- You can store the returned value in a variable\n\n**With and without return:**\n```javascript\n// With return\nfunction add(a, b) {\n    return a + b;\n}\nvar result = add(5, 3);\nconsole.log(result); // 8\n\n// Without return (undefined)\nfunction addNoReturn(a, b) {\n    a + b; // No return\n}\nvar result2 = addNoReturn(5, 3);\nconsole.log(result2); // undefined\n```",
    "type": "javascript",
    "tags": ["javascript", "functions", "return", "values"],
    "code": "// Basic return example\nfunction minusSeven(num) {\n    return num - 7;\n}\n\nconsole.log(minusSeven(10)); // 3\n\n// Storing returned value\nvar result = minusSeven(20);\nconsole.log(result); // 13\n\n// Multiple returns (only first executes)\nfunction checkNumber(num) {\n    if (num > 10) {\n        return \"Big number\";\n    }\n    return \"Small number\";\n}\n\nconsole.log(checkNumber(15)); // \"Big number\"\nconsole.log(checkNumber(5));  // \"Small number\"\n\n// Return stops execution\nfunction testReturn() {\n    console.log(\"Before return\");\n    return \"Returned value\";\n    console.log(\"After return\"); // Never executes\n}\n\nconsole.log(testReturn());\n// Output:\n// Before return\n// Returned value\n\n// Using returned values in calculations\nfunction square(n) {\n    return n * n;\n}\n\nvar x = square(5);  // 25\nvar y = square(10); // 100\nvar total = x + y;  // 125\nconsole.log(total);"
  },
  {
    "question": "Why does a function return undefined sometimes?",
    "answer": "**Why Functions Return Undefined**\n\n**Main reason:**\nIf a function runs and does not explicitly return anything, its default result is `undefined`.\n\n**Example:**\n```javascript\nfunction addThree() {\n    sum = sum + 3;\n}\n\nconsole.log(addThree()); // undefined\n```\n\n**Why it happens:**\n- The function performs an action (adds 3 to sum)\n- But doesn't use a `return` statement\n- JavaScript automatically returns `undefined`\n\n**Solution:**\nAdd a `return` statement:\n```javascript\nfunction addThree() {\n    sum = sum + 3;\n    return sum;  // Now it returns the value\n}\n\nconsole.log(addThree()); // Shows the new value of sum\n```\n\n**Common scenarios:**\n- Functions that only log to console\n- Functions that modify variables but don't return\n- Functions without `return` statement",
    "type": "javascript",
    "tags": ["javascript", "functions", "return", "undefined"],
    "code": "// Function without return (returns undefined)\nvar sum = 10;\n\nfunction addThree() {\n    sum = sum + 3;\n    // No return statement\n}\n\nconsole.log(addThree()); // undefined\nconsole.log(sum); // 13 (sum was modified, but function returned undefined)\n\n// Function WITH return\nfunction addFive() {\n    sum = sum + 5;\n    return sum; // Returns the new value\n}\n\nconsole.log(addFive()); // 18 (returns the value)\nconsole.log(sum); // 18\n\n// Another example\nfunction printMessage() {\n    console.log(\"Hello!\");\n    // No return\n}\n\nvar result = printMessage();\n// Output: Hello!\nconsole.log(\"Result:\", result); // Result: undefined\n\n// Fixed version\nfunction getMessage() {\n    return \"Hello!\";\n}\n\nvar message = getMessage();\nconsole.log(\"Message:\", message); // Message: Hello!"
  },
  {
    "question": "What is a queue in JavaScript and how to implement it?",
    "answer": "**Queue Data Structure**\n\n**What is a queue:**\nA queue is a data structure where:\n- New items are added to the BACK\n- Old items are removed from the FRONT\n- First In, First Out (FIFO)\n\n**Implementation:**\n```javascript\nfunction nextline(arr, num) {\n    arr.push(num);     // Add to back\n    return arr.shift(); // Remove from front\n}\n```\n\n**Example:**\n```javascript\nvar testArr = [1,2,3,4,5];\nconsole.log(\"before\", testArr);\n\nvar remove = nextline(testArr, 6);\nconsole.log(\"removed:\", remove);  // 1 (removed from front)\nconsole.log(\"after\", testArr);    // [2,3,4,5,6]\n```\n\n**Real-world examples:**\n- Line at a store\n- Print queue\n- Task scheduling\n- Message queues",
    "type": "javascript",
    "tags": ["javascript", "queue", "data-structures", "fifo"],
    "code": "// Queue implementation\nfunction nextline(arr, num) {\n    arr.push(num);      // Add to back\n    return arr.shift(); // Remove from front\n}\n\nvar testArr = [1,2,3,4,5];\nconsole.log(\"before\", testArr);\n// [1, 2, 3, 4, 5]\n\nvar remove = nextline(testArr, 6);\nconsole.log(\"removed:\", remove); // 1\nconsole.log(\"after\", testArr);\n// [2, 3, 4, 5, 6]\n\n// Another queue operation\nvar remove2 = nextline(testArr, 7);\nconsole.log(\"removed:\", remove2); // 2\nconsole.log(\"after\", testArr);\n// [3, 4, 5, 6, 7]\n\n// Real-world example: Customer service queue\nvar customerQueue = [];\n\nfunction addCustomer(name) {\n    customerQueue.push(name);\n    console.log(name + \" joined the queue\");\n}\n\nfunction serveCustomer() {\n    var customer = customerQueue.shift();\n    console.log(\"Serving: \" + customer);\n    return customer;\n}\n\naddCustomer(\"Alice\");\naddCustomer(\"Bob\");\naddCustomer(\"Charlie\");\nserveCustomer(); // Serving: Alice\nserveCustomer(); // Serving: Bob\nconsole.log(\"Remaining:\", customerQueue); // [\"Charlie\"]"
  },
  {
    "question": "How do you print an array as a string?",
    "answer": "**JSON.stringify() Method**\n\n**What it does:**\nConverts an array (or any JavaScript object) into a JSON string.\n\n**Syntax:**\n```javascript\nJSON.stringify(array);\n```\n\n**Example:**\n```javascript\nvar arr = [1, 2, 3, 4, 5];\nvar str = JSON.stringify(arr);\nconsole.log(str); // \"[1,2,3,4,5]\"\n```\n\n**Why use it:**\n- Display array contents as a string\n- Save array data to storage\n- Send data to a server\n- Debug complex data structures\n\n**Alternative methods:**\n```javascript\narr.toString()  // \"1,2,3,4,5\" (comma-separated)\narr.join(\"-\")   // \"1-2-3-4-5\" (custom separator)\n```",
    "type": "javascript",
    "tags": ["javascript", "arrays", "json", "stringify"],
    "code": "// Using JSON.stringify\nvar arr = [1, 2, 3, 4, 5];\nvar str = JSON.stringify(arr);\nconsole.log(str); // \"[1,2,3,4,5]\"\nconsole.log(typeof str); // \"string\"\n\n// With nested arrays\nvar nested = [[1, 2], [3, 4], [5, 6]];\nvar nestedStr = JSON.stringify(nested);\nconsole.log(nestedStr); // \"[[1,2],[3,4],[5,6]]\"\n\n// With mixed types\nvar mixed = [\"hello\", 42, true, null];\nvar mixedStr = JSON.stringify(mixed);\nconsole.log(mixedStr); // '[\"hello\",42,true,null]'\n\n// Alternative: toString()\nvar arr2 = [1, 2, 3];\nconsole.log(arr2.toString()); // \"1,2,3\"\n\n// Alternative: join()\nvar arr3 = [\"a\", \"b\", \"c\"];\nconsole.log(arr3.join(\"-\")); // \"a-b-c\"\nconsole.log(arr3.join(\" \")); // \"a b c\"\nconsole.log(arr3.join(\"\"));  // \"abc\"\n\n// Parsing back from string\nvar strArray = \"[1,2,3,4,5]\";\nvar parsedArray = JSON.parse(strArray);\nconsole.log(parsedArray); // [1, 2, 3, 4, 5]\nconsole.log(typeof parsedArray); // \"object\""
  },
  {
    "question": "Do booleans use quotes in JavaScript?",
    "answer": "**Booleans and Quotes**\n\n**No - booleans do NOT use quotes.**\n\n**Correct:**\n```javascript\ntrue\nfalse\n```\n\n**Wrong:**\n```javascript\n\"true\"  // This is a string, not a boolean\n\"false\" // This is a string, not a boolean\n```\n\n**In functions:**\n```javascript\nfunction checkValue() {\n    return true;  // Boolean\n    // or\n    return false; // Boolean\n}\n```\n\n**Key points:**\n- `true` and `false` are keywords (no quotes)\n- With quotes, they become strings\n- Booleans are used for logic and conditions\n\n**Examples:**\n```javascript\nvar isReady = true;    // Boolean\nvar isDone = false;    // Boolean\nvar text = \"true\";     // String (not boolean)\nvar text2 = \"false\";   // String (not boolean)\n```",
    "type": "javascript",
    "tags": ["javascript", "booleans", "data-types"],
    "code": "// Correct boolean usage (no quotes)\nvar isReady = true;\nvar isDone = false;\n\nconsole.log(isReady); // true\nconsole.log(typeof isReady); // \"boolean\"\n\n// Wrong: with quotes (becomes string)\nvar notBoolean = \"true\";\nconsole.log(typeof notBoolean); // \"string\"\n\n// In functions\nfunction checkTrue() {\n    return true; // Boolean\n}\n\nfunction checkFalse() {\n    return false; // Boolean\n}\n\nconsole.log(checkTrue()); // true\nconsole.log(checkFalse()); // false\n\n// Boolean in conditions\nif (true) {\n    console.log(\"This runs\");\n}\n\nif (false) {\n    console.log(\"This doesn't run\");\n}\n\n// Comparing booleans\nvar a = true;\nvar b = \"true\";\n\nconsole.log(a == b);  // true (loose equality)\nconsole.log(a === b); // false (strict equality)\nconsole.log(typeof a); // \"boolean\"\nconsole.log(typeof b); // \"string\""
  },
  {
    "question": "What are truthy and falsy values in JavaScript?",
    "answer": "**Truthy and Falsy Values**\n\n**Truthy values:**\nValues that evaluate to `true` in a Boolean context.\n\n**Examples of truthy:**\n- Non-zero numbers: `1`, `-1`, `3.14`\n- Non-empty strings: `\"hello\"`, `\"0\"`, `\"false\"`\n- Objects: `{}`, `[]`\n- `true`\n\n**Falsy values:**\nValues that evaluate to `false` in a Boolean context.\n\n**All falsy values:**\n1. `false` - The boolean false\n2. `0` - Zero\n3. `-0` - Negative zero\n4. `0n` - BigInt zero\n5. `\"\"` - Empty string\n6. `null` - Null value\n7. `undefined` - Undefined value\n8. `NaN` - Not a Number\n\n**How they work in conditions:**\n```javascript\nif (\"hello\") {  // Truthy\n    console.log(\"Runs\");\n}\n\nif (0) {  // Falsy\n    console.log(\"Doesn't run\");\n}\n```",
    "type": "javascript",
    "tags": ["javascript", "booleans", "truthy", "falsy", "conditionals"],
    "code": "// FALSY VALUES (only 8)\nconsole.log(Boolean(false));     // false\nconsole.log(Boolean(0));         // false\nconsole.log(Boolean(-0));        // false\nconsole.log(Boolean(0n));        // false\nconsole.log(Boolean(\"\"));        // false\nconsole.log(Boolean(null));      // false\nconsole.log(Boolean(undefined)); // false\nconsole.log(Boolean(NaN));       // false\n\n// TRUTHY VALUES (everything else)\nconsole.log(Boolean(1));         // true\nconsole.log(Boolean(-1));        // true\nconsole.log(Boolean(\"hello\"));   // true\nconsole.log(Boolean(\"0\"));       // true (string \"0\" is truthy!)\nconsole.log(Boolean(\"false\"));   // true (string \"false\" is truthy!)\nconsole.log(Boolean([]));        // true (empty array is truthy!)\nconsole.log(Boolean({}));        // true (empty object is truthy!)\nconsole.log(Boolean(true));      // true\n\n// In conditions\nif (\"\") {\n    console.log(\"Won't run\"); // Empty string is falsy\n}\n\nif (\"hello\") {\n    console.log(\"Will run\"); // Non-empty string is truthy\n}\n\n// Practical example\nfunction checkValue(val) {\n    if (val) {\n        return \"Truthy\";\n    }\n    return \"Falsy\";\n}\n\nconsole.log(checkValue(1));      // \"Truthy\"\nconsole.log(checkValue(0));      // \"Falsy\"\nconsole.log(checkValue(\"test\")); // \"Truthy\"\nconsole.log(checkValue(\"\"));     // \"Falsy\""
  },
  {
    "question": "How to use comparison operators (==, !=, >, <, >=, <=) in JavaScript?",
    "answer": "**Comparison Operators**\n\n**Equality operators:**\n- `==` - Equal to (loose equality)\n- `!=` - Not equal to\n- `===` - Strict equal to (same value AND type)\n\n**Relational operators:**\n- `>` - Greater than\n- `<` - Less than\n- `>=` - Greater than or equal to\n- `<=` - Less than or equal to\n\n**Examples:**\n\n**Equality (==):**\n```javascript\nfunction equality(val) {\n    if (val == 12) {\n        return \"yes the number is 12\";\n    }\n    return \"no its not 12\";\n}\n```\n\n**Comparison (==):**\n```javascript\nfunction equality(a, b) {\n    if (a == b) {\n        return \"Equal\";\n    }\n    return \"Not equal\";\n}\nequality(1, \"1\"); // \"Equal\" (loose equality)\n```\n\n**Inequality (!=):**\n```javascript\nfunction equality(a, b) {\n    if (a != b) {\n        return \"Its Not Equal To\";\n    }\n    return \"It Is Equal To\";\n}\n```\n\n**Greater/Less Than:**\n```javascript\nfunction equality(val) {\n    if (val >= 12) {\n        return \"IT IS GREATER THAN OR EQUAL TO 12\";\n    }\n    return \"IT IS LESS THAN 12\";\n}\n```\n\n**Note:** For strict comparison (type + value), use `===` instead of `==`:\n```javascript\nif (val === 12) // Only true for number 12, not string \"12\"\n```",
    "type": "javascript",
    "tags": ["javascript", "operators", "comparison", "conditionals"],
    "code": "// Equality operator (==)\nfunction testEquality(val) {\n    if (val == 12) {\n        return \"yes the number is 12\";\n    }\n    return \"no its not 12\";\n}\nconsole.log(testEquality(12)); // \"yes the number is 12\"\n\n// Comparison\nfunction compare(a, b) {\n    if (a == b) {\n        return \"Equal\";\n    }\n    return \"Not equal\";\n}\nconsole.log(compare(1, \"1\")); // \"Equal\" (loose equality)\n\n// Inequality (!=)\nfunction testInequality(a, b) {\n    if (a != b) {\n        return \"Its Not Equal To\";\n    }\n    return \"It Is Equal To\";\n}\nconsole.log(testInequality(1, 2)); // \"Its Not Equal To\"\n\n// Greater than or equal (>=)\nfunction testGreaterOrEqual(val) {\n    if (val >= 12) {\n        return \"IT IS GREATER THAN OR EQUAL TO 12\";\n    }\n    return \"IT IS LESS THAN 12\";\n}\nconsole.log(testGreaterOrEqual(12)); // \"IT IS GREATER THAN OR EQUAL TO 12\"\n\n// Strict equality (===)\nfunction strictEquality(val) {\n    if (val === 12) {\n        return \"Strictly equal to 12\";\n    }\n    return \"Not strictly equal\";\n}\nconsole.log(strictEquality(12));   // \"Strictly equal to 12\"\nconsole.log(strictEquality(\"12\")); // \"Not strictly equal\""
  },
  {
    "question": "How to use logical operators (AND &&, OR ||) in JavaScript?",
    "answer": "**Logical Operators**\n\n**AND operator (&&):**\n- Returns `true` if BOTH conditions are true\n- Otherwise returns `false`\n\n```javascript\nfunction testAnd(val) {\n    if (val >= 12 && val >= 8) {\n        return \"GOOD\";\n    }\n    return \"BAD\";\n}\ntestAnd(20); // \"GOOD\" (20 is >= 12 AND >= 8)\n```\n\n**OR operator (||):**\n- Returns `true` if AT LEAST ONE condition is true\n- Returns `false` only if BOTH are false\n\n```javascript\nfunction testOr(val) {\n    if (val > 20 || val < 10) {\n        return \"OUTSIDE\";\n    }\n    return \"INSIDE\";\n}\ntestOr(30); // \"OUTSIDE\" (30 > 20)\n```\n\n**Truth tables:**\n\n**AND (&&):**\n- true && true = true\n- true && false = false\n- false && true = false\n- false && false = false\n\n**OR (||):**\n- true || true = true\n- true || false = true\n- false || true = true\n- false || false = false",
    "type": "javascript",
    "tags": ["javascript", "operators", "logical", "and", "or"],
    "code": "// AND operator (&&)\nfunction testAnd(val) {\n    if (val >= 12 && val >= 8) {\n        return \"GOOD\";\n    }\n    return \"BAD\";\n}\nconsole.log(testAnd(20)); // \"GOOD\" (20 >= 12 AND 20 >= 8)\nconsole.log(testAnd(5));  // \"BAD\" (5 >= 12 is false)\n\n// OR operator (||)\nfunction testOr(val) {\n    if (val > 20 || val < 10) {\n        return \"OUTSIDE\";\n    }\n    return \"INSIDE\";\n}\nconsole.log(testOr(30)); // \"OUTSIDE\" (30 > 20 is true)\nconsole.log(testOr(5));  // \"OUTSIDE\" (5 < 10 is true)\nconsole.log(testOr(15)); // \"INSIDE\" (both conditions false)\n\n// Complex conditions\nfunction checkAge(age, hasPermission) {\n    if (age >= 18 && hasPermission) {\n        return \"Access granted\";\n    }\n    return \"Access denied\";\n}\nconsole.log(checkAge(20, true));  // \"Access granted\"\nconsole.log(checkAge(20, false)); // \"Access denied\"\n\n// Multiple OR conditions\nfunction checkDay(day) {\n    if (day === \"Saturday\" || day === \"Sunday\") {\n        return \"Weekend\";\n    }\n    return \"Weekday\";\n}\nconsole.log(checkDay(\"Saturday\")); // \"Weekend\"\nconsole.log(checkDay(\"Monday\"));   // \"Weekday\""
  },
  {
    "question": "How to use if, else if, and else statements in JavaScript?",
    "answer": "**Conditional Statements**\n\n**if statement:**\n```javascript\nif (condition) {\n    // Code runs if condition is true\n}\n```\n\n**else statement:**\n```javascript\nif (condition) {\n    // Runs if true\n} else {\n    // Runs if false\n}\n```\n\n**Example with else:**\n```javascript\nfunction testElse(val) {\n    var result;\n    if (val > 20 || val < 10) {\n        result = \"OUTSIDE\";\n    } else {\n        result = \"INSIDE\";\n    }\n    return result;\n}\n```\n\n**else if statement:**\n```javascript\nfunction testElseIf(val) {\n    let result;\n    if (val > 20) {\n        result = \"OUTSIDE - above\";\n    } else if (val < 10) {\n        result = \"OUTSIDE - below\";\n    } else {\n        result = \"INSIDE\";\n    }\n    return result;\n}\n```\n\n**Chaining if/else if:**\n```javascript\nfunction getSize(val) {\n    if (val < 5) {\n        return \"small\";\n    } else if (val < 10) {\n        return \"medium\";\n    } else if (val < 20) {\n        return \"large\";\n    } else {\n        return \"extra large\";\n    }\n}\n```",
    "type": "javascript",
    "tags": ["javascript", "conditionals", "if", "else", "control-flow"],
    "code": "// Basic if/else\nfunction testElse(val) {\n    var result;\n    if (val > 20 || val < 10) {\n        result = \"OUTSIDE\";\n    } else {\n        result = \"INSIDE\";\n    }\n    return result;\n}\nconsole.log(testElse(12)); // \"INSIDE\"\n\n// if/else if/else\nfunction testElseIf(val) {\n    let result;\n    if (val > 20) {\n        result = \"OUTSIDE - above\";\n    } else if (val < 10) {\n        result = \"OUTSIDE - below\";\n    } else {\n        result = \"INSIDE\";\n    }\n    return result;\n}\nconsole.log(testElseIf(25)); // \"OUTSIDE - above\"\nconsole.log(testElseIf(5));  // \"OUTSIDE - below\"\nconsole.log(testElseIf(15)); // \"INSIDE\"\n\n// Chaining if/else if\nfunction getSize(val) {\n    if (val < 5) {\n        return \"small\";\n    } else if (val < 10) {\n        return \"medium\";\n    } else if (val < 20) {\n        return \"large\";\n    } else {\n        return \"extra large\";\n    }\n}\nconsole.log(getSize(3));  // \"small\"\nconsole.log(getSize(7));  // \"medium\"\nconsole.log(getSize(15)); // \"large\"\nconsole.log(getSize(25)); // \"extra large\""
  },
  {
    "question": "What is a switch statement and how to use it?",
    "answer": "**Switch Statement**\n\n**What it is:**\nA switch statement tests a value against multiple cases. It's an alternative to multiple if/else statements.\n\n**Basic syntax:**\n```javascript\nswitch (val) {\n    case 1:\n        answer = \"alpha\";\n        break;\n    case 2:\n        answer = \"beta\";\n        break;\n    default:\n        answer = \"unknown\";\n}\n```\n\n**Key points:**\n- Each `case` tests for a specific value\n- `break` prevents fall-through to next case\n- `default` runs if no cases match\n- Without `break`, execution continues to next case\n\n**Example:**\n```javascript\nfunction caseInSwitch(val) {\n    var answer = \"\";\n    switch (val) {\n        case 1:\n            answer = \"alpha\";\n            break;\n        case 2:\n            answer = \"beta\";\n            break;\n        case 3:\n            answer = \"gamma\";\n            break;\n        case 4:\n            answer = \"delta\";\n            break;\n        default:\n            answer = \"Stuff\";\n    }\n    return answer;\n}\n```",
    "type": "javascript",
    "tags": ["javascript", "switch", "conditionals", "control-flow"],
    "code": "// Basic switch statement\nfunction caseInSwitch(val) {\n    var answer = \"\";\n    switch (val) {\n        case 1:\n            answer = \"alpha\";\n            break;\n        case 2:\n            answer = \"beta\";\n            break;\n        case 3:\n            answer = \"gamma\";\n            break;\n        case 4:\n            answer = \"delta\";\n            break;\n        default:\n            answer = \"Stuff\";\n    }\n    return answer;\n}\n\nconsole.log(caseInSwitch(1)); // \"alpha\"\nconsole.log(caseInSwitch(2)); // \"beta\"\nconsole.log(caseInSwitch(5)); // \"Stuff\" (default)\n\n// Practical example: days of week\nfunction getDayType(day) {\n    var type;\n    switch (day) {\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n        case 5:\n            type = \"Weekday\";\n            break;\n        case 6:\n        case 7:\n            type = \"Weekend\";\n            break;\n        default:\n            type = \"Invalid day\";\n    }\n    return type;\n}\n\nconsole.log(getDayType(1)); // \"Weekday\"\nconsole.log(getDayType(6)); // \"Weekend\"\nconsole.log(getDayType(8)); // \"Invalid day\""
  },
  {
    "question": "How to use switch statement with multiple cases?",
    "answer": "**Switch with Multiple Cases**\n\n**What it does:**\nMultiple cases can share the same code block by omitting `break` statements between them.\n\n**Syntax:**\n```javascript\nswitch (val) {\n    case 1:\n    case 2:\n    case 3:\n        answer = \"low\";\n        break;\n    case 4:\n    case 5:\n    case 6:\n        answer = \"medium\";\n        break;\n    default:\n        answer = \"unknown\";\n}\n```\n\n**Example:**\n```javascript\nfunction sequentialSizes(val) {\n    var answer = \"\";\n    switch (val) {\n        case 1:\n        case 2:\n        case 3:\n            answer = \"low\";\n            break;\n        case 4:\n        case 5:\n        case 6:\n            answer = \"medium\";\n            break;\n        case 7:\n        case 8:\n        case 9:\n            answer = \"high\";\n            break;\n        default:\n            answer = \"unknown\";\n            break;\n    }\n    return answer;\n}\n```\n\n**How it works:**\n- If val is 1, 2, or 3 → \"low\"\n- If val is 4, 5, or 6 → \"medium\"\n- If val is 7, 8, or 9 → \"high\"\n- Otherwise → \"unknown\"",
    "type": "javascript",
    "tags": ["javascript", "switch", "multiple-cases", "conditionals"],
    "code": "// Switch with multiple cases\nfunction sequentialSizes(val) {\n    var answer = \"\";\n    switch (val) {\n        case 1:\n        case 2:\n        case 3:\n            answer = \"low\";\n            break;\n        case 4:\n        case 5:\n        case 6:\n            answer = \"medium\";\n            break;\n        case 7:\n        case 8:\n        case 9:\n            answer = \"high\";\n            break;\n        default:\n            answer = \"unknown\";\n            break;\n    }\n    return answer;\n}\n\nconsole.log(sequentialSizes(1)); // \"low\"\nconsole.log(sequentialSizes(2)); // \"low\"\nconsole.log(sequentialSizes(5)); // \"medium\"\nconsole.log(sequentialSizes(8)); // \"high\"\nconsole.log(sequentialSizes(10)); // \"unknown\"\n\n// Practical example: grade ranges\nfunction getGrade(score) {\n    switch (true) {\n        case score >= 90:\n            return \"A\";\n        case score >= 80:\n            return \"B\";\n        case score >= 70:\n            return \"C\";\n        case score >= 60:\n            return \"D\";\n        default:\n            return \"F\";\n    }\n}\n\nconsole.log(getGrade(95)); // \"A\"\nconsole.log(getGrade(75)); // \"C\"\nconsole.log(getGrade(55)); // \"F\""
  },
  {
    "question": "How to return boolean values from functions?",
    "answer": "**Returning Boolean Values**\n\n**Simple way:**\nInstead of using if/else to return true/false, you can directly return the comparison result.\n\n**Complex way (not recommended):**\n```javascript\nfunction comparison(a, b) {\n    if (a < b) {\n        return true;\n    } else {\n        return false;\n    }\n}\n```\n\n**Simple way (recommended):**\n```javascript\nfunction comparison(a, b) {\n    return (a < b);\n}\n```\n\n**Why it works:**\n- `a < b` already evaluates to true or false\n- No need for if statements\n- Cleaner and more concise code\n\n**Example:**\n```javascript\nfunction comparison(a, b) {\n    let result;\n    result = (a < b);\n    return result;\n}\n\nvar compAns = comparison(15, 18);\nconsole.log(compAns); // true\n```\n\n**More examples:**\n```javascript\nfunction isEven(n) {\n    return (n % 2 === 0); // Returns true if even\n}\n\nfunction isPositive(n) {\n    return (n > 0); // Returns true if positive\n}\n```",
    "type": "javascript",
    "tags": ["javascript", "functions", "boolean", "return"],
    "code": "// Complex way (not needed)\nfunction comparisonComplex(a, b) {\n    if (a < b) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n// Simple way (recommended)\nfunction comparison(a, b) {\n    let result;\n    result = (a < b);\n    return result;\n}\n\nvar compAns = comparison(15, 18);\nconsole.log(compAns); // true\n\n// Even simpler\nfunction isLess(a, b) {\n    return (a < b);\n}\n\nconsole.log(isLess(5, 10)); // true\nconsole.log(isLess(10, 5)); // false\n\n// More examples\nfunction isEven(n) {\n    return (n % 2 === 0);\n}\n\nconsole.log(isEven(4));  // true\nconsole.log(isEven(7));  // false\n\nfunction isPositive(n) {\n    return (n > 0);\n}\n\nconsole.log(isPositive(5));  // true\nconsole.log(isPositive(-3)); // false\n\nfunction isInRange(n, min, max) {\n    return (n >= min && n <= max);\n}\n\nconsole.log(isInRange(5, 1, 10));  // true\nconsole.log(isInRange(15, 1, 10)); // false"
  },
  {
    "question": "How do you write square root, power (^), and round off in JavaScript?",
    "answer": "**Math Operations in JavaScript**\n\n- **Square root:** Use `Math.sqrt(number)` → Example: `Math.sqrt(9)` gives `3`\n- **Power (^):** Use `Math.pow(base, exponent)` → Example: `Math.pow(2, 3)` gives `8`\n- **Round off:** Use `Math.round(number)` → Example: `Math.round(4.6)` gives `5`",
    "type": "javascript",
    "tags": ["javascript", "math", "operations"],
    "code": "// Square root\nconsole.log(Math.sqrt(9));   // 3\nconsole.log(Math.sqrt(16));  // 4\nconsole.log(Math.sqrt(25));  // 5\n\n// Power (exponentiation)\nconsole.log(Math.pow(2, 3));  // 8 (2^3)\nconsole.log(Math.pow(5, 2));  // 25 (5^2)\nconsole.log(Math.pow(3, 4));  // 81 (3^4)\n\n// Round off\nconsole.log(Math.round(4.6));  // 5\nconsole.log(Math.round(4.4));  // 4\nconsole.log(Math.round(4.5));  // 5\n\n// More math examples\nvar num = 7;\nconsole.log(\"Square root of\", num, \"=\", Math.sqrt(num));\nconsole.log(\"Square of\", num, \"=\", Math.pow(num, 2));\nconsole.log(\"Cube of\", num, \"=\", Math.pow(num, 3));\nconsole.log(\"Rounded 7.8 =\", Math.round(7.8));"
  },

  {
    "question": "Give an example of an object containing string, array, boolean, and number",
    "answer": "**JavaScript Object with Multiple Data Types**\n\n**Example:**\n```javascript\nvar ourdog = {\n    name: \"Camper\",        // String\n    legs: 4,               // Number\n    eyes: 2,               // Number\n    tail: 1,               // Number\n    friends: [\"john\", \"mark\", \"mary\"], // Array\n    straight: true         // Boolean\n};\n```\n\n**Key points:**\n- Objects can contain any data type\n- Properties are key-value pairs\n- Keys are strings (quotes optional for simple names)\n- Values can be strings, numbers, booleans, arrays, or other objects",
    "type": "javascript",
    "tags": ["javascript", "objects", "data-types"],
    "code": "// Object with multiple data types\nvar ourdog = {\n    name: \"Camper\",\n    legs: 4,\n    eyes: 2,\n    tail: 1,\n    friends: [\"john\", \"mark\", \"mary\"],\n    straight: true\n};\n\nconsole.log(JSON.stringify(ourdog));\n\n// Access different properties\nconsole.log(\"Name:\", ourdog.name);           // \"Camper\" (string)\nconsole.log(\"Legs:\", ourdog.legs);           // 4 (number)\nconsole.log(\"Friends:\", ourdog.friends);    // [\"john\", \"mark\", \"mary\"] (array)\nconsole.log(\"Straight:\", ourdog.straight);   // true (boolean)\n\n// More examples\nvar person = {\n    firstName: \"John\",\n    age: 25,\n    isStudent: false,\n    hobbies: [\"reading\", \"gaming\", \"coding\"],\n    address: {\n        street: \"123 Main St\",\n        city: \"New York\"\n    }\n};\n\nconsole.log(\"Person:\", JSON.stringify(person, null, 2));"
  },
  {
    "question": "How do you access the values of objects in JavaScript?",
    "answer": "**Accessing Object Properties**\n\n**Two main ways:**\n\n**1. Dot Notation:**\n```javascript\nobject.property\n```\n\n**2. Bracket Notation:**\n```javascript\nobject[\"property\"]\n```\n\n**When to use each:**\n- **Dot notation:** When property name is simple (no spaces, starts with letter)\n- **Bracket notation:** When property has spaces, special characters, or is stored in a variable\n\n**Examples:**\n```javascript\nvar testObj = {\n    \"Shirt\": \"blue\",\n    \"Trousers\": \"red\",\n    \"Cap\": \"orange\"\n};\n\nvar shirtColor = testObj.Cap;  // Dot notation\nvar capColor = testObj[\"The Cap\"]; // Bracket notation\n```",
    "type": "javascript",
    "tags": ["javascript", "objects", "access", "properties"],
    "code": "// Dot notation example\nvar testObj = {\n    Shirt: \"blue\",\n    Trousers: \"red\",\n    Cap: \"orange\"\n};\n\nvar shirtColor = testObj.Cap;\nconsole.log(JSON.stringify(shirtColor)); // \"orange\"\nconsole.log(JSON.stringify(testObj.Shirt)); // \"blue\"\n\n// Bracket notation example\nvar testObj2 = {\n    \"The Trousers\": \"red\",\n    \"The Cap\": \"orange\",\n    \"The Shirt\": \"blue\"\n};\n\nvar capColor = testObj2[\"The Cap\"];\nconsole.log(capColor); // \"orange\"\n\n// When to use bracket notation\nvar propertyName = \"The Shirt\";\nvar shirtColor2 = testObj2[propertyName];\nconsole.log(shirtColor2); // \"blue\"\n\n// Accessing with variables\nvar testObj3 = {\n    \"The Trousers\": \"red\",\n    \"The Cap\": \"orange\",\n    \"The Shirt\": \"blue\",\n    16: \"A Number\"\n};\n\nvar playerNumber = 16;\nvar player = testObj3[playerNumber];\nconsole.log(player); // \"A Number\"\n\nvar capColor3 = testObj3[\"The Cap\"];\nconsole.log(capColor3); // \"orange\""
  },
  {
    "question": "How do you write while and for loops that iterate numbers 1-10?",
    "answer": "**While and For Loops (Numbers 1-10)**\n\n**While Loop:**\n```javascript\nvar myArr = [];\nconst i = 0;\nwhile(i <= 10){\n    myArr.unshift(i); // or myArr.push(i)\n    i++;\n}\nconsole.log(myArr);\n```\n\n**For Loop:**\n```javascript\nvar myArr = [];\nfor (var i = 1; i <= 10; i++){\n    myArr.unshift(i);\n}\nconsole.log(myArr);\n```\n\n**Key differences:**\n- **While loop:** Checks condition first, then executes\n- **For loop:** Initializes, checks condition, executes, then increments\n- **unshift():** Adds to beginning of array\n- **push():** Adds to end of array",
    "type": "javascript",
    "tags": ["javascript", "loops", "while", "for", "arrays"],
    "code": "// While loop example\nvar myArr = [];\nlet i = 0;\nwhile(i <= 10){\n    myArr.unshift(i); // Adds to beginning: [10, 9, 8, ...]\n    i++;\n}\nconsole.log(\"While loop result:\", myArr);\n\n// Alternative with push\nvar myArr2 = [];\nlet j = 0;\nwhile(j <= 10){\n    myArr2.push(j); // Adds to end: [0, 1, 2, ...]\n    j++;\n}\nconsole.log(\"While loop with push:\", myArr2);\n\n// For loop example\nvar myArr3 = [];\nfor (var k = 1; k <= 10; k++){\n    myArr3.unshift(k);\n}\nconsole.log(\"For loop result:\", myArr3);\n\n// For loop with push\nvar myArr4 = [];\nfor (var l = 1; l <= 10; l++){\n    myArr4.push(l);\n}\nconsole.log(\"For loop with push:\", myArr4);\n\n// Practical example: counting even numbers\nvar evenNumbers = [];\nfor (var m = 2; m <= 10; m += 2){\n    evenNumbers.push(m);\n}\nconsole.log(\"Even numbers 1-10:\", evenNumbers);"
  },
  {
    "question": "How do you write for and while loops that count all even and odd numbers?",
    "answer": "**Counting Even and Odd Numbers with Loops**\n\n**For Loop (Odd Numbers):**\n```javascript\nvar myArr = [];\nfor (var i = 1; i <= 10; i+=2){\n    myArr.unshift(i);\n}\nconsole.log(myArr);\n```\n\n**While Loop (Even Numbers):**\n```javascript\nvar myArray = [];\nlet j = 0;\nwhile(j < 10){\n    myArray.push(j);\n    j+=2;\n}\nconsole.log(myArray);\n```\n\n**Key concepts:**\n- **i+=2:** Increments by 2 (skips every other number)\n- **Starting from 1:** Gets odd numbers (1, 3, 5, 7, 9)\n- **Starting from 0:** Gets even numbers (0, 2, 4, 6, 8)",
    "type": "javascript",
    "tags": ["javascript", "loops", "even", "odd", "increment"],
    "code": "// For loop - odd numbers\nvar oddNumbers = [];\nfor (var i = 1; i <= 10; i+=2){\n    oddNumbers.unshift(i);\n}\nconsole.log(\"Odd numbers (for loop):\", oddNumbers);\n\n// While loop - even numbers\nvar evenNumbers = [];\nlet j = 0;\nwhile(j < 10){\n    evenNumbers.push(j);\n    j+=2;\n}\nconsole.log(\"Even numbers (while loop):\", evenNumbers);\n\n// Alternative: using modulo operator\nvar allNumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar evens = [];\nvar odds = [];\n\nfor (var k = 0; k < allNumbers.length; k++){\n    if (allNumbers[k] % 2 === 0) {\n        evens.push(allNumbers[k]);\n    } else {\n        odds.push(allNumbers[k]);\n    }\n}\n\nconsole.log(\"Even numbers (modulo):\", evens);\nconsole.log(\"Odd numbers (modulo):\", odds);\n\n// Practical example: separate even/odd from mixed array\nvar mixedArray = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nvar separated = {\n    even: [],\n    odd: []\n};\n\nfor (var l = 0; l < mixedArray.length; l++){\n    if (mixedArray[l] % 2 === 0) {\n        separated.even.push(mixedArray[l]);\n    } else {\n        separated.odd.push(mixedArray[l]);\n    }\n}\n\nconsole.log(\"Separated numbers:\", separated);"
  },
  {
    "question": "How do you write for and while loops to count backward?",
    "answer": "**Counting Backward with Loops**\n\n**For Loop (Backward):**\n```javascript\nvar myArr = [];\nfor (var i = 100; i > 0; i-=2){\n    myArr.push(i);\n}\nconsole.log(myArr);\n```\n\n**While Loop (Backward):**\n```javascript\nvar myArray = [];\nlet j = 50;\nwhile(j > 0){\n    myArray.push(j);\n    j-=3;\n}\nconsole.log(myArray);\n```\n\n**Key concepts:**\n- **i-=2:** Decrements by 2 each iteration\n- **i > 0:** Condition checks if greater than 0\n- **Starting high:** Begin with large number, count down\n- **Decrement:** Use -= instead of += for backward counting",
    "type": "javascript",
    "tags": ["javascript", "loops", "backward", "decrement", "counting"],
    "code": "// For loop - count backward by 2\nvar backwardBy2 = [];\nfor (var i = 100; i > 0; i-=2){\n    backwardBy2.push(i);\n}\nconsole.log(\"Backward by 2 (for loop):\", backwardBy2);\n\n// While loop - count backward by 3\nvar backwardBy3 = [];\nlet j = 50;\nwhile(j > 0){\n    backwardBy3.push(j);\n    j-=3;\n}\nconsole.log(\"Backward by 3 (while loop):\", backwardBy3);\n\n// Countdown from 10 to 1\nvar countdown = [];\nfor (var k = 10; k >= 1; k--){\n    countdown.push(k);\n}\nconsole.log(\"Countdown 10 to 1:\", countdown);\n\n// Reverse array using backward loop\nvar originalArray = [1, 2, 3, 4, 5];\nvar reversedArray = [];\nfor (var l = originalArray.length - 1; l >= 0; l--){\n    reversedArray.push(originalArray[l]);\n}\nconsole.log(\"Original:\", originalArray);\nconsole.log(\"Reversed:\", reversedArray);\n\n// Practical example: countdown timer\nfunction countdownTimer(seconds) {\n    var timer = [];\n    for (var m = seconds; m >= 0; m--) {\n        timer.push(m);\n    }\n    return timer;\n}\n\nconsole.log(\"5-second countdown:\", countdownTimer(5));"
  },
  {
    "question": "How do you iterate through an array with a for loop and while loop?",
    "answer": "**Iterating Through Arrays**\n\n**For Loop:**\n```javascript\nvar myArr = [2, 4, 6, 8, 10];\nvar ourTotal = 0;\n\nfor (var i = 0; i < myArr.length; i++){\n    ourTotal += myArr[i];\n}\nconsole.log(ourTotal);\n```\n\n**While Loop:**\n```javascript\nvar i = 0;\nwhile (i < myArr.length) {\n    ourTotal += myArr[i];\n    i++;\n}\nconsole.log(ourTotal);\n```\n\n**Key concepts:**\n- **i < myArr.length:** Condition checks array bounds\n- **myArr[i]:** Accesses element at index i\n- **i++:** Increments index for next iteration\n- **ourTotal += myArr[i]:** Accumulates sum",
    "type": "javascript",
    "tags": ["javascript", "loops", "arrays", "iteration", "sum"],
    "code": "// Array to iterate through\nvar myArr = [2, 4, 6, 8, 10];\nvar ourTotal = 0;\n\n// For loop iteration\nfor (var i = 0; i < myArr.length; i++){\n    ourTotal += myArr[i];\n    console.log(\"Adding\", myArr[i], \"Total so far:\", ourTotal);\n}\nconsole.log(\"Final total (for loop):\", ourTotal);\n\n// Reset total for while loop\nourTotal = 0;\nvar j = 0;\nwhile (j < myArr.length) {\n    ourTotal += myArr[j];\n    console.log(\"Adding\", myArr[j], \"Total so far:\", ourTotal);\n    j++;\n}\nconsole.log(\"Final total (while loop):\", ourTotal);\n\n// Practical examples\nvar numbers = [1, 2, 3, 4, 5];\n\n// Find maximum value\nvar max = numbers[0];\nfor (var k = 1; k < numbers.length; k++){\n    if (numbers[k] > max) {\n        max = numbers[k];\n    }\n}\nconsole.log(\"Maximum value:\", max);\n\n// Find minimum value\nvar min = numbers[0];\nvar l = 1;\nwhile (l < numbers.length) {\n    if (numbers[l] < min) {\n        min = numbers[l];\n    }\n    l++;\n}\nconsole.log(\"Minimum value:\", min);\n\n// Count even numbers in array\nvar mixedArray = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar evenCount = 0;\nfor (var m = 0; m < mixedArray.length; m++){\n    if (mixedArray[m] % 2 === 0) {\n        evenCount++;\n    }\n}\nconsole.log(\"Even numbers count:\", evenCount);"
  },
  {
    "question": "How do you write for and while loops that multiply all numbers in a nested array?",
    "answer": "**Multiplying Nested Array Numbers**\n\n**For Loop (Nested):**\n```javascript\nfunction multiplyAllWithFor(arr) {\n    var product = 1;\n    \n    for(var i = 0; i < arr.length; i++){\n        for(var j = 0; j < arr[i].length; j++ ){\n            console.log(\"Now Multiplying:\", product, \"x\", arr[i][j] );\n            product *= arr[i][j];\n            console.log(\"Product so Far:\", product);\n        }\n    }\n    return product;\n}\n```\n\n**While Loop (Nested):**\n```javascript\nfunction multiplyAllWithWhile(array){\n    var product = 1;\n    var i = 0;\n    \n    while(i < array.length){\n        var j = 0;\n        while(j < array[i].length){\n            product *= array[i][j];\n            j++;\n        }\n        i++;\n    }\n    return product;\n}\n```\n\n**Key concepts:**\n- **Nested loops:** Loop inside another loop\n- **arr[i][j]:** Access element at row i, column j\n- **product *= arr[i][j]:** Multiply and assign result\n- **Two-dimensional arrays:** Arrays containing arrays",
    "type": "javascript",
    "tags": ["javascript", "loops", "nested", "arrays", "multiplication"],
    "code": "// Test array\nvar testArray = [[1,2], [3,4], [5,6,7]];\n\n// For loop version\nfunction multiplyAllWithFor(arr) {\n    var product = 1;\n    \n    for(var i = 0; i < arr.length; i++){\n        for(var j = 0; j < arr[i].length; j++ ){\n            console.log(\"Now Multiplying:\", product, \"x\", arr[i][j] );\n            product *= arr[i][j];\n            console.log(\"Product so Far:\", product);\n        }\n    }\n    return product;\n}\n\nconsole.log(\"For loop result:\", multiplyAllWithFor(testArray));\n\n// While loop version\nfunction multiplyAllWithWhile(array){\n    var product = 1;\n    var i = 0;\n    \n    while(i < array.length){\n        var j = 0;\n        while(j < array[i].length){\n            product *= array[i][j];\n            j++;\n        }\n        i++;\n    }\n    return product;\n}\n\nconsole.log(\"While loop result:\", multiplyAllWithWhile(testArray));\n\n// More examples\nvar matrix1 = [[2, 3], [4, 5]];\nvar matrix2 = [[1, 2, 3], [4, 5, 6]];\nvar matrix3 = [[10], [20], [30]];\n\nconsole.log(\"Matrix 1 product:\", multiplyAllWithFor(matrix1)); // 2*3*4*5 = 120\nconsole.log(\"Matrix 2 product:\", multiplyAllWithFor(matrix2)); // 1*2*3*4*5*6 = 720\nconsole.log(\"Matrix 3 product:\", multiplyAllWithFor(matrix3)); // 10*20*30 = 6000\n\n// Practical example: calculate total price from nested cart\nvar shoppingCart = [\n    [2, 5],    // 2 items at $5 each\n    [3, 10],   // 3 items at $10 each\n    [1, 25]    // 1 item at $25 each\n];\n\nfunction calculateTotal(cart) {\n    var total = 0;\n    for (var i = 0; i < cart.length; i++) {\n        var quantity = cart[i][0];\n        var price = cart[i][1];\n        total += quantity * price;\n    }\n    return total;\n}\n\nconsole.log(\"Shopping cart total: $\", calculateTotal(shoppingCart));"
  },
  {
    "question": "How do you write a do-while loop that adds numbers to an array?",
    "answer": "**Do-While Loop**\n\n```javascript\nvar myarray = [];\nvar i = 0;\ndo{\n    myarray.push(i);\n    i++;\n}\nwhile(i < 5);\n\nconsole.log(myarray);\n```\n\n**Key difference:**\n- **Do-while:** Runs the code block ONCE before checking the condition\n- **While loop:** Checks condition FIRST before running\n- **do { ... } while(condition):** Guarantees at least one execution\n- **Use case:** When you need to execute code at least once regardless of condition",
    "type": "javascript",
    "tags": ["javascript", "loops", "do-while", "arrays"],
    "code": "// Basic do-while loop\nvar myarray = [];\nvar i = 0;\ndo{\n    myarray.push(i);\n    i++;\n}\nwhile(i < 5);\n\nconsole.log(\"Do-while result:\", myarray); // [0, 1, 2, 3, 4]\n\n// Comparison: while vs do-while\nvar whileArray = [];\nvar doWhileArray = [];\nvar counter = 10; // Start with 10 (condition will be false)\n\n// While loop - won't execute because 10 < 5 is false\nwhile(counter < 5) {\n    whileArray.push(counter);\n    counter++;\n}\nconsole.log(\"While loop result:\", whileArray); // []\n\n// Reset counter\ncounter = 10;\n\n// Do-while loop - will execute once even though 10 < 5 is false\ndo {\n    doWhileArray.push(counter);\n    counter++;\n}\nwhile(counter < 5);\nconsole.log(\"Do-while result:\", doWhileArray); // [10]\n\n// Practical example: user input validation\nfunction getUserInput() {\n    var attempts = [];\n    var userInput;\n    var attempts = 0;\n    \n    do {\n        attempts++;\n        attempts.push(attempts);\n        // Simulate user input (in real app, this would be prompt() or form input)\n        userInput = Math.random() > 0.7 ? \"valid\" : \"invalid\";\n        console.log(\"Attempt\", attempts, \":\", userInput);\n    }\n    while(userInput !== \"valid\" && attempts < 3);\n    \n    return userInput;\n}\n\nconsole.log(\"Final result:\", getUserInput());\n\n// Another example: menu system\nvar menuChoices = [];\nvar choice = 0;\n\ndo {\n    choice = Math.floor(Math.random() * 5); // Simulate menu choice\n    menuChoices.push(choice);\n    console.log(\"Menu choice:\", choice);\n}\nwhile(choice !== 4); // Exit when choice is 4\n\nconsole.log(\"All menu choices:\", menuChoices);"
  },
  {
    "question": "What is the profile lookup challenge in JavaScript?",
    "answer": "**Profile Lookup Challenge**\n\nThe profile lookup challenge involves searching through an array of contact objects to find a specific person and return a requested property.\n\n**Example:**\n```javascript\nvar contacts = [\n    {\n        firstName: \"John\",\n        lastName: \"Doe\",\n        number: \"123456789\",\n        likes: [\"Pizza\", \"Coding\"]\n    },\n    {\n        firstName: \"Jane\",\n        lastName: \"Smith\",\n        number: \"987654321\",\n        likes: [\"Pasta\", \"Music\"]\n    }\n];\n\nfunction lookUpProfile(name, prop){\n    for(var i = 0; i < contacts.length; i++)\n        if (contacts[i].firstName === name){\n            return contacts[i][prop] || \"No Such Property\";\n        }\n    return \"No Such Contact\"\n}\n```\n\n**Key concepts:**\n- **Array of objects:** Multiple contact records\n- **Property access:** Using bracket notation with variables\n- **Fallback values:** Using || operator for missing properties\n- **Loop through array:** Check each contact until found",
    "type": "javascript",
    "tags": ["javascript", "objects", "arrays", "lookup", "search"],
    "code": "// Contact database\nvar contacts = [\n    {\n        firstName: \"John\",\n        lastName: \"Doe\",\n        number: \"123456789\",\n        likes: [\"Pizza\", \"Coding\"]\n    },\n    {\n        firstName: \"Jane\",\n        lastName: \"Smith\",\n        number: \"987654321\",\n        likes: [\"Pasta\", \"Music\"]\n    },\n    {\n        firstName: \"Emily\",\n        lastName: \"Jones\",\n        number: \"555555555\",\n        likes: [\"Movies\", \"Swimming\"]\n    }\n];\n\n// Profile lookup function\nfunction lookUpProfile(name, prop){\n    for(var i = 0; i < contacts.length; i++) {\n        if (contacts[i].firstName === name){\n            return contacts[i][prop] || \"No Such Property\";\n        }\n    }\n    return \"No Such Contact\";\n}\n\n// Test cases\nconsole.log(lookUpProfile(\"Jane\", \"likes\")); // [\"Pasta\", \"Music\"]\nconsole.log(lookUpProfile(\"John\", \"number\")); // \"123456789\"\nconsole.log(lookUpProfile(\"Emily\", \"lastName\")); // \"Jones\"\nconsole.log(lookUpProfile(\"Jane\", \"age\")); // \"No Such Property\"\nconsole.log(lookUpProfile(\"Bob\", \"likes\")); // \"No Such Contact\"\n\n// Enhanced version with more error handling\nfunction lookUpProfileEnhanced(name, prop){\n    // Check if name is provided\n    if (!name) return \"Name is required\";\n    \n    // Check if prop is provided\n    if (!prop) return \"Property is required\";\n    \n    for(var i = 0; i < contacts.length; i++) {\n        if (contacts[i].firstName === name){\n            // Check if property exists\n            if (contacts[i].hasOwnProperty(prop)) {\n                return contacts[i][prop];\n            } else {\n                return \"No Such Property\";\n            }\n        }\n    }\n    return \"No Such Contact\";\n}\n\nconsole.log(\"Enhanced lookup:\", lookUpProfileEnhanced(\"Jane\", \"likes\"));\n\n// Practical example: phone book search\nfunction searchPhoneBook(searchTerm, searchField) {\n    var results = [];\n    for(var i = 0; i < contacts.length; i++) {\n        if (contacts[i][searchField] && contacts[i][searchField].toString().toLowerCase().includes(searchTerm.toLowerCase())) {\n            results.push(contacts[i]);\n        }\n    }\n    return results;\n}\n\nconsole.log(\"Search results:\", searchPhoneBook(\"pizza\", \"likes\"));"
  },
  {
    "question": "How do you generate random decimals and whole numbers in JavaScript?",
    "answer": "**Generating Random Numbers**\n\n**Random Decimals:**\n```javascript\nfunction randomFunction(){\n    return Math.random(); // Returns decimal between 0 and 1\n}\n```\n\n**Random Whole Numbers:**\n```javascript\nvar randomNumber = Math.floor(Math.random() * 20);\n// OR\nfunction randomDigit(){\n    var rD = Math.floor(Math.random() * 10);\n    return rD;\n}\n```\n\n**Key concepts:**\n- **Math.random():** Returns decimal between 0 (inclusive) and 1 (exclusive)\n- **Math.floor():** Rounds down to nearest whole number\n- **Math.random() * 20:** Scales to range 0-19.999...\n- **Math.floor(Math.random() * 20):** Gives integers 0-19",
    "type": "javascript",
    "tags": ["javascript", "math", "random", "numbers"],
    "code": "// Random decimal between 0 and 1\nfunction randomFunction(){\n    return Math.random();\n}\n\nconsole.log(\"Random decimal:\", randomFunction());\nconsole.log(\"Random decimal:\", randomFunction());\nconsole.log(\"Random decimal:\", randomFunction());\n\n// Random whole number between 0 and 19\nvar randomNumber = Math.floor(Math.random() * 20);\nconsole.log(\"Random whole number (0-19):\", randomNumber);\n\n// Random digit between 0 and 9\nfunction randomDigit(){\n    var rD = Math.floor(Math.random() * 10);\n    return rD;\n}\n\nconsole.log(\"Random digit (0-9):\", randomDigit());\nconsole.log(\"Random digit (0-9):\", randomDigit());\n\n// More examples\n// Random number between 1 and 10\nvar random1to10 = Math.floor(Math.random() * 10) + 1;\nconsole.log(\"Random 1-10:\", random1to10);\n\n// Random number between 5 and 15\nvar random5to15 = Math.floor(Math.random() * 11) + 5;\nconsole.log(\"Random 5-15:\", random5to15);\n\n// Random decimal between 0 and 100\nvar randomDecimal = Math.random() * 100;\nconsole.log(\"Random decimal 0-100:\", randomDecimal);\n\n// Random boolean (true/false)\nvar randomBoolean = Math.random() > 0.5;\nconsole.log(\"Random boolean:\", randomBoolean);\n\n// Random array element\nvar colors = [\"red\", \"blue\", \"green\", \"yellow\", \"purple\"];\nvar randomColor = colors[Math.floor(Math.random() * colors.length)];\nconsole.log(\"Random color:\", randomColor);\n\n// Dice roll simulation\nfunction rollDice() {\n    return Math.floor(Math.random() * 6) + 1;\n}\n\nconsole.log(\"Dice roll:\", rollDice());\nconsole.log(\"Dice roll:\", rollDice());\nconsole.log(\"Dice roll:\", rollDice());"
  },
  {
    "question": "What is the difference between Math.floor and Math.round?",
    "answer": "**Math.floor vs Math.round**\n\n**Math.floor():**\n- Always rounds DOWN to the nearest whole number\n- If you have 5.8, it becomes 5\n- If you have 2.3, it becomes 2\n- If you have 3.999, it still becomes 3\n- It never goes up, just chops off the decimal part\n\n**Math.round():**\n- Rounds to the nearest whole number\n- If the decimal is .5 or higher, it goes UP\n- If the decimal is less than .5, it goes DOWN\n\n**Examples:**\n- Math.round(5.8) → 6\n- Math.round(5.3) → 5\n- Math.round(3.5) → 4\n- Math.round(3.49) → 3",
    "type": "javascript",
    "tags": ["javascript", "math", "floor", "round", "numbers"],
    "code": "// Math.floor examples\nconsole.log(\"Math.floor(5.8):\", Math.floor(5.8)); // 5\nconsole.log(\"Math.floor(2.3):\", Math.floor(2.3)); // 2\nconsole.log(\"Math.floor(3.999):\", Math.floor(3.999)); // 3\nconsole.log(\"Math.floor(-2.3):\", Math.floor(-2.3)); // -3\nconsole.log(\"Math.floor(-5.8):\", Math.floor(-5.8)); // -6\n\n// Math.round examples\nconsole.log(\"Math.round(5.8):\", Math.round(5.8)); // 6\nconsole.log(\"Math.round(5.3):\", Math.round(5.3)); // 5\nconsole.log(\"Math.round(3.5):\", Math.round(3.5)); // 4\nconsole.log(\"Math.round(3.49):\", Math.round(3.49)); // 3\nconsole.log(\"Math.round(-2.3):\", Math.round(-2.3)); // -2\nconsole.log(\"Math.round(-2.7):\", Math.round(-2.7)); // -3\n\n// Comparison table\nvar testNumbers = [1.1, 1.5, 1.9, 2.0, 2.4, 2.5, 2.6, 3.0];\nconsole.log(\"Number\\tFloor\\tRound\");\nfor (var i = 0; i < testNumbers.length; i++) {\n    var num = testNumbers[i];\n    console.log(num + \"\\t\" + Math.floor(num) + \"\\t\" + Math.round(num));\n}\n\n// Practical examples\n// Converting random decimals to whole numbers\nvar randomDecimal = Math.random() * 10;\nconsole.log(\"Random decimal:\", randomDecimal);\nconsole.log(\"Using floor:\", Math.floor(randomDecimal));\nconsole.log(\"Using round:\", Math.round(randomDecimal));\n\n// Price calculations\nvar price = 19.99;\nconsole.log(\"Original price:\", price);\nconsole.log(\"Floor price:\", Math.floor(price)); // $19\nconsole.log(\"Round price:\", Math.round(price)); // $20\n\n// Time calculations\nvar hours = 8.7;\nconsole.log(\"Hours worked:\", hours);\nconsole.log(\"Floor hours:\", Math.floor(hours)); // 8 hours\nconsole.log(\"Round hours:\", Math.round(hours)); // 9 hours"
  },
  {
    "question": "How do you generate random whole numbers within a range?",
    "answer": "**Random Numbers Within a Range**\n\n```javascript\nfunction withinRange(myMin, myMax){\n    var rD = Math.floor(Math.random() * (myMax - myMin + 1) + myMin);\n    return rD;\n}\n\nconsole.log(withinRange(1, 10));\n```\n\n**Formula breakdown:**\n- **myMax - myMin + 1:** Total number of possible values\n- **Math.random() * (myMax - myMin + 1):** Random decimal 0 to range\n- **+ myMin:** Shifts range to start from myMin\n- **Math.floor():** Converts to whole number\n\n**Examples:**\n- Range 1-10: Math.floor(Math.random() * 10 + 1)\n- Range 5-15: Math.floor(Math.random() * 11 + 5)\n- Range 0-9: Math.floor(Math.random() * 10)",
    "type": "javascript",
    "tags": ["javascript", "math", "random", "range", "numbers"],
    "code": "// Random number within range function\nfunction withinRange(myMin, myMax){\n    var rD = Math.floor(Math.random() * (myMax - myMin + 1) + myMin);\n    return rD;\n}\n\n// Test the function\nconsole.log(\"Random 1-10:\", withinRange(1, 10));\nconsole.log(\"Random 1-10:\", withinRange(1, 10));\nconsole.log(\"Random 1-10:\", withinRange(1, 10));\n\n// More examples\nconsole.log(\"Random 5-15:\", withinRange(5, 15));\nconsole.log(\"Random 0-9:\", withinRange(0, 9));\nconsole.log(\"Random 10-20:\", withinRange(10, 20));\nconsole.log(\"Random -5 to 5:\", withinRange(-5, 5));\n\n// Practical examples\n// Roll a die (1-6)\nfunction rollDie() {\n    return withinRange(1, 6);\n}\nconsole.log(\"Die roll:\", rollDie());\n\n// Pick random month (1-12)\nfunction randomMonth() {\n    return withinRange(1, 12);\n}\nconsole.log(\"Random month:\", randomMonth());\n\n// Random year between 1990-2023\nfunction randomYear() {\n    return withinRange(1990, 2023);\n}\nconsole.log(\"Random year:\", randomYear());\n\n// Random letter (A-Z)\nfunction randomLetter() {\n    var letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    var randomIndex = withinRange(0, 25);\n    return letters[randomIndex];\n}\nconsole.log(\"Random letter:\", randomLetter());\n\n// Random password generator\nfunction generatePassword(length) {\n    var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var password = '';\n    for (var i = 0; i < length; i++) {\n        var randomIndex = withinRange(0, chars.length - 1);\n        password += chars[randomIndex];\n    }\n    return password;\n}\nconsole.log(\"Random password:\", generatePassword(8));\n\n// Lottery number generator\nfunction lotteryNumbers(count, max) {\n    var numbers = [];\n    for (var i = 0; i < count; i++) {\n        numbers.push(withinRange(1, max));\n    }\n    return numbers;\n}\nconsole.log(\"Lottery numbers:\", lotteryNumbers(6, 49));"
  },
  {
    "question": "What is the parseInt function and how do you use it?",
    "answer": "**parseInt Function**\n\nThe parseInt() function converts a string to an integer (whole number).\n\n**Basic usage:**\n```javascript\nfunction convertToInteger(str) {\n    return parseInt(str);\n}\nconsole.log(convertToInteger(\"122\")); // 122\nconsole.log(convertToInteger(\"text\")); // NaN\n```\n\n**With radix (base):**\n```javascript\nfunction convertToInteger(str) {\n    return parseInt(str, 2); // Base 2 (binary)\n}\nconsole.log(convertToInteger(\"101\")); // 5\n```\n\n**Key concepts:**\n- **parseInt(string):** Converts string to integer\n- **parseInt(string, radix):** Converts using specific number base\n- **Returns NaN:** If string cannot be converted\n- **Stops at first non-digit:** parseInt(\"123abc\") returns 123",
    "type": "javascript",
    "tags": ["javascript", "parseInt", "conversion", "numbers"],
    "code": "// Basic parseInt examples\nfunction convertToInteger(str) {\n    return parseInt(str);\n}\n\nconsole.log(\"parseInt('122'):\", convertToInteger(\"122\")); // 122\nconsole.log(\"parseInt('text'):\", convertToInteger(\"text\")); // NaN\nconsole.log(\"parseInt('123abc'):\", convertToInteger(\"123abc\")); // 123\nconsole.log(\"parseInt('abc123'):\", convertToInteger(\"abc123\")); // NaN\n\n// parseInt with different bases\nfunction convertToIntegerWithBase(str, base) {\n    return parseInt(str, base);\n}\n\n// Binary (base 2)\nconsole.log(\"parseInt('101', 2):\", convertToIntegerWithBase(\"101\", 2)); // 5\nconsole.log(\"parseInt('1100', 2):\", convertToIntegerWithBase(\"1100\", 2)); // 12\n\n// Octal (base 8)\nconsole.log(\"parseInt('17', 8):\", convertToIntegerWithBase(\"17\", 8)); // 15\nconsole.log(\"parseInt('64', 8):\", convertToIntegerWithBase(\"64\", 8)); // 52\n\n// Hexadecimal (base 16)\nconsole.log(\"parseInt('FF', 16):\", convertToIntegerWithBase(\"FF\", 16)); // 255\nconsole.log(\"parseInt('2A', 16):\", convertToIntegerWithBase(\"2A\", 16)); // 42\n\n// Practical examples\n// Convert user input to number\nfunction getUserAge(input) {\n    var age = parseInt(input);\n    if (isNaN(age)) {\n        return \"Please enter a valid number\";\n    }\n    return \"You are \" + age + \" years old\";\n}\n\nconsole.log(getUserAge(\"25\")); // \"You are 25 years old\"\nconsole.log(getUserAge(\"abc\")); // \"Please enter a valid number\"\n\n// Parse coordinates\nfunction parseCoordinates(xStr, yStr) {\n    var x = parseInt(xStr);\n    var y = parseInt(yStr);\n    return { x: x, y: y };\n}\n\nconsole.log(\"Coordinates:\", parseCoordinates(\"10\", \"20\"));\n\n// Convert binary to decimal\nfunction binaryToDecimal(binaryStr) {\n    return parseInt(binaryStr, 2);\n}\n\nconsole.log(\"Binary 1010 to decimal:\", binaryToDecimal(\"1010\")); // 10\nconsole.log(\"Binary 1111 to decimal:\", binaryToDecimal(\"1111\")); // 15"
  },
  {
    "question": "What are the different number bases in programming?",
    "answer": "**Number Bases Explained**\n\n**Base 2 (Binary):**\n- Digits used: Only 0 and 1\n- Where used: Inside computers, everything is stored as 0s and 1s\n- Example: Binary 101 = (1×4) + (0×2) + (1×1) = 5 in decimal\n- parseInt(\"101\", 2) returns 5\n\n**Base 8 (Octal):**\n- Digits used: 0 to 7\n- Where used: Early computers, Unix file permissions\n- Example: Octal 17 = (1×8) + (7×1) = 15 in decimal\n- parseInt(\"17\", 8) returns 15\n\n**Base 10 (Decimal):**\n- Digits used: 0 to 9\n- Where used: Normal counting system\n- Example: 254 = 2×100 + 5×10 + 4×1 = 254\n- parseInt(\"254\", 10) returns 254\n\n**Base 16 (Hexadecimal):**\n- Digits used: 0-9, A-F (A=10, B=11, ..., F=15)\n- Where used: Computers, web color codes (#FF0000)\n- Example: Hex 2A = (2×16) + (10×1) = 42 in decimal\n- parseInt(\"2A\", 16) returns 42\n\n**Base 36:**\n- Digits used: 0-9, A-Z (A=10, ..., Z=35)\n- Where used: Web-shortening services, unique codes\n- Example: Z = 35 in decimal\n- parseInt(\"Z\", 36) returns 35",
    "type": "javascript",
    "tags": ["javascript", "number-bases", "binary", "hexadecimal", "octal"],
    "code": "// Base 2 (Binary) examples\nconsole.log(\"Binary 101:\", parseInt(\"101\", 2)); // 5\nconsole.log(\"Binary 1100:\", parseInt(\"1100\", 2)); // 12\nconsole.log(\"Binary 1111:\", parseInt(\"1111\", 2)); // 15\n\n// Base 8 (Octal) examples\nconsole.log(\"Octal 17:\", parseInt(\"17\", 8)); // 15\nconsole.log(\"Octal 64:\", parseInt(\"64\", 8)); // 52\nconsole.log(\"Octal 777:\", parseInt(\"777\", 8)); // 511\n\n// Base 10 (Decimal) examples\nconsole.log(\"Decimal 254:\", parseInt(\"254\", 10)); // 254\nconsole.log(\"Decimal 1000:\", parseInt(\"1000\", 10)); // 1000\n\n// Base 16 (Hexadecimal) examples\nconsole.log(\"Hex 2A:\", parseInt(\"2A\", 16)); // 42\nconsole.log(\"Hex FF:\", parseInt(\"FF\", 16)); // 255\nconsole.log(\"Hex 1A3:\", parseInt(\"1A3\", 16)); // 419\n\n// Base 36 examples\nconsole.log(\"Base 36 Z:\", parseInt(\"Z\", 36)); // 35\nconsole.log(\"Base 36 10:\", parseInt(\"10\", 36)); // 36\nconsole.log(\"Base 36 ABC:\", parseInt(\"ABC\", 36)); // 13368\n\n// Practical examples\n// Convert decimal to binary\nfunction decimalToBinary(decimal) {\n    return decimal.toString(2);\n}\nconsole.log(\"5 in binary:\", decimalToBinary(5)); // \"101\"\nconsole.log(\"12 in binary:\", decimalToBinary(12)); // \"1100\"\n\n// Convert decimal to hexadecimal\nfunction decimalToHex(decimal) {\n    return decimal.toString(16).toUpperCase();\n}\nconsole.log(\"255 in hex:\", decimalToHex(255)); // \"FF\"\nconsole.log(\"42 in hex:\", decimalToHex(42)); // \"2A\"\n\n// Color code converter\nfunction hexToRGB(hex) {\n    var r = parseInt(hex.substring(1, 3), 16);\n    var g = parseInt(hex.substring(3, 5), 16);\n    var b = parseInt(hex.substring(5, 7), 16);\n    return { r: r, g: g, b: b };\n}\n\nconsole.log(\"#FF0000 RGB:\", hexToRGB(\"#FF0000\")); // {r: 255, g: 0, b: 0}\nconsole.log(\"#00FF00 RGB:\", hexToRGB(\"#00FF00\")); // {r: 0, g: 255, b: 0}\n\n// File permissions (octal)\nfunction parsePermissions(octal) {\n    var permissions = parseInt(octal, 8);\n    return {\n        owner: (permissions & 0700) >> 6,\n        group: (permissions & 0070) >> 3,\n        other: permissions & 0007\n    };\n}\n\nconsole.log(\"Permissions 755:\", parsePermissions(\"755\"));\nconsole.log(\"Permissions 644:\", parsePermissions(\"644\"));"
  },
  {
    "question": "How do you use the ternary conditional operator?",
    "answer": "**Ternary Conditional Operator**\n\nThe ternary operator is a shortcut for if-else statements.\n\n**Syntax:**\n```javascript\ncondition ? valueIfTrue : valueIfFalse\n```\n\n**Basic example:**\n```javascript\nfunction checkEquality(a, b){\n    return a === b ? true : false;\n}\nconsole.log(checkEquality(2, 2)); // true\n```\n\n**Multiple ternary operators:**\n```javascript\nfunction checkSign(num){\n    return num > 0 ? \"positive\" : num < 0 ? \"negative\" : \"zero\";\n}\n```\n\n**Key concepts:**\n- **? :** Three parts: condition, true value, false value\n- **Shorter than if-else:** One line instead of multiple\n- **Returns a value:** Can be assigned to variables\n- **Nested ternaries:** Can chain multiple conditions",
    "type": "javascript",
    "tags": ["javascript", "ternary", "conditional", "operator"],
    "code": "// Basic ternary operator\nfunction checkEquality(a, b){\n    return a === b ? true : false;\n}\n\nconsole.log(\"2 === 2:\", checkEquality(2, 2)); // true\nconsole.log(\"3 === 5:\", checkEquality(3, 5)); // false\n\n// Even simpler (ternary is redundant here)\nfunction isEqual(a, b){\n    return a === b; // This already returns true/false\n}\n\nconsole.log(\"isEqual(2, 2):\", isEqual(2, 2)); // true\n\n// Multiple ternary operators\nfunction checkSign(num){\n    return num > 0 ? \"positive\" : num < 0 ? \"negative\" : \"zero\";\n}\n\nconsole.log(\"checkSign(5):\", checkSign(5)); // \"positive\"\nconsole.log(\"checkSign(-3):\", checkSign(-3)); // \"negative\"\nconsole.log(\"checkSign(0):\", checkSign(0)); // \"zero\"\n\n// Practical examples\n// Age category\nfunction getAgeCategory(age){\n    return age >= 18 ? \"adult\" : \"minor\";\n}\n\nconsole.log(\"Age 25:\", getAgeCategory(25)); // \"adult\"\nconsole.log(\"Age 16:\", getAgeCategory(16)); // \"minor\"\n\n// Grade letter\nfunction getGrade(score){\n    return score >= 90 ? \"A\" : \n           score >= 80 ? \"B\" : \n           score >= 70 ? \"C\" : \n           score >= 60 ? \"D\" : \"F\";\n}\n\nconsole.log(\"Score 95:\", getGrade(95)); // \"A\"\nconsole.log(\"Score 75:\", getGrade(75)); // \"C\"\nconsole.log(\"Score 55:\", getGrade(55)); // \"F\"\n\n// Even/odd check\nfunction isEven(num){\n    return num % 2 === 0 ? \"even\" : \"odd\";\n}\n\nconsole.log(\"isEven(4):\", isEven(4)); // \"even\"\nconsole.log(\"isEven(7):\", isEven(7)); // \"odd\"\n\n// Maximum of two numbers\nfunction max(a, b){\n    return a > b ? a : b;\n}\n\nconsole.log(\"max(10, 5):\", max(10, 5)); // 10\nconsole.log(\"max(3, 8):\", max(3, 8)); // 8\n\n// String manipulation\nfunction formatName(firstName, lastName){\n    return firstName && lastName ? firstName + \" \" + lastName : \n           firstName ? firstName : \n           lastName ? lastName : \"Anonymous\";\n}\n\nconsole.log(\"formatName('John', 'Doe'):\", formatName(\"John\", \"Doe\")); // \"John Doe\"\nconsole.log(\"formatName('John', ''):\", formatName(\"John\", \"\")); // \"John\"\nconsole.log(\"formatName('', ''):\", formatName(\"\", \"\")); // \"Anonymous\""
  },
  {
    "question": "What is the difference between var and let in JavaScript?",
    "answer": "**var vs let Differences**\n\n**Main difference:**\n- **var:** Can be redeclared in the same scope\n- **let:** Cannot be redeclared in the same scope\n\n**Scope differences:**\n- **var:** Has function scope (or global scope)\n- **let:** Has block scope (limited to { } blocks)\n\n**Examples:**\n```javascript\n// var can be redeclared\nvar x = 5;\nvar x = 10; // This works\n\n// let cannot be redeclared\nlet y = 5;\nlet y = 10; // This causes an error\n```\n\n**Scope example:**\n```javascript\n// var scope\nif (true) {\n    var a = 1;\n}\nconsole.log(a); // 1 (accessible outside block)\n\n// let scope\nif (true) {\n    let b = 1;\n}\nconsole.log(b); // Error! b is not accessible\n```",
    "type": "javascript",
    "tags": ["javascript", "var", "let", "scope", "variables"],
    "code": "// var can be redeclared\nvar x = 5;\nconsole.log(\"First x:\", x); // 5\n\nvar x = 10; // This works fine with var\nconsole.log(\"Second x:\", x); // 10\n\n// let cannot be redeclared\nlet y = 5;\nconsole.log(\"First y:\", y); // 5\n\n// let y = 10; // This would cause an error: SyntaxError: Identifier 'y' has already been declared\n\n// Scope differences\n// var has function scope\nfunction testVarScope() {\n    if (true) {\n        var varVariable = \"I'm var\";\n    }\n    console.log(\"varVariable:\", varVariable); // Accessible here\n}\ntestVarScope();\n\n// let has block scope\nfunction testLetScope() {\n    if (true) {\n        let letVariable = \"I'm let\";\n        console.log(\"letVariable inside block:\", letVariable); // Accessible here\n    }\n    // console.log(\"letVariable outside block:\", letVariable); // This would cause an error\n}\ntestLetScope();\n\n// Practical example: loop variables\nconsole.log(\"\\nLoop example:\");\n\n// var in loop - creates one variable shared across all iterations\nfor (var i = 0; i < 3; i++) {\n    setTimeout(function() {\n        console.log(\"var i:\", i); // All will print 3\n    }, 100);\n}\n\n// let in loop - creates separate variable for each iteration\nfor (let j = 0; j < 3; j++) {\n    setTimeout(function() {\n        console.log(\"let j:\", j); // Will print 0, 1, 2\n    }, 200);\n}\n\n// Hoisting differences\nconsole.log(\"\\nHoisting:\");\nconsole.log(\"varBeforeDeclaration:\", varBeforeDeclaration); // undefined (not error)\nvar varBeforeDeclaration = \"I'm hoisted\";\n\n// console.log(\"letBeforeDeclaration:\", letBeforeDeclaration); // This would cause an error: ReferenceError\nlet letBeforeDeclaration = \"I'm not hoisted\";\n\n// Best practices\n// Use let for variables that change\nlet counter = 0;\ncounter++;\nconsole.log(\"Counter:\", counter);\n\n// Use const for variables that don't change\nconst PI = 3.14159;\n// PI = 3.14; // This would cause an error\nconsole.log(\"PI:\", PI);"
  },
  {
    "question": "What is the 'use strict' directive in JavaScript?",
    "answer": "**'use strict' Directive**\n\n'use strict' is a special instruction that makes JavaScript code run in strict mode, catching common coding mistakes and preventing certain actions.\n\n**Where to use it:**\n1. **Top of file:** Makes entire file strict\n2. **Inside function:** Makes only that function strict\n\n**Examples:**\n```javascript\n// Top of file\n\"use strict\";\nvar x = 10;\n// All code in this file is strict\n\n// Inside function\nfunction doMath() {\n    \"use strict\";\n    // Only code INSIDE this function is strict\n}\n```\n\n**What strict mode prevents:**\n- Using variables without declaring them\n- Deleting variables, functions, or function arguments\n- Duplicate parameter names\n- Octal number literals\n- Using 'eval' and 'arguments' as variable names\n\n**Cannot use inside:**\n- Loops\n- If statements\n- Single statements\n- Only works for entire files or individual functions",
    "type": "javascript",
    "tags": ["javascript", "strict-mode", "directive", "best-practices"],
    "code": "// Example 1: Top of file strict mode\n\"use strict\";\n\n// This would cause an error in strict mode\n// undeclaredVariable = 10; // ReferenceError: undeclaredVariable is not defined\n\n// Proper way\nvar declaredVariable = 10;\nconsole.log(\"Declared variable:\", declaredVariable);\n\n// Example 2: Function-level strict mode\nfunction strictFunction() {\n    \"use strict\";\n    \n    // This function runs in strict mode\n    var localVar = \"I'm in strict mode\";\n    console.log(\"Strict function:\", localVar);\n}\n\nfunction normalFunction() {\n    // This function runs in normal mode\n    var localVar = \"I'm in normal mode\";\n    console.log(\"Normal function:\", localVar);\n}\n\nstrictFunction();\nnormalFunction();\n\n// Example 3: What strict mode prevents\nfunction demonstrateStrictMode() {\n    \"use strict\";\n    \n    // 1. Cannot delete variables\n    var testVar = \"test\";\n    // delete testVar; // This would cause an error in strict mode\n    \n    // 2. Cannot have duplicate parameter names\n    // function badFunction(a, a) { } // This would cause an error\n    \n    // 3. Cannot use octal literals\n    // var octal = 010; // This would cause an error in strict mode\n    \n    // 4. Cannot use 'eval' or 'arguments' as variable names\n    // var eval = 10; // This would cause an error\n    // var arguments = 10; // This would cause an error\n    \n    console.log(\"Strict mode prevents many common mistakes\");\n}\n\ndemonstrateStrictMode();\n\n// Example 4: Practical use case\nfunction calculateArea(length, width) {\n    \"use strict\";\n    \n    // Strict mode helps catch typos\n    // lenght = length; // This would cause an error (typo in variable name)\n    \n    return length * width;\n}\n\nconsole.log(\"Area:\", calculateArea(5, 10));\n\n// Example 5: Global strict mode\n\"use strict\";\n\n// This applies to the entire file\nfunction globalStrictFunction() {\n    // This function is also in strict mode\n    var x = 5;\n    console.log(\"Global strict function:\", x);\n}\n\nglobalStrictFunction();\n\n// Benefits of strict mode:\n// 1. Catches common coding mistakes\n// 2. Prevents accidental global variables\n// 3. Makes code more secure\n// 4. Prepares code for future JavaScript versions\n// 5. Makes debugging easier"
  },
  {
    "question": "Can a variable declared with const be reassigned?",
    "answer": "**const Variables**\n\n**Short answer:** NO, const variables cannot be reassigned.\n\n**What const means:**\n- **const:** Constant - value cannot be changed after declaration\n- **Must be initialized:** Must assign a value when declaring\n- **Cannot reassign:** Cannot give it a new value later\n\n**Example:**\n```javascript\nconst SENTENCE = str + \" is cool!\";\n// SENTENCE = \"new value\"; // This would cause an error\n```\n\n**Best practice:**\nUse ALL CAPITAL LETTERS for const variable names to indicate they're constants.\n\n**Important note:**\n- **Primitive values:** Cannot be changed (strings, numbers, booleans)\n- **Objects/Arrays:** The reference cannot change, but the contents can be modified\n- **Object.freeze():** Can prevent object mutation entirely",
    "type": "javascript",
    "tags": ["javascript", "const", "constants", "immutable"],
    "code": "// Basic const examples\nconst PI = 3.14159;\nconsole.log(\"PI:\", PI);\n// PI = 3.14; // This would cause an error: TypeError: Assignment to constant variable\n\nconst MAX_SIZE = 100;\nconsole.log(\"MAX_SIZE:\", MAX_SIZE);\n\n// const must be initialized\n// const UNINITIALIZED; // This would cause an error: SyntaxError: Missing initializer\n\n// Best practice: use ALL CAPS for constants\nconst COMPANY_NAME = \"EVERMIND\";\nconst API_URL = \"https://api.example.com\";\nconst MAX_RETRIES = 3;\n\nconsole.log(\"Company:\", COMPANY_NAME);\nconsole.log(\"API URL:\", API_URL);\nconsole.log(\"Max retries:\", MAX_RETRIES);\n\n// const with objects - reference cannot change, but contents can\nconst person = {\n    name: \"John\",\n    age: 30\n};\n\n// This works - modifying object contents\nperson.age = 31;\nperson.city = \"New York\";\nconsole.log(\"Modified person:\", person);\n\n// This would cause an error - reassigning the reference\n// person = { name: \"Jane\", age: 25 }; // TypeError: Assignment to constant variable\n\n// const with arrays - same behavior\nconst numbers = [1, 2, 3];\n\n// This works - modifying array contents\nnumbers.push(4);\nnumbers[0] = 10;\nconsole.log(\"Modified numbers:\", numbers);\n\n// This would cause an error - reassigning the reference\n// numbers = [5, 6, 7]; // TypeError: Assignment to constant variable\n\n// To prevent object mutation, use Object.freeze()\nconst frozenObject = Object.freeze({\n    name: \"Alice\",\n    age: 25\n});\n\n// This won't work - object is frozen\nfrozenObject.age = 26; // Silently fails in non-strict mode\nconsole.log(\"Frozen object:\", frozenObject); // age is still 25\n\n// Practical examples\nfunction createUser(name, email) {\n    const user = {\n        id: Math.random(),\n        name: name,\n        email: email,\n        createdAt: new Date()\n    };\n    \n    // user = {}; // This would cause an error\n    return user;\n}\n\nconst newUser = createUser(\"Bob\", \"bob@example.com\");\nconsole.log(\"New user:\", newUser);\n\n// Configuration constants\nconst CONFIG = {\n    API_BASE_URL: \"https://api.myapp.com\",\n    TIMEOUT: 5000,\n    RETRY_ATTEMPTS: 3\n};\n\nconsole.log(\"Config:\", CONFIG);\n\n// When to use const vs let\n// Use const when:\n// 1. Value never changes\n// 2. Reference to object/array never changes\n// 3. Function declarations\n// 4. Import statements\n\n// Use let when:\n// 1. Value changes\n// 2. Variable is reassigned\n// 3. Loop counters\n// 4. Conditional assignments"
  },
  {
    "question": "How can you mutate an array declared with const?",
    "answer": "**Mutating const Arrays**\n\n**Key concept:**\nconst prevents reassigning the array reference, but you can still modify the array contents.\n\n**What you CAN do:**\n```javascript\nconst S = [5, 4, 3];\nfunction mutateArray(){\n    \"use strict\";\n    S[0] = 2;  // Change element at index 0\n    S[1] = 1;  // Change element at index 1\n    S[2] = 0;  // Change element at index 2\n}\nmutateArray();\nconsole.log(S); // [2, 1, 0]\n```\n\n**What you CANNOT do:**\n```javascript\nconst S = [5, 4, 3];\n// S = [1, 2, 3]; // This would cause an error\n```\n\n**Object mutation:**\n```javascript\nconst mutateObj = {name: \"Sam\", age: 7};\nmutateObj.age = 8;        // This works\nmutateObj.name = \"Sally\"; // This works\nconsole.log(mutateObj);   // {name: \"Sally\", age: 8}\n\n// mutateObj = {name: \"Bob\"}; // This would cause an error\n```\n\n**To prevent mutation:**\nUse `Object.freeze()` to make objects/arrays truly immutable.",
    "type": "javascript",
    "tags": ["javascript", "const", "mutation", "arrays", "objects"],
    "code": "// Array mutation with const\nconst S = [5, 4, 3];\nconsole.log(\"Original array:\", S);\n\nfunction mutateArray(){\n    \"use strict\";\n    S[0] = 2;  // Change first element\n    S[1] = 1;  // Change second element\n    S[2] = 0;  // Change third element\n}\n\nmutateArray();\nconsole.log(\"Mutated array:\", S); // [2, 1, 0]\n\n// More array mutations\nconst numbers = [1, 2, 3, 4, 5];\nconsole.log(\"Original numbers:\", numbers);\n\n// These all work with const arrays\nnumbers.push(6);           // Add to end\nnumbers.unshift(0);       // Add to beginning\nnumbers.pop();            // Remove from end\nnumbers.shift();          // Remove from beginning\nnumbers.splice(2, 1, 99); // Replace element at index 2\n\nconsole.log(\"Modified numbers:\", numbers);\n\n// This would cause an error\n// numbers = [10, 20, 30]; // TypeError: Assignment to constant variable\n\n// Object mutation with const\nconst mutateObj = {name: \"Sam\", age: 7};\nconsole.log(\"Original object:\", mutateObj);\n\nmutateObj.age = 8;        // This works\nmutateObj.name = \"Sally\"; // This works\nmutateObj.city = \"NYC\";   // Add new property\n\nconsole.log(\"Mutated object:\", mutateObj); // {name: \"Sally\", age: 8, city: \"NYC\"}\n\n// This would cause an error\n// mutateObj = {name: \"Bob\"}; // TypeError: Assignment to constant variable\n\n// Preventing mutation with Object.freeze()\nconst frozenArray = Object.freeze([1, 2, 3]);\nconsole.log(\"Frozen array:\", frozenArray);\n\n// These won't work - array is frozen\nfrozenArray.push(4);      // Silently fails\nfrozenArray[0] = 10;      // Silently fails\nconsole.log(\"After attempts to modify:\", frozenArray); // Still [1, 2, 3]\n\nconst frozenObject = Object.freeze({name: \"Alice\", age: 25});\nconsole.log(\"Frozen object:\", frozenObject);\n\n// These won't work - object is frozen\nfrozenObject.age = 26;    // Silently fails\nfrozenObject.city = \"LA\"; // Silently fails\nconsole.log(\"After attempts to modify:\", frozenObject); // Still {name: \"Alice\", age: 25}\n\n// Practical example: configuration object\nconst CONFIG = {\n    apiUrl: \"https://api.example.com\",\n    timeout: 5000,\n    retries: 3\n};\n\n// You can modify the contents\nCONFIG.timeout = 10000;\nCONFIG.debug = true;\nconsole.log(\"Modified config:\", CONFIG);\n\n// But you cannot reassign the entire object\n// CONFIG = {}; // This would cause an error\n\n// Deep freeze for nested objects\nfunction deepFreeze(obj) {\n    Object.freeze(obj);\n    Object.getOwnPropertyNames(obj).forEach(function(prop) {\n        if (obj[prop] !== null && (typeof obj[prop] === \"object\" || typeof obj[prop] === \"function\")) {\n            deepFreeze(obj[prop]);\n        }\n    });\n    return obj;\n}\n\nconst deepFrozen = deepFreeze({\n    user: {name: \"John\", age: 30},\n    settings: {theme: \"dark\", lang: \"en\"}\n});\n\nconsole.log(\"Deep frozen object:\", deepFrozen);\n// deepFrozen.user.name = \"Jane\"; // This won't work either"
  },
  {
    "question": "How do you write arrow functions in JavaScript?",
    "answer": "**Arrow Functions**\n\nArrow functions are a shorter way to write function expressions.\n\n**Two ways to write functions:**\n\n**1. Function Expression (traditional):**\n```javascript\nvar magic = function() {\n    return new Date();\n};\n```\n\n**2. Arrow Function (ES6):**\n```javascript\nvar magic = () => new Date();\n```\n\n**With parameters:**\n```javascript\nvar myFunction = (arr1, arr2) => arr1.concat(arr2);\nconsole.log(myFunction([1, 2], [3, 4, 5])); // [1, 2, 3, 4, 5]\n```\n\n**Key concepts:**\n- **() =>** Arrow syntax\n- **Shorter syntax:** Less code to write\n- **Same functionality:** Does exactly the same thing\n- **Used in:** map, filter, and other array functions",
    "type": "javascript",
    "tags": ["javascript", "arrow-functions", "es6", "functions"],
    "code": "// Traditional function expression\nvar magic = function() {\n    return new Date();\n};\nconsole.log(\"Traditional function:\", magic());\n\n// Arrow function equivalent\nvar magicArrow = () => new Date();\nconsole.log(\"Arrow function:\", magicArrow());\n\n// Arrow function with parameters\nvar myFunction = (arr1, arr2) => arr1.concat(arr2);\nconsole.log(\"Concatenated arrays:\", myFunction([1, 2], [3, 4, 5])); // [1, 2, 3, 4, 5]\n\n// More arrow function examples\n// Single parameter (parentheses optional)\nvar square = x => x * x;\nconsole.log(\"Square of 5:\", square(5)); // 25\n\n// Multiple parameters\nvar add = (a, b) => a + b;\nconsole.log(\"Add 3 + 7:\", add(3, 7)); // 10\n\n// Arrow function with multiple statements\nvar processArray = (arr) => {\n    var doubled = arr.map(x => x * 2);\n    var filtered = doubled.filter(x => x > 5);\n    return filtered;\n};\n\nconsole.log(\"Processed array:\", processArray([1, 2, 3, 4, 5])); // [6, 8, 10]\n\n// Arrow functions in array methods\nvar numbers = [1, 2, 3, 4, 5];\n\n// Using arrow functions with map\nvar doubled = numbers.map(n => n * 2);\nconsole.log(\"Doubled:\", doubled); // [2, 4, 6, 8, 10]\n\n// Using arrow functions with filter\nvar evens = numbers.filter(n => n % 2 === 0);\nconsole.log(\"Even numbers:\", evens); // [2, 4]\n\n// Using arrow functions with reduce\nvar sum = numbers.reduce((total, num) => total + num, 0);\nconsole.log(\"Sum:\", sum); // 15\n\n// Arrow functions vs regular functions\n// Regular function\nfunction regularFunction(name) {\n    return \"Hello, \" + name + \"!\";\n}\n\n// Arrow function\nvar arrowFunction = (name) => \"Hello, \" + name + \"!\";\n\nconsole.log(\"Regular:\", regularFunction(\"Alice\"));\nconsole.log(\"Arrow:\", arrowFunction(\"Bob\"));\n\n// Practical examples\n// Event handler\nvar buttonClick = () => console.log(\"Button clicked!\");\n\n// Timer\nvar startTimer = () => {\n    var count = 0;\n    return setInterval(() => {\n        count++;\n        console.log(\"Count:\", count);\n    }, 1000);\n};\n\n// Data processing\nvar processUserData = (users) => {\n    return users\n        .filter(user => user.age >= 18)\n        .map(user => ({\n            name: user.name.toUpperCase(),\n            age: user.age,\n            isAdult: true\n        }));\n};\n\nvar users = [\n    {name: \"john\", age: 25},\n    {name: \"jane\", age: 17},\n    {name: \"bob\", age: 30}\n];\n\nconsole.log(\"Processed users:\", processUserData(users));"
  },
  {
    "question": "What is a function expression in JavaScript?",
    "answer": "**Function Expression**\n\nA function expression is when you write a function inside a variable.\n\n**Syntax:**\n```javascript\nvar functionName = function() {\n    // function body\n};\n```\n\n**Key concepts:**\n- **Stored in variable:** Function is assigned to a variable\n- **Anonymous function:** Function doesn't have a name (unless you give it one)\n- **Can be called:** Use the variable name to call the function\n- **Hoisting:** Function expressions are not hoisted (unlike function declarations)\n\n**Examples:**\n```javascript\n// Basic function expression\nvar greet = function(name) {\n    return \"Hello, \" + name + \"!\";\n};\n\n// Named function expression\nvar calculate = function add(a, b) {\n    return a + b;\n};\n```",
    "type": "javascript",
    "tags": ["javascript", "function-expression", "functions", "variables"],
    "code": "// Basic function expression\nvar greet = function(name) {\n    return \"Hello, \" + name + \"!\";\n};\n\nconsole.log(\"Greeting:\", greet(\"Alice\")); // \"Hello, Alice!\"\n\n// Named function expression\nvar calculate = function add(a, b) {\n    return a + b;\n};\n\nconsole.log(\"Sum:\", calculate(5, 3)); // 8\n\n// Function expression with multiple parameters\nvar multiply = function(x, y) {\n    return x * y;\n};\n\nconsole.log(\"Product:\", multiply(4, 6)); // 24\n\n// Function expression assigned to different variables\nvar operation1 = function(num) {\n    return num * 2;\n};\n\nvar operation2 = operation1; // Same function, different variable\n\nconsole.log(\"Operation 1:\", operation1(5)); // 10\nconsole.log(\"Operation 2:\", operation2(5)); // 10\n\n// Function expression as callback\nvar numbers = [1, 2, 3, 4, 5];\n\nvar double = function(num) {\n    return num * 2;\n};\n\nvar doubledNumbers = numbers.map(double);\nconsole.log(\"Doubled numbers:\", doubledNumbers); // [2, 4, 6, 8, 10]\n\n// Function expression vs function declaration\n// Function declaration (hoisted)\nconsole.log(\"Function declaration:\", declaredFunction()); // Works!\n\nfunction declaredFunction() {\n    return \"I'm hoisted!\";\n}\n\n// Function expression (not hoisted)\n// console.log(\"Function expression:\", expressionFunction()); // This would cause an error\n\nvar expressionFunction = function() {\n    return \"I'm not hoisted!\";\n};\n\nconsole.log(\"Function expression:\", expressionFunction()); // Works now!\n\n// Practical examples\n// Calculator functions\nvar calculator = {\n    add: function(a, b) {\n        return a + b;\n    },\n    subtract: function(a, b) {\n        return a - b;\n    },\n    multiply: function(a, b) {\n        return a * b;\n    },\n    divide: function(a, b) {\n        return b !== 0 ? a / b : \"Cannot divide by zero\";\n    }\n};\n\nconsole.log(\"Calculator:\");\nconsole.log(\"Add:\", calculator.add(10, 5)); // 15\nconsole.log(\"Subtract:\", calculator.subtract(10, 5)); // 5\nconsole.log(\"Multiply:\", calculator.multiply(10, 5)); // 50\nconsole.log(\"Divide:\", calculator.divide(10, 5)); // 2\n\n// Event handler function expression\nvar handleClick = function(event) {\n    console.log(\"Button clicked!\");\n    return \"Click handled\";\n};\n\n// Conditional function assignment\nvar userType = \"admin\";\nvar getUserPermissions = userType === \"admin\" ? \n    function() { return [\"read\", \"write\", \"delete\"]; } :\n    function() { return [\"read\"]; };\n\nconsole.log(\"User permissions:\", getUserPermissions());\n\n// Function expression with closure\nvar createCounter = function() {\n    var count = 0;\n    return function() {\n        count++;\n        return count;\n    };\n};\n\nvar counter = createCounter();\nconsole.log(\"Counter 1:\", counter()); // 1\nconsole.log(\"Counter 2:\", counter()); // 2\nconsole.log(\"Counter 3:\", counter()); // 3"
  },
  {
    "question": "What is the concat method in JavaScript?",
    "answer": "**concat Method**\n\nThe concat method joins (adds together) two or more arrays into one big array.\n\n**How it works:**\n- **Syntax:** `array1.concat(array2)`\n- **Returns:** New array with all elements combined\n- **Original arrays:** Left unchanged (not modified)\n\n**Example:**\n```javascript\nlet arr1 = [1, 2];\nlet arr2 = [3, 4, 5];\n\nlet result = arr1.concat(arr2);\nconsole.log(result); // [1, 2, 3, 4, 5]\n```\n\n**Key concepts:**\n- **Non-destructive:** Original arrays stay the same\n- **Returns new array:** Creates a new array with combined elements\n- **Multiple arrays:** Can concatenate more than two arrays\n- **Different from push:** concat doesn't modify the original array",
    "type": "javascript",
    "tags": ["javascript", "concat", "arrays", "join"],
    "code": "// Basic concat example\nlet arr1 = [1, 2];\nlet arr2 = [3, 4, 5];\n\nlet result = arr1.concat(arr2);\nconsole.log(\"Concatenated result:\", result); // [1, 2, 3, 4, 5]\nconsole.log(\"Original arr1:\", arr1); // [1, 2] (unchanged)\nconsole.log(\"Original arr2:\", arr2); // [3, 4, 5] (unchanged)\n\n// Concatenating multiple arrays\nlet array1 = [1, 2];\nlet array2 = [3, 4];\nlet array3 = [5, 6];\nlet array4 = [7, 8];\n\nlet combined = array1.concat(array2, array3, array4);\nconsole.log(\"Multiple arrays:\", combined); // [1, 2, 3, 4, 5, 6, 7, 8]\n\n// Concatenating with individual elements\nlet numbers = [1, 2, 3];\nlet withElements = numbers.concat(4, 5, 6);\nconsole.log(\"With elements:\", withElements); // [1, 2, 3, 4, 5, 6]\n\n// Concatenating different data types\nlet mixed1 = [1, 2];\nlet mixed2 = [\"hello\", \"world\"];\nlet mixed3 = [true, false];\n\nlet mixedResult = mixed1.concat(mixed2, mixed3);\nconsole.log(\"Mixed types:\", mixedResult); // [1, 2, \"hello\", \"world\", true, false]\n\n// Practical examples\n// Combining user data\nlet activeUsers = [\"Alice\", \"Bob\"];\nlet inactiveUsers = [\"Charlie\", \"Diana\"];\nlet allUsers = activeUsers.concat(inactiveUsers);\nconsole.log(\"All users:\", allUsers);\n\n// Building shopping cart\nlet cart = [\"apple\", \"banana\"];\nlet newItems = [\"orange\", \"grape\"];\nlet updatedCart = cart.concat(newItems);\nconsole.log(\"Updated cart:\", updatedCart);\n\n// Combining arrays of objects\nlet users1 = [{name: \"John\", age: 25}];\nlet users2 = [{name: \"Jane\", age: 30}];\nlet allUsersObjects = users1.concat(users2);\nconsole.log(\"All user objects:\", allUsersObjects);\n\n// Flattening nested arrays\nlet nested = [[1, 2], [3, 4], [5, 6]];\nlet flattened = [].concat(...nested);\nconsole.log(\"Flattened:\", flattened); // [1, 2, 3, 4, 5, 6]\n\n// Alternative: using spread operator\nlet spreadResult = [...arr1, ...arr2];\nconsole.log(\"Spread operator:\", spreadResult); // [1, 2, 3, 4, 5]\n\n// Performance comparison\nlet bigArray1 = Array.from({length: 1000}, (_, i) => i);\nlet bigArray2 = Array.from({length: 1000}, (_, i) => i + 1000);\n\n// concat method\nlet concatResult = bigArray1.concat(bigArray2);\nconsole.log(\"concat result length:\", concatResult.length); // 2000\n\n// vs spread operator\nlet spreadResult2 = [...bigArray1, ...bigArray2];\nconsole.log(\"spread result length:\", spreadResult2.length); // 2000\n\n// Creating array copies\nlet original = [1, 2, 3, 4, 5];\nlet copy = [].concat(original);\nconsole.log(\"Original:\", original);\nconsole.log(\"Copy:\", copy);\nconsole.log(\"Are they the same?\", original === copy); // false (different arrays)\n\n// Adding elements to existing array\nlet baseArray = [\"red\", \"green\"];\nlet extendedArray = baseArray.concat(\"blue\", \"yellow\");\nconsole.log(\"Extended array:\", extendedArray); // [\"red\", \"green\", \"blue\", \"yellow\"]"
  },
  {
    "question": "What are parameters and arguments in JavaScript?",
    "answer": "**Parameters vs Arguments**\n\n**Parameters:**\nParameters are the named boxes that a function asks for. You list them in the function's definition (when you make the function).\n\n**Example:**\n```javascript\nfunction add(x, y) {\n    return x + y;\n}\n```\nHere, `x` and `y` are parameters. They're like buckets waiting to be filled.\n\n**Arguments:**\nArguments are the actual values you put into the function's boxes when you call it.\n\n**Example:**\n```javascript\nadd(2, 3);\n```\nHere, `2` and `3` are arguments. You're saying, \"Hey add function, put 2 in the first bucket (x), and 3 in the second (y).\"\n\n**Key concepts:**\n- **Parameters:** Defined in function declaration\n- **Arguments:** Passed when calling the function\n- **Order matters:** Arguments are assigned to parameters in order\n- **Can be different types:** Numbers, strings, objects, arrays, etc.",
    "type": "javascript",
    "tags": ["javascript", "parameters", "arguments", "functions"],
    "code": "// Parameters in function definition\nfunction add(x, y) {\n    return x + y;\n}\n\n// Arguments when calling the function\nconsole.log(\"add(2, 3):\", add(2, 3)); // 5\nconsole.log(\"add(10, 5):\", add(10, 5)); // 15\n\n// More examples\nfunction greet(name, age) {\n    return \"Hello, \" + name + \"! You are \" + age + \" years old.\";\n}\n\n// Different arguments\nconsole.log(greet(\"Alice\", 25)); // \"Hello, Alice! You are 25 years old.\"\nconsole.log(greet(\"Bob\", 30));   // \"Hello, Bob! You are 30 years old.\"\n\n// Function with multiple parameters\nfunction createUser(firstName, lastName, age, isActive) {\n    return {\n        firstName: firstName,\n        lastName: lastName,\n        age: age,\n        isActive: isActive,\n        fullName: firstName + \" \" + lastName\n    };\n}\n\n// Calling with arguments\nvar user1 = createUser(\"John\", \"Doe\", 25, true);\nvar user2 = createUser(\"Jane\", \"Smith\", 30, false);\n\nconsole.log(\"User 1:\", user1);\nconsole.log(\"User 2:\", user2);\n\n// Parameters can have default values\nfunction multiply(a, b = 1) {\n    return a * b;\n}\n\nconsole.log(\"multiply(5):\", multiply(5));     // 5 (b defaults to 1)\nconsole.log(\"multiply(5, 3):\", multiply(5, 3)); // 15\n\n// Parameters vs Arguments in practice\nfunction calculateArea(length, width) {\n    // length and width are PARAMETERS\n    return length * width;\n}\n\n// 10 and 5 are ARGUMENTS\nvar area = calculateArea(10, 5);\nconsole.log(\"Area:\", area); // 50\n\n// Function with array parameter\nfunction sumArray(numbers) {\n    var total = 0;\n    for (var i = 0; i < numbers.length; i++) {\n        total += numbers[i];\n    }\n    return total;\n}\n\n// Array as argument\nvar numbers = [1, 2, 3, 4, 5];\nconsole.log(\"Sum of array:\", sumArray(numbers)); // 15\n\n// Function with object parameter\nfunction processUser(user) {\n    return {\n        ...user,\n        processed: true,\n        processedAt: new Date()\n    };\n}\n\n// Object as argument\nvar userData = {\n    name: \"Alice\",\n    email: \"alice@example.com\"\n};\n\nconsole.log(\"Processed user:\", processUser(userData));\n\n// Rest parameters (collects multiple arguments)\nfunction sumAll(...numbers) {\n    var total = 0;\n    for (var i = 0; i < numbers.length; i++) {\n        total += numbers[i];\n    }\n    return total;\n}\n\nconsole.log(\"sumAll(1, 2, 3):\", sumAll(1, 2, 3)); // 6\nconsole.log(\"sumAll(1, 2, 3, 4, 5):\", sumAll(1, 2, 3, 4, 5)); // 15"
  },
  {
    "question": "What is the filter method in JavaScript?",
    "answer": "**filter Method**\n\nfilter is a tool you use on an array (a list). It lets you pick out some items—the ones that pass your test. It gives you a new array with only those items.\n\n**Example (with numbers):**\n```javascript\nlet nums = [1, 2, 3, 4, 5];\nlet onlyEven = nums.filter(n => n % 2 === 0);\nconsole.log(onlyEven); // [2, 4]\n```\nOnly the even numbers are kept!\n\n**How it works:**\n- **Tests each item:** Runs your test function on every element\n- **Returns new array:** Original array stays unchanged\n- **Keeps passing items:** Only elements that return true are included\n- **Skips failing items:** Elements that return false are excluded",
    "type": "javascript",
    "tags": ["javascript", "filter", "arrays", "method"],
    "code": "// Basic filter example\nlet nums = [1, 2, 3, 4, 5];\nlet onlyEven = nums.filter(n => n % 2 === 0);\nconsole.log(\"Even numbers:\", onlyEven); // [2, 4]\n\n// Filter with function\nfunction isEven(number) {\n    return number % 2 === 0;\n}\n\nlet evens = nums.filter(isEven);\nconsole.log(\"Evens with function:\", evens); // [2, 4]\n\n// Filter odd numbers\nlet odds = nums.filter(n => n % 2 !== 0);\nconsole.log(\"Odd numbers:\", odds); // [1, 3, 5]\n\n// Filter numbers greater than 3\nlet greaterThan3 = nums.filter(n => n > 3);\nconsole.log(\"Greater than 3:\", greaterThan3); // [4, 5]\n\n// Filter strings\nlet words = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"];\nlet longWords = words.filter(word => word.length > 5);\nconsole.log(\"Long words:\", longWords); // [\"banana\", \"cherry\", \"elderberry\"]\n\n// Filter objects\nlet users = [\n    {name: \"John\", age: 25, active: true},\n    {name: \"Jane\", age: 17, active: true},\n    {name: \"Bob\", age: 30, active: false},\n    {name: \"Alice\", age: 22, active: true}\n];\n\n// Filter active users\nlet activeUsers = users.filter(user => user.active);\nconsole.log(\"Active users:\", activeUsers);\n\n// Filter users over 18\nlet adults = users.filter(user => user.age >= 18);\nconsole.log(\"Adult users:\", adults);\n\n// Filter users with names starting with 'J'\nlet jUsers = users.filter(user => user.name.startsWith('J'));\nconsole.log(\"Users starting with J:\", jUsers);\n\n// Complex filtering\nlet complexFilter = users.filter(user => {\n    return user.active && user.age >= 18 && user.name.length > 3;\n});\nconsole.log(\"Complex filter:\", complexFilter);\n\n// Filter with index\nlet withIndex = nums.filter((num, index) => {\n    console.log(`Checking ${num} at index ${index}`);\n    return index % 2 === 0; // Keep every other element\n});\nconsole.log(\"Every other element:\", withIndex); // [1, 3, 5]\n\n// Practical examples\n// Filter out null/undefined values\nlet mixedArray = [1, null, 2, undefined, 3, \"\", 4, 0];\nlet truthyValues = mixedArray.filter(value => value);\nconsole.log(\"Truthy values:\", truthyValues); // [1, 2, 3, 4]\n\n// Filter unique values\nlet duplicates = [1, 2, 2, 3, 3, 3, 4, 5];\nlet unique = duplicates.filter((value, index, array) => {\n    return array.indexOf(value) === index;\n});\nconsole.log(\"Unique values:\", unique); // [1, 2, 3, 4, 5]\n\n// Filter products by price range\nlet products = [\n    {name: \"Laptop\", price: 1000},\n    {name: \"Mouse\", price: 25},\n    {name: \"Keyboard\", price: 75},\n    {name: \"Monitor\", price: 300}\n];\n\nlet affordableProducts = products.filter(product => product.price < 100);\nconsole.log(\"Affordable products:\", affordableProducts);\n\n// Filter and transform\nlet filteredAndTransformed = products\n    .filter(product => product.price > 50)\n    .map(product => product.name);\nconsole.log(\"Expensive product names:\", filteredAndTransformed);"
  },
  {
    "question": "What is the map method in JavaScript?",
    "answer": "**map Method**\n\nmap is another tool for arrays. It goes over every item in your array and changes it however you want. It gives you a new array, same length, but with changed items.\n\n**Example (with numbers):**\n```javascript\nlet nums = [1, 2, 3];\nlet doubled = nums.map(n => n * 2);\nconsole.log(doubled); // [2, 4, 6]\n```\nEvery number is doubled.\n\n**How it works:**\n- **Transforms each item:** Applies your function to every element\n- **Returns new array:** Original array stays unchanged\n- **Same length:** Output array has same number of elements\n- **One-to-one mapping:** Each input element becomes one output element",
    "type": "javascript",
    "tags": ["javascript", "map", "arrays", "transformation"],
    "code": "// Basic map example\nlet nums = [1, 2, 3];\nlet doubled = nums.map(n => n * 2);\nconsole.log(\"Doubled numbers:\", doubled); // [2, 4, 6]\n\n// Map with function\nfunction double(number) {\n    return number * 2;\n}\n\nlet doubledWithFunction = nums.map(double);\nconsole.log(\"Doubled with function:\", doubledWithFunction); // [2, 4, 6]\n\n// Map strings to uppercase\nlet names = [\"alice\", \"bob\", \"charlie\"];\nlet upperNames = names.map(name => name.toUpperCase());\nconsole.log(\"Uppercase names:\", upperNames); // [\"ALICE\", \"BOB\", \"CHARLIE\"]\n\n// Map numbers to strings\nlet numbers = [1, 2, 3, 4, 5];\nlet stringNumbers = numbers.map(n => \"Number: \" + n);\nconsole.log(\"String numbers:\", stringNumbers);\n\n// Map objects\nlet users = [\n    {name: \"John\", age: 25},\n    {name: \"Jane\", age: 30},\n    {name: \"Bob\", age: 35}\n];\n\n// Extract names only\nlet userNames = users.map(user => user.name);\nconsole.log(\"User names:\", userNames); // [\"John\", \"Jane\", \"Bob\"]\n\n// Transform objects\nlet userProfiles = users.map(user => ({\n    fullName: user.name,\n    age: user.age,\n    isAdult: user.age >= 18\n}));\nconsole.log(\"User profiles:\", userProfiles);\n\n// Map with index\nlet indexed = nums.map((num, index) => {\n    return `Index ${index}: ${num}`;\n});\nconsole.log(\"Indexed:\", indexed); // [\"Index 0: 1\", \"Index 1: 2\", \"Index 2: 3\"]\n\n// Map to create new objects\nlet products = [\n    {name: \"Laptop\", price: 1000},\n    {name: \"Mouse\", price: 25},\n    {name: \"Keyboard\", price: 75}\n];\n\nlet productsWithTax = products.map(product => ({\n    ...product,\n    priceWithTax: product.price * 1.1,\n    tax: product.price * 0.1\n}));\nconsole.log(\"Products with tax:\", productsWithTax);\n\n// Map arrays to lengths\nlet words = [\"apple\", \"banana\", \"cherry\"];\nlet wordLengths = words.map(word => word.length);\nconsole.log(\"Word lengths:\", wordLengths); // [5, 6, 6]\n\n// Map with conditional logic\nlet scores = [85, 92, 78, 96, 88];\nlet grades = scores.map(score => {\n    if (score >= 90) return 'A';\n    if (score >= 80) return 'B';\n    if (score >= 70) return 'C';\n    return 'F';\n});\nconsole.log(\"Grades:\", grades); // [\"B\", \"A\", \"C\", \"A\", \"B\"]\n\n// Practical examples\n// Convert temperatures\nlet celsius = [0, 25, 100];\nlet fahrenheit = celsius.map(temp => (temp * 9/5) + 32);\nconsole.log(\"Fahrenheit:\", fahrenheit); // [32, 77, 212]\n\n// Format currency\nlet prices = [19.99, 29.99, 39.99];\nlet formattedPrices = prices.map(price => `$${price.toFixed(2)}`);\nconsole.log(\"Formatted prices:\", formattedPrices);\n\n// Map and filter together\nlet mixedNumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nlet evenSquares = mixedNumbers\n    .filter(n => n % 2 === 0)\n    .map(n => n * n);\nconsole.log(\"Even squares:\", evenSquares); // [4, 16, 36, 64, 100]\n\n// Map nested arrays\nlet matrix = [[1, 2], [3, 4], [5, 6]];\nlet flattened = matrix.map(row => row.join('-'));\nconsole.log(\"Flattened matrix:\", flattened); // [\"1-2\", \"3-4\", \"5-6\"]\n\n// Map with default values\nlet userData = [\n    {name: \"John\", email: \"john@example.com\"},\n    {name: \"Jane\"}, // missing email\n    {name: \"Bob\", email: \"bob@example.com\"}\n];\n\nlet normalizedUsers = userData.map(user => ({\n    name: user.name,\n    email: user.email || \"no-email@example.com\"\n}));\nconsole.log(\"Normalized users:\", normalizedUsers);"
  },
  {
    "question": "What is the reduce function in JavaScript?",
    "answer": "**reduce Function**\n\nThe reduce function \"squishes\" an array down to a single value by applying a function to each element.\n\n**How it works (super simple):**\nYou give it a function and a starting number (or value). That function gets two things every time:\n- The \"current total\" (called accumulator)\n- The next item in your list\n\nIt keeps running your function for every item until everything is \"reduced\" into a single result.\n\n**Example:**\n```javascript\nlet nums = [1, 2, 3, 4, 5];\nlet sum = nums.reduce((total, next) => total + next, 0);\nconsole.log(sum); // 15\n```\n\n**Key concepts:**\n- **Accumulator:** Running total/result\n- **Current value:** Current array element\n- **Initial value:** Starting point (optional)\n- **Returns:** Single value (number, string, object, etc.)",
    "type": "javascript",
    "tags": ["javascript", "reduce", "arrays", "accumulation"],
    "code": "// Basic reduce example\nlet nums = [1, 2, 3, 4, 5];\nlet sum = nums.reduce((total, next) => total + next, 0);\nconsole.log(\"Sum:\", sum); // 15\n\n// Reduce without initial value\nlet sum2 = nums.reduce((total, next) => total + next);\nconsole.log(\"Sum without initial:\", sum2); // 15\n\n// Reduce to find maximum\nlet max = nums.reduce((max, current) => {\n    return current > max ? current : max;\n});\nconsole.log(\"Maximum:\", max); // 5\n\n// Reduce to find minimum\nlet min = nums.reduce((min, current) => {\n    return current < min ? current : min;\n});\nconsole.log(\"Minimum:\", min); // 1\n\n// Reduce to count occurrences\nlet words = [\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\"];\nlet wordCount = words.reduce((count, word) => {\n    count[word] = (count[word] || 0) + 1;\n    return count;\n}, {});\nconsole.log(\"Word count:\", wordCount); // {apple: 3, banana: 2, cherry: 1}\n\n// Reduce to flatten arrays\nlet nested = [[1, 2], [3, 4], [5, 6]];\nlet flattened = nested.reduce((flat, current) => {\n    return flat.concat(current);\n}, []);\nconsole.log(\"Flattened:\", flattened); // [1, 2, 3, 4, 5, 6]\n\n// Reduce to group by property\nlet people = [\n    {name: \"John\", age: 25, city: \"NYC\"},\n    {name: \"Jane\", age: 30, city: \"LA\"},\n    {name: \"Bob\", age: 25, city: \"NYC\"},\n    {name: \"Alice\", age: 30, city: \"LA\"}\n];\n\nlet groupedByAge = people.reduce((groups, person) => {\n    let age = person.age;\n    if (!groups[age]) {\n        groups[age] = [];\n    }\n    groups[age].push(person);\n    return groups;\n}, {});\nconsole.log(\"Grouped by age:\", groupedByAge);\n\n// Reduce to create object from array\nlet keyValuePairs = [\n    [\"name\", \"John\"],\n    [\"age\", 25],\n    [\"city\", \"NYC\"]\n];\n\nlet obj = keyValuePairs.reduce((result, [key, value]) => {\n    result[key] = value;\n    return result;\n}, {});\nconsole.log(\"Object from pairs:\", obj); // {name: \"John\", age: 25, city: \"NYC\"}\n\n// Reduce with mixed types\nlet mixedArray = [1, \"apple\", 5, \"banana\", 2];\nlet sumNumbers = mixedArray.reduce((sum, item) => {\n    return typeof item === \"number\" ? sum + item : sum;\n}, 0);\nconsole.log(\"Sum of numbers only:\", sumNumbers); // 8\n\n// Reduce to concatenate strings\nlet words2 = [\"Hello\", \"World\", \"JavaScript\"];\nlet sentence = words2.reduce((result, word) => {\n    return result + \" \" + word;\n}, \"\");\nconsole.log(\"Sentence:\", sentence.trim()); // \"Hello World JavaScript\"\n\n// Reduce to calculate average\nlet scores = [85, 92, 78, 96, 88];\nlet average = scores.reduce((sum, score, index, array) => {\n    sum += score;\n    if (index === array.length - 1) {\n        return sum / array.length;\n    }\n    return sum;\n}, 0);\nconsole.log(\"Average score:\", average); // 87.8\n\n// Practical examples\n// Shopping cart total\nlet cart = [\n    {name: \"Laptop\", price: 1000, quantity: 1},\n    {name: \"Mouse\", price: 25, quantity: 2},\n    {name: \"Keyboard\", price: 75, quantity: 1}\n];\n\nlet total = cart.reduce((sum, item) => {\n    return sum + (item.price * item.quantity);\n}, 0);\nconsole.log(\"Cart total:\", total); // 1125\n\n// Reduce to find longest word\nlet wordList = [\"apple\", \"banana\", \"cherry\", \"elderberry\"];\nlet longest = wordList.reduce((longest, current) => {\n    return current.length > longest.length ? current : longest;\n}, \"\");\nconsole.log(\"Longest word:\", longest); // \"elderberry\"\n\n// Reduce to create frequency map\nlet letters = [\"a\", \"b\", \"a\", \"c\", \"b\", \"a\"];\nlet frequency = letters.reduce((freq, letter) => {\n    freq[letter] = (freq[letter] || 0) + 1;\n    return freq;\n}, {});\nconsole.log(\"Letter frequency:\", frequency); // {a: 3, b: 2, c: 1}"
  },
  {
    "question": "What is the typeof operator in JavaScript?",
    "answer": "**typeof Operator**\n\ntypeof is a JavaScript tool (operator) that tells you what kind of data/value you have.\n\n**What typeof gives you:**\n- **\"string\"** — for text\n- **\"number\"** — for numbers\n- **\"boolean\"** — for true/false\n- **\"object\"** — for objects and arrays\n- **\"undefined\"** — for things not set\n- **\"function\"** — for functions\n\n**Examples:**\n```javascript\nconsole.log(typeof \"hello\"); // \"string\"\nconsole.log(typeof 42); // \"number\"\nconsole.log(typeof true); // \"boolean\"\nconsole.log(typeof [1, 2, 3]); // \"object\"\nconsole.log(typeof function(){}); // \"function\"\n```\n\n**Key concepts:**\n- **Returns string:** Always returns a string describing the type\n- **Arrays are objects:** Arrays show as \"object\" by typeof\n- **Use Array.isArray():** To check if something is specifically an array\n- **null returns \"object\":** This is a known JavaScript quirk",
    "type": "javascript",
    "tags": ["javascript", "typeof", "operator", "type-checking"],
    "code": "// Basic typeof examples\nconsole.log(\"typeof 'hello':\", typeof \"hello\"); // \"string\"\nconsole.log(\"typeof 42:\", typeof 42); // \"number\"\nconsole.log(\"typeof 3.14:\", typeof 3.14); // \"number\"\nconsole.log(\"typeof true:\", typeof true); // \"boolean\"\nconsole.log(\"typeof false:\", typeof false); // \"boolean\"\n\n// Object and array types\nconsole.log(\"typeof {a: 1}:\", typeof {a: 1}); // \"object\"\nconsole.log(\"typeof [1, 2, 3]:\", typeof [1, 2, 3]); // \"object\"\nconsole.log(\"typeof null:\", typeof null); // \"object\" (JavaScript quirk!)\n\n// Function type\nconsole.log(\"typeof function(){}:\", typeof function(){}); // \"function\"\n\n// Undefined type\nlet x;\nconsole.log(\"typeof undefined variable:\", typeof x); // \"undefined\"\nconsole.log(\"typeof undefined:\", typeof undefined); // \"undefined\"\n\n// Practical type checking\nfunction checkType(value) {\n    var type = typeof value;\n    console.log(\"Value:\", value, \"Type:\", type);\n    return type;\n}\n\ncheckType(\"Hello\"); // string\ncheckType(42); // number\ncheckType(true); // boolean\ncheckType([1, 2, 3]); // object\ncheckType({name: \"John\"}); // object\ncheckType(function(){}); // function\n\n// Type checking in functions\nfunction processValue(value) {\n    if (typeof value === \"string\") {\n        return \"Processing string: \" + value.toUpperCase();\n    } else if (typeof value === \"number\") {\n        return \"Processing number: \" + (value * 2);\n    } else if (typeof value === \"boolean\") {\n        return \"Processing boolean: \" + !value;\n    } else {\n        return \"Unknown type: \" + typeof value;\n    }\n}\n\nconsole.log(processValue(\"hello\")); // \"Processing string: HELLO\"\nconsole.log(processValue(5)); // \"Processing number: 10\"\nconsole.log(processValue(true)); // \"Processing boolean: false\"\n\n// Checking for arrays specifically\nfunction isArray(value) {\n    return Array.isArray(value);\n}\n\nconsole.log(\"isArray([1, 2, 3]):\", isArray([1, 2, 3])); // true\nconsole.log(\"isArray({a: 1}):\", isArray({a: 1})); // false\nconsole.log(\"typeof [1, 2, 3]:\", typeof [1, 2, 3]); // \"object\"\nconsole.log(\"Array.isArray([1, 2, 3]):\", Array.isArray([1, 2, 3])); // true\n\n// Type checking with mixed data\nlet mixedData = [\n    \"hello\",\n    42,\n    true,\n    [1, 2, 3],\n    {name: \"John\"},\n    function(){},\n    null,\n    undefined\n];\n\nmixedData.forEach((item, index) => {\n    console.log(`Item ${index}:`, item, \"Type:\", typeof item);\n});\n\n// Safe property access\nfunction safeAccess(obj, property) {\n    if (typeof obj === \"object\" && obj !== null) {\n        return obj[property];\n    }\n    return undefined;\n}\n\nlet user = {name: \"John\", age: 25};\nconsole.log(\"Safe access:\", safeAccess(user, \"name\")); // \"John\"\nconsole.log(\"Safe access (null):\", safeAccess(null, \"name\")); // undefined\n\n// Type validation\nfunction validateInput(input) {\n    if (typeof input === \"string\" && input.length > 0) {\n        return \"Valid string\";\n    } else if (typeof input === \"number\" && !isNaN(input)) {\n        return \"Valid number\";\n    } else {\n        return \"Invalid input\";\n    }\n}\n\nconsole.log(\"validateInput('hello'):\", validateInput(\"hello\")); // \"Valid string\"\nconsole.log(\"validateInput(42):\", validateInput(42)); // \"Valid number\"\nconsole.log(\"validateInput(''):\", validateInput(\"\")); // \"Invalid input\"\nconsole.log(\"validateInput(NaN):\", validateInput(NaN)); // \"Invalid input\"\n\n// typeof with function parameters\nfunction processData(data) {\n    console.log(\"Processing data of type:\", typeof data);\n    \n    switch (typeof data) {\n        case \"string\":\n            return data.length;\n        case \"number\":\n            return data * 2;\n        case \"boolean\":\n            return !data;\n        case \"object\":\n            if (Array.isArray(data)) {\n                return data.length;\n            }\n            return Object.keys(data).length;\n        default:\n            return \"Unknown type\";\n    }\n}\n\nconsole.log(\"processData('hello'):\", processData(\"hello\")); // 5\nconsole.log(\"processData(10):\", processData(10)); // 20\nconsole.log(\"processData(true):\", processData(true)); // false\nconsole.log(\"processData([1, 2, 3]):\", processData([1, 2, 3])); // 3\nconsole.log(\"processData({a: 1, b: 2}):\", processData({a: 1, b: 2})); // 2"
  },
  {
    "question": "What is Number.isInteger in JavaScript?",
    "answer": "**Number.isInteger()**\n\nNumber.isInteger() is a built-in JavaScript function that checks if something is a whole number (an integer).\n\n**What does it do?**\nIt takes any value and returns:\n- **true** if it's a whole number (like 1, 2, 42, -5)\n- **false** if it isn't (like 2.5, 5.6, 3.14)\n\n**Examples:**\n```javascript\nconsole.log(Number.isInteger(5)); // true\nconsole.log(Number.isInteger(5.0)); // true\nconsole.log(Number.isInteger(5.5)); // false\nconsole.log(Number.isInteger(\"5\")); // false\n```\n\n**Key concepts:**\n- **Checks data type:** Must be a number, not a string\n- **Whole numbers only:** Decimals return false\n- **Useful for validation:** Perfect for checking if user input is a valid integer\n- **Strict checking:** More reliable than other methods",
    "type": "javascript",
    "tags": ["javascript", "number", "integer", "validation"],
    "code": "// Basic Number.isInteger examples\nconsole.log(\"Number.isInteger(5):\", Number.isInteger(5)); // true\nconsole.log(\"Number.isInteger(5.0):\", Number.isInteger(5.0)); // true\nconsole.log(\"Number.isInteger(5.5):\", Number.isInteger(5.5)); // false\nconsole.log(\"Number.isInteger(-3):\", Number.isInteger(-3)); // true\nconsole.log(\"Number.isInteger(0):\", Number.isInteger(0)); // true\n\n// String numbers return false\nconsole.log(\"Number.isInteger('5'):\", Number.isInteger('5')); // false\nconsole.log(\"Number.isInteger('5.0'):\", Number.isInteger('5.0')); // false\n\n// Other data types\nconsole.log(\"Number.isInteger(true):\", Number.isInteger(true)); // false\nconsole.log(\"Number.isInteger(null):\", Number.isInteger(null)); // false\nconsole.log(\"Number.isInteger(undefined):\", Number.isInteger(undefined)); // false\nconsole.log(\"Number.isInteger([]):\", Number.isInteger([])); // false\nconsole.log(\"Number.isInteger({}):\", Number.isInteger({})); // false\n\n// Practical examples\n// Input validation\nfunction validateAge(age) {\n    if (Number.isInteger(age) && age > 0 && age < 120) {\n        return \"Valid age: \" + age;\n    } else {\n        return \"Invalid age\";\n    }\n}\n\nconsole.log(\"validateAge(25):\", validateAge(25)); // \"Valid age: 25\"\nconsole.log(\"validateAge(25.5):\", validateAge(25.5)); // \"Invalid age\"\nconsole.log(\"validateAge('25'):\", validateAge('25')); // \"Invalid age\"\n\n// Array filtering\nlet numbers = [1, 2.5, 3, 4.7, 5, 6.2, 7];\nlet integers = numbers.filter(num => Number.isInteger(num));\nconsole.log(\"Integers only:\", integers); // [1, 3, 5, 7]\n\n// Mixed data processing\nlet mixedData = [1, \"2\", 3.5, 4, \"5.5\", 6, 7.0];\nlet validIntegers = mixedData.filter(item => Number.isInteger(item));\nconsole.log(\"Valid integers:\", validIntegers); // [1, 4, 6, 7]\n\n// Function to check if number is positive integer\nfunction isPositiveInteger(num) {\n    return Number.isInteger(num) && num > 0;\n}\n\nconsole.log(\"isPositiveInteger(5):\", isPositiveInteger(5)); // true\nconsole.log(\"isPositiveInteger(-3):\", isPositiveInteger(-3)); // false\nconsole.log(\"isPositiveInteger(3.5):\", isPositiveInteger(3.5)); // false\nconsole.log(\"isPositiveInteger(0):\", isPositiveInteger(0)); // false\n\n// Real-world example: ID validation\nfunction validateUserId(id) {\n    if (Number.isInteger(id) && id > 0) {\n        return `User ID ${id} is valid`;\n    } else {\n        return `User ID ${id} is invalid`;\n    }\n}\n\nconsole.log(\"validateUserId(123):\", validateUserId(123)); // \"User ID 123 is valid\"\nconsole.log(\"validateUserId(123.5):\", validateUserId(123.5)); // \"User ID 123.5 is invalid\"\nconsole.log(\"validateUserId('123'):\", validateUserId('123')); // \"User ID 123 is invalid\"\n\n// Comparison with other methods\nlet testValue = 5.0;\n\nconsole.log(\"Number.isInteger(5.0):\", Number.isInteger(testValue)); // true\nconsole.log(\"5.0 === parseInt(5.0):\", testValue === parseInt(testValue)); // true\nconsole.log(\"5.0 % 1 === 0:\", testValue % 1 === 0); // true\n\n// Edge cases\nconsole.log(\"Number.isInteger(Infinity):\", Number.isInteger(Infinity)); // false\nconsole.log(\"Number.isInteger(-Infinity):\", Number.isInteger(-Infinity)); // false\nconsole.log(\"Number.isInteger(NaN):\", Number.isInteger(NaN)); // false\nconsole.log(\"Number.isInteger(Number.MAX_SAFE_INTEGER):\", Number.isInteger(Number.MAX_SAFE_INTEGER)); // true"
  },
  {
    "question": "How do you make squareList higher-order with filter and map callbacks?",
    "answer": "**Higher-Order Functions with filter and map**\n\nHigher-order functions are functions that take other functions as arguments or return functions. The `squareList` function uses both `filter` and `map` as callbacks to process arrays.\n\n**Example:**\n```javascript\nconst realNumberArray = [4, 5.6, -9.8, 3.14, 42, 6, 8.34, -2];\n\nconst squareList = (arr) => {\n    const squaredIntegers = arr\n        .filter(num => Number.isInteger(num) && num > 0) // keep only positive integers\n        .map(x => x * x); // square each one\n    return squaredIntegers;\n};\n\nconsole.log(squareList(realNumberArray)); // [16, 1764, 36]\n```\n\n**How it works:**\n- **filter callback:** `num => Number.isInteger(num) && num > 0` keeps only positive integers\n- **map callback:** `x => x * x` squares each remaining number\n- **Chaining:** Results flow from filter to map\n- **Higher-order:** Both filter and map take functions as arguments",
    "type": "javascript",
    "tags": ["javascript", "higher-order", "filter", "map", "callbacks"],
    "code": "// Original squareList function\nconst realNumberArray = [4, 5.6, -9.8, 3.14, 42, 6, 8.34, -2];\n\nconst squareList = (arr) => {\n    const squaredIntegers = arr\n        .filter(num => Number.isInteger(num) && num > 0) // keep only positive integers\n        .map(x => x * x); // square each one\n    return squaredIntegers;\n};\n\nconst squaredIntegers = squareList(realNumberArray);\nconsole.log(\"Squared integers:\", squaredIntegers); // [16, 1764, 36]\n\n// Step-by-step breakdown\nconsole.log(\"Original array:\", realNumberArray);\n\n// Step 1: Filter positive integers\nlet positiveIntegers = realNumberArray.filter(num => Number.isInteger(num) && num > 0);\nconsole.log(\"After filter:\", positiveIntegers); // [4, 42, 6]\n\n// Step 2: Square each number\nlet squared = positiveIntegers.map(x => x * x);\nconsole.log(\"After map:\", squared); // [16, 1764, 36]\n\n// More examples of higher-order functions\n// Function that takes a callback\nfunction processNumbers(numbers, callback) {\n    return numbers.map(callback);\n}\n\n// Different callback functions\nlet numbers = [1, 2, 3, 4, 5];\n\nlet doubled = processNumbers(numbers, x => x * 2);\nconsole.log(\"Doubled:\", doubled); // [2, 4, 6, 8, 10]\n\nlet squared2 = processNumbers(numbers, x => x * x);\nconsole.log(\"Squared:\", squared2); // [1, 4, 9, 16, 25]\n\nlet cubed = processNumbers(numbers, x => x * x * x);\nconsole.log(\"Cubed:\", cubed); // [1, 8, 27, 64, 125]\n\n// Complex higher-order function\nfunction processArray(arr, filterCallback, mapCallback) {\n    return arr\n        .filter(filterCallback)\n        .map(mapCallback);\n}\n\nlet mixedNumbers = [1, 2.5, 3, 4.7, 5, 6.2, 7, 8.9];\n\nlet result = processArray(\n    mixedNumbers,\n    num => Number.isInteger(num) && num > 0, // filter callback\n    num => num * num // map callback\n);\n\nconsole.log(\"Processed array:\", result); // [1, 9, 25, 49]\n\n// Practical example: User data processing\nlet users = [\n    {name: \"John\", age: 25, active: true},\n    {name: \"Jane\", age: 17, active: true},\n    {name: \"Bob\", age: 30, active: false},\n    {name: \"Alice\", age: 22, active: true}\n];\n\n// Get names of active adult users\nlet activeAdultNames = users\n    .filter(user => user.active && user.age >= 18) // filter callback\n    .map(user => user.name.toUpperCase()); // map callback\n\nconsole.log(\"Active adult names:\", activeAdultNames); // [\"JOHN\", \"ALICE\"]\n\n// Function that returns a function (another type of higher-order)\nfunction createMultiplier(factor) {\n    return function(number) {\n        return number * factor;\n    };\n}\n\nlet double = createMultiplier(2);\nlet triple = createMultiplier(3);\n\nconsole.log(\"Double 5:\", double(5)); // 10\nconsole.log(\"Triple 5:\", triple(5)); // 15\n\n// Using returned function with map\nlet numbers2 = [1, 2, 3, 4, 5];\nlet doubled2 = numbers2.map(double);\nlet tripled = numbers2.map(triple);\n\nconsole.log(\"Doubled array:\", doubled2); // [2, 4, 6, 8, 10]\nconsole.log(\"Tripled array:\", tripled); // [3, 6, 9, 12, 15]\n\n// Advanced: Function composition\nfunction compose(f, g) {\n    return function(x) {\n        return f(g(x));\n    };\n}\n\nlet addOne = x => x + 1;\nlet multiplyByTwo = x => x * 2;\n\nlet addOneThenDouble = compose(multiplyByTwo, addOne);\nconsole.log(\"addOneThenDouble(3):\", addOneThenDouble(3)); // 8 (3+1=4, 4*2=8)\n\n// Using composition with arrays\nlet numbers3 = [1, 2, 3, 4, 5];\nlet processed = numbers3.map(addOneThenDouble);\nconsole.log(\"Processed with composition:\", processed); // [4, 6, 8, 10, 12]"
  },
  {
    "question": "How do you use default parameters in JavaScript?",
    "answer": "**Default Parameters**\n\nDefault parameters allow you to set default values for function parameters. If an argument is not provided or is undefined, the default value is used.\n\n**Syntax:**\n```javascript\nfunction functionName(param1 = defaultValue1, param2 = defaultValue2) {\n    // function body\n}\n```\n\n**Example:**\n```javascript\nfunction greet(name = \"Guest\") {\n    return \"Hello, \" + name + \"!\";\n}\n\nconsole.log(greet()); // \"Hello, Guest!\"\nconsole.log(greet(\"Alice\")); // \"Hello, Alice!\"\n```\n\n**Key concepts:**\n- **Fallback values:** Used when arguments are missing\n- **Undefined triggers default:** Only undefined values use defaults\n- **Order matters:** Default parameters can be followed by non-default ones\n- **Expressions allowed:** Defaults can be expressions or function calls",
    "type": "javascript",
    "tags": ["javascript", "default-parameters", "functions", "es6"],
    "code": "// Basic default parameters\nfunction greet(name = \"Guest\") {\n    return \"Hello, \" + name + \"!\";\n}\n\nconsole.log(\"greet():\", greet()); // \"Hello, Guest!\"\nconsole.log(\"greet('Alice'):\", greet(\"Alice\")); // \"Hello, Alice!\"\nconsole.log(\"greet(undefined):\", greet(undefined)); // \"Hello, Guest!\"\nconsole.log(\"greet(null):\", greet(null)); // \"Hello, null!\" (null is not undefined)\n\n// Multiple default parameters\nfunction createUser(name = \"Anonymous\", age = 18, isActive = true) {\n    return {\n        name: name,\n        age: age,\n        isActive: isActive\n    };\n}\n\nconsole.log(\"createUser():\", createUser());\nconsole.log(\"createUser('John'):\", createUser(\"John\"));\nconsole.log(\"createUser('Jane', 25):\", createUser(\"Jane\", 25));\nconsole.log(\"createUser('Bob', 30, false):\", createUser(\"Bob\", 30, false));\n\n// Default parameters with expressions\nfunction calculateArea(length = 10, width = length) {\n    return length * width;\n}\n\nconsole.log(\"calculateArea():\", calculateArea()); // 100 (10 * 10)\nconsole.log(\"calculateArea(5):\", calculateArea(5)); // 25 (5 * 5)\nconsole.log(\"calculateArea(5, 3):\", calculateArea(5, 3)); // 15 (5 * 3)\n\n// Default parameters with function calls\nfunction getCurrentYear() {\n    return new Date().getFullYear();\n}\n\nfunction createProfile(name, birthYear = getCurrentYear() - 25) {\n    return {\n        name: name,\n        birthYear: birthYear,\n        age: getCurrentYear() - birthYear\n    };\n}\n\nconsole.log(\"createProfile('Alice'):\", createProfile(\"Alice\"));\nconsole.log(\"createProfile('Bob', 1990):\", createProfile(\"Bob\", 1990));\n\n// Default parameters with arrays and objects\nfunction processData(data = [], options = {}) {\n    return {\n        data: data,\n        options: {\n            sort: false,\n            filter: false,\n            ...options\n        }\n    };\n}\n\nconsole.log(\"processData():\", processData());\nconsole.log(\"processData([1, 2, 3]):\", processData([1, 2, 3]));\nconsole.log(\"processData([1, 2, 3], {sort: true}):\", processData([1, 2, 3], {sort: true}));\n\n// Practical examples\n// Math operations with defaults\nfunction multiply(a = 1, b = 1) {\n    return a * b;\n}\n\nconsole.log(\"multiply():\", multiply()); // 1\nconsole.log(\"multiply(5):\", multiply(5)); // 5\nconsole.log(\"multiply(5, 3):\", multiply(5, 3)); // 15\n\n// String formatting with defaults\nfunction formatMessage(message = \"No message\", type = \"info\") {\n    return `[${type.toUpperCase()}] ${message}`;\n}\n\nconsole.log(\"formatMessage():\", formatMessage());\nconsole.log(\"formatMessage('Hello'):\", formatMessage(\"Hello\"));\nconsole.log(\"formatMessage('Error occurred', 'error'):\", formatMessage(\"Error occurred\", \"error\"));\n\n// Configuration objects with defaults\nfunction createConfig(apiUrl = \"https://api.example.com\", timeout = 5000, retries = 3) {\n    return {\n        apiUrl: apiUrl,\n        timeout: timeout,\n        retries: retries\n    };\n}\n\nconsole.log(\"Default config:\", createConfig());\nconsole.log(\"Custom config:\", createConfig(\"https://custom.api.com\", 10000, 5));\n\n// Default parameters in arrow functions\nconst add = (a = 0, b = 0) => a + b;\n\nconsole.log(\"add():\", add()); // 0\nconsole.log(\"add(5):\", add(5)); // 5\nconsole.log(\"add(5, 3):\", add(5, 3)); // 8\n\n// Destructuring with default parameters\nfunction processUser({name = \"Anonymous\", age = 18, email = \"no-email@example.com\"} = {}) {\n    return `User: ${name}, Age: ${age}, Email: ${email}`;\n}\n\nconsole.log(\"processUser():\", processUser());\nconsole.log(\"processUser({name: 'John'}):\", processUser({name: 'John'}));\nconsole.log(\"processUser({name: 'Jane', age: 25}):\", processUser({name: 'Jane', age: 25}));\n\n// Rest parameters with defaults\nfunction sumAll(first = 0, ...rest) {\n    return rest.reduce((total, num) => total + num, first);\n}\n\nconsole.log(\"sumAll():\", sumAll()); // 0\nconsole.log(\"sumAll(1, 2, 3):\", sumAll(1, 2, 3)); // 6\nconsole.log(\"sumAll(undefined, 2, 3):\", sumAll(undefined, 2, 3)); // 5 (0 + 2 + 3)"
  },
  {
    "question": "What is an IIFE (Immediately Invoked Function Expression) in JavaScript?",
    "answer": "**IIFE (Immediately Invoked Function Expression)**\n\nAn IIFE (pronounced \"iffy\") stands for **Immediately Invoked Function Expression**. It's a function that you create and run right away—all in one go.\n\n**What it looks like:**\n```javascript\n(function() {\n    // code in here runs right away!\n})();\n```\n\n**Or with arrow functions:**\n```javascript\n(() => {\n    // code runs immediately\n})();\n```\n\n**How it works:**\n- **Function definition:** `function() { ... }` creates a function\n- **Parentheses:** `(function() { ... })` wraps the function\n- **Invocation:** `()` at the end calls the function immediately\n- **No variables left behind:** Variables inside don't pollute global scope\n\n**Why use it?**\n- **Quick execution:** Do something immediately without leaving variables\n- **Private scope:** Variables inside are not accessible from outside\n- **Module pattern:** Used in older JavaScript for creating modules",
    "type": "javascript",
    "tags": ["javascript", "iife", "immediately-invoked", "function-expression", "scope"],
    "code": "// Basic IIFE\n(function() {\n    console.log(\"This runs immediately!\");\n})();\n\n// IIFE with arrow function\n(() => {\n    console.log(\"Arrow function IIFE!\");\n})();\n\n// IIFE with parameters\n(function(name) {\n    console.log(\"Hello, \" + name + \"!\");\n})(\"Alice\");\n\n// IIFE with arrow function and parameters\n((name) => {\n    console.log(\"Hello, \" + name + \"!\");\n})(\"Bob\");\n\n// IIFE that returns a value\nvar result = (function() {\n    return \"IIFE result\";\n})();\n\nconsole.log(\"Result:\", result); // \"IIFE result\"\n\n// IIFE for creating private variables\nvar counter = (function() {\n    var count = 0;\n    \n    return {\n        increment: function() {\n            count++;\n            return count;\n        },\n        decrement: function() {\n            count--;\n            return count;\n        },\n        getCount: function() {\n            return count;\n        }\n    };\n})();\n\nconsole.log(\"Counter increment:\", counter.increment()); // 1\nconsole.log(\"Counter increment:\", counter.increment()); // 2\nconsole.log(\"Counter get:\", counter.getCount()); // 2\n// console.log(counter.count); // undefined (private variable)\n\n// IIFE for module pattern\nvar myModule = (function() {\n    var privateVar = \"I'm private\";\n    \n    function privateFunction() {\n        return \"Private function called\";\n    }\n    \n    return {\n        publicMethod: function() {\n            return privateFunction() + \" - \" + privateVar;\n        },\n        publicVar: \"I'm public\"\n    };\n})();\n\nconsole.log(\"Public method:\", myModule.publicMethod());\nconsole.log(\"Public var:\", myModule.publicVar);\n// console.log(myModule.privateVar); // undefined\n\n// IIFE for initialization\n(function() {\n    console.log(\"Initializing application...\");\n    \n    // Set up event listeners\n    // Initialize variables\n    // Configure settings\n    \n    console.log(\"Application initialized!\");\n})();\n\n// IIFE with multiple functions\nvar calculator = (function() {\n    function add(a, b) {\n        return a + b;\n    }\n    \n    function subtract(a, b) {\n        return a - b;\n    }\n    \n    function multiply(a, b) {\n        return a * b;\n    }\n    \n    function divide(a, b) {\n        return b !== 0 ? a / b : \"Cannot divide by zero\";\n    }\n    \n    return {\n        add: add,\n        subtract: subtract,\n        multiply: multiply,\n        divide: divide\n    };\n})();\n\nconsole.log(\"Calculator add:\", calculator.add(5, 3)); // 8\nconsole.log(\"Calculator multiply:\", calculator.multiply(4, 6)); // 24\n\n// IIFE for avoiding variable conflicts\n(function() {\n    var $ = \"jQuery\"; // This $ won't conflict with jQuery\n    console.log(\"Local $:\", $);\n})();\n\n// Global $ is still available if jQuery is loaded\n\n// IIFE with strict mode\n(function() {\n    \"use strict\";\n    \n    // Strict mode applies only to this function\n    var strictVar = \"I'm in strict mode\";\n    console.log(\"Strict mode var:\", strictVar);\n})();\n\n// IIFE for data processing\nvar processedData = (function() {\n    var rawData = [1, 2, 3, 4, 5];\n    \n    // Process the data\n    var doubled = rawData.map(x => x * 2);\n    var filtered = doubled.filter(x => x > 5);\n    var sum = filtered.reduce((total, x) => total + x, 0);\n    \n    return {\n        original: rawData,\n        processed: filtered,\n        sum: sum\n    };\n})();\n\nconsole.log(\"Processed data:\", processedData);\n\n// IIFE for creating namespaces\nvar MyApp = (function() {\n    var privateData = {};\n    \n    return {\n        namespace1: {\n            method1: function() {\n                return \"Method 1\";\n            }\n        },\n        namespace2: {\n            method2: function() {\n                return \"Method 2\";\n            }\n        }\n    };\n})();\n\nconsole.log(\"MyApp method1:\", MyApp.namespace1.method1());\nconsole.log(\"MyApp method2:\", MyApp.namespace2.method2());"
  },
  {
    "question": "What is the rest operator in JavaScript?",
    "answer": "**Rest Operator (...)**\n\nThe rest operator (`...`) lets you collect all leftover items into an array. It's often used when you want to grab \"everything else\" after the first item(s).\n\n**In function parameters:**\n```javascript\nfunction sum(...numbers) {\n    return numbers.reduce((total, num) => total + num, 0);\n}\n\nconsole.log(sum(1, 2, 3, 4)); // 10\n```\n\n**In array destructuring:**\n```javascript\nconst [first, ...rest] = [10, 20, 30, 40];\nconsole.log(first); // 10\nconsole.log(rest); // [20, 30, 40]\n```\n\n**Key concepts:**\n- **Collects remaining items:** Gathers all leftover elements\n- **Must be last:** Rest parameter must be the last parameter\n- **Creates array:** Always results in an array (even if empty)\n- **Different from spread:** Rest collects, spread expands",
    "type": "javascript",
    "tags": ["javascript", "rest-operator", "destructuring", "functions", "es6"],
    "code": "// Rest operator in function parameters\nfunction sum(...numbers) {\n    console.log(\"Numbers array:\", numbers);\n    return numbers.reduce((total, num) => total + num, 0);\n}\n\nconsole.log(\"sum(1, 2, 3):\", sum(1, 2, 3)); // 6\nconsole.log(\"sum(1, 2, 3, 4, 5):\", sum(1, 2, 3, 4, 5)); // 15\nconsole.log(\"sum():\", sum()); // 0\n\n// Rest with other parameters\nfunction greet(greeting, ...names) {\n    return greeting + \" \" + names.join(\", \");\n}\n\nconsole.log(\"greet('Hello', 'Alice', 'Bob'):\", greet(\"Hello\", \"Alice\", \"Bob\"));\nconsole.log(\"greet('Hi'):\", greet(\"Hi\"));\n\n// Rest in array destructuring\nconst numbers = [1, 2, 3, 4, 5];\nconst [first, second, ...rest] = numbers;\n\nconsole.log(\"First:\", first); // 1\nconsole.log(\"Second:\", second); // 2\nconsole.log(\"Rest:\", rest); // [3, 4, 5]\n\n// Rest with objects\nconst person = {\n    name: \"John\",\n    age: 30,\n    city: \"NYC\",\n    country: \"USA\"\n};\n\nconst {name, ...details} = person;\nconsole.log(\"Name:\", name); // \"John\"\nconsole.log(\"Details:\", details); // {age: 30, city: \"NYC\", country: \"USA\"}\n\n// Practical examples\n// Function that processes multiple arguments\nfunction processItems(firstItem, ...otherItems) {\n    console.log(\"First item:\", firstItem);\n    console.log(\"Other items:\", otherItems);\n    \n    return {\n        first: firstItem,\n        count: otherItems.length,\n        all: [firstItem, ...otherItems]\n    };\n}\n\nconsole.log(\"processItems('apple', 'banana', 'cherry'):\", processItems(\"apple\", \"banana\", \"cherry\"));\n\n// Rest with mixed data types\nfunction collectData(...items) {\n    return items.filter(item => typeof item === \"number\");\n}\n\nconsole.log(\"collectData(1, 'hello', 2, true, 3):\", collectData(1, \"hello\", 2, true, 3)); // [1, 2, 3]\n\n// Rest in function expressions\nconst multiply = (...numbers) => {\n    return numbers.reduce((product, num) => product * num, 1);\n};\n\nconsole.log(\"multiply(2, 3, 4):\", multiply(2, 3, 4)); // 24\n\n// Rest with default parameters\nfunction createUser(name = \"Anonymous\", ...hobbies) {\n    return {\n        name: name,\n        hobbies: hobbies\n    };\n}\n\nconsole.log(\"createUser('Alice', 'reading', 'coding'):\", createUser(\"Alice\", \"reading\", \"coding\"));\nconsole.log(\"createUser():\", createUser());\n\n// Rest in array methods\nconst data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst [firstTwo, ...remaining] = data;\n\nconsole.log(\"First two:\", firstTwo); // 1 (only first element)\nconsole.log(\"Remaining:\", remaining); // [2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n// Correct way to get first two elements\nconst [first, second, ...rest] = data;\nconsole.log(\"First:\", first); // 1\nconsole.log(\"Second:\", second); // 2\nconsole.log(\"Rest:\", rest); // [3, 4, 5, 6, 7, 8, 9, 10]\n\n// Rest with nested arrays\nconst nested = [[1, 2], [3, 4], [5, 6]];\nconst [firstArray, ...otherArrays] = nested;\n\nconsole.log(\"First array:\", firstArray); // [1, 2]\nconsole.log(\"Other arrays:\", otherArrays); // [[3, 4], [5, 6]]\n\n// Rest in function that returns a function\nfunction createAdder(...initialNumbers) {\n    return function(...newNumbers) {\n        return [...initialNumbers, ...newNumbers].reduce((sum, num) => sum + num, 0);\n    };\n}\n\nconst adder = createAdder(1, 2, 3);\nconsole.log(\"Adder(4, 5):\", adder(4, 5)); // 15 (1+2+3+4+5)\n\n// Rest vs spread example\nfunction demonstrateRest(...args) {\n    console.log(\"Rest collected:\", args);\n    \n    // Using spread to pass them to another function\n    return Math.max(...args);\n}\n\nconsole.log(\"Max of rest:\", demonstrateRest(1, 5, 3, 9, 2)); // 9\n\n// Rest with objects in function parameters\nfunction processUserData({name, ...otherData}) {\n    console.log(\"Name:\", name);\n    console.log(\"Other data:\", otherData);\n    return otherData;\n}\n\nconst user = {name: \"John\", age: 30, city: \"NYC\", active: true};\nconsole.log(\"Processed:\", processUserData(user));"
  },
  {
    "question": "How do you use the spread operator in JavaScript?",
    "answer": "**Spread Operator (...)**\n\nThe spread operator (`...`) \"unpacks\" or \"spreads out\" elements from arrays, objects, or other iterables. It's the opposite of the rest operator.\n\n**With arrays:**\n```javascript\nlet arr1 = [1, 2, 3];\nlet arr2 = [4, 5, 6];\nlet combined = [...arr1, ...arr2];\nconsole.log(combined); // [1, 2, 3, 4, 5, 6]\n```\n\n**With function calls:**\n```javascript\nlet numbers = [1, 2, 3, 4, 5];\nlet max = Math.max(...numbers);\nconsole.log(max); // 5\n```\n\n**With objects:**\n```javascript\nlet obj1 = {a: 1, b: 2};\nlet obj2 = {c: 3, d: 4};\nlet combined = {...obj1, ...obj2};\nconsole.log(combined); // {a: 1, b: 2, c: 3, d: 4}\n```\n\n**Key concepts:**\n- **Expands elements:** Spreads out individual elements\n- **Creates new:** Always creates new arrays/objects\n- **Shallow copy:** Copies values, not deep references\n- **Overwrites properties:** Later properties override earlier ones",
    "type": "javascript",
    "tags": ["javascript", "spread-operator", "arrays", "objects", "es6"],
    "code": "// Spread with arrays\nlet arr1 = [1, 2, 3];\nlet arr2 = [4, 5, 6];\nlet combined = [...arr1, ...arr2];\nconsole.log(\"Combined arrays:\", combined); // [1, 2, 3, 4, 5, 6]\n\n// Spread in middle of array\nlet middle = [0, ...arr1, 7, ...arr2, 8];\nconsole.log(\"Middle spread:\", middle); // [0, 1, 2, 3, 7, 4, 5, 6, 8]\n\n// Spread with function calls\nlet numbers = [1, 5, 3, 9, 2];\nlet max = Math.max(...numbers);\nlet min = Math.min(...numbers);\nconsole.log(\"Max:\", max); // 9\nconsole.log(\"Min:\", min); // 1\n\n// Without spread (would cause error)\n// let maxError = Math.max(numbers); // NaN\n\n// Spread with Math functions\nlet scores = [85, 92, 78, 96, 88];\nlet average = (scores.reduce((sum, score) => sum + score, 0)) / scores.length;\nconsole.log(\"Average:\", average);\n\n// Spread with strings\nlet str = \"Hello\";\nlet chars = [...str];\nconsole.log(\"String to array:\", chars); // ['H', 'e', 'l', 'l', 'o']\n\n// Spread with objects\nlet obj1 = {a: 1, b: 2};\nlet obj2 = {c: 3, d: 4};\nlet combinedObj = {...obj1, ...obj2};\nconsole.log(\"Combined objects:\", combinedObj); // {a: 1, b: 2, c: 3, d: 4}\n\n// Object property overriding\nlet base = {name: \"John\", age: 30, city: \"NYC\"};\nlet updated = {...base, age: 31, country: \"USA\"};\nconsole.log(\"Updated object:\", updated); // {name: \"John\", age: 31, city: \"NYC\", country: \"USA\"}\n\n// Practical examples\n// Copying arrays\nlet original = [1, 2, 3, 4, 5];\nlet copy = [...original];\nconsole.log(\"Original:\", original);\nconsole.log(\"Copy:\", copy);\nconsole.log(\"Same reference?\", original === copy); // false\n\n// Adding elements to array\nlet fruits = [\"apple\", \"banana\"];\nlet moreFruits = [...fruits, \"orange\", \"grape\"];\nconsole.log(\"More fruits:\", moreFruits);\n\n// Removing elements (with slice)\nlet numbers2 = [1, 2, 3, 4, 5];\nlet withoutFirst = [...numbers2.slice(1)];\nlet withoutLast = [...numbers2.slice(0, -1)];\nconsole.log(\"Without first:\", withoutFirst); // [2, 3, 4, 5]\nconsole.log(\"Without last:\", withoutLast); // [1, 2, 3, 4]\n\n// Merging arrays with duplicates\nlet arr3 = [1, 2, 3];\nlet arr4 = [3, 4, 5];\nlet merged = [...arr3, ...arr4];\nconsole.log(\"Merged with duplicates:\", merged); // [1, 2, 3, 3, 4, 5]\n\n// Removing duplicates\nlet unique = [...new Set(merged)];\nconsole.log(\"Unique values:\", unique); // [1, 2, 3, 4, 5]\n\n// Spread with nested arrays\nlet nested = [[1, 2], [3, 4], [5, 6]];\nlet flattened = [].concat(...nested);\nconsole.log(\"Flattened:\", flattened); // [1, 2, 3, 4, 5, 6]\n\n// Alternative flattening\nlet flattened2 = [...nested[0], ...nested[1], ...nested[2]];\nconsole.log(\"Flattened alternative:\", flattened2); // [1, 2, 3, 4, 5, 6]\n\n// Spread with function parameters\nfunction addThree(a, b, c) {\n    return a + b + c;\n}\n\nlet nums = [1, 2, 3];\nlet result = addThree(...nums);\nconsole.log(\"addThree result:\", result); // 6\n\n// Spread with rest parameters\nfunction processData(first, ...rest) {\n    console.log(\"First:\", first);\n    console.log(\"Rest:\", rest);\n    return rest.length;\n}\n\nlet data = [\"start\", 1, 2, 3, \"end\"];\nlet count = processData(...data);\nconsole.log(\"Count:\", count); // 4\n\n// Spread with objects for configuration\nlet defaultConfig = {\n    apiUrl: \"https://api.example.com\",\n    timeout: 5000,\n    retries: 3\n};\n\nlet userConfig = {\n    timeout: 10000,\n    debug: true\n};\n\nlet finalConfig = {...defaultConfig, ...userConfig};\nconsole.log(\"Final config:\", finalConfig);\n\n// Spread with arrays for state updates (React-like)\nlet currentState = [\"item1\", \"item2\", \"item3\"];\nlet newItem = \"item4\";\nlet updatedState = [...currentState, newItem];\nconsole.log(\"Updated state:\", updatedState);\n\n// Spread with objects for state updates\nlet userState = {\n    name: \"John\",\n    age: 30,\n    preferences: {\n        theme: \"dark\",\n        lang: \"en\"\n    }\n};\n\nlet updatedUser = {\n    ...userState,\n    age: 31,\n    preferences: {\n        ...userState.preferences,\n        theme: \"light\"\n    }\n};\n\nconsole.log(\"Updated user:\", updatedUser);\n\n// Spread with conditional elements\nlet baseArray = [1, 2, 3];\nlet shouldAddExtra = true;\nlet conditionalArray = [\n    ...baseArray,\n    ...(shouldAddExtra ? [4, 5] : [])\n];\nconsole.log(\"Conditional array:\", conditionalArray); // [1, 2, 3, 4, 5]"
  },
  {
    "question": "How do you destructure objects in JavaScript?",
    "answer": "**Object Destructuring**\n\nDestructuring allows you to extract values from objects and assign them to variables in a single statement.\n\n**Basic syntax:**\n```javascript\nconst person = {name: \"John\", age: 30, city: \"NYC\"};\nconst {name, age, city} = person;\nconsole.log(name); // \"John\"\nconsole.log(age); // 30\nconsole.log(city); // \"NYC\"\n```\n\n**With different variable names:**\n```javascript\nconst {name: fullName, age: years} = person;\nconsole.log(fullName); // \"John\"\nconsole.log(years); // 30\n```\n\n**With default values:**\n```javascript\nconst {name, age, country = \"USA\"} = person;\nconsole.log(country); // \"USA\" (default value)\n```\n\n**Key concepts:**\n- **Extract properties:** Pull out specific object properties\n- **Rename variables:** Use `property: newName` syntax\n- **Default values:** Provide fallbacks with `= defaultValue`\n- **Nested destructuring:** Can destructure nested objects",
    "type": "javascript",
    "tags": ["javascript", "destructuring", "objects", "es6"],
    "code": "// Basic object destructuring\nconst person = {name: \"John\", age: 30, city: \"NYC\"};\nconst {name, age, city} = person;\n\nconsole.log(\"Name:\", name); // \"John\"\nconsole.log(\"Age:\", age); // 30\nconsole.log(\"City:\", city); // \"NYC\"\n\n// Destructuring with different variable names\nconst {name: fullName, age: years, city: location} = person;\nconsole.log(\"Full name:\", fullName); // \"John\"\nconsole.log(\"Years:\", years); // 30\nconsole.log(\"Location:\", location); // \"NYC\"\n\n// Destructuring with default values\nconst {name: userName, age: userAge, country = \"USA\"} = person;\nconsole.log(\"User name:\", userName); // \"John\"\nconsole.log(\"User age:\", userAge); // 30\nconsole.log(\"Country:\", country); // \"USA\" (default)\n\n// Destructuring missing properties\nconst {name: firstName, email = \"no-email@example.com\"} = person;\nconsole.log(\"First name:\", firstName); // \"John\"\nconsole.log(\"Email:\", email); // \"no-email@example.com\" (default)\n\n// Nested object destructuring\nconst user = {\n    name: \"Alice\",\n    address: {\n        street: \"123 Main St\",\n        city: \"Boston\",\n        state: \"MA\"\n    },\n    preferences: {\n        theme: \"dark\",\n        notifications: true\n    }\n};\n\nconst {\n    name: userName2,\n    address: {street, city: userCity},\n    preferences: {theme}\n} = user;\n\nconsole.log(\"User name:\", userName2); // \"Alice\"\nconsole.log(\"Street:\", street); // \"123 Main St\"\nconsole.log(\"City:\", userCity); // \"Boston\"\nconsole.log(\"Theme:\", theme); // \"dark\"\n\n// Destructuring in function parameters\nfunction greetUser({name, age}) {\n    return `Hello, ${name}! You are ${age} years old.`;\n}\n\nconsole.log(\"Greeting:\", greetUser(person));\n\n// Destructuring with rest operator\nconst {name: firstName2, ...otherInfo} = person;\nconsole.log(\"First name:\", firstName2); // \"John\"\nconsole.log(\"Other info:\", otherInfo); // {age: 30, city: \"NYC\"}\n\n// Destructuring arrays\nconst colors = [\"red\", \"green\", \"blue\"];\nconst [firstColor, secondColor, thirdColor] = colors;\nconsole.log(\"First color:\", firstColor); // \"red\"\nconsole.log(\"Second color:\", secondColor); // \"green\"\nconsole.log(\"Third color:\", thirdColor); // \"blue\"\n\n// Array destructuring with rest\nconst [primary, ...secondary] = colors;\nconsole.log(\"Primary:\", primary); // \"red\"\nconsole.log(\"Secondary:\", secondary); // [\"green\", \"blue\"]\n\n// Skipping elements in array destructuring\nconst numbers = [1, 2, 3, 4, 5];\nconst [first, , third, , fifth] = numbers;\nconsole.log(\"First:\", first); // 1\nconsole.log(\"Third:\", third); // 3\nconsole.log(\"Fifth:\", fifth); // 5\n\n// Swapping variables with destructuring\nlet a = 5;\nlet b = 10;\nconsole.log(\"Before swap - a:\", a, \"b:\", b);\n\n[a, b] = [b, a];\nconsole.log(\"After swap - a:\", a, \"b:\", b);\n\n// Destructuring with default values in arrays\nconst [firstNum = 0, secondNum = 0, thirdNum = 0] = [1, 2];\nconsole.log(\"First:\", firstNum); // 1\nconsole.log(\"Second:\", secondNum); // 2\nconsole.log(\"Third:\", thirdNum); // 0 (default)\n\n// Practical examples\n// Function that returns multiple values\nfunction getCoordinates() {\n    return {x: 10, y: 20, z: 30};\n}\n\nconst {x, y, z} = getCoordinates();\nconsole.log(\"Coordinates:\", x, y, z);\n\n// Destructuring in loops\nconst users = [\n    {name: \"John\", age: 25},\n    {name: \"Jane\", age: 30},\n    {name: \"Bob\", age: 35}\n];\n\nfor (const {name, age} of users) {\n    console.log(`${name} is ${age} years old`);\n}\n\n// Destructuring with computed property names\nconst prop = \"age\";\nconst {[prop]: userAge} = person;\nconsole.log(\"User age:\", userAge); // 30\n\n// Destructuring with nested arrays\nconst matrix = [[1, 2], [3, 4], [5, 6]];\nconst [[a1, a2], [b1, b2]] = matrix;\nconsole.log(\"First row:\", a1, a2); // 1, 2\nconsole.log(\"Second row:\", b1, b2); // 3, 4\n\n// Destructuring with function that returns array\nfunction getMinMax(numbers) {\n    return [Math.min(...numbers), Math.max(...numbers)];\n}\n\nconst [min, max] = getMinMax([1, 5, 3, 9, 2]);\nconsole.log(\"Min:\", min, \"Max:\", max); // 1, 9\n\n// Destructuring with objects and arrays mixed\nconst data = {\n    users: [\"Alice\", \"Bob\", \"Charlie\"],\n    settings: {theme: \"dark\", lang: \"en\"}\n};\n\nconst {\n    users: [firstUser, secondUser],\n    settings: {theme}\n} = data;\n\nconsole.log(\"First user:\", firstUser); // \"Alice\"\nconsole.log(\"Second user:\", secondUser); // \"Bob\"\nconsole.log(\"Theme:\", theme); // \"dark\""
  },
  {
    "question": "How do you destructure arrays in JavaScript?",
    "answer": "**Array Destructuring**\n\nArray destructuring allows you to extract values from arrays and assign them to variables based on their position.\n\n**Basic syntax:**\n```javascript\nconst colors = [\"red\", \"green\", \"blue\"];\nconst [first, second, third] = colors;\nconsole.log(first); // \"red\"\nconsole.log(second); // \"green\"\nconsole.log(third); // \"blue\"\n```\n\n**Skipping elements:**\n```javascript\nconst numbers = [1, 2, 3, 4, 5];\nconst [first, , third, , fifth] = numbers;\nconsole.log(first); // 1\nconsole.log(third); // 3\nconsole.log(fifth); // 5\n```\n\n**With rest operator:**\n```javascript\nconst [first, ...rest] = colors;\nconsole.log(first); // \"red\"\nconsole.log(rest); // [\"green\", \"blue\"]\n```\n\n**Key concepts:**\n- **Position-based:** Variables assigned by position, not name\n- **Skip elements:** Use empty slots to skip elements\n- **Rest operator:** Collect remaining elements\n- **Default values:** Provide fallbacks with `= defaultValue`",
    "type": "javascript",
    "tags": ["javascript", "destructuring", "arrays", "es6"],
    "code": "// Basic array destructuring\nconst colors = [\"red\", \"green\", \"blue\"];\nconst [first, second, third] = colors;\n\nconsole.log(\"First:\", first); // \"red\"\nconsole.log(\"Second:\", second); // \"green\"\nconsole.log(\"Third:\", third); // \"blue\"\n\n// Skipping elements\nconst numbers = [1, 2, 3, 4, 5];\nconst [firstNum, , thirdNum, , fifthNum] = numbers;\n\nconsole.log(\"First:\", firstNum); // 1\nconsole.log(\"Third:\", thirdNum); // 3\nconsole.log(\"Fifth:\", fifthNum); // 5\n\n// Destructuring with rest operator\nconst [primary, ...secondary] = colors;\nconsole.log(\"Primary:\", primary); // \"red\"\nconsole.log(\"Secondary:\", secondary); // [\"green\", \"blue\"]\n\n// Rest operator in middle (not allowed)\n// const [first, ...middle, last] = colors; // Syntax error\n\n// Destructuring with default values\nconst [firstColor = \"unknown\", secondColor = \"unknown\", thirdColor = \"unknown\"] = [\"red\"];\nconsole.log(\"First:\", firstColor); // \"red\"\nconsole.log(\"Second:\", secondColor); // \"unknown\" (default)\nconsole.log(\"Third:\", thirdColor); // \"unknown\" (default)\n\n// Swapping variables\nlet a = 5;\nlet b = 10;\nconsole.log(\"Before swap - a:\", a, \"b:\", b);\n\n[a, b] = [b, a];\nconsole.log(\"After swap - a:\", a, \"b:\", b);\n\n// Destructuring from function return\nfunction getMinMax(numbers) {\n    return [Math.min(...numbers), Math.max(...numbers)];\n}\n\nconst [min, max] = getMinMax([1, 5, 3, 9, 2]);\nconsole.log(\"Min:\", min); // 1\nconsole.log(\"Max:\", max); // 9\n\n// Destructuring nested arrays\nconst matrix = [[1, 2], [3, 4], [5, 6]];\nconst [[a1, a2], [b1, b2], [c1, c2]] = matrix;\n\nconsole.log(\"First row:\", a1, a2); // 1, 2\nconsole.log(\"Second row:\", b1, b2); // 3, 4\nconsole.log(\"Third row:\", c1, c2); // 5, 6\n\n// Destructuring with rest in nested arrays\nconst [[firstRow, ...restRows]] = matrix;\nconsole.log(\"First row:\", firstRow); // [1, 2]\nconsole.log(\"Rest rows:\", restRows); // [[3, 4], [5, 6]]\n\n// Practical examples\n// Destructuring in loops\nconst users = [\n    [\"John\", 25, \"NYC\"],\n    [\"Jane\", 30, \"LA\"],\n    [\"Bob\", 35, \"Chicago\"]\n];\n\nfor (const [name, age, city] of users) {\n    console.log(`${name} is ${age} years old and lives in ${city}`);\n}\n\n// Destructuring with function parameters\nfunction processCoordinates([x, y, z = 0]) {\n    return `Position: (${x}, ${y}, ${z})`;\n}\n\nconsole.log(\"Coordinates:\", processCoordinates([10, 20])); // Position: (10, 20, 0)\nconsole.log(\"Coordinates:\", processCoordinates([10, 20, 30])); // Position: (10, 20, 30)\n\n// Destructuring with rest to remove first elements\nconst data = [\"header\", \"item1\", \"item2\", \"item3\", \"footer\"];\nconst [header, ...items, footer] = data;\nconsole.log(\"Header:\", header); // \"header\"\nconsole.log(\"Items:\", items); // [\"item1\", \"item2\", \"item3\"]\nconsole.log(\"Footer:\", footer); // \"footer\"\n\n// Destructuring with computed property names\nconst index = 1;\nconst [firstItem, secondItem] = colors;\nconsole.log(\"First item:\", firstItem); // \"red\"\nconsole.log(\"Second item:\", secondItem); // \"green\"\n\n// Destructuring with mixed data types\nconst mixed = [\"hello\", 42, true, {name: \"John\"}];\nconst [greeting, number, flag, person] = mixed;\n\nconsole.log(\"Greeting:\", greeting); // \"hello\"\nconsole.log(\"Number:\", number); // 42\nconsole.log(\"Flag:\", flag); // true\nconsole.log(\"Person:\", person); // {name: \"John\"}\n\n// Destructuring with default values and rest\nconst [firstDefault = \"default\", ...restDefault] = [];\nconsole.log(\"First default:\", firstDefault); // \"default\"\nconsole.log(\"Rest default:\", restDefault); // []\n\n// Destructuring with spread operator\nconst arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\nconst [firstFromArr1, ...restFromArr1] = arr1;\nconst [firstFromArr2, ...restFromArr2] = arr2;\n\nconst combined = [firstFromArr1, ...restFromArr1, firstFromArr2, ...restFromArr2];\nconsole.log(\"Combined:\", combined); // [1, 2, 3, 4, 5, 6]\n\n// Destructuring with function that returns multiple arrays\nfunction splitArray(arr) {\n    const mid = Math.floor(arr.length / 2);\n    return [arr.slice(0, mid), arr.slice(mid)];\n}\n\nconst [firstHalf, secondHalf] = splitArray([1, 2, 3, 4, 5, 6]);\nconsole.log(\"First half:\", firstHalf); // [1, 2, 3]\nconsole.log(\"Second half:\", secondHalf); // [4, 5, 6]\n\n// Destructuring with error handling\nfunction safeDestructure(arr) {\n    try {\n        const [first, second, third] = arr;\n        return {first, second, third};\n    } catch (error) {\n        return {error: \"Destructuring failed\"};\n    }\n}\n\nconsole.log(\"Safe destructure:\", safeDestructure([1, 2, 3]));\nconsole.log(\"Safe destructure (null):\", safeDestructure(null));"
  },
  {
    "question": "How do you swap values using destructuring in JavaScript?",
    "answer": "**Swapping Values with Destructuring**\n\nDestructuring provides an elegant way to swap values between variables without needing a temporary variable.\n\n**Basic swap:**\n```javascript\nlet a = 5;\nlet b = 10;\n[a, b] = [b, a];\nconsole.log(a); // 10\nconsole.log(b); // 5\n```\n\n**Multiple swaps:**\n```javascript\nlet x = 1, y = 2, z = 3;\n[x, y, z] = [z, x, y];\nconsole.log(x, y, z); // 3, 1, 2\n```\n\n**Key concepts:**\n- **No temporary variable:** Destructuring handles the swap internally\n- **Array syntax:** Uses array destructuring `[a, b] = [b, a]`\n- **Works with any values:** Numbers, strings, objects, etc.\n- **Clean and readable:** More elegant than traditional swap methods",
    "type": "javascript",
    "tags": ["javascript", "destructuring", "swap", "variables", "es6"],
    "code": "// Basic value swap\nlet a = 5;\nlet b = 10;\nconsole.log(\"Before swap - a:\", a, \"b:\", b);\n\n[a, b] = [b, a];\nconsole.log(\"After swap - a:\", a, \"b:\", b);\n\n// Swapping strings\nlet firstName = \"John\";\nlet lastName = \"Doe\";\nconsole.log(\"Before swap - firstName:\", firstName, \"lastName:\", lastName);\n\n[firstName, lastName] = [lastName, firstName];\nconsole.log(\"After swap - firstName:\", firstName, \"lastName:\", lastName);\n\n// Swapping objects\nlet obj1 = {name: \"Alice\", age: 25};\nlet obj2 = {name: \"Bob\", age: 30};\nconsole.log(\"Before swap - obj1:\", obj1, \"obj2:\", obj2);\n\n[obj1, obj2] = [obj2, obj1];\nconsole.log(\"After swap - obj1:\", obj1, \"obj2:\", obj2);\n\n// Swapping arrays\nlet arr1 = [1, 2, 3];\nlet arr2 = [4, 5, 6];\nconsole.log(\"Before swap - arr1:\", arr1, \"arr2:\", arr2);\n\n[arr1, arr2] = [arr2, arr1];\nconsole.log(\"After swap - arr1:\", arr1, \"arr2:\", arr2);\n\n// Multiple variable swap\nlet x = 1, y = 2, z = 3;\nconsole.log(\"Before swap - x:\", x, \"y:\", y, \"z:\", z);\n\n[x, y, z] = [z, x, y];\nconsole.log(\"After swap - x:\", x, \"y:\", y, \"z:\", z); // 3, 1, 2\n\n// Circular swap\nlet p = \"A\", q = \"B\", r = \"C\";\nconsole.log(\"Before circular swap - p:\", p, \"q:\", q, \"r:\", r);\n\n[p, q, r] = [q, r, p];\nconsole.log(\"After circular swap - p:\", p, \"q:\", q, \"r:\", r); // B, C, A\n\n// Swapping with function return values\nfunction getValues() {\n    return [10, 20];\n}\n\nlet value1, value2;\n[value1, value2] = getValues();\nconsole.log(\"Values from function:\", value1, value2);\n\n// Swapping with default values\nlet num1 = 5;\nlet num2; // undefined\nconsole.log(\"Before swap with undefined - num1:\", num1, \"num2:\", num2);\n\n[num1, num2 = 0] = [num2, num1];\nconsole.log(\"After swap with default - num1:\", num1, \"num2:\", num2);\n\n// Swapping in function parameters\nfunction swapAndReturn([a, b]) {\n    [a, b] = [b, a];\n    return [a, b];\n}\n\nlet result = swapAndReturn([100, 200]);\nconsole.log(\"Swapped result:\", result); // [200, 100]\n\n// Swapping with nested destructuring\nlet data = {\n    user1: {name: \"Alice\", score: 100},\n    user2: {name: \"Bob\", score: 200}\n};\n\nlet {user1, user2} = data;\nconsole.log(\"Before swap - user1:\", user1, \"user2:\", user2);\n\n[user1, user2] = [user2, user1];\nconsole.log(\"After swap - user1:\", user1, \"user2:\", user2);\n\n// Swapping with rest operator\nlet numbers = [1, 2, 3, 4, 5];\nlet [first, second, ...rest] = numbers;\nconsole.log(\"Before swap - first:\", first, \"second:\", second, \"rest:\", rest);\n\n[first, second] = [second, first];\nconsole.log(\"After swap - first:\", first, \"second:\", second, \"rest:\", rest);\n\n// Swapping with mixed data types\nlet mixed1 = \"hello\";\nlet mixed2 = 42;\nlet mixed3 = true;\nconsole.log(\"Before mixed swap:\", mixed1, mixed2, mixed3);\n\n[mixed1, mixed2, mixed3] = [mixed3, mixed1, mixed2];\nconsole.log(\"After mixed swap:\", mixed1, mixed2, mixed3); // true, \"hello\", 42\n\n// Swapping with error handling\nfunction safeSwap(a, b) {\n    try {\n        [a, b] = [b, a];\n        return [a, b];\n    } catch (error) {\n        return [a, b]; // return original values if swap fails\n    }\n}\n\nlet safeResult = safeSwap(5, 10);\nconsole.log(\"Safe swap result:\", safeResult);\n\n// Swapping with IIFE\nlet i = 1, j = 2;\nconsole.log(\"Before IIFE swap - i:\", i, \"j:\", j);\n\n(() => {\n    [i, j] = [j, i];\n})();\n\nconsole.log(\"After IIFE swap - i:\", i, \"j:\", j);\n\n// Swapping with conditional logic\nlet condition = true;\nlet valueA = \"A\";\nlet valueB = \"B\";\n\nif (condition) {\n    [valueA, valueB] = [valueB, valueA];\n}\n\nconsole.log(\"Conditional swap result:\", valueA, valueB);\n\n// Swapping with array methods\nlet array = [1, 2, 3, 4, 5];\nconsole.log(\"Original array:\", array);\n\n// Swap first and last elements\n[array[0], array[array.length - 1]] = [array[array.length - 1], array[0]];\nconsole.log(\"After swapping first and last:\", array); // [5, 2, 3, 4, 1]"
  },
  {
    "question": "How do you use the rest operator with array destructuring?",
    "answer": "**Rest Operator with Array Destructuring**\n\nThe rest operator (`...`) in array destructuring collects all remaining elements into a new array.\n\n**Basic syntax:**\n```javascript\nconst source = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst [first, second, ...rest] = source;\nconsole.log(first); // 1\nconsole.log(second); // 2\nconsole.log(rest); // [3, 4, 5, 6, 7, 8, 9, 10]\n```\n\n**Skipping elements:**\n```javascript\nconst [ , , ...arr] = source;\nconsole.log(arr); // [3, 4, 5, 6, 7, 8, 9, 10]\n```\n\n**Key concepts:**\n- **Collects remaining:** Gets all elements after the destructured ones\n- **Must be last:** Rest operator must be the last element in destructuring\n- **Creates new array:** Always results in an array (even if empty)\n- **Useful for:** Removing first few elements, collecting remaining data",
    "type": "javascript",
    "tags": ["javascript", "rest-operator", "destructuring", "arrays", "es6"],
    "code": "// Basic rest operator with array destructuring\nconst source = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst [first, second, ...rest] = source;\n\nconsole.log(\"First:\", first); // 1\nconsole.log(\"Second:\", second); // 2\nconsole.log(\"Rest:\", rest); // [3, 4, 5, 6, 7, 8, 9, 10]\n\n// Skipping elements with rest\nconst [ , , ...arr] = source;\nconsole.log(\"Skipped first two, rest:\", arr); // [3, 4, 5, 6, 7, 8, 9, 10]\n\n// Function to remove first two elements\nfunction removeFirstTwo(list) {\n    const [ , , ...remaining] = list;\n    return remaining;\n}\n\nconst result = removeFirstTwo(source);\nconsole.log(\"Removed first two:\", result); // [3, 4, 5, 6, 7, 8, 9, 10]\n\n// Rest with different numbers of elements\nconst shortArray = [1, 2];\nconst [firstShort, ...restShort] = shortArray;\nconsole.log(\"First:\", firstShort); // 1\nconsole.log(\"Rest:\", restShort); // [2]\n\n// Rest with single element\nconst singleArray = [42];\nconst [firstSingle, ...restSingle] = singleArray;\nconsole.log(\"First:\", firstSingle); // 42\nconsole.log(\"Rest:\", restSingle); // []\n\n// Rest with empty array\nconst emptyArray = [];\nconst [firstEmpty, ...restEmpty] = emptyArray;\nconsole.log(\"First:\", firstEmpty); // undefined\nconsole.log(\"Rest:\", restEmpty); // []\n\n// Rest with default values\nconst [firstDefault = 0, ...restDefault] = [];\nconsole.log(\"First default:\", firstDefault); // 0\nconsole.log(\"Rest default:\", restDefault); // []\n\n// Practical examples\n// Processing command line arguments\nfunction processArgs(args) {\n    const [command, ...arguments] = args;\n    return {\n        command: command,\n        arguments: arguments\n    };\n}\n\nconst args = [\"node\", \"script.js\", \"--verbose\", \"--output\", \"file.txt\"];\nconst processed = processArgs(args);\nconsole.log(\"Command:\", processed.command); // \"node\"\nconsole.log(\"Arguments:\", processed.arguments); // [\"script.js\", \"--verbose\", \"--output\", \"file.txt\"]\n\n// Splitting array into head and tail\nfunction getHeadAndTail(array) {\n    const [head, ...tail] = array;\n    return {head, tail};\n}\n\nconst data = [\"first\", \"second\", \"third\", \"fourth\"];\nconst {head, tail} = getHeadAndTail(data);\nconsole.log(\"Head:\", head); // \"first\"\nconsole.log(\"Tail:\", tail); // [\"second\", \"third\", \"fourth\"]\n\n// Rest with nested arrays\nconst nested = [[1, 2], [3, 4], [5, 6], [7, 8]];\nconst [firstNested, ...restNested] = nested;\nconsole.log(\"First nested:\", firstNested); // [1, 2]\nconsole.log(\"Rest nested:\", restNested); // [[3, 4], [5, 6], [7, 8]]\n\n// Rest with mixed data types\nconst mixed = [\"hello\", 42, true, {name: \"John\"}, [1, 2, 3]];\nconst [firstMixed, ...restMixed] = mixed;\nconsole.log(\"First mixed:\", firstMixed); // \"hello\"\nconsole.log(\"Rest mixed:\", restMixed); // [42, true, {name: \"John\"}, [1, 2, 3]]\n\n// Rest with function parameters\nfunction processData(first, ...rest) {\n    console.log(\"First item:\", first);\n    console.log(\"Rest items:\", rest);\n    return rest.length;\n}\n\nconst count = processData(\"start\", 1, 2, 3, \"end\");\nconsole.log(\"Count of rest items:\", count); // 4\n\n// Rest with object destructuring (for comparison)\nconst person = {name: \"John\", age: 30, city: \"NYC\", country: \"USA\"};\nconst {name, ...details} = person;\nconsole.log(\"Name:\", name); // \"John\"\nconsole.log(\"Details:\", details); // {age: 30, city: \"NYC\", country: \"USA\"}\n\n// Rest with spread operator\nconst original = [1, 2, 3, 4, 5];\nconst [firstOrig, ...restOrig] = original;\nconst newArray = [firstOrig, ...restOrig, 6];\nconsole.log(\"New array:\", newArray); // [1, 2, 3, 4, 5, 6]\n\n// Rest with conditional destructuring\nfunction conditionalDestructure(array, takeFirst = true) {\n    if (takeFirst) {\n        const [first, ...rest] = array;\n        return {first, rest};\n    } else {\n        const [...all] = array;\n        return {all};\n    }\n}\n\nconst testArray = [1, 2, 3, 4, 5];\nconst result1 = conditionalDestructure(testArray, true);\nconst result2 = conditionalDestructure(testArray, false);\n\nconsole.log(\"Take first true:\", result1); // {first: 1, rest: [2, 3, 4, 5]}\nconsole.log(\"Take first false:\", result2); // {all: [1, 2, 3, 4, 5]}\n\n// Rest with error handling\nfunction safeRestDestructure(array) {\n    try {\n        const [first, ...rest] = array;\n        return {first, rest, success: true};\n    } catch (error) {\n        return {first: undefined, rest: [], success: false};\n    }\n}\n\nconsole.log(\"Safe destructure (valid):\", safeRestDestructure([1, 2, 3]));\nconsole.log(\"Safe destructure (null):\", safeRestDestructure(null));\n\n// Rest with array methods\nconst numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst [firstNum, secondNum, ...restNums] = numbers;\n\nconst processed = restNums.map(num => num * 2);\nconsole.log(\"First two:\", firstNum, secondNum); // 1, 2\nconsole.log(\"Processed rest:\", processed); // [6, 8, 10, 12, 14, 16, 18, 20]"
  },
  {
    "question": "How do you write square root, power (^), and round off in JavaScript?",
    "answer": "**Math Operations: Square Root, Power, and Round**\n\n**Square Root:**\nUse `Math.sqrt(number)` to find the square root of a number.\n\n**Example:** `Math.sqrt(9)` gives `3`.\n\n**Power (^):**\nUse `Math.pow(base, exponent)` to raise a number to a power.\n\n**Example:** `Math.pow(2, 3)` gives `8` (2 to the power of 3).\n\n**Round Off:**\nUse `Math.round(number)` to round a number to the nearest integer.\n\n**Example:** `Math.round(4.6)` gives `5`.\n\n**Key concepts:**\n- **Math.sqrt():** Returns the square root\n- **Math.pow():** Takes base and exponent as parameters\n- **Math.round():** Rounds to nearest integer (0.5 rounds up)\n- **All return numbers:** These methods return numeric values",
    "type": "javascript",
    "tags": ["javascript", "math", "sqrt", "pow", "round"],
    "code": "// Square root examples\nconsole.log(\"Math.sqrt(9):\", Math.sqrt(9)); // 3\nconsole.log(\"Math.sqrt(16):\", Math.sqrt(16)); // 4\nconsole.log(\"Math.sqrt(25):\", Math.sqrt(25)); // 5\nconsole.log(\"Math.sqrt(2):\", Math.sqrt(2)); // 1.4142135623730951\n\n// Power examples\nconsole.log(\"Math.pow(2, 3):\", Math.pow(2, 3)); // 8 (2^3)\nconsole.log(\"Math.pow(5, 2):\", Math.pow(5, 2)); // 25 (5^2)\nconsole.log(\"Math.pow(3, 4):\", Math.pow(3, 4)); // 81 (3^4)\nconsole.log(\"Math.pow(10, 0):\", Math.pow(10, 0)); // 1 (10^0)\n\n// Round examples\nconsole.log(\"Math.round(4.6):\", Math.round(4.6)); // 5\nconsole.log(\"Math.round(4.4):\", Math.round(4.4)); // 4\nconsole.log(\"Math.round(4.5):\", Math.round(4.5)); // 5\nconsole.log(\"Math.round(-2.7):\", Math.round(-2.7)); // -3\n\n// Practical examples\n// Calculate area of circle\nfunction circleArea(radius) {\n    return Math.round(Math.PI * Math.pow(radius, 2));\n}\n\nconsole.log(\"Circle area (radius 5):\", circleArea(5)); // 79\n\n// Calculate distance between two points\nfunction distance(x1, y1, x2, y2) {\n    var dx = x2 - x1;\n    var dy = y2 - y1;\n    return Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));\n}\n\nconsole.log(\"Distance (0,0) to (3,4):\", distance(0, 0, 3, 4)); // 5\n\n// Calculate compound interest\nfunction compoundInterest(principal, rate, time) {\n    return Math.round(principal * Math.pow(1 + rate, time));\n}\n\nconsole.log(\"Compound interest:\", compoundInterest(1000, 0.05, 10)); // 1629\n\n// Pythagorean theorem\nfunction hypotenuse(a, b) {\n    return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));\n}\n\nconsole.log(\"Hypotenuse (3, 4):\", hypotenuse(3, 4)); // 5\n\n// Volume of sphere\nfunction sphereVolume(radius) {\n    return Math.round((4/3) * Math.PI * Math.pow(radius, 3));\n}\n\nconsole.log(\"Sphere volume (radius 3):\", sphereVolume(3)); // 113\n\n// Comparing different rounding methods\nvar number = 4.7;\nconsole.log(\"Original:\", number);\nconsole.log(\"Math.round():\", Math.round(number)); // 5\nconsole.log(\"Math.floor():\", Math.floor(number)); // 4\nconsole.log(\"Math.ceil():\", Math.ceil(number)); // 5\n\n// Working with negative numbers\nconsole.log(\"Math.sqrt(-1):\", Math.sqrt(-1)); // NaN\nconsole.log(\"Math.pow(-2, 3):\", Math.pow(-2, 3)); // -8\nconsole.log(\"Math.round(-4.7):\", Math.round(-4.7)); // -5\n\n// Edge cases\nconsole.log(\"Math.sqrt(0):\", Math.sqrt(0)); // 0\nconsole.log(\"Math.pow(0, 0):\", Math.pow(0, 0)); // 1\nconsole.log(\"Math.round(0.5):\", Math.round(0.5)); // 1\n\n// Using with variables\nvar base = 2;\nvar exponent = 8;\nvar result = Math.pow(base, exponent);\nconsole.log(`${base}^${exponent} =`, result); // 256\n\nvar number = 7.8;\nvar rounded = Math.round(number);\nconsole.log(`${number} rounded =`, rounded); // 8"
  },
  {
    "question": "Write a sample blackjack card counter JavaScript function",
    "answer": "**Blackjack Card Counter**\n\nA blackjack card counter tracks the count of cards to determine betting strategy. Low cards (2-6) increase the count, high cards (10, J, Q, K, A) decrease the count.\n\n**How it works:**\n- **Low cards (2-6):** Add +1 to count\n- **High cards (10, J, Q, K, A):** Subtract -1 from count\n- **Neutral cards (7-9):** No change to count\n- **Betting strategy:** Bet when count > 0, Hold when count ≤ 0\n\n**Example:**\n```javascript\nvar count = 0;\nfunction cardCount(card) {\n    switch (card) {\n        case 2: case 3: case 4: case 5: case 6:\n            count++;\n            break;\n        case 10: case \"J\": case \"Q\": case \"K\": case \"A\":\n            count--;\n            break;\n        default:\n            return \"invalid\";\n    }\n    \n    var holdbet = 'Hold';\n    if (count > 0) {\n        holdbet = 'Bet';\n    }\n    \n    return count + \" \" + holdbet;\n}\n```\n\n**Key concepts:**\n- **Card counting:** Tracks advantage for player\n- **Switch statement:** Handles different card values\n- **Betting decision:** Based on current count\n- **String return:** Combines count and betting advice",
    "type": "javascript",
    "tags": ["javascript", "blackjack", "card-counter", "gambling", "algorithm"],
    "code": "// Basic blackjack card counter\nvar count = 0;\n\nfunction cardCount(card) {\n    switch (card) {\n        case 2:\n        case 3:\n        case 4:\n        case 5:\n        case 6:\n            count++;\n            break;\n        case 10:\n        case \"J\":\n        case \"Q\":\n        case \"K\":\n        case \"A\":\n            count--;\n            break;\n        default:\n            return \"invalid\";\n    }\n    \n    var holdbet = 'Hold';\n    if (count > 0) {\n        holdbet = 'Bet';\n    }\n    \n    return count + \" \" + holdbet;\n}\n\n// Test the card counter\nconsole.log(\"cardCount(2):\", cardCount(2)); // \"1 Bet\"\nconsole.log(\"cardCount('K'):\", cardCount('K')); // \"0 Hold\"\nconsole.log(\"cardCount(10):\", cardCount(10)); // \"-1 Hold\"\nconsole.log(\"cardCount('K'):\", cardCount('K')); // \"-2 Hold\"\nconsole.log(\"cardCount('A'):\", cardCount('A')); // \"-3 Hold\"\nconsole.log(\"cardCount(4):\", cardCount(4)); // \"-2 Hold\"\n\n// Reset counter for new game\nfunction resetCounter() {\n    count = 0;\n    console.log(\"Counter reset to 0\");\n}\n\nresetCounter();\n\n// Test with a sequence of cards\nvar testCards = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'J', 'Q', 'K', 'A'];\nconsole.log(\"\\nTesting card sequence:\");\n\nfor (var i = 0; i < testCards.length; i++) {\n    var result = cardCount(testCards[i]);\n    console.log(`Card ${testCards[i]}: ${result}`);\n}\n\n// Advanced card counter with more features\nvar advancedCount = 0;\nvar trueCount = 0;\nvar decksRemaining = 6;\n\nfunction advancedCardCount(card) {\n    // Update running count\n    switch (card) {\n        case 2: case 3: case 4: case 5: case 6:\n            advancedCount++;\n            break;\n        case 10: case \"J\": case \"Q\": case \"K\": case \"A\":\n            advancedCount--;\n            break;\n        case 7: case 8: case 9:\n            // Neutral cards, no change\n            break;\n        default:\n            return \"Invalid card\";\n    }\n    \n    // Calculate true count\n    trueCount = Math.round(advancedCount / decksRemaining);\n    \n    // Determine betting strategy\n    var betAmount = 1; // Base bet\n    if (trueCount >= 2) {\n        betAmount = trueCount * 2;\n    }\n    \n    return {\n        runningCount: advancedCount,\n        trueCount: trueCount,\n        betAmount: betAmount,\n        strategy: trueCount > 0 ? \"Bet\" : \"Hold\"\n    };\n}\n\n// Test advanced counter\nresetCounter();\nadvancedCount = 0;\n\nconsole.log(\"\\nAdvanced counter test:\");\nconsole.log(\"Card 2:\", advancedCardCount(2));\nconsole.log(\"Card 3:\", advancedCardCount(3));\nconsole.log(\"Card 4:\", advancedCardCount(4));\nconsole.log(\"Card 5:\", advancedCardCount(5));\nconsole.log(\"Card 6:\", advancedCardCount(6));\nconsole.log(\"Card 10:\", advancedCardCount(10));\n\n// Card counter with deck tracking\nvar deckCount = 0;\nvar totalCards = 52;\n\nfunction deckCardCount(card) {\n    deckCount++;\n    \n    // Update count based on card\n    switch (card) {\n        case 2: case 3: case 4: case 5: case 6:\n            count++;\n            break;\n        case 10: case \"J\": case \"Q\": case \"K\": case \"A\":\n            count--;\n            break;\n    }\n    \n    // Calculate cards remaining\n    var cardsRemaining = totalCards - deckCount;\n    var decksRemaining = cardsRemaining / 52;\n    \n    // Calculate true count\n    var trueCount = Math.round(count / decksRemaining);\n    \n    return {\n        card: card,\n        runningCount: count,\n        trueCount: trueCount,\n        cardsRemaining: cardsRemaining,\n        decksRemaining: Math.round(decksRemaining * 10) / 10\n    };\n}\n\n// Reset for deck test\ncount = 0;\ndeckCount = 0;\n\nconsole.log(\"\\nDeck tracking test:\");\nvar sampleCards = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'J', 'Q', 'K', 'A', 2, 3, 4];\n\nfor (var i = 0; i < sampleCards.length; i++) {\n    var result = deckCardCount(sampleCards[i]);\n    console.log(`Card ${result.card}: Count=${result.runningCount}, True=${result.trueCount}, Remaining=${result.cardsRemaining}`);\n}\n\n// Utility functions\nfunction getBettingAdvice(trueCount) {\n    if (trueCount >= 3) return \"Bet big - High advantage\";\n    if (trueCount >= 2) return \"Bet medium - Good advantage\";\n    if (trueCount >= 1) return \"Bet small - Slight advantage\";\n    return \"Hold - No advantage\";\n}\n\nconsole.log(\"\\nBetting advice:\");\nconsole.log(\"True count 3:\", getBettingAdvice(3));\nconsole.log(\"True count 1:\", getBettingAdvice(1));\nconsole.log(\"True count 0:\", getBettingAdvice(0));\nconsole.log(\"True count -1:\", getBettingAdvice(-1));"
  },
  {
    "question": "What are properties, elements, and methods in JavaScript?",
    "answer": "**Properties, Elements, and Methods**\n\n**Properties:**\nThe things an object holds are called properties. They are key-value pairs that store data.\n\n**Example:**\n```javascript\nconst person = {\n    name: \"John\",    // 'name' is a property\n    age: 25,          // 'age' is a property\n    city: \"NYC\"      // 'city' is a property\n};\n```\n\n**Elements:**\nElements are the individual things in arrays. Each item in an array is an element.\n\n**Example:**\n```javascript\nconst fruits = [\"apple\", \"banana\", \"orange\"];\n// \"apple\", \"banana\", \"orange\" are elements\n```\n\n**Methods:**\nA function in an object is called a method. Methods are functions that belong to objects.\n\n**Example:**\n```javascript\nconst calculator = {\n    add: function(a, b) {    // 'add' is a method\n        return a + b;\n    },\n    subtract: function(a, b) {  // 'subtract' is a method\n        return a - b;\n    }\n};\n```\n\n**Key concepts:**\n- **Properties:** Store data in objects\n- **Elements:** Individual items in arrays\n- **Methods:** Functions that belong to objects\n- **Access:** Use dot notation (object.property) or bracket notation (object['property'])",
    "type": "javascript",
    "tags": ["javascript", "properties", "elements", "methods", "objects", "arrays"],
    "code": "// Properties in objects\nconst car = {\n    brand: \"Toyota\",      // property\n    model: \"Camry\",       // property\n    year: 2020,           // property\n    color: \"blue\"         // property\n};\n\nconsole.log(\"Car brand:\", car.brand); // \"Toyota\"\nconsole.log(\"Car year:\", car.year);   // 2020\n\n// Elements in arrays\nconst numbers = [1, 2, 3, 4, 5];\nconsole.log(\"First element:\", numbers[0]); // 1\nconsole.log(\"Second element:\", numbers[1]); // 2\nconsole.log(\"Last element:\", numbers[numbers.length - 1]); // 5\n\n// Methods in objects\nconst mathUtils = {\n    add: function(a, b) {\n        return a + b;\n    },\n    multiply: function(a, b) {\n        return a * b;\n    },\n    isEven: function(num) {\n        return num % 2 === 0;\n    }\n};\n\nconsole.log(\"Add method:\", mathUtils.add(5, 3)); // 8\nconsole.log(\"Multiply method:\", mathUtils.multiply(4, 6)); // 24\nconsole.log(\"Is even method:\", mathUtils.isEven(7)); // false\n\n// Built-in object methods\nconst person = {\n    firstName: \"John\",\n    lastName: \"Doe\",\n    getFullName: function() {\n        return this.firstName + \" \" + this.lastName;\n    },\n    greet: function() {\n        return \"Hello, I'm \" + this.getFullName();\n    }\n};\n\nconsole.log(\"Full name:\", person.getFullName()); // \"John Doe\"\nconsole.log(\"Greeting:\", person.greet()); // \"Hello, I'm John Doe\"\n\n// Array methods\nconst fruits = [\"apple\", \"banana\", \"orange\"];\nconsole.log(\"Array length:\", fruits.length); // 3 (property)\nconsole.log(\"Push method:\", fruits.push(\"grape\")); // 4\nconsole.log(\"Array after push:\", fruits); // [\"apple\", \"banana\", \"orange\", \"grape\"]\n\n// String methods\nconst text = \"Hello World\";\nconsole.log(\"String length:\", text.length); // 11 (property)\nconsole.log(\"To uppercase:\", text.toUpperCase()); // \"HELLO WORLD\" (method)\nconsole.log(\"To lowercase:\", text.toLowerCase()); // \"hello world\" (method)\nconsole.log(\"Char at index 0:\", text.charAt(0)); // \"H\" (method)\n\n// Practical example combining all\nconst student = {\n    name: \"Alice\",           // property\n    grades: [85, 92, 78],    // property with elements\n    getAverage: function() { // method\n        let sum = 0;\n        for (let i = 0; i < this.grades.length; i++) {\n            sum += this.grades[i];\n        }\n        return sum / this.grades.length;\n    },\n    addGrade: function(grade) { // method\n        this.grades.push(grade);\n    }\n};\n\nconsole.log(\"Student name:\", student.name); // \"Alice\" (property)\nconsole.log(\"First grade:\", student.grades[0]); // 85 (element)\nconsole.log(\"Average grade:\", student.getAverage()); // 85 (method)\n\nstudent.addGrade(95); // method\nconsole.log(\"Updated grades:\", student.grades); // [85, 92, 78, 95]\nconsole.log(\"New average:\", student.getAverage()); // 87.5\n\n// Accessing properties and methods\nconst obj = {\n    prop1: \"value1\",\n    prop2: \"value2\",\n    method1: function() {\n        return \"Method called\";\n    }\n};\n\n// Dot notation\nconsole.log(\"Dot notation:\", obj.prop1); // \"value1\"\nconsole.log(\"Method call:\", obj.method1()); // \"Method called\"\n\n// Bracket notation\nconsole.log(\"Bracket notation:\", obj['prop2']); // \"value2\"\nconsole.log(\"Dynamic access:\", obj['method1']()); // \"Method called\"\n\n// Dynamic property access\nconst propertyName = 'prop1';\nconsole.log(\"Dynamic property:\", obj[propertyName]); // \"value1\""
  },
  {
    "question": "Give an example of a function that uses destructuring in its parameters",
    "answer": "**Destructuring in Function Parameters**\n\nDestructuring in function parameters allows you to extract specific properties from an object directly in the function signature.\n\n**Example:**\n```javascript\nconst numbers = {\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4\n};\n\nconst addition = (function(){\n    return function addition({one, two}){\n        return (one + two) / 2;\n    };\n})();\n\nconsole.log(addition(numbers)); // 1.5\n```\n\n**How it works:**\n- **Function parameter:** `{one, two}` destructures the object\n- **Extracts values:** Gets `one` and `two` properties directly\n- **Uses values:** Can use `one` and `two` as variables inside the function\n- **Cleaner code:** No need to access `obj.one` and `obj.two` inside the function\n\n**Key concepts:**\n- **Object destructuring:** Extract specific properties\n- **Function parameters:** Destructure directly in parameter list\n- **Cleaner syntax:** Avoid repetitive `object.property` access\n- **Flexible:** Can destructure nested objects and arrays",
    "type": "javascript",
    "tags": ["javascript", "destructuring", "function-parameters", "objects"],
    "code": "// Basic destructuring in function parameters\nconst numbers = {\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4\n};\n\nconst addition = (function(){\n    return function addition({one, two}){\n        return (one + two) / 2;\n    };\n})();\n\nconsole.log(\"Addition result:\", addition(numbers)); // 1.5\n\n// More examples\nconst person = {\n    name: \"Aria\",\n    age: 20,\n    city: \"Nairobi\"\n};\n\nfunction greet({ name, city }) {\n    return `Hello, ${name} from ${city}!`;\n}\n\nconsole.log(\"Greeting:\", greet(person)); // \"Hello, Aria from Nairobi!\"\n\n// Destructuring with default values\nfunction createUser({ name, age = 18, email = \"no-email@example.com\" }) {\n    return {\n        name: name,\n        age: age,\n        email: email,\n        id: Math.random().toString(36).substr(2, 9)\n    };\n}\n\nconst userData = { name: \"John\" };\nconst newUser = createUser(userData);\nconsole.log(\"New user:\", newUser);\n\n// Destructuring nested objects\nconst config = {\n    database: {\n        host: \"localhost\",\n        port: 5432,\n        name: \"myapp\"\n    },\n    api: {\n        url: \"https://api.example.com\",\n        timeout: 5000\n    }\n};\n\nfunction connectToDatabase({ database: { host, port, name } }) {\n    return `Connecting to ${name} at ${host}:${port}`;\n}\n\nconsole.log(\"Database connection:\", connectToDatabase(config));\n\n// Destructuring arrays in function parameters\nfunction processCoordinates([x, y, z = 0]) {\n    return `Position: (${x}, ${y}, ${z})`;\n}\n\nconst coordinates = [10, 20];\nconsole.log(\"Coordinates:\", processCoordinates(coordinates)); // \"Position: (10, 20, 0)\"\n\n// Destructuring with rest operator\nfunction processData({ name, ...otherData }) {\n    console.log(\"Name:\", name);\n    console.log(\"Other data:\", otherData);\n    return otherData;\n}\n\nconst user = { name: \"Alice\", age: 25, city: \"NYC\", active: true };\nconst result = processData(user);\n\n// Destructuring with different variable names\nfunction calculateArea({ length: l, width: w }) {\n    return l * w;\n}\n\nconst rectangle = { length: 10, width: 5 };\nconsole.log(\"Area:\", calculateArea(rectangle)); // 50\n\n// Practical example: API response processing\nfunction processApiResponse({ data, status, message }) {\n    if (status === 'success') {\n        return {\n            success: true,\n            data: data,\n            message: message\n        };\n    } else {\n        return {\n            success: false,\n            error: message\n        };\n    }\n}\n\nconst apiResponse = {\n    data: { users: [\"Alice\", \"Bob\"] },\n    status: \"success\",\n    message: \"Users retrieved successfully\"\n};\n\nconst processed = processApiResponse(apiResponse);\nconsole.log(\"Processed response:\", processed);\n\n// Destructuring in arrow functions\nconst multiply = ({ a, b }) => a * b;\nconst divide = ({ dividend, divisor }) => dividend / divisor;\n\nconsole.log(\"Multiply:\", multiply({ a: 5, b: 3 })); // 15\nconsole.log(\"Divide:\", divide({ dividend: 10, divisor: 2 })); // 5\n\n// Destructuring with validation\nfunction validateUser({ name, email, age }) {\n    const errors = [];\n    \n    if (!name) errors.push(\"Name is required\");\n    if (!email) errors.push(\"Email is required\");\n    if (age < 18) errors.push(\"Must be 18 or older\");\n    \n    return {\n        valid: errors.length === 0,\n        errors: errors\n    };\n}\n\nconst userInput = { name: \"John\", email: \"john@example.com\", age: 25 };\nconst validation = validateUser(userInput);\nconsole.log(\"Validation:\", validation);\n\n// Destructuring in callback functions\nconst users = [\n    { name: \"Alice\", age: 25, city: \"NYC\" },\n    { name: \"Bob\", age: 30, city: \"LA\" },\n    { name: \"Charlie\", age: 35, city: \"Chicago\" }\n];\n\nconst userNames = users.map(({ name }) => name);\nconsole.log(\"User names:\", userNames); // [\"Alice\", \"Bob\", \"Charlie\"]\n\nconst adults = users.filter(({ age }) => age >= 30);\nconsole.log(\"Adults:\", adults); // [{ name: \"Bob\", age: 30, city: \"LA\" }, { name: \"Charlie\", age: 35, city: \"Chicago\" }]"
  },
  {
    "question": "What is destructuring in JavaScript?",
    "answer": "**Destructuring in JavaScript**\n\nDestructuring means quickly pulling out pieces (values) from an object or array into separate variables, using a shortcut instead of picking each piece one by one.\n\n**For objects, it grabs specific properties:**\n```javascript\nconst person = { name: \"Ali\", age: 15 };\nconst { name, age } = person;\n// name is \"Ali\", age is 15\n```\n\n**For arrays, it grabs items by position:**\n```javascript\nconst nums = [1, 2, 3];\nconst [a, b] = nums;\n// a is 1, b is 2\n```\n\n**For functions:**\n```javascript\nconst person = {\n    name: \"Aria\",\n    age: 20,\n    city: \"Nairobi\"\n};\n\nfunction greet({ name, city }) {\n    return `Hello, ${name} from ${city}!`;\n}\n\nconsole.log(greet(person)); // \"Hello, Aria from Nairobi!\"\n```\n\n**In simple words:**\nDestructuring is a fast way to pick out values you want from a box (object/array), and put them in their own cups (variables), all in one line.\n\n**Key concepts:**\n- **Object destructuring:** Extract properties by name\n- **Array destructuring:** Extract elements by position\n- **Function parameters:** Destructure directly in parameter list\n- **Cleaner code:** Reduces repetitive property access",
    "type": "javascript",
    "tags": ["javascript", "destructuring", "objects", "arrays", "es6"],
    "code": "// Object destructuring\nconst person = { name: \"Ali\", age: 15, city: \"NYC\" };\nconst { name, age } = person;\n\nconsole.log(\"Name:\", name); // \"Ali\"\nconsole.log(\"Age:\", age);   // 15\n\n// Array destructuring\nconst nums = [1, 2, 3, 4, 5];\nconst [a, b, c] = nums;\n\nconsole.log(\"A:\", a); // 1\nconsole.log(\"B:\", b); // 2\nconsole.log(\"C:\", c); // 3\n\n// Destructuring with different variable names\nconst { name: fullName, age: years } = person;\nconsole.log(\"Full name:\", fullName); // \"Ali\"\nconsole.log(\"Years:\", years);       // 15\n\n// Destructuring with default values\nconst { name: userName, country = \"USA\" } = person;\nconsole.log(\"User name:\", userName); // \"Ali\"\nconsole.log(\"Country:\", country);    // \"USA\" (default)\n\n// Destructuring in function parameters\nfunction greet({ name, city }) {\n    return `Hello, ${name} from ${city}!`;\n}\n\nconst person2 = {\n    name: \"Aria\",\n    age: 20,\n    city: \"Nairobi\"\n};\n\nconsole.log(\"Greeting:\", greet(person2)); // \"Hello, Aria from Nairobi!\"\n\n// Skipping elements in array destructuring\nconst [first, , third] = nums;\nconsole.log(\"First:\", first); // 1\nconsole.log(\"Third:\", third); // 3\n\n// Rest operator with destructuring\nconst [firstNum, ...rest] = nums;\nconsole.log(\"First number:\", firstNum); // 1\nconsole.log(\"Rest:\", rest);            // [2, 3, 4, 5]\n\n// Destructuring nested objects\nconst user = {\n    name: \"John\",\n    address: {\n        street: \"123 Main St\",\n        city: \"Boston\",\n        state: \"MA\"\n    },\n    preferences: {\n        theme: \"dark\",\n        notifications: true\n    }\n};\n\nconst { name: userName2, address: { city: userCity } } = user;\nconsole.log(\"User name:\", userName2); // \"John\"\nconsole.log(\"User city:\", userCity); // \"Boston\"\n\n// Destructuring arrays returned from functions\nfunction getMinMax(numbers) {\n    return [Math.min(...numbers), Math.max(...numbers)];\n}\n\nconst [min, max] = getMinMax([1, 5, 3, 9, 2]);\nconsole.log(\"Min:\", min); // 1\nconsole.log(\"Max:\", max); // 9\n\n// Swapping variables with destructuring\nlet x = 5, y = 10;\nconsole.log(\"Before swap - x:\", x, \"y:\", y);\n\n[x, y] = [y, x];\nconsole.log(\"After swap - x:\", x, \"y:\", y);\n\n// Destructuring with computed property names\nconst prop = \"age\";\nconst { [prop]: userAge } = person;\nconsole.log(\"User age:\", userAge); // 15\n\n// Destructuring in loops\nconst users = [\n    { name: \"Alice\", age: 25 },\n    { name: \"Bob\", age: 30 },\n    { name: \"Charlie\", age: 35 }\n];\n\nfor (const { name, age } of users) {\n    console.log(`${name} is ${age} years old`);\n}\n\n// Destructuring with function that returns object\nfunction createPoint(x, y) {\n    return { x, y };\n}\n\nconst { x: pointX, y: pointY } = createPoint(10, 20);\nconsole.log(\"Point X:\", pointX); // 10\nconsole.log(\"Point Y:\", pointY); // 20\n\n// Destructuring with mixed data types\nconst mixed = [\"hello\", 42, true, { name: \"John\" }];\nconst [greeting, number, flag, personObj] = mixed;\n\nconsole.log(\"Greeting:\", greeting); // \"hello\"\nconsole.log(\"Number:\", number);     // 42\nconsole.log(\"Flag:\", flag);         // true\nconsole.log(\"Person:\", personObj);  // { name: \"John\" }\n\n// Destructuring with error handling\nfunction safeDestructure(obj) {\n    try {\n        const { name, age } = obj;\n        return { name, age };\n    } catch (error) {\n        return { name: \"Unknown\", age: 0 };\n    }\n}\n\nconsole.log(\"Safe destructure:\", safeDestructure(person));\nconsole.log(\"Safe destructure (null):\", safeDestructure(null));"
  },
  {
    "question": "Give an example code showing the difference between structured and unstructured",
    "answer": "**Destructured vs Undestructured Code**\n\n**Destructured (using destructuring):**\n```javascript\nconst user = { name: \"Ali\", age: 20 };\n\nfunction printInfo({ name, age }) {\n    console.log(name, age);\n}\n\nprintInfo(user); // prints: Ali 20\n```\n\n**Undestructured (not using destructuring):**\n```javascript\nconst user = { name: \"Ali\", age: 20 };\n\nfunction printInfo(user) {\n    console.log(user.name, user.age);\n}\n\nprintInfo(user); // prints: Ali 20\n```\n\n**Summary:**\n- **Destructured:** Grabs `name` and `age` directly from the object in the function parameters\n- **Undestructured:** Grabs them inside the function, using `user.name`, `user.age`\n\n**Key differences:**\n- **Destructured:** Cleaner parameter list, direct variable access\n- **Undestructured:** Traditional approach, requires object property access\n- **Same result:** Both produce the same output\n- **Readability:** Destructuring is more concise and readable",
    "type": "javascript",
    "tags": ["javascript", "destructuring", "comparison", "code-style"],
    "code": "// DESTRUCTURED APPROACH\nconst user = { name: \"Ali\", age: 20, city: \"NYC\" };\n\nfunction printInfoDestructured({ name, age }) {\n    console.log(\"Destructured - Name:\", name);\n    console.log(\"Destructured - Age:\", age);\n    // Direct access to variables\n    return `Hello ${name}, you are ${age} years old`;\n}\n\nconsole.log(\"=== DESTRUCTURED ===\");\nconst result1 = printInfoDestructured(user);\nconsole.log(\"Result:\", result1);\n\n// UNDESTRUCTURED APPROACH\nfunction printInfoUndestructured(user) {\n    console.log(\"Undestructured - Name:\", user.name);\n    console.log(\"Undestructured - Age:\", user.age);\n    // Access through object properties\n    return `Hello ${user.name}, you are ${user.age} years old`;\n}\n\nconsole.log(\"\\n=== UNDESTRUCTURED ===\");\nconst result2 = printInfoUndestructured(user);\nconsole.log(\"Result:\", result2);\n\n// More complex example - DESTRUCTURED\nconst product = {\n    name: \"Laptop\",\n    price: 999,\n    category: \"Electronics\",\n    inStock: true\n};\n\nfunction processProductDestructured({ name, price, category }) {\n    const tax = price * 0.1;\n    const total = price + tax;\n    \n    return {\n        productName: name,\n        category: category,\n        originalPrice: price,\n        tax: tax,\n        totalPrice: total\n    };\n}\n\nconsole.log(\"\\n=== DESTRUCTURED PRODUCT ===\");\nconst processed1 = processProductDestructured(product);\nconsole.log(\"Processed product:\", processed1);\n\n// More complex example - UNDESTRUCTURED\nfunction processProductUndestructured(product) {\n    const tax = product.price * 0.1;\n    const total = product.price + tax;\n    \n    return {\n        productName: product.name,\n        category: product.category,\n        originalPrice: product.price,\n        tax: tax,\n        totalPrice: total\n    };\n}\n\nconsole.log(\"\\n=== UNDESTRUCTURED PRODUCT ===\");\nconst processed2 = processProductUndestructured(product);\nconsole.log(\"Processed product:\", processed2);\n\n// Array destructuring comparison\nconst coordinates = [10, 20, 30];\n\n// DESTRUCTURED\nfunction calculateDistanceDestructured([x, y, z = 0]) {\n    return Math.sqrt(x * x + y * y + z * z);\n}\n\nconsole.log(\"\\n=== DESTRUCTURED ARRAY ===\");\nconst distance1 = calculateDistanceDestructured(coordinates);\nconsole.log(\"Distance:\", distance1);\n\n// UNDESTRUCTURED\nfunction calculateDistanceUndestructured(coords) {\n    const x = coords[0];\n    const y = coords[1];\n    const z = coords[2] || 0;\n    return Math.sqrt(x * x + y * y + z * z);\n}\n\nconsole.log(\"\\n=== UNDESTRUCTURED ARRAY ===\");\nconst distance2 = calculateDistanceUndestructured(coordinates);\nconsole.log(\"Distance:\", distance2);\n\n// Nested object comparison\nconst company = {\n    name: \"Tech Corp\",\n    address: {\n        street: \"123 Tech St\",\n        city: \"San Francisco\",\n        state: \"CA\"\n    },\n    employees: 100\n};\n\n// DESTRUCTURED NESTED\nfunction getCompanyInfoDestructured({ name, address: { city, state }, employees }) {\n    return `${name} is located in ${city}, ${state} and has ${employees} employees`;\n}\n\nconsole.log(\"\\n=== DESTRUCTURED NESTED ===\");\nconst info1 = getCompanyInfoDestructured(company);\nconsole.log(\"Company info:\", info1);\n\n// UNDESTRUCTURED NESTED\nfunction getCompanyInfoUndestructured(company) {\n    return `${company.name} is located in ${company.address.city}, ${company.address.state} and has ${company.employees} employees`;\n}\n\nconsole.log(\"\\n=== UNDESTRUCTURED NESTED ===\");\nconst info2 = getCompanyInfoUndestructured(company);\nconsole.log(\"Company info:\", info2);\n\n// Performance comparison (same performance, different syntax)\nconst data = { a: 1, b: 2, c: 3, d: 4, e: 5 };\n\n// DESTRUCTURED\nfunction sumDestructured({ a, b, c, d, e }) {\n    return a + b + c + d + e;\n}\n\n// UNDESTRUCTURED\nfunction sumUndestructured(data) {\n    return data.a + data.b + data.c + data.d + data.e;\n}\n\nconsole.log(\"\\n=== PERFORMANCE COMPARISON ===\");\nconsole.log(\"Destructured sum:\", sumDestructured(data)); // 15\nconsole.log(\"Undestructured sum:\", sumUndestructured(data)); // 15\n\n// Benefits of destructuring\nconsole.log(\"\\n=== BENEFITS OF DESTRUCTURING ===\");\nconsole.log(\"1. Cleaner function signatures\");\nconsole.log(\"2. Direct variable access\");\nconsole.log(\"3. Less repetitive code\");\nconsole.log(\"4. Better readability\");\nconsole.log(\"5. Easier to understand what data is needed\");"
  },
  {
    "question": "What is the proper format for IIFE (Immediately Invoked Function Expression)?",
    "answer": "**IIFE Proper Format**\n\nThe proper format for an IIFE (Immediately Invoked Function Expression) is:\n\n```javascript\n(function(){\n    console.log(\"Hello from IIFE!\");\n})();\n```\n\n**Format breakdown:**\n1. **Function definition:** `function() { ... }`\n2. **Parentheses around function:** `(function() { ... })`\n3. **Invocation parentheses:** `()` at the end\n4. **Semicolon:** `;` to end the statement\n\n**Key components:**\n- **Function expression:** Anonymous function wrapped in parentheses\n- **Immediate execution:** `()` at the end calls the function right away\n- **No global pollution:** Variables inside don't leak to global scope\n- **Self-contained:** Runs once and doesn't leave variables behind\n\n**Alternative formats:**\n```javascript\n// Arrow function IIFE\n(() => {\n    console.log(\"Arrow function IIFE!\");\n})();\n\n// IIFE with parameters\n(function(name) {\n    console.log(\"Hello, \" + name + \"!\");\n})(\"World\");\n```\n\n**Key concepts:**\n- **Parentheses required:** Must wrap function in parentheses\n- **Immediate execution:** Function runs as soon as it's defined\n- **Private scope:** Variables inside are not accessible from outside\n- **One-time execution:** Function runs once and is done",
    "type": "javascript",
    "tags": ["javascript", "iife", "immediately-invoked", "function-expression"],
    "code": "// Basic IIFE format\n(function(){\n    console.log(\"Hello from IIFE!\");\n})();\n\n// Arrow function IIFE\n(() => {\n    console.log(\"Arrow function IIFE!\");\n})();\n\n// IIFE with parameters\n(function(name) {\n    console.log(\"Hello, \" + name + \"!\");\n})(\"World\");\n\n// IIFE that returns a value\nvar result = (function() {\n    return \"IIFE result\";\n})();\n\nconsole.log(\"Result:\", result); // \"IIFE result\"\n\n// IIFE for creating private variables\nvar counter = (function() {\n    var count = 0;\n    \n    return {\n        increment: function() {\n            count++;\n            return count;\n        },\n        decrement: function() {\n            count--;\n            return count;\n        },\n        getCount: function() {\n            return count;\n        }\n    };\n})();\n\nconsole.log(\"Counter increment:\", counter.increment()); // 1\nconsole.log(\"Counter increment:\", counter.increment()); // 2\nconsole.log(\"Counter get:\", counter.getCount()); // 2\n// console.log(counter.count); // undefined (private variable)\n\n// IIFE for module pattern\nvar myModule = (function() {\n    var privateVar = \"I'm private\";\n    \n    function privateFunction() {\n        return \"Private function called\";\n    }\n    \n    return {\n        publicMethod: function() {\n            return privateFunction() + \" - \" + privateVar;\n        },\n        publicVar: \"I'm public\"\n    };\n})();\n\nconsole.log(\"Public method:\", myModule.publicMethod());\nconsole.log(\"Public var:\", myModule.publicVar);\n// console.log(myModule.privateVar); // undefined\n\n// IIFE for initialization\n(function() {\n    console.log(\"Initializing application...\");\n    \n    // Set up event listeners\n    // Initialize variables\n    // Configure settings\n    \n    console.log(\"Application initialized!\");\n})();\n\n// IIFE with multiple functions\nvar calculator = (function() {\n    function add(a, b) {\n        return a + b;\n    }\n    \n    function subtract(a, b) {\n        return a - b;\n    }\n    \n    function multiply(a, b) {\n        return a * b;\n    }\n    \n    function divide(a, b) {\n        return b !== 0 ? a / b : \"Cannot divide by zero\";\n    }\n    \n    return {\n        add: add,\n        subtract: subtract,\n        multiply: multiply,\n        divide: divide\n    };\n})();\n\nconsole.log(\"Calculator add:\", calculator.add(5, 3)); // 8\nconsole.log(\"Calculator multiply:\", calculator.multiply(4, 6)); // 24\n\n// IIFE for avoiding variable conflicts\n(function() {\n    var $ = \"jQuery\"; // This $ won't conflict with jQuery\n    console.log(\"Local $:\", $);\n})();\n\n// Global $ is still available if jQuery is loaded\n\n// IIFE with strict mode\n(function() {\n    \"use strict\";\n    \n    // Strict mode applies only to this function\n    var strictVar = \"I'm in strict mode\";\n    console.log(\"Strict mode var:\", strictVar);\n})();\n\n// IIFE for data processing\nvar processedData = (function() {\n    var rawData = [1, 2, 3, 4, 5];\n    \n    // Process the data\n    var doubled = rawData.map(x => x * 2);\n    var filtered = doubled.filter(x => x > 5);\n    var sum = filtered.reduce((total, x) => total + x, 0);\n    \n    return {\n        original: rawData,\n        processed: filtered,\n        sum: sum\n    };\n})();\n\nconsole.log(\"Processed data:\", processedData);\n\n// IIFE for creating namespaces\nvar MyApp = (function() {\n    var privateData = {};\n    \n    return {\n        namespace1: {\n            method1: function() {\n                return \"Method 1\";\n            }\n        },\n        namespace2: {\n            method2: function() {\n                return \"Method 2\";\n            }\n        }\n    };\n})();\n\nconsole.log(\"MyApp method1:\", MyApp.namespace1.method1());\nconsole.log(\"MyApp method2:\", MyApp.namespace2.method2());\n\n// Common IIFE patterns\nconsole.log(\"\\n=== COMMON IIFE PATTERNS ===\");\n\n// Pattern 1: Basic IIFE\n(function() {\n    console.log(\"Pattern 1: Basic IIFE\");\n})();\n\n// Pattern 2: IIFE with return value\nvar value = (function() {\n    return \"Pattern 2: IIFE with return value\";\n})();\nconsole.log(value);\n\n// Pattern 3: IIFE with parameters\n(function(message) {\n    console.log(\"Pattern 3:\", message);\n})(\"IIFE with parameters\");\n\n// Pattern 4: IIFE for configuration\nvar config = (function() {\n    var settings = {\n        apiUrl: \"https://api.example.com\",\n        timeout: 5000,\n        retries: 3\n    };\n    \n    return {\n        get: function(key) {\n            return settings[key];\n        },\n        set: function(key, value) {\n            settings[key] = value;\n        }\n    };\n})();\n\nconsole.log(\"Config API URL:\", config.get('apiUrl'));\nconfig.set('timeout', 10000);\nconsole.log(\"Config timeout:\", config.get('timeout'));"
  },
  {
    "question": "Solve the makeList function question",
    "answer": "**MakeList Function Solution**\n\nThe `makeList` function takes an array and creates HTML list items with a specific class.\n\n**Given data:**\n```javascript\nconst result = {\n    success: [\"max-length\", \"no-amd\", \"prefer-arrow-functions\"],\n    failure: [\"no-var\", \"var-on-top\", \"linebreak\"],\n    skipped: [\"no-extra-semi\", \"no-dup-keys\"]\n};\n```\n\n**Solution:**\n```javascript\nfunction makeList(arr) {\n    const displayResult = [];\n    for (let i = 0; i < arr.length; i++) {\n        displayResult.push(`<li class=\"text-warning\">${arr[i]}</li>`);\n    }\n    return displayResult;\n}\n\nconst failuresList = makeList(result.failure);\nconst successList = makeList(result.success);\nconst skippedList = makeList(result.skipped);\n\nconsole.log(failuresList);\n```\n\n**How it works:**\n- **Takes array:** Function accepts an array of strings\n- **Creates HTML:** Each array item becomes an HTML `<li>` element\n- **Adds class:** Each item gets `class=\"text-warning\"`\n- **Returns array:** Returns array of HTML strings\n- **Reusable:** Can be used with any array\n\n**Key concepts:**\n- **Template literals:** Uses backticks and `${}` for string interpolation\n- **Loop through array:** Iterates through each element\n- **Build HTML:** Creates HTML strings dynamically\n- **Return result:** Returns array of formatted HTML elements",
    "type": "javascript",
    "tags": ["javascript", "function", "html-generation", "arrays", "loops"],
    "code": "// Given data structure\nconst result = {\n    success: [\"max-length\", \"no-amd\", \"prefer-arrow-functions\"],\n    failure: [\"no-var\", \"var-on-top\", \"linebreak\"],\n    skipped: [\"no-extra-semi\", \"no-dup-keys\"]\n};\n\n// Solution: makeList function\nfunction makeList(arr) {\n    const displayResult = [];\n    for (let i = 0; i < arr.length; i++) {\n        displayResult.push(`<li class=\"text-warning\">${arr[i]}</li>`);\n    }\n    return displayResult;\n}\n\n// Using the function\nconst failuresList = makeList(result.failure);\nconst successList = makeList(result.success);\nconst skippedList = makeList(result.skipped);\n\nconsole.log(\"Failures list:\", failuresList);\nconsole.log(\"Success list:\", successList);\nconsole.log(\"Skipped list:\", skippedList);\n\n// Alternative solutions\n\n// Solution 2: Using map method\nfunction makeListMap(arr) {\n    return arr.map(item => `<li class=\"text-warning\">${item}</li>`);\n}\n\nconsole.log(\"\\n=== USING MAP ===\");\nconst failuresMap = makeListMap(result.failure);\nconsole.log(\"Failures with map:\", failuresMap);\n\n// Solution 3: Using for...of loop\nfunction makeListForOf(arr) {\n    const displayResult = [];\n    for (const item of arr) {\n        displayResult.push(`<li class=\"text-warning\">${item}</li>`);\n    }\n    return displayResult;\n}\n\nconsole.log(\"\\n=== USING FOR...OF ===\");\nconst failuresForOf = makeListForOf(result.failure);\nconsole.log(\"Failures with for...of:\", failuresForOf);\n\n// Solution 4: Using forEach\nfunction makeListForEach(arr) {\n    const displayResult = [];\n    arr.forEach(item => {\n        displayResult.push(`<li class=\"text-warning\">${item}</li>`);\n    });\n    return displayResult;\n}\n\nconsole.log(\"\\n=== USING FOREACH ===\");\nconst failuresForEach = makeListForEach(result.failure);\nconsole.log(\"Failures with forEach:\", failuresForEach);\n\n// Enhanced version with different classes\nfunction makeListEnhanced(arr, className = \"text-warning\") {\n    return arr.map(item => `<li class=\"${className}\">${item}</li>`);\n}\n\nconsole.log(\"\\n=== ENHANCED VERSION ===\");\nconst failuresEnhanced = makeListEnhanced(result.failure, \"text-danger\");\nconst successEnhanced = makeListEnhanced(result.success, \"text-success\");\nconst skippedEnhanced = makeListEnhanced(result.skipped, \"text-muted\");\n\nconsole.log(\"Enhanced failures:\", failuresEnhanced);\nconsole.log(\"Enhanced success:\", successEnhanced);\nconsole.log(\"Enhanced skipped:\", skippedEnhanced);\n\n// Version that creates actual DOM elements\nfunction makeListDOM(arr, className = \"text-warning\") {\n    const ul = document.createElement('ul');\n    \n    arr.forEach(item => {\n        const li = document.createElement('li');\n        li.className = className;\n        li.textContent = item;\n        ul.appendChild(li);\n    });\n    \n    return ul;\n}\n\n// Version that returns HTML string\nfunction makeListHTML(arr, className = \"text-warning\") {\n    const listItems = arr.map(item => `<li class=\"${className}\">${item}</li>`).join('');\n    return `<ul>${listItems}</ul>`;\n}\n\nconsole.log(\"\\n=== HTML STRING VERSION ===\");\nconst failuresHTML = makeListHTML(result.failure, \"text-danger\");\nconsole.log(\"Failures HTML:\", failuresHTML);\n\n// Practical usage example\nfunction displayResults(results) {\n    const container = document.createElement('div');\n    \n    // Add failures\n    if (results.failure.length > 0) {\n        const failureTitle = document.createElement('h3');\n        failureTitle.textContent = 'Failures:';\n        container.appendChild(failureTitle);\n        container.appendChild(makeListDOM(results.failure, 'text-danger'));\n    }\n    \n    // Add successes\n    if (results.success.length > 0) {\n        const successTitle = document.createElement('h3');\n        successTitle.textContent = 'Successes:';\n        container.appendChild(successTitle);\n        container.appendChild(makeListDOM(results.success, 'text-success'));\n    }\n    \n    // Add skipped\n    if (results.skipped.length > 0) {\n        const skippedTitle = document.createElement('h3');\n        skippedTitle.textContent = 'Skipped:';\n        container.appendChild(skippedTitle);\n        container.appendChild(makeListDOM(results.skipped, 'text-muted'));\n    }\n    \n    return container;\n}\n\nconsole.log(\"\\n=== PRACTICAL USAGE ===\");\nconsole.log(\"Display results function created\");\n\n// Test with different data\nconst testData = {\n    errors: [\"syntax-error\", \"type-error\", \"reference-error\"],\n    warnings: [\"unused-variable\", \"missing-semicolon\"],\n    info: [\"code-style\", \"best-practice\"]\n};\n\nconsole.log(\"\\n=== TEST WITH DIFFERENT DATA ===\");\nconst errorList = makeList(testData.errors);\nconst warningList = makeList(testData.warnings);\nconst infoList = makeList(testData.info);\n\nconsole.log(\"Error list:\", errorList);\nconsole.log(\"Warning list:\", warningList);\nconsole.log(\"Info list:\", infoList);\n\n// Performance comparison\nconsole.log(\"\\n=== PERFORMANCE COMPARISON ===\");\nconst largeArray = Array.from({length: 1000}, (_, i) => `item-${i}`);\n\nconsole.time(\"For loop\");\nmakeList(largeArray);\nconsole.timeEnd(\"For loop\");\n\nconsole.time(\"Map method\");\nmakeListMap(largeArray);\nconsole.timeEnd(\"Map method\");\n\nconsole.time(\"For...of loop\");\nmakeListForOf(largeArray);\nconsole.timeEnd(\"For...of loop\");"
  },
  {
    "question": "How to set a new line and tab in JavaScript?",
    "answer": "**New Line and Tab Characters in JavaScript**\n\n**New Line:** `\\n`\n**Tab:** `\\t`\n\n**Usage examples:**\n```javascript\n// New line\nconsole.log(\"Line 1\\nLine 2\");\n// Output:\n// Line 1\n// Line 2\n\n// Tab\nconsole.log(\"Name:\\tJohn\");\n// Output: Name:    John\n\n// Combined\nconsole.log(\"Name:\\tJohn\\nAge:\\t25\");\n// Output:\n// Name:    John\n// Age:     25\n```\n\n**Key concepts:**\n- **`\\n`:** Creates a new line (line break)\n- **`\\t`:** Creates a tab character (horizontal tab)\n- **Escape sequences:** Both are escape sequences in strings\n- **String interpolation:** Can be used in template literals\n- **Cross-platform:** `\\n` works on most systems (Unix/Linux/Mac), `\\r\\n` for Windows\n\n**Common uses:**\n- **Formatting output:** Create readable console output\n- **Text processing:** Format strings with proper spacing\n- **File generation:** Create formatted text files\n- **Logging:** Structure log messages",
    "type": "javascript",
    "tags": ["javascript", "strings", "escape-sequences", "formatting"],
    "code": "// New line character\nconsole.log(\"Line 1\\nLine 2\");\n// Output:\n// Line 1\n// Line 2\n\n// Tab character\nconsole.log(\"Name:\\tJohn\");\n// Output: Name:    John\n\n// Combined new line and tab\nconsole.log(\"Name:\\tJohn\\nAge:\\t25\\nCity:\\tNYC\");\n// Output:\n// Name:    John\n// Age:     25\n// City:    NYC\n\n// Using in template literals\nconst name = \"Alice\";\nconst age = 30;\nconst city = \"Boston\";\n\nconsole.log(`Name:\\t${name}\\nAge:\\t${age}\\nCity:\\t${city}`);\n// Output:\n// Name:    Alice\n// Age:     30\n// City:    Boston\n\n// Creating formatted strings\nfunction formatUserInfo(user) {\n    return `User Information:\\n\\tName: ${user.name}\\n\\tAge: ${user.age}\\n\\tEmail: ${user.email}`;\n}\n\nconst user = {\n    name: \"John Doe\",\n    age: 25,\n    email: \"john@example.com\"\n};\n\nconsole.log(formatUserInfo(user));\n// Output:\n// User Information:\n//     Name: John Doe\n//     Age: 25\n//     Email: john@example.com\n\n// Creating tables with tabs\nfunction createTable(data) {\n    let table = \"Name\\tAge\\tCity\\n\";\n    table += \"----\\t---\\t----\\n\";\n    \n    data.forEach(person => {\n        table += `${person.name}\\t${person.age}\\t${person.city}\\n`;\n    });\n    \n    return table;\n}\n\nconst people = [\n    { name: \"Alice\", age: 25, city: \"NYC\" },\n    { name: \"Bob\", age: 30, city: \"LA\" },\n    { name: \"Charlie\", age: 35, city: \"Chicago\" }\n];\n\nconsole.log(createTable(people));\n// Output:\n// Name    Age City\n// ----    --- ----\n// Alice   25  NYC\n// Bob     30  LA\n// Charlie 35  Chicago\n\n// Using in string concatenation\nlet message = \"Error occurred:\\n\";\nmessage += \"\\tFile: script.js\\n\";\nmessage += \"\\tLine: 42\\n\";\nmessage += \"\\tMessage: Variable not defined\";\n\nconsole.log(message);\n// Output:\n// Error occurred:\n//     File: script.js\n//     Line: 42\n//     Message: Variable not defined\n\n// Creating formatted logs\nfunction logError(error) {\n    const timestamp = new Date().toISOString();\n    const logMessage = `[${timestamp}] ERROR:\\n\\tMessage: ${error.message}\\n\\tStack: ${error.stack}`;\n    console.log(logMessage);\n}\n\n// Simulate an error\nconst error = new Error(\"Something went wrong\");\nerror.stack = \"Error: Something went wrong\\n    at main (script.js:10:5)\\n    at <anonymous> (script.js:15:1)\";\n\nlogError(error);\n\n// Using in file content generation\nfunction generateConfigFile(config) {\n    let content = \"# Configuration File\\n\";\n    content += \"# Generated on: \" + new Date().toISOString() + \"\\n\\n\";\n    \n    Object.keys(config).forEach(key => {\n        content += `${key} = ${config[key]}\\n`;\n    });\n    \n    return content;\n}\n\nconst config = {\n    \"database.host\": \"localhost\",\n    \"database.port\": \"5432\",\n    \"api.timeout\": \"5000\",\n    \"debug.enabled\": \"true\"\n};\n\nconsole.log(\"\\n=== CONFIG FILE ===\");\nconsole.log(generateConfigFile(config));\n\n// Different line ending formats\nconsole.log(\"\\n=== LINE ENDING FORMATS ===\");\nconsole.log(\"Unix/Linux/Mac: \\n\");\nconsole.log(\"Windows: \\r\\n\");\nconsole.log(\"Old Mac: \\r\");\n\n// Practical example: CSV to formatted table\nfunction csvToFormattedTable(csvData) {\n    const lines = csvData.split('\\n');\n    let formatted = \"\";\n    \n    lines.forEach((line, index) => {\n        if (line.trim()) {\n            const columns = line.split(',');\n            formatted += `${index + 1}.\\t${columns.join('\\t')}\\n`;\n        }\n    });\n    \n    return formatted;\n}\n\nconst csvData = \"Name,Age,City\\nJohn,25,NYC\\nJane,30,LA\\nBob,35,Chicago\";\nconsole.log(\"\\n=== CSV TO FORMATTED TABLE ===\");\nconsole.log(csvToFormattedTable(csvData));\n\n// Using in HTML generation\nfunction generateHTMLList(items) {\n    let html = \"<ul>\\n\";\n    \n    items.forEach(item => {\n        html += `\\t<li>${item}</li>\\n`;\n    });\n    \n    html += \"</ul>\";\n    return html;\n}\n\nconst items = [\"Apple\", \"Banana\", \"Orange\"];\nconsole.log(\"\\n=== HTML GENERATION ===\");\nconsole.log(generateHTMLList(items));\n\n// Multi-line strings with proper formatting\nconst multiLineString = `This is a multi-line string\nwith proper formatting:\n\t- Item 1\n\t- Item 2\n\t- Item 3\n\nEnd of string.`;\n\nconsole.log(\"\\n=== MULTI-LINE STRING ===\");\nconsole.log(multiLineString);"
  },
  {
    "question": "Write a function that builds new objects with the arguments given",
    "answer": "**Function that Builds New Objects**\n\nHere's a function that creates new objects using the arguments provided:\n\n```javascript\nconst newPerson = (name, age, gender) => ({name, age, gender})\nconsole.log(newPerson(\"jack\", 44, \"male\"))\n// Output: { name: \"jack\", age: 44, gender: \"male\" }\n```\n\n**How it works:**\n- **Arrow function:** Uses concise arrow function syntax\n- **Object shorthand:** `{name, age, gender}` is shorthand for `{name: name, age: age, gender: gender}`\n- **Returns object:** Function returns a new object with the provided values\n- **Immediate execution:** Can be called with arguments to create objects\n\n**Key concepts:**\n- **Object literal shorthand:** When property name matches variable name, you can omit the colon and value\n- **Arrow function:** Concise function syntax\n- **Object creation:** Creates new objects dynamically\n- **Parameter mapping:** Maps function parameters to object properties\n\n**Alternative approaches:**\n- **Traditional function:** `function newPerson(name, age, gender) { return {name, age, gender}; }`\n- **Object.assign:** `Object.assign({}, {name, age, gender})`\n- **Spread operator:** `{...{name, age, gender}}`",
    "type": "javascript",
    "tags": ["javascript", "functions", "objects", "arrow-functions", "object-shorthand"],
    "code": "// Basic object builder function\nconst newPerson = (name, age, gender) => ({name, age, gender})\nconsole.log(\"Basic person:\", newPerson(\"jack\", 44, \"male\"));\n// Output: { name: \"jack\", age: 44, gender: \"male\" }\n\n// More examples\nconst newUser = (username, email, isActive = true) => ({username, email, isActive});\nconsole.log(\"New user:\", newUser(\"alice\", \"alice@example.com\"));\n// Output: { username: \"alice\", email: \"alice@example.com\", isActive: true }\n\n// Product builder\nconst newProduct = (name, price, category) => ({name, price, category});\nconsole.log(\"New product:\", newProduct(\"Laptop\", 999, \"Electronics\"));\n// Output: { name: \"Laptop\", price: 999, category: \"Electronics\" }\n\n// Alternative approaches\n\n// Traditional function syntax\nfunction createPerson(name, age, gender) {\n    return {name, age, gender};\n}\n\nconsole.log(\"\\n=== TRADITIONAL FUNCTION ===\");\nconsole.log(\"Traditional person:\", createPerson(\"jane\", 30, \"female\"));\n\n// Using Object.assign\nconst createUserAssign = (username, email, role = \"user\") => {\n    return Object.assign({}, {username, email, role});\n};\n\nconsole.log(\"\\n=== OBJECT.ASSIGN ===\");\nconsole.log(\"User with assign:\", createUserAssign(\"bob\", \"bob@example.com\", \"admin\"));\n\n// Using spread operator\nconst createProductSpread = (name, price, category) => {\n    return {...{name, price, category}};\n};\n\nconsole.log(\"\\n=== SPREAD OPERATOR ===\");\nconsole.log(\"Product with spread:\", createProductSpread(\"Phone\", 599, \"Electronics\"));\n\n// More complex object builder\nconst createEmployee = (firstName, lastName, department, salary, startDate = new Date()) => {\n    return {\n        firstName,\n        lastName,\n        fullName: `${firstName} ${lastName}`,\n        department,\n        salary,\n        startDate,\n        id: Math.random().toString(36).substr(2, 9),\n        isActive: true\n    };\n};\n\nconsole.log(\"\\n=== COMPLEX OBJECT BUILDER ===\");\nconst employee = createEmployee(\"John\", \"Doe\", \"Engineering\", 75000);\nconsole.log(\"Employee:\", employee);\n\n// Generic object builder\nconst buildObject = (keys, values) => {\n    const obj = {};\n    keys.forEach((key, index) => {\n        obj[key] = values[index];\n    });\n    return obj;\n};\n\nconsole.log(\"\\n=== GENERIC OBJECT BUILDER ===\");\nconst keys = [\"name\", \"age\", \"city\"];\nconst values = [\"Alice\", 25, \"NYC\"];\nconst genericObj = buildObject(keys, values);\nconsole.log(\"Generic object:\", genericObj);\n\n// Object builder with validation\nconst createValidatedUser = (username, email, age) => {\n    if (!username || !email) {\n        throw new Error(\"Username and email are required\");\n    }\n    if (age < 18) {\n        throw new Error(\"User must be 18 or older\");\n    }\n    \n    return {\n        username,\n        email,\n        age,\n        createdAt: new Date(),\n        isVerified: false\n    };\n};\n\nconsole.log(\"\\n=== VALIDATED OBJECT BUILDER ===\");\ntry {\n    const validUser = createValidatedUser(\"alice\", \"alice@example.com\", 25);\n    console.log(\"Valid user:\", validUser);\n} catch (error) {\n    console.log(\"Error:\", error.message);\n}\n\n// Object builder with nested objects\nconst createCompany = (name, address, employees = []) => {\n    return {\n        name,\n        address: {\n            street: address.street,\n            city: address.city,\n            state: address.state,\n            zipCode: address.zipCode\n        },\n        employees,\n        employeeCount: employees.length,\n        founded: new Date(),\n        isActive: true\n    };\n};\n\nconsole.log(\"\\n=== NESTED OBJECT BUILDER ===\");\nconst company = createCompany(\"Tech Corp\", {\n    street: \"123 Tech St\",\n    city: \"San Francisco\",\n    state: \"CA\",\n    zipCode: \"94105\"\n}, [\"Alice\", \"Bob\", \"Charlie\"]);\n\nconsole.log(\"Company:\", company);\n\n// Object builder with methods\nconst createCalculator = (name) => {\n    return {\n        name,\n        result: 0,\n        add: function(value) {\n            this.result += value;\n            return this;\n        },\n        subtract: function(value) {\n            this.result -= value;\n            return this;\n        },\n        multiply: function(value) {\n            this.result *= value;\n            return this;\n        },\n        getResult: function() {\n            return this.result;\n        },\n        reset: function() {\n            this.result = 0;\n            return this;\n        }\n    };\n};\n\nconsole.log(\"\\n=== OBJECT BUILDER WITH METHODS ===\");\nconst calc = createCalculator(\"My Calculator\");\nconst result = calc.add(5).multiply(3).subtract(2).getResult();\nconsole.log(\"Calculator result:\", result); // 13\n\n// Factory function pattern\nconst createAnimal = (type) => {\n    const baseAnimal = {\n        type,\n        name: \"\",\n        age: 0,\n        sound: \"\",\n        makeSound: function() {\n            return this.sound;\n        }\n    };\n    \n    if (type === \"dog\") {\n        return {...baseAnimal, sound: \"Woof!\"};\n    } else if (type === \"cat\") {\n        return {...baseAnimal, sound: \"Meow!\"};\n    } else if (type === \"bird\") {\n        return {...baseAnimal, sound: \"Tweet!\"};\n    }\n    \n    return baseAnimal;\n};\n\nconsole.log(\"\\n=== FACTORY FUNCTION ===\");\nconst dog = createAnimal(\"dog\");\ndog.name = \"Buddy\";\ndog.age = 3;\nconsole.log(\"Dog:\", dog);\nconsole.log(\"Dog sound:\", dog.makeSound());\n\n// Object builder with computed properties\nconst createConfig = (environment) => {\n    const baseConfig = {\n        environment,\n        debug: environment === \"development\",\n        apiUrl: environment === \"production\" ? \"https://api.prod.com\" : \"https://api.dev.com\"\n    };\n    \n    return {\n        ...baseConfig,\n        [`${environment}Config`]: true,\n        timestamp: new Date().toISOString()\n    };\n};\n\nconsole.log(\"\\n=== COMPUTED PROPERTIES ===\");\nconst devConfig = createConfig(\"development\");\nconsole.log(\"Dev config:\", devConfig);\n\nconst prodConfig = createConfig(\"production\");\nconsole.log(\"Prod config:\", prodConfig);"
  },
  {
    "question": "With a short code explain how methods and .this function correlate with one another",
    "answer": "**Methods and `this` Correlation**\n\nMethods and `this` work together to access and modify object properties from within the object's own functions.\n\n**Example:**\n```javascript\nconst bicycle = {\n    gear: 2,\n    setGear(newGear) {\n        \"use strict\";\n        this.gear = newGear;\n    }\n};\n\nbicycle.setGear(3);\nconsole.log(bicycle.gear); // 3\n```\n\n**How it works:**\n- **Method:** `setGear` is a function that belongs to the `bicycle` object\n- **`this` reference:** `this` refers to the object that owns the method\n- **Property access:** `this.gear` accesses the `gear` property of the current object\n- **Property modification:** `this.gear = newGear` changes the object's property\n\n**Another example:**\n```javascript\nconst car = {\n    color: \"red\",\n    paint(newColor) {\n        this.color = newColor; // changes the `car` object's color!\n    }\n};\n\ncar.paint(\"blue\"); // The car is now blue\nconsole.log(car.color); // \"blue\"\n```\n\n**Key concepts:**\n- **`this` context:** `this` refers to the object calling the method\n- **Method binding:** Methods are bound to their object\n- **Property access:** `this.property` accesses object properties\n- **Property modification:** `this.property = value` modifies object properties\n- **Strict mode:** `\"use strict\"` ensures proper `this` binding",
    "type": "javascript",
    "tags": ["javascript", "methods", "this", "objects", "context"],
    "code": "// Basic example: bicycle with gear method\nconst bicycle = {\n    gear: 2,\n    setGear(newGear) {\n        \"use strict\";\n        this.gear = newGear;\n    }\n};\n\nconsole.log(\"Initial gear:\", bicycle.gear); // 2\nbicycle.setGear(3);\nconsole.log(\"After setGear(3):\", bicycle.gear); // 3\n\n// Car example with paint method\nconst car = {\n    color: \"red\",\n    paint(newColor) {\n        this.color = newColor; // changes the `car` object's color!\n    }\n};\n\nconsole.log(\"\\n=== CAR EXAMPLE ===\");\nconsole.log(\"Initial color:\", car.color); // \"red\"\ncar.paint(\"blue\");\nconsole.log(\"After paint('blue'):\", car.color); // \"blue\"\n\n// More complex example with multiple methods\nconst person = {\n    firstName: \"John\",\n    lastName: \"Doe\",\n    age: 25,\n    \n    getFullName() {\n        return this.firstName + \" \" + this.lastName;\n    },\n    \n    setAge(newAge) {\n        this.age = newAge;\n    },\n    \n    haveBirthday() {\n        this.age++;\n        return `Happy birthday! You are now ${this.age} years old.`;\n    },\n    \n    introduce() {\n        return `Hi, I'm ${this.getFullName()} and I'm ${this.age} years old.`;\n    }\n};\n\nconsole.log(\"\\n=== PERSON EXAMPLE ===\");\nconsole.log(\"Full name:\", person.getFullName()); // \"John Doe\"\nconsole.log(\"Introduction:\", person.introduce()); // \"Hi, I'm John Doe and I'm 25 years old.\"\n\nperson.setAge(26);\nconsole.log(\"After setAge(26):\", person.age); // 26\n\nconst birthdayMessage = person.haveBirthday();\nconsole.log(\"Birthday message:\", birthdayMessage); // \"Happy birthday! You are now 27 years old.\"\nconsole.log(\"New age:\", person.age); // 27\n\n// Calculator example\nconst calculator = {\n    result: 0,\n    \n    add(value) {\n        this.result += value;\n        return this; // Return this for method chaining\n    },\n    \n    subtract(value) {\n        this.result -= value;\n        return this;\n    },\n    \n    multiply(value) {\n        this.result *= value;\n        return this;\n    },\n    \n    divide(value) {\n        if (value !== 0) {\n            this.result /= value;\n        } else {\n            console.log(\"Cannot divide by zero!\");\n        }\n        return this;\n    },\n    \n    getResult() {\n        return this.result;\n    },\n    \n    reset() {\n        this.result = 0;\n        return this;\n    }\n};\n\nconsole.log(\"\\n=== CALCULATOR EXAMPLE ===\");\nconst calcResult = calculator\n    .add(10)\n    .multiply(2)\n    .subtract(5)\n    .getResult();\n\nconsole.log(\"Calculator result:\", calcResult); // 15\n\n// Bank account example\nconst bankAccount = {\n    balance: 1000,\n    accountNumber: \"123456789\",\n    \n    deposit(amount) {\n        this.balance += amount;\n        console.log(`Deposited $${amount}. New balance: $${this.balance}`);\n    },\n    \n    withdraw(amount) {\n        if (amount <= this.balance) {\n            this.balance -= amount;\n            console.log(`Withdrew $${amount}. New balance: $${this.balance}`);\n        } else {\n            console.log(\"Insufficient funds!\");\n        }\n    },\n    \n    getBalance() {\n        return this.balance;\n    },\n    \n    transfer(amount, targetAccount) {\n        if (amount <= this.balance) {\n            this.balance -= amount;\n            targetAccount.balance += amount;\n            console.log(`Transferred $${amount} to account ${targetAccount.accountNumber}`);\n        } else {\n            console.log(\"Insufficient funds for transfer!\");\n        }\n    }\n};\n\nconsole.log(\"\\n=== BANK ACCOUNT EXAMPLE ===\");\nconsole.log(\"Initial balance:\", bankAccount.getBalance()); // 1000\n\nbankAccount.deposit(500); // Deposited $500. New balance: $1500\nbankAccount.withdraw(200); // Withdrew $200. New balance: $1300\n\n// Shopping cart example\nconst shoppingCart = {\n    items: [],\n    total: 0,\n    \n    addItem(name, price) {\n        this.items.push({ name, price });\n        this.total += price;\n        console.log(`Added ${name} for $${price}`);\n    },\n    \n    removeItem(itemName) {\n        const index = this.items.findIndex(item => item.name === itemName);\n        if (index !== -1) {\n            const item = this.items[index];\n            this.items.splice(index, 1);\n            this.total -= item.price;\n            console.log(`Removed ${itemName} from cart`);\n        }\n    },\n    \n    getTotal() {\n        return this.total;\n    },\n    \n    getItemCount() {\n        return this.items.length;\n    },\n    \n    clear() {\n        this.items = [];\n        this.total = 0;\n        console.log(\"Cart cleared\");\n    }\n};\n\nconsole.log(\"\\n=== SHOPPING CART EXAMPLE ===\");\nshoppingCart.addItem(\"Laptop\", 999); // Added Laptop for $999\nshoppingCart.addItem(\"Mouse\", 25);   // Added Mouse for $25\nshoppingCart.addItem(\"Keyboard\", 75); // Added Keyboard for $75\n\nconsole.log(\"Total items:\", shoppingCart.getItemCount()); // 3\nconsole.log(\"Total cost:\", shoppingCart.getTotal()); // 1099\n\nshoppingCart.removeItem(\"Mouse\"); // Removed Mouse from cart\nconsole.log(\"After removal - Total:\", shoppingCart.getTotal()); // 1074\n\n// Understanding 'this' context\nconsole.log(\"\\n=== THIS CONTEXT ===\");\n\nconst obj1 = {\n    name: \"Object 1\",\n    getName() {\n        return this.name;\n    }\n};\n\nconst obj2 = {\n    name: \"Object 2\",\n    getName() {\n        return this.name;\n    }\n};\n\nconsole.log(\"Obj1 name:\", obj1.getName()); // \"Object 1\"\nconsole.log(\"Obj2 name:\", obj2.getName()); // \"Object 2\"\n\n// Method borrowing\nconst obj3 = {\n    name: \"Object 3\"\n};\n\nconsole.log(\"Obj3 name (borrowed method):\", obj1.getName.call(obj3)); // \"Object 3\"\n\n// Arrow functions and 'this'\nconst regularFunction = {\n    name: \"Regular\",\n    getName: function() {\n        return this.name;\n    }\n};\n\nconst arrowFunction = {\n    name: \"Arrow\",\n    getName: () => {\n        return this.name; // 'this' refers to global object, not the object\n    }\n};\n\nconsole.log(\"\\n=== ARROW VS REGULAR FUNCTION ===\");\nconsole.log(\"Regular function:\", regularFunction.getName()); // \"Regular\"\nconsole.log(\"Arrow function:\", arrowFunction.getName()); // undefined (or global name)\n\n// Best practices\nconsole.log(\"\\n=== BEST PRACTICES ===\");\nconsole.log(\"1. Use 'this' to access object properties\");\nconsole.log(\"2. Use 'this' to modify object properties\");\nconsole.log(\"3. Return 'this' for method chaining\");\nconsole.log(\"4. Be careful with arrow functions and 'this'\");\nconsole.log(\"5. Use 'use strict' for proper 'this' binding\");"
  },
  {
    "question": "Explain the class, constructor and new functions and give code example",
    "answer": "**Classes, Constructors, and `new` Keyword**\n\n**Class:** A blueprint for creating objects with shared properties and methods.\n\n**Constructor:** A special method that runs when a new instance of a class is created.\n\n**`new` keyword:** Creates a new instance of a class and calls its constructor.\n\n**Example:**\n```javascript\nfunction makeClass() {\n    class Vegetable {\n        constructor(name){\n            this.name = name;\n        }\n    }\n    return Vegetable;\n}\n\nconst Vegetable = makeClass();\nconst carrot = new Vegetable('carrot');\nconsole.log(carrot.name); // \"carrot\"\n```\n\n**How it works:**\n- **Class definition:** `class Vegetable` creates a class blueprint\n- **Constructor:** `constructor(name)` runs when `new` is called\n- **`this` binding:** `this.name = name` sets the instance property\n- **Instance creation:** `new Vegetable('carrot')` creates a new object\n- **Property access:** `carrot.name` accesses the instance property\n\n**Key concepts:**\n- **Class:** Template for creating objects\n- **Constructor:** Initializes new instances\n- **`new`:** Creates instances and calls constructor\n- **`this`:** Refers to the current instance\n- **Instance:** Individual object created from a class",
    "type": "javascript",
    "tags": ["javascript", "classes", "constructors", "new-keyword", "oop"],
    "code": "// Basic class example\nfunction makeClass() {\n    class Vegetable {\n        constructor(name){\n            this.name = name;\n        }\n    }\n    return Vegetable;\n}\n\nconst Vegetable = makeClass();\nconst carrot = new Vegetable('carrot');\nconsole.log(\"Carrot name:\", carrot.name); // \"carrot\"\n\n// More complex class example\nclass Person {\n    constructor(firstName, lastName, age) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n        this.age = age;\n        this.createdAt = new Date();\n    }\n    \n    getFullName() {\n        return `${this.firstName} ${this.lastName}`;\n    }\n    \n    haveBirthday() {\n        this.age++;\n        return `Happy birthday! You are now ${this.age} years old.`;\n    }\n    \n    introduce() {\n        return `Hi, I'm ${this.getFullName()} and I'm ${this.age} years old.`;\n    }\n}\n\nconsole.log(\"\\n=== PERSON CLASS ===\");\nconst person1 = new Person(\"John\", \"Doe\", 25);\nconsole.log(\"Full name:\", person1.getFullName()); // \"John Doe\"\nconsole.log(\"Introduction:\", person1.introduce());\n\nconst birthdayMessage = person1.haveBirthday();\nconsole.log(\"Birthday message:\", birthdayMessage);\nconsole.log(\"New age:\", person1.age); // 26\n\n// Class with static methods\nclass MathUtils {\n    constructor() {\n        this.history = [];\n    }\n    \n    add(a, b) {\n        const result = a + b;\n        this.history.push(`${a} + ${b} = ${result}`);\n        return result;\n    }\n    \n    static multiply(a, b) {\n        return a * b;\n    }\n    \n    getHistory() {\n        return this.history;\n    }\n}\n\nconsole.log(\"\\n=== MATH UTILS CLASS ===\");\nconst calculator = new MathUtils();\nconsole.log(\"Add result:\", calculator.add(5, 3)); // 8\nconsole.log(\"Add result:\", calculator.add(10, 7)); // 17\nconsole.log(\"History:\", calculator.getHistory());\n\n// Static method called on class, not instance\nconsole.log(\"Static multiply:\", MathUtils.multiply(4, 6)); // 24\n\n// Class inheritance\nclass Animal {\n    constructor(name, species) {\n        this.name = name;\n        this.species = species;\n    }\n    \n    speak() {\n        return `${this.name} makes a sound`;\n    }\n    \n    getInfo() {\n        return `${this.name} is a ${this.species}`;\n    }\n}\n\nclass Dog extends Animal {\n    constructor(name, breed) {\n        super(name, \"dog\");\n        this.breed = breed;\n    }\n    \n    speak() {\n        return `${this.name} barks: Woof!`;\n    }\n    \n    getBreed() {\n        return `${this.name} is a ${this.breed}`;\n    }\n}\n\nconsole.log(\"\\n=== CLASS INHERITANCE ===\");\nconst dog = new Dog(\"Buddy\", \"Golden Retriever\");\nconsole.log(\"Dog info:\", dog.getInfo()); // \"Buddy is a dog\"\nconsole.log(\"Dog breed:\", dog.getBreed()); // \"Buddy is a Golden Retriever\"\nconsole.log(\"Dog speak:\", dog.speak()); // \"Buddy barks: Woof!\"\n\n// Class with private properties (using underscore convention)\nclass BankAccount {\n    constructor(accountNumber, initialBalance = 0) {\n        this.accountNumber = accountNumber;\n        this._balance = initialBalance;\n        this._transactions = [];\n    }\n    \n    deposit(amount) {\n        this._balance += amount;\n        this._transactions.push({ type: 'deposit', amount, date: new Date() });\n        return this._balance;\n    }\n    \n    withdraw(amount) {\n        if (amount <= this._balance) {\n            this._balance -= amount;\n            this._transactions.push({ type: 'withdrawal', amount, date: new Date() });\n            return this._balance;\n        } else {\n            throw new Error(\"Insufficient funds\");\n        }\n    }\n    \n    getBalance() {\n        return this._balance;\n    }\n    \n    getTransactions() {\n        return [...this._transactions]; // Return copy to prevent external modification\n    }\n}\n\nconsole.log(\"\\n=== BANK ACCOUNT CLASS ===\");\nconst account = new BankAccount(\"123456789\", 1000);\nconsole.log(\"Initial balance:\", account.getBalance()); // 1000\n\naccount.deposit(500);\nconsole.log(\"After deposit:\", account.getBalance()); // 1500\n\naccount.withdraw(200);\nconsole.log(\"After withdrawal:\", account.getBalance()); // 1300\n\nconsole.log(\"Transactions:\", account.getTransactions());\n\n// Class with getters and setters\nclass Temperature {\n    constructor(celsius) {\n        this._celsius = celsius;\n    }\n    \n    get celsius() {\n        return this._celsius;\n    }\n    \n    set celsius(value) {\n        if (value < -273.15) {\n            throw new Error(\"Temperature cannot be below absolute zero\");\n        }\n        this._celsius = value;\n    }\n    \n    get fahrenheit() {\n        return (this._celsius * 9/5) + 32;\n    }\n    \n    set fahrenheit(value) {\n        this._celsius = (value - 32) * 5/9;\n    }\n}\n\nconsole.log(\"\\n=== TEMPERATURE CLASS ===\");\nconst temp = new Temperature(25);\nconsole.log(\"Celsius:\", temp.celsius); // 25\nconsole.log(\"Fahrenheit:\", temp.fahrenheit); // 77\n\ntemp.fahrenheit = 86;\nconsole.log(\"After setting Fahrenheit to 86:\");\nconsole.log(\"Celsius:\", temp.celsius); // 30\nconsole.log(\"Fahrenheit:\", temp.fahrenheit); // 86\n\n// Class with method chaining\nclass StringBuilder {\n    constructor() {\n        this._strings = [];\n    }\n    \n    append(str) {\n        this._strings.push(str);\n        return this; // Return this for chaining\n    }\n    \n    prepend(str) {\n        this._strings.unshift(str);\n        return this;\n    }\n    \n    toString() {\n        return this._strings.join('');\n    }\n    \n    clear() {\n        this._strings = [];\n        return this;\n    }\n}\n\nconsole.log(\"\\n=== STRING BUILDER CLASS ===\");\nconst sb = new StringBuilder();\nconst result = sb\n    .append(\"Hello\")\n    .append(\" \")\n    .append(\"World\")\n    .prepend(\"Say: \")\n    .toString();\n\nconsole.log(\"String builder result:\", result); // \"Say: Hello World\"\n\n// Understanding the 'new' keyword\nconsole.log(\"\\n=== UNDERSTANDING 'NEW' ===\");\n\n// What 'new' does:\n// 1. Creates a new empty object\n// 2. Sets the prototype of the new object to the class's prototype\n// 3. Calls the constructor with 'this' bound to the new object\n// 4. Returns the new object\n\nfunction demonstrateNew() {\n    console.log(\"1. Creating new object...\");\n    const obj = new Person(\"Alice\", \"Smith\", 30);\n    console.log(\"2. Object created:\", obj);\n    console.log(\"3. Object has constructor:\", obj.constructor === Person);\n    console.log(\"4. Object is instance of Person:\", obj instanceof Person);\n    return obj;\n}\n\nconst alice = demonstrateNew();\n\n// Class vs Function constructor comparison\nfunction PersonFunction(firstName, lastName, age) {\n    this.firstName = firstName;\n    this.lastName = lastName;\n    this.age = age;\n    \n    this.getFullName = function() {\n        return `${this.firstName} ${this.lastName}`;\n    };\n}\n\nconsole.log(\"\\n=== CLASS VS FUNCTION CONSTRUCTOR ===\");\nconst personFunc = new PersonFunction(\"Bob\", \"Johnson\", 35);\nconsole.log(\"Function constructor result:\", personFunc.getFullName());\n\nconst personClass = new Person(\"Bob\", \"Johnson\", 35);\nconsole.log(\"Class constructor result:\", personClass.getFullName());\n\n// Both work the same way, but classes provide:\n// - Better syntax\n// - Built-in inheritance\n// - Static methods\n// - Private fields (in newer versions)\n// - Better error messages"
  },
  {
    "question": "What are getters and setters and the underscore?",
    "answer": "**Getters, Setters, and Underscore Convention**\n\n**Getters:**\nSpecial functions that let you read a property inside an object/class. You use them like normal properties: `object.property`.\n\nBehind the scenes, it runs your code (can clean, format, or do stuff before returning).\n\n**Setters:**\nSpecial functions that let you change a property inside an object/class. You use them like normal property assignment: `object.property = value`.\n\nIt secretly runs your code—can check, fix, warn, or change the value before saving.\n\n**Underscore (_):**\nJust a naming hint for \"private\" properties in JavaScript. NOT required, NOT automatic—just developer tradition.\n\nShows \"use my getter/setter; don't touch me directly unless you know what you're doing.\"\n\n**Example:**\n```javascript\nfunction makeClass() {\n    class Thermostat {\n        constructor(temp) {\n            this._temp = 5 / 9 * (temp - 32); // save as Celsius\n        }\n        get temperature() {\n            return this._temp;\n        }\n        set temperature(updatedTemp) {\n            this._temp = updatedTemp;\n        }\n    }\n    return Thermostat;\n}\n\nconst Thermostat = makeClass();\nconst thermos = new Thermostat(76); // F to C\nconsole.log(thermos.temperature); // Should print Celsius value\nthermos.temperature = 26;\nconsole.log(thermos.temperature); // Should print 26\n```\n\n**Key concepts:**\n- **Getters:** Read properties with custom logic\n- **Setters:** Set properties with validation/processing\n- **Underscore:** Convention for \"private\" properties\n- **Encapsulation:** Control access to object data\n- **Validation:** Check values before setting",
    "type": "javascript",
    "tags": ["javascript", "getters", "setters", "encapsulation", "private-properties"],
    "code": "// Basic getter and setter example\nfunction makeClass() {\n    class Thermostat {\n        constructor(temp) {\n            this._temp = 5 / 9 * (temp - 32); // save as Celsius\n        }\n        get temperature() {\n            return this._temp;\n        }\n        set temperature(updatedTemp) {\n            this._temp = updatedTemp;\n        }\n    }\n    return Thermostat;\n}\n\nconst Thermostat = makeClass();\nconst thermos = new Thermostat(76); // F to C\nconsole.log(\"Initial temperature:\", thermos.temperature); // Celsius value\n\nthermos.temperature = 26;\nconsole.log(\"After setting to 26:\", thermos.temperature); // 26\n\n// More complex getter/setter example\nclass BankAccount {\n    constructor(accountNumber, initialBalance = 0) {\n        this._accountNumber = accountNumber;\n        this._balance = initialBalance;\n        this._transactions = [];\n    }\n    \n    get balance() {\n        return this._balance;\n    }\n    \n    set balance(newBalance) {\n        if (newBalance < 0) {\n            throw new Error(\"Balance cannot be negative\");\n        }\n        this._balance = newBalance;\n    }\n    \n    get accountNumber() {\n        return this._accountNumber;\n    }\n    \n    // Read-only property (no setter)\n    get transactionCount() {\n        return this._transactions.length;\n    }\n    \n    deposit(amount) {\n        this._balance += amount;\n        this._transactions.push({ type: 'deposit', amount, date: new Date() });\n    }\n    \n    withdraw(amount) {\n        if (amount > this._balance) {\n            throw new Error(\"Insufficient funds\");\n        }\n        this._balance -= amount;\n        this._transactions.push({ type: 'withdrawal', amount, date: new Date() });\n    }\n}\n\nconsole.log(\"\\n=== BANK ACCOUNT WITH GETTERS/SETTERS ===\");\nconst account = new BankAccount(\"123456789\", 1000);\nconsole.log(\"Initial balance:\", account.balance); // 1000\nconsole.log(\"Account number:\", account.accountNumber); // \"123456789\"\nconsole.log(\"Transaction count:\", account.transactionCount); // 0\n\naccount.deposit(500);\nconsole.log(\"After deposit:\", account.balance); // 1500\nconsole.log(\"Transaction count:\", account.transactionCount); // 1\n\n// Using setter\naccount.balance = 2000;\nconsole.log(\"After setting balance:\", account.balance); // 2000\n\n// Try to set negative balance (will throw error)\ntry {\n    account.balance = -100;\n} catch (error) {\n    console.log(\"Error:\", error.message); // \"Balance cannot be negative\"\n}\n\n// Person class with getters and setters\nclass Person {\n    constructor(firstName, lastName, age) {\n        this._firstName = firstName;\n        this._lastName = lastName;\n        this._age = age;\n    }\n    \n    get firstName() {\n        return this._firstName;\n    }\n    \n    set firstName(value) {\n        if (typeof value !== 'string' || value.trim() === '') {\n            throw new Error(\"First name must be a non-empty string\");\n        }\n        this._firstName = value.trim();\n    }\n    \n    get lastName() {\n        return this._lastName;\n    }\n    \n    set lastName(value) {\n        if (typeof value !== 'string' || value.trim() === '') {\n            throw new Error(\"Last name must be a non-empty string\");\n        }\n        this._lastName = value.trim();\n    }\n    \n    get fullName() {\n        return `${this._firstName} ${this._lastName}`;\n    }\n    \n    set fullName(value) {\n        const parts = value.split(' ');\n        if (parts.length !== 2) {\n            throw new Error(\"Full name must contain exactly two words\");\n        }\n        this._firstName = parts[0];\n        this._lastName = parts[1];\n    }\n    \n    get age() {\n        return this._age;\n    }\n    \n    set age(value) {\n        if (typeof value !== 'number' || value < 0 || value > 150) {\n            throw new Error(\"Age must be a number between 0 and 150\");\n        }\n        this._age = value;\n    }\n}\n\nconsole.log(\"\\n=== PERSON WITH GETTERS/SETTERS ===\");\nconst person = new Person(\"John\", \"Doe\", 25);\nconsole.log(\"Full name:\", person.fullName); // \"John Doe\"\nconsole.log(\"Age:\", person.age); // 25\n\n// Using setters\nperson.firstName = \"Jane\";\nperson.age = 30;\nconsole.log(\"After changes:\", person.fullName, person.age); // \"Jane Doe 30\"\n\n// Set full name\nperson.fullName = \"Alice Smith\";\nconsole.log(\"After setting full name:\", person.firstName, person.lastName); // \"Alice Smith\"\n\n// Temperature converter with getters/setters\nclass Temperature {\n    constructor(celsius) {\n        this._celsius = celsius;\n    }\n    \n    get celsius() {\n        return this._celsius;\n    }\n    \n    set celsius(value) {\n        if (typeof value !== 'number') {\n            throw new Error(\"Temperature must be a number\");\n        }\n        if (value < -273.15) {\n            throw new Error(\"Temperature cannot be below absolute zero\");\n        }\n        this._celsius = value;\n    }\n    \n    get fahrenheit() {\n        return (this._celsius * 9/5) + 32;\n    }\n    \n    set fahrenheit(value) {\n        if (typeof value !== 'number') {\n            throw new Error(\"Temperature must be a number\");\n        }\n        this._celsius = (value - 32) * 5/9;\n    }\n    \n    get kelvin() {\n        return this._celsius + 273.15;\n    }\n    \n    set kelvin(value) {\n        if (typeof value !== 'number') {\n            throw new Error(\"Temperature must be a number\");\n        }\n        if (value < 0) {\n            throw new Error(\"Kelvin cannot be negative\");\n        }\n        this._celsius = value - 273.15;\n    }\n}\n\nconsole.log(\"\\n=== TEMPERATURE CONVERTER ===\");\nconst temp = new Temperature(25);\nconsole.log(\"Celsius:\", temp.celsius); // 25\nconsole.log(\"Fahrenheit:\", temp.fahrenheit); // 77\nconsole.log(\"Kelvin:\", temp.kelvin); // 298.15\n\n// Set temperature in Fahrenheit\ntemp.fahrenheit = 86;\nconsole.log(\"After setting Fahrenheit to 86:\");\nconsole.log(\"Celsius:\", temp.celsius); // 30\nconsole.log(\"Fahrenheit:\", temp.fahrenheit); // 86\n\n// Set temperature in Kelvin\ntemp.kelvin = 300;\nconsole.log(\"After setting Kelvin to 300:\");\nconsole.log(\"Celsius:\", temp.celsius); // 26.85\nconsole.log(\"Kelvin:\", temp.kelvin); // 300\n\n// Rectangle class with computed properties\nclass Rectangle {\n    constructor(width, height) {\n        this._width = width;\n        this._height = height;\n    }\n    \n    get width() {\n        return this._width;\n    }\n    \n    set width(value) {\n        if (value <= 0) {\n            throw new Error(\"Width must be positive\");\n        }\n        this._width = value;\n    }\n    \n    get height() {\n        return this._height;\n    }\n    \n    set height(value) {\n        if (value <= 0) {\n            throw new Error(\"Height must be positive\");\n        }\n        this._height = value;\n    }\n    \n    get area() {\n        return this._width * this._height;\n    }\n    \n    get perimeter() {\n        return 2 * (this._width + this._height);\n    }\n    \n    get isSquare() {\n        return this._width === this._height;\n    }\n}\n\nconsole.log(\"\\n=== RECTANGLE WITH COMPUTED PROPERTIES ===\");\nconst rect = new Rectangle(10, 5);\nconsole.log(\"Width:\", rect.width); // 10\nconsole.log(\"Height:\", rect.height); // 5\nconsole.log(\"Area:\", rect.area); // 50\nconsole.log(\"Perimeter:\", rect.perimeter); // 30\nconsole.log(\"Is square:\", rect.isSquare); // false\n\n// Change dimensions\nrect.width = 8;\nrect.height = 8;\nconsole.log(\"After changing to 8x8:\");\nconsole.log(\"Area:\", rect.area); // 64\nconsole.log(\"Is square:\", rect.isSquare); // true\n\n// Understanding the underscore convention\nconsole.log(\"\\n=== UNDERSTANDING UNDERSCORE CONVENTION ===\");\nconsole.log(\"The underscore (_) is a naming convention that indicates:\");\nconsole.log(\"1. The property is intended to be private\");\nconsole.log(\"2. You should use the getter/setter instead\");\nconsole.log(\"3. Direct access is discouraged but not prevented\");\nconsole.log(\"4. It's a developer convention, not enforced by JavaScript\");\n\n// Example showing direct access vs getter/setter\nconst example = new Person(\"Test\", \"User\", 25);\nconsole.log(\"Using getter:\", example.firstName); // \"Test\"\nconsole.log(\"Direct access:\", example._firstName); // \"Test\" (works but discouraged)\n\n// Best practices\nconsole.log(\"\\n=== BEST PRACTICES ===\");\nconsole.log(\"1. Use underscore prefix for private properties\");\nconsole.log(\"2. Provide getters for read access\");\nconsole.log(\"3. Provide setters for write access with validation\");\nconsole.log(\"4. Use computed properties for derived values\");\nconsole.log(\"5. Validate input in setters\");\nconsole.log(\"6. Throw errors for invalid values\");\nconsole.log(\"7. Keep private properties truly private when possible\");"
  },
  {
    "question": "What is the .toLowerCase and .toUpperCase?",
    "answer": "**String Case Methods**\n\n**`.toLowerCase()`** and **`.toUpperCase()`** are string methods that change the case of text.\n\n**Example:**\n```javascript\nlet word = \"HeLLo\";\nconsole.log(word.toUpperCase()); // \"HELLO\"\nconsole.log(word.toLowerCase()); // \"hello\"\n```\n\n**How they work:**\n- **`.toUpperCase()`:** Converts all characters to uppercase\n- **`.toLowerCase()`:** Converts all characters to lowercase\n- **Non-destructive:** Original string remains unchanged\n- **Returns new string:** Creates a new string with changed case\n- **Works with all characters:** Handles letters, numbers, and special characters\n\n**Key concepts:**\n- **Case conversion:** Change text between uppercase and lowercase\n- **String methods:** Built-in functions for string manipulation\n- **Immutable:** Original string is not modified\n- **New string:** Returns a new string with the changes\n- **Common use:** Text processing, validation, formatting",
    "type": "javascript",
    "tags": ["javascript", "strings", "case-conversion", "methods"],
    "code": "// Basic case conversion\nlet word = \"HeLLo\";\nconsole.log(\"Original:\", word); // \"HeLLo\"\nconsole.log(\"Uppercase:\", word.toUpperCase()); // \"HELLO\"\nconsole.log(\"Lowercase:\", word.toLowerCase()); // \"hello\"\nconsole.log(\"Original unchanged:\", word); // \"HeLLo\"\n\n// More examples\nconst text1 = \"JavaScript Programming\";\nconst text2 = \"PYTHON IS AWESOME\";\nconst text3 = \"mixed Case Text\";\n\nconsole.log(\"\\n=== MORE EXAMPLES ===\");\nconsole.log(\"Text1 uppercase:\", text1.toUpperCase()); // \"JAVASCRIPT PROGRAMMING\"\nconsole.log(\"Text2 lowercase:\", text2.toLowerCase()); // \"python is awesome\"\nconsole.log(\"Text3 uppercase:\", text3.toUpperCase()); // \"MIXED CASE TEXT\"\n\n// Practical examples\n\n// Username normalization\nfunction normalizeUsername(username) {\n    return username.toLowerCase().trim();\n}\n\nconsole.log(\"\\n=== USERNAME NORMALIZATION ===\");\nconst usernames = [\"JohnDoe\", \"JANESMITH\", \"  BobWilson  \"];\nusernames.forEach(username => {\n    console.log(`Original: \"${username}\" -> Normalized: \"${normalizeUsername(username)}\"`);\n});\n\n// Case-insensitive comparison\nfunction compareStrings(str1, str2) {\n    return str1.toLowerCase() === str2.toLowerCase();\n}\n\nconsole.log(\"\\n=== CASE-INSENSITIVE COMPARISON ===\");\nconsole.log(\"Compare 'Hello' and 'HELLO':\", compareStrings(\"Hello\", \"HELLO\")); // true\nconsole.log(\"Compare 'World' and 'world':\", compareStrings(\"World\", \"world\")); // true\nconsole.log(\"Compare 'Test' and 'Different':\", compareStrings(\"Test\", \"Different\")); // false\n\n// Text formatting\nfunction formatTitle(text) {\n    return text.toLowerCase().split(' ').map(word => \n        word.charAt(0).toUpperCase() + word.slice(1)\n    ).join(' ');\n}\n\nconsole.log(\"\\n=== TEXT FORMATTING ===\");\nconst titles = [\"javascript programming\", \"WEB DEVELOPMENT\", \"data science\"];\ntitles.forEach(title => {\n    console.log(`Original: \"${title}\" -> Formatted: \"${formatTitle(title)}\"`);\n});\n\n// Search functionality\nfunction searchInText(text, searchTerm) {\n    const lowerText = text.toLowerCase();\n    const lowerSearchTerm = searchTerm.toLowerCase();\n    return lowerText.includes(lowerSearchTerm);\n}\n\nconsole.log(\"\\n=== SEARCH FUNCTIONALITY ===\");\nconst content = \"JavaScript is a programming language used for web development.\";\nconst searchTerms = [\"javascript\", \"JAVASCRIPT\", \"Programming\", \"python\"];\n\nsearchTerms.forEach(term => {\n    const found = searchInText(content, term);\n    console.log(`Searching for \"${term}\": ${found ? 'Found' : 'Not found'}`);\n});\n\n// Password strength checker\nfunction checkPasswordStrength(password) {\n    const hasUpper = /[A-Z]/.test(password);\n    const hasLower = /[a-z]/.test(password);\n    const hasNumber = /\\d/.test(password);\n    const hasSpecial = /[!@#$%^&*(),.?\":{}|<>]/.test(password);\n    \n    let strength = 0;\n    let feedback = [];\n    \n    if (hasUpper) {\n        strength++;\n        feedback.push(\"✓ Has uppercase letters\");\n    } else {\n        feedback.push(\"✗ Needs uppercase letters\");\n    }\n    \n    if (hasLower) {\n        strength++;\n        feedback.push(\"✓ Has lowercase letters\");\n    } else {\n        feedback.push(\"✗ Needs lowercase letters\");\n    }\n    \n    if (hasNumber) {\n        strength++;\n        feedback.push(\"✓ Has numbers\");\n    } else {\n        feedback.push(\"✗ Needs numbers\");\n    }\n    \n    if (hasSpecial) {\n        strength++;\n        feedback.push(\"✓ Has special characters\");\n    } else {\n        feedback.push(\"✗ Needs special characters\");\n    }\n    \n    const strengthLevels = [\"Very Weak\", \"Weak\", \"Medium\", \"Strong\", \"Very Strong\"];\n    \n    return {\n        strength: strengthLevels[strength],\n        score: strength,\n        feedback: feedback\n    };\n}\n\nconsole.log(\"\\n=== PASSWORD STRENGTH CHECKER ===\");\nconst passwords = [\"password\", \"Password\", \"Password123\", \"Password123!\", \"P@ssw0rd!\"];\npasswords.forEach(password => {\n    const result = checkPasswordStrength(password);\n    console.log(`Password: \"${password}\"`);\n    console.log(`Strength: ${result.strength} (${result.score}/4)`);\n    result.feedback.forEach(feedback => console.log(`  ${feedback}`));\n    console.log();\n});\n\n// Text analysis\nfunction analyzeText(text) {\n    const words = text.toLowerCase().split(/\\s+/);\n    const wordCount = words.length;\n    const charCount = text.length;\n    const upperCount = (text.match(/[A-Z]/g) || []).length;\n    const lowerCount = (text.match(/[a-z]/g) || []).length;\n    \n    return {\n        wordCount,\n        charCount,\n        upperCount,\n        lowerCount,\n        upperPercentage: ((upperCount / charCount) * 100).toFixed(1),\n        lowerPercentage: ((lowerCount / charCount) * 100).toFixed(1)\n    };\n}\n\nconsole.log(\"\\n=== TEXT ANALYSIS ===\");\nconst sampleTexts = [\n    \"Hello World!\",\n    \"JAVASCRIPT PROGRAMMING\",\n    \"mixed Case Text Example\",\n    \"all lowercase text here\"\n];\n\nsampleTexts.forEach(text => {\n    const analysis = analyzeText(text);\n    console.log(`Text: \"${text}\"`);\n    console.log(`  Words: ${analysis.wordCount}`);\n    console.log(`  Characters: ${analysis.charCount}`);\n    console.log(`  Uppercase: ${analysis.upperCount} (${analysis.upperPercentage}%)`);\n    console.log(`  Lowercase: ${analysis.lowerCount} (${analysis.lowerPercentage}%)`);\n    console.log();\n});\n\n// Case conversion with special characters\nconsole.log(\"\\n=== SPECIAL CHARACTERS ===\");\nconst specialText = \"Hello World! 123 @#$%\";\nconsole.log(\"Original:\", specialText);\nconsole.log(\"Uppercase:\", specialText.toUpperCase());\nconsole.log(\"Lowercase:\", specialText.toLowerCase());\n\n// Unicode and international characters\nconsole.log(\"\\n=== UNICODE CHARACTERS ===\");\nconst unicodeText = \"Café Naïve Résumé\";\nconsole.log(\"Original:\", unicodeText);\nconsole.log(\"Uppercase:\", unicodeText.toUpperCase());\nconsole.log(\"Lowercase:\", unicodeText.toLowerCase());\n\n// Performance comparison\nconsole.log(\"\\n=== PERFORMANCE COMPARISON ===\");\nconst longText = \"Hello World! \".repeat(1000);\n\nconsole.time(\"toUpperCase\");\nlongText.toUpperCase();\nconsole.timeEnd(\"toUpperCase\");\n\nconsole.time(\"toLowerCase\");\nlongText.toLowerCase();\nconsole.timeEnd(\"toLowerCase\");\n\n// Common patterns\nconsole.log(\"\\n=== COMMON PATTERNS ===\");\nconsole.log(\"1. Normalize user input: input.toLowerCase().trim()\");\nconsole.log(\"2. Case-insensitive search: text.toLowerCase().includes(search.toLowerCase())\");\nconsole.log(\"3. Format titles: text.toLowerCase().split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')\");\nconsole.log(\"4. Compare strings: str1.toLowerCase() === str2.toLowerCase()\");\nconsole.log(\"5. Validate password: /[A-Z]/.test(password) && /[a-z]/.test(password)\");"
  },
  {
    "question": "How do you link JavaScript to use export and import?",
    "answer": "**JavaScript Export and Import**\n\nTo link JavaScript files using export and import, you need to use ES6 modules.\n\n**Example:**\n```javascript\n// In one file (js2.js)\nexport const capitalizeString = str => str.toUpperCase()\n\n// In another file (Js.js)\nimport { capitalizeString } from \"./js2.js\"\nconst mar = capitalizeString(\"hello\");\nconsole.log(mar)\n```\n\n**HTML setup:**\n```html\n<script type=\"module\" src=\"Js.js\"></script>\n<script type=\"module\" src=\"js2.js\"></script>\n```\n\n**Key requirements:**\n- **Add `.js` in filename:** Make sure to include `.js` extension\n- **Use `type=\"module\"`:** Add `type=\"module\"` to script tags\n- **Run from localhost:** Recommended to run from localhost because of Chrome CORS policy\n- **ES6 modules:** Use modern module syntax\n\n**Key concepts:**\n- **Export:** Make functions/variables available to other files\n- **Import:** Bring in functions/variables from other files\n- **Module system:** ES6 modules for code organization\n- **CORS policy:** Browser security for local files\n- **File extension:** Always include `.js` in import paths",
    "type": "javascript",
    "tags": ["javascript", "modules", "export", "import", "es6"],
    "code": "// Example: Exporting from js2.js\n// export const capitalizeString = str => str.toUpperCase()\n\n// Example: Importing in Js.js\n// import { capitalizeString } from \"./js2.js\"\n// const mar = capitalizeString(\"hello\");\n// console.log(mar)\n\n// More export examples\n// Named exports\nexport const add = (a, b) => a + b;\nexport const subtract = (a, b) => a - b;\nexport const multiply = (a, b) => a * b;\nexport const divide = (a, b) => b !== 0 ? a / b : \"Cannot divide by zero\";\n\n// Exporting functions\nexport function greet(name) {\n    return `Hello, ${name}!`;\n}\n\n// Exporting objects\nexport const config = {\n    apiUrl: \"https://api.example.com\",\n    timeout: 5000,\n    retries: 3\n};\n\n// Exporting classes\nexport class Calculator {\n    constructor() {\n        this.result = 0;\n    }\n    \n    add(value) {\n        this.result += value;\n        return this;\n    }\n    \n    getResult() {\n        return this.result;\n    }\n}\n\n// Default export\nexport default function capitalizeString(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\n// More import examples\n// Importing named exports\n// import { add, subtract, multiply, divide } from \"./math.js\";\n\n// Importing with different names\n// import { add as addition, subtract as subtraction } from \"./math.js\";\n\n// Importing all named exports\n// import * as math from \"./math.js\";\n// console.log(math.add(5, 3));\n\n// Importing default export\n// import capitalizeString from \"./utils.js\";\n\n// Importing both default and named\n// import capitalizeString, { add, subtract } from \"./utils.js\";\n\n// Practical example: User management system\n\n// user.js - User class and functions\nexport class User {\n    constructor(name, email, age) {\n        this.name = name;\n        this.email = email;\n        this.age = age;\n        this.createdAt = new Date();\n    }\n    \n    getInfo() {\n        return `${this.name} (${this.email}) - Age: ${this.age}`;\n    }\n}\n\nexport function createUser(name, email, age) {\n    return new User(name, email, age);\n}\n\nexport function validateEmail(email) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n}\n\nexport const MAX_USERS = 100;\n\n// utils.js - Utility functions\nexport function formatDate(date) {\n    return date.toLocaleDateString();\n}\n\nexport function generateId() {\n    return Math.random().toString(36).substr(2, 9);\n}\n\nexport function debounce(func, wait) {\n    let timeout;\n    return function executedFunction(...args) {\n        const later = () => {\n            clearTimeout(timeout);\n            func(...args);\n        };\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n    };\n}\n\n// Default export for main utility\nexport default function log(message) {\n    console.log(`[${new Date().toISOString()}] ${message}`);\n}\n\n// config.js - Configuration\nexport const API_CONFIG = {\n    baseUrl: \"https://api.example.com\",\n    timeout: 5000,\n    retries: 3\n};\n\nexport const UI_CONFIG = {\n    theme: \"dark\",\n    language: \"en\",\n    animations: true\n};\n\nexport default {\n    api: API_CONFIG,\n    ui: UI_CONFIG\n};\n\n// main.js - Main application file\n// import { User, createUser, validateEmail, MAX_USERS } from \"./user.js\";\n// import { formatDate, generateId, debounce, default as log } from \"./utils.js\";\n// import config, { API_CONFIG } from \"./config.js\";\n\n// Example usage:\n// const user = createUser(\"John Doe\", \"john@example.com\", 25);\n// console.log(user.getInfo());\n// log(\"User created successfully\");\n\n// HTML setup example\n/*\n<!DOCTYPE html>\n<html>\n<head>\n    <title>ES6 Modules Example</title>\n</head>\n<body>\n    <h1>ES6 Modules Demo</h1>\n    <script type=\"module\" src=\"./main.js\"></script>\n</body>\n</html>\n*/\n\n// Common patterns\nconsole.log(\"\\n=== COMMON EXPORT/IMPORT PATTERNS ===\");\nconsole.log(\"1. Named exports: export const name = value;\");\nconsole.log(\"2. Default export: export default function() {};\");\nconsole.log(\"3. Import named: import { name } from './file.js';\");\nconsole.log(\"4. Import default: import name from './file.js';\");\nconsole.log(\"5. Import all: import * as module from './file.js';\");\nconsole.log(\"6. Import with alias: import { name as alias } from './file.js';\");\n\n// Re-exporting\n// Re-export everything from another module\n// export * from './user.js';\n\n// Re-export specific items\n// export { User, createUser } from './user.js';\n\n// Re-export with different names\n// export { User as UserClass } from './user.js';\n\n// Dynamic imports\n// async function loadModule() {\n//     const module = await import('./user.js');\n//     const user = new module.User('John', 'john@example.com', 25);\n//     console.log(user.getInfo());\n// }\n\n// Conditional imports\n// if (condition) {\n//     const { specialFunction } = await import('./special.js');\n//     specialFunction();\n// }\n\n// Best practices\nconsole.log(\"\\n=== BEST PRACTICES ===\");\nconsole.log(\"1. Use named exports for multiple items\");\nconsole.log(\"2. Use default export for main functionality\");\nconsole.log(\"3. Always include .js extension in imports\");\nconsole.log(\"4. Use type='module' in script tags\");\nconsole.log(\"5. Run from localhost to avoid CORS issues\");\nconsole.log(\"6. Use descriptive names for exports\");\nconsole.log(\"7. Group related exports together\");\nconsole.log(\"8. Use re-exports to create barrel files\");\n\n// Error handling in modules\n// try {\n//     const { riskyFunction } = await import('./risky.js');\n//     riskyFunction();\n// } catch (error) {\n//     console.error('Failed to load module:', error);\n// }\n\n// Module loading order\nconsole.log(\"\\n=== MODULE LOADING ORDER ===\");\nconsole.log(\"1. Modules are loaded in dependency order\");\nconsole.log(\"2. Each module is executed only once\");\nconsole.log(\"3. Circular dependencies are handled gracefully\");\nconsole.log(\"4. Top-level await is supported in modules\");\n\n// Browser compatibility\nconsole.log(\"\\n=== BROWSER COMPATIBILITY ===\");\nconsole.log(\"ES6 modules are supported in:\");\nconsole.log(\"- Chrome 61+\");\nconsole.log(\"- Firefox 60+\");\nconsole.log(\"- Safari 10.1+\");\nconsole.log(\"- Edge 16+\");\nconsole.log(\"For older browsers, use a bundler like Webpack or Rollup\");"
  },
  {
    "question": "What is the charAt function?",
    "answer": "**The `.charAt()` Function**\n\nThe `.charAt()` function in JavaScript is a string method that lets you get the letter (character) at a specific position in a word or sentence.\n\n**How does it work?**\n- You give it a number (position), and it returns the character at that spot\n- Positions start counting at 0 (not 1)\n\n**Example:**\n```javascript\nlet word = \"hello\";\n\nconsole.log(word.charAt(0)); // \"h\" (the first letter)\nconsole.log(word.charAt(1)); // \"e\" (the second letter)\nconsole.log(word.charAt(4)); // \"o\" (the fifth letter)\n```\n\n**Edge case:**\nIf you ask for a number bigger than the word, it gives you an empty string:\n```javascript\nconsole.log(word.charAt(10)); // \"\"\n```\n\n**Key concepts:**\n- **String method:** Works on string values\n- **Zero-based indexing:** First character is at index 0\n- **Returns character:** Returns the character at specified position\n- **Empty string:** Returns \"\" for invalid positions\n- **Safe access:** Won't throw errors for out-of-bounds indices",
    "type": "javascript",
    "tags": ["javascript", "strings", "charAt", "character-access"],
    "code": "// Basic charAt usage\nlet word = \"hello\";\n\nconsole.log(\"Original word:\", word);\nconsole.log(\"charAt(0):\", word.charAt(0)); // \"h\" (the first letter)\nconsole.log(\"charAt(1):\", word.charAt(1)); // \"e\" (the second letter)\nconsole.log(\"charAt(2):\", word.charAt(2)); // \"l\" (the third letter)\nconsole.log(\"charAt(3):\", word.charAt(3)); // \"l\" (the fourth letter)\nconsole.log(\"charAt(4):\", word.charAt(4)); // \"o\" (the fifth letter)\n\n// Edge case: out of bounds\nconsole.log(\"charAt(10):\", word.charAt(10)); // \"\" (empty string)\nconsole.log(\"charAt(-1):\", word.charAt(-1)); // \"\" (empty string)\n\n// More examples\nconst text = \"JavaScript Programming\";\nconsole.log(\"\\n=== MORE EXAMPLES ===\");\nconsole.log(\"Text:\", text);\nconsole.log(\"First character:\", text.charAt(0)); // \"J\"\nconsole.log(\"Last character:\", text.charAt(text.length - 1)); // \"g\"\nconsole.log(\"Middle character:\", text.charAt(Math.floor(text.length / 2))); // \"P\"\n\n// Practical examples\n\n// Get initials from name\nfunction getInitials(fullName) {\n    const words = fullName.split(' ');\n    return words.map(word => word.charAt(0).toUpperCase()).join('');\n}\n\nconsole.log(\"\\n=== GET INITIALS ===\");\nconst names = [\"John Doe\", \"Jane Smith\", \"Alice Johnson\"];\nnames.forEach(name => {\n    console.log(`${name} -> ${getInitials(name)}`);\n});\n\n// Check if string starts with specific character\nfunction startsWithChar(str, char) {\n    return str.charAt(0).toLowerCase() === char.toLowerCase();\n}\n\nconsole.log(\"\\n=== STARTS WITH CHARACTER ===\");\nconst words = [\"apple\", \"banana\", \"cherry\", \"date\"];\nwords.forEach(word => {\n    console.log(`\"${word}\" starts with 'a': ${startsWithChar(word, 'a')}`);\n});\n\n// Extract characters at specific positions\nfunction extractCharacters(str, positions) {\n    return positions.map(pos => str.charAt(pos)).join('');\n}\n\nconsole.log(\"\\n=== EXTRACT CHARACTERS ===\");\nconst text2 = \"Hello World\";\nconst positions = [0, 2, 4, 6, 8];\nconsole.log(`Text: \"${text2}\"`);\nconsole.log(`Positions: [${positions.join(', ')}]`);\nconsole.log(`Extracted: \"${extractCharacters(text2, positions)}\"`);\n\n// Count character occurrences\nfunction countCharacter(str, char) {\n    let count = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str.charAt(i) === char) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(\"\\n=== COUNT CHARACTER OCCURRENCES ===\");\nconst text3 = \"programming\";\nconst charToCount = 'r';\nconsole.log(`Text: \"${text3}\"`);\nconsole.log(`Character '${charToCount}' appears ${countCharacter(text3, charToCount)} times`);\n\n// Reverse a string using charAt\nfunction reverseString(str) {\n    let reversed = '';\n    for (let i = str.length - 1; i >= 0; i--) {\n        reversed += str.charAt(i);\n    }\n    return reversed;\n}\n\nconsole.log(\"\\n=== REVERSE STRING ===\");\nconst original = \"Hello\";\nconsole.log(`Original: \"${original}\"`);\nconsole.log(`Reversed: \"${reverseString(original)}\"`);\n\n// Check if string is palindrome\nfunction isPalindrome(str) {\n    const cleanStr = str.toLowerCase().replace(/[^a-z0-9]/g, '');\n    const length = cleanStr.length;\n    \n    for (let i = 0; i < Math.floor(length / 2); i++) {\n        if (cleanStr.charAt(i) !== cleanStr.charAt(length - 1 - i)) {\n            return false;\n        }\n    }\n    return true;\n}\n\nconsole.log(\"\\n=== PALINDROME CHECKER ===\");\nconst testWords = [\"racecar\", \"hello\", \"level\", \"world\", \"A man a plan a canal Panama\"];\ntestWords.forEach(word => {\n    console.log(`\"${word}\" is palindrome: ${isPalindrome(word)}`);\n});\n\n// Get character frequency\nfunction getCharacterFrequency(str) {\n    const frequency = {};\n    for (let i = 0; i < str.length; i++) {\n        const char = str.charAt(i);\n        frequency[char] = (frequency[char] || 0) + 1;\n    }\n    return frequency;\n}\n\nconsole.log(\"\\n=== CHARACTER FREQUENCY ===\");\nconst text4 = \"javascript\";\nconst frequency = getCharacterFrequency(text4);\nconsole.log(`Text: \"${text4}\"`);\nconsole.log(\"Character frequency:\", frequency);\n\n// Find first non-repeating character\nfunction findFirstNonRepeating(str) {\n    const frequency = getCharacterFrequency(str);\n    \n    for (let i = 0; i < str.length; i++) {\n        const char = str.charAt(i);\n        if (frequency[char] === 1) {\n            return char;\n        }\n    }\n    return null;\n}\n\nconsole.log(\"\\n=== FIRST NON-REPEATING CHARACTER ===\");\nconst text5 = \"programming\";\nconst firstNonRepeating = findFirstNonRepeating(text5);\nconsole.log(`Text: \"${text5}\"`);\nconsole.log(`First non-repeating character: ${firstNonRepeating || 'None'}`);\n\n// charAt vs bracket notation\nconsole.log(\"\\n=== CHARAT VS BRACKET NOTATION ===\");\nconst str = \"Hello\";\nconsole.log(`str.charAt(0): \"${str.charAt(0)}\"`);\nconsole.log(`str[0]: \"${str[0]}\"`);\nconsole.log(`str.charAt(10): \"${str.charAt(10)}\"`);\nconsole.log(`str[10]: \"${str[10]}\"`);\n\n// charAt is safer for out-of-bounds access\n// str.charAt(10) returns \"\"\n// str[10] returns undefined\n\n// Working with Unicode characters\nconsole.log(\"\\n=== UNICODE CHARACTERS ===\");\nconst unicodeStr = \"Hello 世界 🌍\";\nconsole.log(`Unicode string: \"${unicodeStr}\"`);\nconsole.log(`Length: ${unicodeStr.length}`);\nconsole.log(`charAt(6): \"${unicodeStr.charAt(6)}\"`);\nconsole.log(`charAt(7): \"${unicodeStr.charAt(7)}\"`);\nconsole.log(`charAt(8): \"${unicodeStr.charAt(8)}\"`);\n\n// Performance comparison\nconsole.log(\"\\n=== PERFORMANCE COMPARISON ===\");\nconst longString = \"Hello World! \".repeat(1000);\n\nconsole.time(\"charAt\");\nfor (let i = 0; i < longString.length; i++) {\n    longString.charAt(i);\n}\nconsole.timeEnd(\"charAt\");\n\nconsole.time(\"bracket notation\");\nfor (let i = 0; i < longString.length; i++) {\n    longString[i];\n}\nconsole.timeEnd(\"bracket notation\");\n\n// Common patterns\nconsole.log(\"\\n=== COMMON PATTERNS ===\");\nconsole.log(\"1. Get first character: str.charAt(0)\");\nconsole.log(\"2. Get last character: str.charAt(str.length - 1)\");\nconsole.log(\"3. Get middle character: str.charAt(Math.floor(str.length / 2))\");\nconsole.log(\"4. Check if starts with: str.charAt(0) === 'A'\");\nconsole.log(\"5. Safe character access: str.charAt(index) || ''\");\n\n// Error handling\nfunction safeCharAt(str, index) {\n    if (typeof str !== 'string') {\n        throw new Error('First argument must be a string');\n    }\n    if (typeof index !== 'number') {\n        throw new Error('Second argument must be a number');\n    }\n    return str.charAt(index);\n}\n\nconsole.log(\"\\n=== ERROR HANDLING ===\");\ntry {\n    console.log(\"Safe charAt:\", safeCharAt(\"Hello\", 2)); // \"l\"\n    console.log(\"Safe charAt (out of bounds):\", safeCharAt(\"Hello\", 10)); // \"\"\n} catch (error) {\n    console.log(\"Error:\", error.message);\n}"
  },
  {
    "question": "What is the .slice function?",
    "answer": "**The `.slice()` Function**\n\nThe `.slice()` function is used on strings and arrays in JavaScript to cut out a section and give you a smaller piece.\n\n**For Strings:**\nIt lets you grab part of a word or sentence. You tell it where to start (first number) and optionally, where to stop (second number—not included).\n\n**Example:**\n```javascript\nlet word = \"banana\";\n\nconsole.log(word.slice(1)); // \"anana\" (starts at letter 1 to the end)\nconsole.log(word.slice(2, 5)); // \"nan\" (starts at 2, ends before 5)\n```\n\n**For Arrays:**\nIt lets you take out a few items from your list.\n\n**Example:**\n```javascript\nlet arr = [10, 20, 30, 40, 50];\n\nconsole.log(arr.slice(1, 4)); // [20, 30, 40]\n```\n\n**Key concepts:**\n- **Non-destructive:** Original string/array remains unchanged\n- **Start index:** Where to begin slicing (inclusive)\n- **End index:** Where to stop slicing (exclusive)\n- **Negative indices:** Count from the end\n- **Returns new:** Creates a new string/array\n- **Works on both:** Strings and arrays",
    "type": "javascript",
    "tags": ["javascript", "strings", "arrays", "slice", "substring"],
    "code": "// String slice examples\nlet word = \"banana\";\n\nconsole.log(\"Original word:\", word);\nconsole.log(\"slice(1):\", word.slice(1)); // \"anana\" (starts at letter 1 to the end)\nconsole.log(\"slice(2, 5):\", word.slice(2, 5)); // \"nan\" (starts at 2, ends before 5)\nconsole.log(\"slice(0, 3):\", word.slice(0, 3)); // \"ban\" (first 3 characters)\nconsole.log(\"slice(-3):\", word.slice(-3)); // \"ana\" (last 3 characters)\nconsole.log(\"slice(-3, -1):\", word.slice(-3, -1)); // \"an\" (from 3rd from end to 1st from end)\n\n// Array slice examples\nlet arr = [10, 20, 30, 40, 50];\n\nconsole.log(\"\\n=== ARRAY SLICE EXAMPLES ===\");\nconsole.log(\"Original array:\", arr);\nconsole.log(\"slice(1, 4):\", arr.slice(1, 4)); // [20, 30, 40]\nconsole.log(\"slice(2):\", arr.slice(2)); // [30, 40, 50] (from index 2 to end)\nconsole.log(\"slice(0, 3):\", arr.slice(0, 3)); // [10, 20, 30] (first 3 elements)\nconsole.log(\"slice(-2):\", arr.slice(-2)); // [40, 50] (last 2 elements)\nconsole.log(\"slice(-3, -1):\", arr.slice(-3, -1)); // [30, 40] (from 3rd from end to 1st from end)\n\n// More string examples\nconst text = \"JavaScript Programming\";\nconsole.log(\"\\n=== MORE STRING EXAMPLES ===\");\nconsole.log(\"Text:\", text);\nconsole.log(\"First word:\", text.slice(0, 10)); // \"JavaScript\"\nconsole.log(\"Second word:\", text.slice(11)); // \"Programming\"\nconsole.log(\"Middle part:\", text.slice(4, 16)); // \"Script Prog\"\nconsole.log(\"Last 5 characters:\", text.slice(-5)); // \"ming\"\n\n// Practical examples\n\n// Extract domain from email\nfunction extractDomain(email) {\n    const atIndex = email.indexOf('@');\n    return email.slice(atIndex + 1);\n}\n\nconsole.log(\"\\n=== EXTRACT DOMAIN ===\");\nconst emails = [\"john@example.com\", \"jane@company.org\", \"bob@university.edu\"];\nemails.forEach(email => {\n    console.log(`${email} -> ${extractDomain(email)}`);\n});\n\n// Get file extension\nfunction getFileExtension(filename) {\n    const lastDotIndex = filename.lastIndexOf('.');\n    if (lastDotIndex === -1) return '';\n    return filename.slice(lastDotIndex + 1);\n}\n\nconsole.log(\"\\n=== GET FILE EXTENSION ===\");\nconst filenames = [\"document.pdf\", \"image.jpg\", \"script.js\", \"readme\"];\nfilenames.forEach(filename => {\n    console.log(`${filename} -> ${getFileExtension(filename)}`);\n});\n\n// Extract first and last name\nfunction extractNames(fullName) {\n    const spaceIndex = fullName.indexOf(' ');\n    if (spaceIndex === -1) return { firstName: fullName, lastName: '' };\n    \n    return {\n        firstName: fullName.slice(0, spaceIndex),\n        lastName: fullName.slice(spaceIndex + 1)\n    };\n}\n\nconsole.log(\"\\n=== EXTRACT NAMES ===\");\nconst names = [\"John Doe\", \"Jane Smith\", \"Alice\"];\nnames.forEach(name => {\n    const { firstName, lastName } = extractNames(name);\n    console.log(`\"${name}\" -> First: \"${firstName}\", Last: \"${lastName}\"`);\n});\n\n// Array manipulation examples\n\n// Get first N elements\nfunction getFirstN(arr, n) {\n    return arr.slice(0, n);\n}\n\n// Get last N elements\nfunction getLastN(arr, n) {\n    return arr.slice(-n);\n}\n\n// Get middle elements\nfunction getMiddle(arr, start, end) {\n    return arr.slice(start, end);\n}\n\nconsole.log(\"\\n=== ARRAY MANIPULATION ===\");\nconst numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(\"Original array:\", numbers);\nconsole.log(\"First 3:\", getFirstN(numbers, 3)); // [1, 2, 3]\nconsole.log(\"Last 3:\", getLastN(numbers, 3)); // [8, 9, 10]\nconsole.log(\"Middle (2-6):\", getMiddle(numbers, 2, 6)); // [3, 4, 5, 6]\n\n// Pagination example\nfunction paginate(items, page, itemsPerPage) {\n    const startIndex = (page - 1) * itemsPerPage;\n    const endIndex = startIndex + itemsPerPage;\n    return items.slice(startIndex, endIndex);\n}\n\nconsole.log(\"\\n=== PAGINATION ===\");\nconst allItems = Array.from({length: 20}, (_, i) => `Item ${i + 1}`);\nconsole.log(\"All items:\", allItems);\nconsole.log(\"Page 1 (5 items):\", paginate(allItems, 1, 5));\nconsole.log(\"Page 2 (5 items):\", paginate(allItems, 2, 5));\nconsole.log(\"Page 3 (5 items):\", paginate(allItems, 3, 5));\n\n// String manipulation\n\n// Remove first character\nfunction removeFirstChar(str) {\n    return str.slice(1);\n}\n\n// Remove last character\nfunction removeLastChar(str) {\n    return str.slice(0, -1);\n}\n\n// Remove first and last characters\nfunction removeFirstAndLast(str) {\n    return str.slice(1, -1);\n}\n\nconsole.log(\"\\n=== STRING MANIPULATION ===\");\nconst testStr = \"Hello\";\nconsole.log(`Original: \"${testStr}\"`);\nconsole.log(`Remove first: \"${removeFirstChar(testStr)}\"`); // \"ello\"\nconsole.log(`Remove last: \"${removeLastChar(testStr)}\"`); // \"Hell\"\nconsole.log(`Remove first and last: \"${removeFirstAndLast(testStr)}\"`); // \"ell\"\n\n// Array chunking\nfunction chunkArray(arr, chunkSize) {\n    const chunks = [];\n    for (let i = 0; i < arr.length; i += chunkSize) {\n        chunks.push(arr.slice(i, i + chunkSize));\n    }\n    return chunks;\n}\n\nconsole.log(\"\\n=== ARRAY CHUNKING ===\");\nconst data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(\"Original array:\", data);\nconsole.log(\"Chunks of 3:\", chunkArray(data, 3));\nconsole.log(\"Chunks of 4:\", chunkArray(data, 4));\n\n// String truncation\nfunction truncateString(str, maxLength) {\n    if (str.length <= maxLength) return str;\n    return str.slice(0, maxLength) + \"...\";\n}\n\nconsole.log(\"\\n=== STRING TRUNCATION ===\");\nconst longText = \"This is a very long string that needs to be truncated\";\nconsole.log(\"Original:\", longText);\nconsole.log(\"Truncated (20):\", truncateString(longText, 20));\nconsole.log(\"Truncated (30):\", truncateString(longText, 30));\n\n// Working with negative indices\nconsole.log(\"\\n=== NEGATIVE INDICES ===\");\nconst str = \"Hello World\";\nconsole.log(`String: \"${str}\"`);\nconsole.log(`slice(-5): \"${str.slice(-5)}\"`); // \"World\"\nconsole.log(`slice(-5, -1): \"${str.slice(-5, -1)}\"`); // \"Worl\"\nconsole.log(`slice(-10, -5): \"${str.slice(-10, -5)}\"`); // \"Hello\"\n\nconst arr2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(`Array: [${arr2.join(', ')}]`);\nconsole.log(`slice(-3): [${arr2.slice(-3).join(', ')}]`); // [8, 9, 10]\nconsole.log(`slice(-5, -2): [${arr2.slice(-5, -2).join(', ')}]`); // [6, 7, 8]\n\n// Performance comparison\nconsole.log(\"\\n=== PERFORMANCE COMPARISON ===\");\nconst longString = \"Hello World! \".repeat(1000);\nconst longArray = Array.from({length: 1000}, (_, i) => i);\n\nconsole.time(\"String slice\");\nfor (let i = 0; i < 100; i++) {\n    longString.slice(100, 200);\n}\nconsole.timeEnd(\"String slice\");\n\nconsole.time(\"Array slice\");\nfor (let i = 0; i < 100; i++) {\n    longArray.slice(100, 200);\n}\nconsole.timeEnd(\"Array slice\");\n\n// Common patterns\nconsole.log(\"\\n=== COMMON PATTERNS ===\");\nconsole.log(\"1. Get first N characters: str.slice(0, N)\");\nconsole.log(\"2. Get last N characters: str.slice(-N)\");\nconsole.log(\"3. Remove first character: str.slice(1)\");\nconsole.log(\"4. Remove last character: str.slice(0, -1)\");\nconsole.log(\"5. Get substring: str.slice(start, end)\");\nconsole.log(\"6. Get array subset: arr.slice(start, end)\");\nconsole.log(\"7. Copy array: arr.slice()\");\nconsole.log(\"8. Get last N elements: arr.slice(-N)\");\n\n// Error handling\nfunction safeSlice(str, start, end) {\n    if (typeof str !== 'string' && !Array.isArray(str)) {\n        throw new Error('First argument must be a string or array');\n    }\n    if (typeof start !== 'number') {\n        throw new Error('Start index must be a number');\n    }\n    if (end !== undefined && typeof end !== 'number') {\n        throw new Error('End index must be a number');\n    }\n    return str.slice(start, end);\n}\n\nconsole.log(\"\\n=== ERROR HANDLING ===\");\ntry {\n    console.log(\"Safe slice:\", safeSlice(\"Hello\", 1, 3)); // \"el\"\n    console.log(\"Safe slice (array):\", safeSlice([1, 2, 3, 4, 5], 1, 3)); // [2, 3]\n} catch (error) {\n    console.log(\"Error:\", error.message);\n}"
  },
  {
    "question": "How do you export and import in JavaScript?",
    "answer": "**Export and Import in JavaScript**\n\nJavaScript modules allow you to export and import code between files.\n\n**Export examples:**\n```javascript\nconst capitalizeString = (string) => {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nexport { capitalizeString };\n\nexport const foo = \"bar\";\nexport const bar = \"foo\";\n```\n\n**Import examples:**\n```javascript\nimport { capitalizeString, foo, bar } from \"./filewiththiscode.js\";\nconsole.log(capitalizeString(\"dog\")); // \"Dog\"\nconsole.log(foo); // \"bar\"\nconsole.log(bar); // \"foo\"\n```\n\n**Import everything at once:**\n```javascript\nimport * as myModule from \"./filename.js\";\n```\n\n**Key concepts:**\n- **Named exports:** Export specific functions/variables\n- **Import named:** Import specific items with curly braces\n- **Import all:** Import everything with `* as`\n- **File extension:** Always include `.js` in import paths\n- **Module system:** ES6 modules for code organization\n- **Reusability:** Share code between files",
    "type": "javascript",
    "tags": ["javascript", "modules", "export", "import", "es6"],
    "code": "// Export examples\nconst capitalizeString = (string) => {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nexport { capitalizeString };\n\nexport const foo = \"bar\";\nexport const bar = \"foo\";\n\n// More export examples\n// Named exports\nexport const add = (a, b) => a + b;\nexport const subtract = (a, b) => a - b;\nexport const multiply = (a, b) => a * b;\nexport const divide = (a, b) => b !== 0 ? a / b : \"Cannot divide by zero\";\n\n// Exporting functions\nexport function greet(name) {\n    return `Hello, ${name}!`;\n}\n\n// Exporting objects\nexport const config = {\n    apiUrl: \"https://api.example.com\",\n    timeout: 5000,\n    retries: 3\n};\n\n// Exporting classes\nexport class Calculator {\n    constructor() {\n        this.result = 0;\n    }\n    \n    add(value) {\n        this.result += value;\n        return this;\n    }\n    \n    getResult() {\n        return this.result;\n    }\n}\n\n// Import examples\n// Importing named exports\n// import { capitalizeString, foo, bar } from \"./filewiththiscode.js\";\n// console.log(capitalizeString(\"dog\")); // \"Dog\"\n// console.log(foo); // \"bar\"\n// console.log(bar); // \"foo\"\n\n// Importing with different names\n// import { add as addition, subtract as subtraction } from \"./math.js\";\n\n// Importing all named exports\n// import * as math from \"./math.js\";\n// console.log(math.add(5, 3));\n\n// Importing default export\n// import capitalizeString from \"./utils.js\";\n\n// Importing both default and named\n// import capitalizeString, { add, subtract } from \"./utils.js\";\n\n// Practical example: User management system\n\n// user.js - User class and functions\nexport class User {\n    constructor(name, email, age) {\n        this.name = name;\n        this.email = email;\n        this.age = age;\n        this.createdAt = new Date();\n    }\n    \n    getInfo() {\n        return `${this.name} (${this.email}) - Age: ${this.age}`;\n    }\n}\n\nexport function createUser(name, email, age) {\n    return new User(name, email, age);\n}\n\nexport function validateEmail(email) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n}\n\nexport const MAX_USERS = 100;\n\n// utils.js - Utility functions\nexport function formatDate(date) {\n    return date.toLocaleDateString();\n}\n\nexport function generateId() {\n    return Math.random().toString(36).substr(2, 9);\n}\n\nexport function debounce(func, wait) {\n    let timeout;\n    return function executedFunction(...args) {\n        const later = () => {\n            clearTimeout(timeout);\n            func(...args);\n        };\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n    };\n}\n\n// Default export for main utility\nexport default function log(message) {\n    console.log(`[${new Date().toISOString()}] ${message}`);\n}\n\n// config.js - Configuration\nexport const API_CONFIG = {\n    baseUrl: \"https://api.example.com\",\n    timeout: 5000,\n    retries: 3\n};\n\nexport const UI_CONFIG = {\n    theme: \"dark\",\n    language: \"en\",\n    animations: true\n};\n\nexport default {\n    api: API_CONFIG,\n    ui: UI_CONFIG\n};\n\n// main.js - Main application file\n// import { User, createUser, validateEmail, MAX_USERS } from \"./user.js\";\n// import { formatDate, generateId, debounce, default as log } from \"./utils.js\";\n// import config, { API_CONFIG } from \"./config.js\";\n\n// Example usage:\n// const user = createUser(\"John Doe\", \"john@example.com\", 25);\n// console.log(user.getInfo());\n// log(\"User created successfully\");\n\n// HTML setup example\n/*\n<!DOCTYPE html>\n<html>\n<head>\n    <title>ES6 Modules Example</title>\n</head>\n<body>\n    <h1>ES6 Modules Demo</h1>\n    <script type=\"module\" src=\"./main.js\"></script>\n</body>\n</html>\n*/\n\n// Common patterns\nconsole.log(\"\\n=== COMMON EXPORT/IMPORT PATTERNS ===\");\nconsole.log(\"1. Named exports: export const name = value;\");\nconsole.log(\"2. Default export: export default function() {};\");\nconsole.log(\"3. Import named: import { name } from './file.js';\");\nconsole.log(\"4. Import default: import name from './file.js';\");\nconsole.log(\"5. Import all: import * as module from './file.js';\");\nconsole.log(\"6. Import with alias: import { name as alias } from './file.js';\");\n\n// Re-exporting\n// Re-export everything from another module\n// export * from './user.js';\n\n// Re-export specific items\n// export { User, createUser } from './user.js';\n\n// Re-export with different names\n// export { User as UserClass } from './user.js';\n\n// Dynamic imports\n// async function loadModule() {\n//     const module = await import('./user.js');\n//     const user = new module.User('John', 'john@example.com', 25);\n//     console.log(user.getInfo());\n// }\n\n// Conditional imports\n// if (condition) {\n//     const { specialFunction } = await import('./special.js');\n//     specialFunction();\n// }\n\n// Best practices\nconsole.log(\"\\n=== BEST PRACTICES ===\");\nconsole.log(\"1. Use named exports for multiple items\");\nconsole.log(\"2. Use default export for main functionality\");\nconsole.log(\"3. Always include .js extension in imports\");\nconsole.log(\"4. Use type='module' in script tags\");\nconsole.log(\"5. Run from localhost to avoid CORS issues\");\nconsole.log(\"6. Use descriptive names for exports\");\nconsole.log(\"7. Group related exports together\");\nconsole.log(\"8. Use re-exports to create barrel files\");\n\n// Error handling in modules\n// try {\n//     const { riskyFunction } = await import('./risky.js');\n//     riskyFunction();\n// } catch (error) {\n//     console.error('Failed to load module:', error);\n// }\n\n// Module loading order\nconsole.log(\"\\n=== MODULE LOADING ORDER ===\");\nconsole.log(\"1. Modules are loaded in dependency order\");\nconsole.log(\"2. Each module is executed only once\");\nconsole.log(\"3. Circular dependencies are handled gracefully\");\nconsole.log(\"4. Top-level await is supported in modules\");\n\n// Browser compatibility\nconsole.log(\"\\n=== BROWSER COMPATIBILITY ===\");\nconsole.log(\"ES6 modules are supported in:\");\nconsole.log(\"- Chrome 61+\");\nconsole.log(\"- Firefox 60+\");\nconsole.log(\"- Safari 10.1+\");\nconsole.log(\"- Edge 16+\");\nconsole.log(\"For older browsers, use a bundler like Webpack or Rollup\");"
  },
  {
    "question": "How do you create and import a default export?",
    "answer": "**Default Export and Import**\n\nTo create an export fallback in JavaScript modules, you use `export default`. This means if another file imports without curly braces, it gets your \"main\" thing—even if you have other exports.\n\n**How to create default export:**\n```javascript\nconst capitalizeString = (string) => {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nexport default capitalizeString; // This is the fallback\nexport const foo = \"bar\";\nexport const bar = \"foo\";\n```\n\n**How to import the default (fallback):**\n```javascript\nimport capitalizeString from \"./filename.js\"; // Gets the default\nimport { foo, bar } from \"./filename.js\"; // Gets the named ones\n```\n\n**Key concepts:**\n- **Default export:** One main export per module\n- **No curly braces:** Import default without `{}`\n- **Named exports:** Import with `{}`\n- **Fallback:** Default is the main export\n- **One default:** Only one default export per module\n- **Flexible naming:** Can name default import anything",
    "type": "javascript",
    "tags": ["javascript", "modules", "default-export", "import"],
    "code": "// Creating default export\nconst capitalizeString = (string) => {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nexport default capitalizeString; // This is the fallback\nexport const foo = \"bar\";\nexport const bar = \"foo\";\n\n// More default export examples\n\n// Default export function\nexport default function greet(name) {\n    return `Hello, ${name}!`;\n}\n\n// Default export class\nexport default class User {\n    constructor(name, email) {\n        this.name = name;\n        this.email = email;\n    }\n    \n    getInfo() {\n        return `${this.name} (${this.email})`;\n    }\n}\n\n// Default export object\nexport default {\n    apiUrl: \"https://api.example.com\",\n    timeout: 5000,\n    retries: 3\n};\n\n// Default export with named exports\nexport default function calculate(a, b, operation) {\n    switch (operation) {\n        case 'add': return a + b;\n        case 'subtract': return a - b;\n        case 'multiply': return a * b;\n        case 'divide': return b !== 0 ? a / b : \"Cannot divide by zero\";\n        default: return \"Invalid operation\";\n    }\n}\n\nexport const operations = ['add', 'subtract', 'multiply', 'divide'];\nexport const MAX_RESULT = 1000;\n\n// Importing default exports\n\n// Import default (no curly braces)\n// import capitalizeString from \"./filename.js\";\n// console.log(capitalizeString(\"hello\")); // \"Hello\"\n\n// Import default with different name\n// import myFunction from \"./filename.js\";\n// console.log(myFunction(\"world\")); // \"World\"\n\n// Import default and named exports together\n// import calculate, { operations, MAX_RESULT } from \"./math.js\";\n// console.log(calculate(5, 3, 'add')); // 8\n// console.log(operations); // ['add', 'subtract', 'multiply', 'divide']\n\n// Import default with alias\n// import { default as mainFunction } from \"./filename.js\";\n// console.log(mainFunction(\"test\"));\n\n// Practical examples\n\n// utils.js - Utility functions with default export\nexport default function formatText(text, options = {}) {\n    const {\n        capitalize = false,\n        trim = true,\n        maxLength = null\n    } = options;\n    \n    let result = text;\n    \n    if (trim) {\n        result = result.trim();\n    }\n    \n    if (capitalize) {\n        result = result.charAt(0).toUpperCase() + result.slice(1);\n    }\n    \n    if (maxLength && result.length > maxLength) {\n        result = result.slice(0, maxLength) + \"...\";\n    }\n    \n    return result;\n}\n\nexport function validateEmail(email) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n}\n\nexport function generateId() {\n    return Math.random().toString(36).substr(2, 9);\n}\n\n// config.js - Configuration with default export\nexport default {\n    api: {\n        baseUrl: \"https://api.example.com\",\n        timeout: 5000,\n        retries: 3\n    },\n    ui: {\n        theme: \"dark\",\n        language: \"en\",\n        animations: true\n    },\n    features: {\n        logging: true,\n        analytics: false,\n        notifications: true\n    }\n};\n\nexport const API_ENDPOINTS = {\n    users: \"/users\",\n    posts: \"/posts\",\n    comments: \"/comments\"\n};\n\nexport const SUPPORTED_LANGUAGES = [\"en\", \"es\", \"fr\", \"de\"];\n\n// user.js - User management with default export\nexport default class UserManager {\n    constructor() {\n        this.users = [];\n        this.currentUser = null;\n    }\n    \n    addUser(user) {\n        this.users.push(user);\n        return user;\n    }\n    \n    findUser(email) {\n        return this.users.find(user => user.email === email);\n    }\n    \n    getCurrentUser() {\n        return this.currentUser;\n    }\n    \n    setCurrentUser(user) {\n        this.currentUser = user;\n    }\n}\n\nexport function createUser(name, email, age) {\n    return {\n        id: Math.random().toString(36).substr(2, 9),\n        name,\n        email,\n        age,\n        createdAt: new Date()\n    };\n}\n\nexport function validateUser(user) {\n    const errors = [];\n    \n    if (!user.name || user.name.trim() === '') {\n        errors.push('Name is required');\n    }\n    \n    if (!user.email || !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(user.email)) {\n        errors.push('Valid email is required');\n    }\n    \n    if (!user.age || user.age < 18) {\n        errors.push('Age must be 18 or older');\n    }\n    \n    return {\n        isValid: errors.length === 0,\n        errors\n    };\n}\n\n// main.js - Main application file\n// import UserManager, { createUser, validateUser } from \"./user.js\";\n// import formatText, { validateEmail, generateId } from \"./utils.js\";\n// import config, { API_ENDPOINTS, SUPPORTED_LANGUAGES } from \"./config.js\";\n\n// Example usage:\n// const userManager = new UserManager();\n// const user = createUser(\"John Doe\", \"john@example.com\", 25);\n// const validation = validateUser(user);\n// \n// if (validation.isValid) {\n//     userManager.addUser(user);\n//     console.log(\"User added successfully\");\n// } else {\n//     console.log(\"Validation errors:\", validation.errors);\n// }\n\n// Common patterns\nconsole.log(\"\\n=== COMMON DEFAULT EXPORT PATTERNS ===\");\nconsole.log(\"1. Default function: export default function() {};\");\nconsole.log(\"2. Default class: export default class {};\");\nconsole.log(\"3. Default object: export default {};\");\nconsole.log(\"4. Default variable: export default variable;\");\nconsole.log(\"5. Import default: import name from './file.js';\");\nconsole.log(\"6. Import with alias: import { default as alias } from './file.js';\");\n\n// Re-exporting default exports\n// Re-export default from another module\n// export { default } from './user.js';\n\n// Re-export default with different name\n// export { default as UserClass } from './user.js';\n\n// Re-export default and named exports\n// export { default, createUser, validateUser } from './user.js';\n\n// Dynamic imports with default exports\n// async function loadUserManager() {\n//     const module = await import('./user.js');\n//     const UserManager = module.default;\n//     const { createUser, validateUser } = module;\n//     \n//     const userManager = new UserManager();\n//     const user = createUser(\"Alice\", \"alice@example.com\", 30);\n//     userManager.addUser(user);\n//     \n//     return userManager;\n// }\n\n// Best practices\nconsole.log(\"\\n=== BEST PRACTICES ===\");\nconsole.log(\"1. Use default export for main functionality\");\nconsole.log(\"2. Use named exports for utilities and helpers\");\nconsole.log(\"3. Only one default export per module\");\nconsole.log(\"4. Import default without curly braces\");\nconsole.log(\"5. Use descriptive names for default imports\");\nconsole.log(\"6. Combine default and named exports when needed\");\nconsole.log(\"7. Use default export for classes and main functions\");\n\n// Error handling\nconsole.log(\"\\n=== ERROR HANDLING ===\");\nconsole.log(\"1. Default exports are always available\");\nconsole.log(\"2. Named exports might not exist\");\nconsole.log(\"3. Use try-catch for dynamic imports\");\nconsole.log(\"4. Check if default export exists before using\");\n\n// Module loading order\nconsole.log(\"\\n=== MODULE LOADING ORDER ===\");\nconsole.log(\"1. Default exports are loaded first\");\nconsole.log(\"2. Named exports are loaded after\");\nconsole.log(\"3. Default export is always available\");\nconsole.log(\"4. Named exports depend on module structure\");\n\n// Browser compatibility\nconsole.log(\"\\n=== BROWSER COMPATIBILITY ===\");\nconsole.log(\"Default exports are supported in:\");\nconsole.log(\"- Chrome 61+\");\nconsole.log(\"- Firefox 60+\");\nconsole.log(\"- Safari 10.1+\");\nconsole.log(\"- Edge 16+\");\nconsole.log(\"For older browsers, use a bundler like Webpack or Rollup\");"
  },
  {
    "question": "What are the 5 main DOM manipulation techniques?",
    "answer": "**5 Main DOM Manipulation Techniques**\n\nThe 5 main DOM manipulation techniques are:\n\n1. **`getElementById`** - Get element by ID\n2. **`getElementsByClassName`** - Get elements by class name\n3. **`getElementsByTagName`** - Get elements by tag name\n4. **`querySelector`** - Get first element matching CSS selector\n5. **`querySelectorAll`** - Get all elements matching CSS selector\n\n**Examples:**\n```javascript\nconst title = document.getElementById('main-heading');\nconsole.log(title)\n\nconst listItem = document.getElementsByClassName('choice');\nconsole.log(listItem)\n\nconst listItem = document.getElementsByTagName('li');\nconsole.log(listItem)\n\nconst container = document.querySelector('div');\n// Use . for class and # for id\nconst container = document.querySelector('.container')\nconsole.log(container)\n\nconst selectAll = document.querySelectorAll('div');\nconsole.log(selectAll)\n```\n\n**Key concepts:**\n- **Start with `document.`** - Always begin with `document.`\n- **CSS selectors** - Use `.` for class and `#` for id\n- **Single vs Multiple** - Some return one element, others return collections\n- **Modern methods** - `querySelector` and `querySelectorAll` are most flexible\n- **Performance** - `getElementById` is fastest for single elements",
    "type": "javascript",
    "tags": ["javascript", "dom", "manipulation", "selectors", "elements"],
    "code": "// 1. getElementById - Get element by ID\\nconst title = document.getElementById('main-heading');\\nconsole.log(\\\"getElementById result:\\\", title);\\n\\n// 2. getElementsByClassName - Get elements by class name\\nconst listItems = document.getElementsByClassName('choice');\\nconsole.log(\\\"getElementsByClassName result:\\\", listItems);\\n\\n// 3. getElementsByTagName - Get elements by tag name\\nconst allListItems = document.getElementsByTagName('li');\\nconsole.log(\\\"getElementsByTagName result:\\\", allListItems);\\n\\n// 4. querySelector - Get first element matching CSS selector\\nconst container = document.querySelector('div');\\nconsole.log(\\\"querySelector div result:\\\", container);\\n\\n// Use . for class and # for id\\nconst containerByClass = document.querySelector('.container');\\nconsole.log(\\\"querySelector .container result:\\\", containerByClass);\\n\\nconst containerById = document.querySelector('#main-container');\\nconsole.log(\\\"querySelector #main-container result:\\\", containerById);\\n\\n// 5. querySelectorAll - Get all elements matching CSS selector\\nconst allDivs = document.querySelectorAll('div');\\nconsole.log(\\\"querySelectorAll div result:\\\", allDivs);\\n\\n// More examples with different selectors\\nconsole.log(\\\"\\\\n=== MORE SELECTOR EXAMPLES ===\\\");\\n\\n// Complex selectors\\nconst firstListItem = document.querySelector('ul li:first-child');\\nconsole.log(\\\"First list item:\\\", firstListItem);\\n\\nconst lastListItem = document.querySelector('ul li:last-child');\\nconsole.log(\\\"Last list item:\\\", lastListItem);\\n\\nconst evenItems = document.querySelectorAll('li:nth-child(even)');\\nconsole.log(\\\"Even items:\\\", evenItems);\\n\\nconst oddItems = document.querySelectorAll('li:nth-child(odd)');\\nconsole.log(\\\"Odd items:\\\", oddItems);\\n\\n// Attribute selectors\\nconst elementsWithClass = document.querySelectorAll('[class]');\\nconsole.log(\\\"Elements with class attribute:\\\", elementsWithClass);\\n\\nconst elementsWithId = document.querySelectorAll('[id]');\\nconsole.log(\\\"Elements with id attribute:\\\", elementsWithId);\\n\\nconst specificClass = document.querySelectorAll('.specific-class');\\nconsole.log(\\\"Elements with specific class:\\\", specificClass);\\n\\n// Practical examples\\n\\n// Get all buttons\\nconst allButtons = document.querySelectorAll('button');\\nconsole.log(\\\"\\\\n=== ALL BUTTONS ===\\\");\\nallButtons.forEach((button, index) => {\\n    console.log(`Button ${index + 1}:`, button.textContent);\\n});\\n\\n// Get all input fields\\nconst allInputs = document.querySelectorAll('input');\\nconsole.log(\\\"\\\\n=== ALL INPUTS ===\\\");\\nallInputs.forEach((input, index) => {\\n    console.log(`Input ${index + 1}:`, input.type, input.name);\\n});\\n\\n// Get all links\\nconst allLinks = document.querySelectorAll('a');\\nconsole.log(\\\"\\\\n=== ALL LINKS ===\\\");\\nallLinks.forEach((link, index) => {\\n    console.log(`Link ${index + 1}:`, link.href, link.textContent);\\n});\\n\\n// Get all images\\nconst allImages = document.querySelectorAll('img');\\nconsole.log(\\\"\\\\n=== ALL IMAGES ===\\\");\\nallImages.forEach((img, index) => {\\n    console.log(`Image ${index + 1}:`, img.src, img.alt);\\n});\\n\\n// Performance comparison\\nconsole.log(\\\"\\\\n=== PERFORMANCE COMPARISON ===\\\");\\n\\n// getElementById is fastest for single elements\\nconsole.time(\\\"getElementById\\\");\\nfor (let i = 0; i < 1000; i++) {\\n    document.getElementById('test-id');\\n}\\nconsole.timeEnd(\\\"getElementById\\\");\\n\\n// querySelector is slower but more flexible\\nconsole.time(\\\"querySelector\\\");\\nfor (let i = 0; i < 1000; i++) {\\n    document.querySelector('#test-id');\\n}\\nconsole.timeEnd(\\\"querySelector\\\");\\n\\n// querySelectorAll for multiple elements\\nconsole.time(\\\"querySelectorAll\\\");\\nfor (let i = 0; i < 100; i++) {\\n    document.querySelectorAll('.test-class');\\n}\\nconsole.timeEnd(\\\"querySelectorAll\\\");\\n\\n// getElementsByClassName for multiple elements\\nconsole.time(\\\"getElementsByClassName\\\");\\nfor (let i = 0; i < 100; i++) {\\n    document.getElementsByClassName('test-class');\\n}\\nconsole.timeEnd(\\\"getElementsByClassName\\\");\\n\\n// Common patterns\\nconsole.log(\\\"\\\\n=== COMMON PATTERNS ===\\\");\\n\\n// Check if element exists\\nfunction elementExists(selector) {\\n    return document.querySelector(selector) !== null;\\n}\\n\\nconsole.log(\\\"Element exists:\\\", elementExists('#main-heading'));\\nconsole.log(\\\"Element exists:\\\", elementExists('.non-existent'));\\n\\n// Get element or create it\\nfunction getOrCreateElement(selector, tagName = 'div') {\\n    let element = document.querySelector(selector);\\n    if (!element) {\\n        element = document.createElement(tagName);\\n        element.className = selector.replace('.', '');\\n        document.body.appendChild(element);\\n    }\\n    return element;\\n}\\n\\n// Count elements\\nfunction countElements(selector) {\\n    return document.querySelectorAll(selector).length;\\n}\\n\\nconsole.log(\\\"Number of divs:\\\", countElements('div'));\\nconsole.log(\\\"Number of buttons:\\\", countElements('button'));\\nconsole.log(\\\"Number of inputs:\\\", countElements('input'));\\n\\n// Get elements by data attributes\\nfunction getElementsByDataAttribute(dataAttr, value) {\\n    const selector = value ? `[data-${dataAttr}=\\\"${value}\\\"]` : `[data-${dataAttr}]`;\\n    return document.querySelectorAll(selector);\\n}\\n\\nconsole.log(\\\"\\\\n=== DATA ATTRIBUTES ===\\\");\\nconst dataElements = getElementsByDataAttribute('test');\\nconsole.log(\\\"Elements with data-test:\\\", dataElements);\\n\\n// Get elements by custom attributes\\nfunction getElementsByCustomAttribute(attr, value) {\\n    const selector = value ? `[${attr}=\\\"${value}\\\"]` : `[${attr}]`;\\n    return document.querySelectorAll(selector);\\n}\\n\\n// Error handling\\nfunction safeQuerySelector(selector) {\\n    try {\\n        return document.querySelector(selector);\\n    } catch (error) {\\n        console.error(`Invalid selector: ${selector}`, error);\\n        return null;\\n    }\\n}\\n\\nconsole.log(\\\"\\\\n=== ERROR HANDLING ===\\\");\\nconst validElement = safeQuerySelector('#main-heading');\\nconst invalidElement = safeQuerySelector('invalid[selector');\\n\\n// Best practices\\nconsole.log(\\\"\\\\n=== BEST PRACTICES ===\\\");\\nconsole.log(\\\"1. Use getElementById for single elements by ID\\\");\\nconsole.log(\\\"2. Use querySelector for complex selectors\\\");\\nconsole.log(\\\"3. Use querySelectorAll for multiple elements\\\");\\nconsole.log(\\\"4. Cache frequently accessed elements\\\");\\nconsole.log(\\\"5. Use specific selectors for better performance\\\");\\nconsole.log(\\\"6. Check if element exists before using it\\\");\\nconsole.log(\\\"7. Use data attributes for custom selectors\\\");\\n\\n// Caching elements\\nconsole.log(\\\"\\\\n=== CACHING ELEMENTS ===\\\");\\nconst cachedElements = {\\n    mainHeading: document.getElementById('main-heading'),\\n    container: document.querySelector('.container'),\\n    buttons: document.querySelectorAll('button'),\\n    inputs: document.querySelectorAll('input')\\n};\\n\\nconsole.log(\\\"Cached elements:\\\", cachedElements);\\n\\n// Dynamic selectors\\nfunction createDynamicSelector(tag, className, id) {\\n    let selector = tag || 'div';\\n    if (id) selector += `#${id}`;\\n    if (className) selector += `.${className}`;\\n    return selector;\\n}\\n\\nconst dynamicSelector = createDynamicSelector('button', 'primary', 'submit-btn');\\nconsole.log(\\\"Dynamic selector:\\\", dynamicSelector);\\nconst dynamicElement = document.querySelector(dynamicSelector);\\nconsole.log(\\\"Dynamic element:\\\", dynamicElement);"
  },
  {
    "question": "How to edit text with DOM manipulation in JavaScript?",
    "answer": "**Editing Text with DOM Manipulation**\n\nYou can edit text content of HTML elements using DOM manipulation.\n\n**Example:**\n```javascript\nconst title = document.querySelector('#main-heading');\n\ntitle.style.color = \"red\";\nconsole.log(title) // <= to view results\n```\n\n**How it works:**\n- **Select element:** Use `querySelector` or `getElementById` to get the element\n- **Modify style:** Use `element.style.property = value` to change appearance\n- **View results:** Use `console.log()` to see the changes\n- **Direct modification:** Changes are applied immediately to the DOM\n\n**Key concepts:**\n- **Style property:** Use `style.property` to change CSS properties\n- **Camel case:** Use camelCase for CSS properties (e.g., `backgroundColor`)\n- **String values:** CSS values are strings (e.g., `\"red\"`, `\"20px\"`)\n- **Immediate effect:** Changes are visible right away\n- **Element reference:** Need to select element first before modifying",
    "type": "javascript",
    "tags": ["javascript", "dom", "text-editing", "style-manipulation"],
    "code": "// Basic text editing with DOM manipulation\nconst title = document.querySelector('#main-heading');\n\ntitle.style.color = \"red\";\nconsole.log(\"Title element:\", title); // <= to view results\n\n// More examples of text editing\nconsole.log(\"\\n=== MORE TEXT EDITING EXAMPLES ===\");\n\n// Change text content\nconst heading = document.querySelector('h1');\nif (heading) {\n    heading.textContent = \"New Heading Text\";\n    console.log(\"Updated heading:\", heading.textContent);\n}\n\n// Change innerHTML (includes HTML tags)\nconst paragraph = document.querySelector('p');\nif (paragraph) {\n    paragraph.innerHTML = \"This is <strong>bold</strong> and <em>italic</em> text\";\n    console.log(\"Updated paragraph:\", paragraph.innerHTML);\n}\n\n// Change innerText (only visible text)\nconst div = document.querySelector('div');\nif (div) {\n    div.innerText = \"This is plain text without HTML tags\";\n    console.log(\"Updated div:\", div.innerText);\n}\n\n// Style manipulation examples\nconsole.log(\"\\n=== STYLE MANIPULATION ===\");\n\n// Change multiple styles\nconst element = document.querySelector('.editable');\nif (element) {\n    element.style.color = \"blue\";\n    element.style.fontSize = \"24px\";\n    element.style.fontWeight = \"bold\";\n    element.style.backgroundColor = \"yellow\";\n    element.style.padding = \"10px\";\n    element.style.border = \"2px solid black\";\n    element.style.borderRadius = \"5px\";\n    \n    console.log(\"Styled element:\", element);\n}\n\n// Practical examples\n\n// Change button text and style\nfunction updateButton(buttonId, newText, newColor) {\n    const button = document.getElementById(buttonId);\n    if (button) {\n        button.textContent = newText;\n        button.style.backgroundColor = newColor;\n        button.style.color = \"white\";\n        button.style.padding = \"10px 20px\";\n        button.style.border = \"none\";\n        button.style.borderRadius = \"5px\";\n        button.style.cursor = \"pointer\";\n        \n        console.log(`Button ${buttonId} updated:`);\n        console.log(`Text: ${button.textContent}`);\n        console.log(`Background: ${button.style.backgroundColor}`);\n    }\n}\n\n// Update multiple buttons\nupdateButton(\"btn1\", \"Click Me!\", \"#007bff\");\nupdateButton(\"btn2\", \"Submit\", \"#28a745\");\nupdateButton(\"btn3\", \"Cancel\", \"#dc3545\");\n\n// Change input placeholder and style\nfunction updateInput(inputId, newPlaceholder, newValue) {\n    const input = document.getElementById(inputId);\n    if (input) {\n        input.placeholder = newPlaceholder;\n        input.value = newValue;\n        input.style.border = \"2px solid #007bff\";\n        input.style.borderRadius = \"5px\";\n        input.style.padding = \"8px\";\n        input.style.fontSize = \"16px\";\n        \n        console.log(`Input ${inputId} updated:`);\n        console.log(`Placeholder: ${input.placeholder}`);\n        console.log(`Value: ${input.value}`);\n    }\n}\n\n// Update input fields\nupdateInput(\"username\", \"Enter your username\", \"\");\nupdateInput(\"email\", \"Enter your email\", \"\");\nupdateInput(\"password\", \"Enter your password\", \"\");\n\n// Change link text and href\nfunction updateLink(linkId, newText, newHref) {\n    const link = document.getElementById(linkId);\n    if (link) {\n        link.textContent = newText;\n        link.href = newHref;\n        link.style.color = \"#007bff\";\n        link.style.textDecoration = \"underline\";\n        \n        console.log(`Link ${linkId} updated:`);\n        console.log(`Text: ${link.textContent}`);\n        console.log(`Href: ${link.href}`);\n    }\n}\n\n// Update links\nupdateLink(\"link1\", \"Visit Google\", \"https://www.google.com\");\nupdateLink(\"link2\", \"Visit GitHub\", \"https://www.github.com\");\n\n// Change image src and alt\nfunction updateImage(imageId, newSrc, newAlt) {\n    const image = document.getElementById(imageId);\n    if (image) {\n        image.src = newSrc;\n        image.alt = newAlt;\n        image.style.border = \"2px solid #ddd\";\n        image.style.borderRadius = \"5px\";\n        image.style.maxWidth = \"100%\";\n        image.style.height = \"auto\";\n        \n        console.log(`Image ${imageId} updated:`);\n        console.log(`Src: ${image.src}`);\n        console.log(`Alt: ${image.alt}`);\n    }\n}\n\n// Update images\nupdateImage(\"img1\", \"https://via.placeholder.com/300x200\", \"Placeholder image\");\nupdateImage(\"img2\", \"https://via.placeholder.com/400x300\", \"Another placeholder\");\n\n// Advanced text editing\n\n// Add text to existing content\nfunction appendText(elementId, newText) {\n    const element = document.getElementById(elementId);\n    if (element) {\n        element.textContent += newText;\n        console.log(`Appended text to ${elementId}:`, element.textContent);\n    }\n}\n\n// Prepend text to existing content\nfunction prependText(elementId, newText) {\n    const element = document.getElementById(elementId);\n    if (element) {\n        element.textContent = newText + element.textContent;\n        console.log(`Prepended text to ${elementId}:`, element.textContent);\n    }\n}\n\n// Replace text content\nfunction replaceText(elementId, oldText, newText) {\n    const element = document.getElementById(elementId);\n    if (element) {\n        element.textContent = element.textContent.replace(oldText, newText);\n        console.log(`Replaced text in ${elementId}:`, element.textContent);\n    }\n}\n\n// Clear text content\nfunction clearText(elementId) {\n    const element = document.getElementById(elementId);\n    if (element) {\n        element.textContent = \"\";\n        console.log(`Cleared text in ${elementId}`);\n    }\n}\n\n// Conditional text editing\nfunction updateTextConditionally(elementId, condition, trueText, falseText) {\n    const element = document.getElementById(elementId);\n    if (element) {\n        element.textContent = condition ? trueText : falseText;\n        element.style.color = condition ? \"green\" : \"red\";\n        \n        console.log(`Conditional text in ${elementId}:`, element.textContent);\n    }\n}\n\n// Example usage\nupdateTextConditionally(\"status\", true, \"Online\", \"Offline\");\nupdateTextConditionally(\"connection\", false, \"Connected\", \"Disconnected\");\n\n// Text editing with animations\nfunction animateTextChange(elementId, newText, duration = 1000) {\n    const element = document.getElementById(elementId);\n    if (element) {\n        // Fade out\n        element.style.transition = `opacity ${duration/2}ms ease`;\n        element.style.opacity = \"0\";\n        \n        setTimeout(() => {\n            // Change text\n            element.textContent = newText;\n            \n            // Fade in\n            element.style.opacity = \"1\";\n            \n            console.log(`Animated text change in ${elementId}:`, element.textContent);\n        }, duration/2);\n    }\n}\n\n// Animate text changes\nanimateTextChange(\"animated-text\", \"New animated text!\");\n\n// Text editing with validation\nfunction updateTextWithValidation(elementId, newText, validator) {\n    const element = document.getElementById(elementId);\n    if (element) {\n        if (validator(newText)) {\n            element.textContent = newText;\n            element.style.color = \"green\";\n            element.style.border = \"2px solid green\";\n            console.log(`Valid text updated in ${elementId}:`, element.textContent);\n        } else {\n            element.style.color = \"red\";\n            element.style.border = \"2px solid red\";\n            console.log(`Invalid text rejected for ${elementId}:`, newText);\n        }\n    }\n}\n\n// Validation functions\nconst emailValidator = (text) => /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(text);\nconst phoneValidator = (text) => /^\\d{10}$/.test(text);\nconst nameValidator = (text) => text.length >= 2 && /^[a-zA-Z\\s]+$/.test(text);\n\n// Update with validation\nupdateTextWithValidation(\"email-field\", \"john@example.com\", emailValidator);\nupdateTextWithValidation(\"phone-field\", \"1234567890\", phoneValidator);\nupdateTextWithValidation(\"name-field\", \"John Doe\", nameValidator);\n\n// Common patterns\nconsole.log(\"\\n=== COMMON PATTERNS ===\");\nconsole.log(\"1. Change text: element.textContent = 'new text'\");\nconsole.log(\"2. Change HTML: element.innerHTML = '<strong>bold</strong>'\");\nconsole.log(\"3. Change style: element.style.property = 'value'\");\nconsole.log(\"4. Append text: element.textContent += 'more text'\");\nconsole.log(\"5. Clear text: element.textContent = ''\");\nconsole.log(\"6. Conditional text: element.textContent = condition ? 'yes' : 'no'\");\n\n// Best practices\nconsole.log(\"\\n=== BEST PRACTICES ===\");\nconsole.log(\"1. Always check if element exists before editing\");\nconsole.log(\"2. Use textContent for plain text\");\nconsole.log(\"3. Use innerHTML for HTML content\");\nconsole.log(\"4. Use camelCase for CSS properties\");\nconsole.log(\"5. Validate input before updating text\");\nconsole.log(\"6. Use transitions for smooth changes\");\nconsole.log(\"7. Cache element references for performance\");\n\n// Error handling\nfunction safeTextUpdate(elementId, newText) {\n    try {\n        const element = document.getElementById(elementId);\n        if (!element) {\n            throw new Error(`Element with id '${elementId}' not found`);\n        }\n        \n        element.textContent = newText;\n        console.log(`Successfully updated ${elementId}:`, element.textContent);\n        return true;\n    } catch (error) {\n        console.error(`Failed to update ${elementId}:`, error.message);\n        return false;\n    }\n}\n\n// Safe text updates\nsafeTextUpdate(\"existing-element\", \"Updated text\");\nsafeTextUpdate(\"non-existent-element\", \"This will fail\");"
  },
  {
    "question": "How to edit list items with DOM manipulation?",
    "answer": "**Editing List Items with DOM Manipulation**\n\nYou can edit list items by selecting them and modifying their properties.\n\n**Example:**\n```javascript\nconst choice = document.querySelectorAll(\".choice\");\nfor (let i = 0; i < choice.length; i++) {\n    choice[i].style.backgroundColor = \"orange\";\n    choice[i].style.color = \"purple\";\n    choice[i].style.fontSize = \"5rem\";\n    choice[i].style.fontWeight = \"5rem\";\n};\n```\n\n**How it works:**\n- **Select all items:** Use `querySelectorAll` to get all elements with class \"choice\"\n- **Loop through:** Use a `for` loop to iterate through each element\n- **Modify styles:** Change `backgroundColor`, `color`, `fontSize`, `fontWeight` for each item\n- **Apply changes:** Each list item gets the new styling\n\n**Key concepts:**\n- **Multiple elements:** `querySelectorAll` returns a NodeList\n- **Loop iteration:** Use `for` loop to access each element\n- **Style properties:** Modify CSS properties using `style.property`\n- **Bulk changes:** Apply same changes to multiple elements\n- **Index access:** Use `[i]` to access each element in the loop",
    "type": "javascript",
    "tags": ["javascript", "dom", "list-items", "loops", "style-manipulation"],
    "code": "// Basic list item editing\nconst choice = document.querySelectorAll(\".choice\");\nfor (let i = 0; i < choice.length; i++) {\n    choice[i].style.backgroundColor = \"orange\";\n    choice[i].style.color = \"purple\";\n    choice[i].style.fontSize = \"5rem\";\n    choice[i].style.fontWeight = \"5rem\";\n}\n\n// More examples of list item manipulation\nconsole.log(\"\\n=== MORE LIST ITEM EXAMPLES ===\");\n\n// Get all list items\nconst allListItems = document.querySelectorAll('li');\nconsole.log(\"Total list items found:\", allListItems.length);\n\n// Style all list items\nallListItems.forEach((item, index) => {\n    item.style.padding = \"10px\";\n    item.style.margin = \"5px 0\";\n    item.style.border = \"1px solid #ddd\";\n    item.style.borderRadius = \"5px\";\n    item.style.backgroundColor = index % 2 === 0 ? \"#f9f9f9\" : \"#ffffff\";\n    \n    console.log(`Styled list item ${index + 1}:`, item.textContent);\n});\n\n// Practical examples\n\n// Change text content of list items\nfunction updateListItems(listSelector, newTexts) {\n    const items = document.querySelectorAll(listSelector);\n    \n    items.forEach((item, index) => {\n        if (newTexts[index]) {\n            item.textContent = newTexts[index];\n            console.log(`Updated item ${index + 1}:`, item.textContent);\n        }\n    });\n}\n\n// Update list items with new text\nconst newTexts = [\"First item\", \"Second item\", \"Third item\", \"Fourth item\"];\nupdateListItems('.choice', newTexts);\n\n// Add click handlers to list items\nfunction addClickHandlers(listSelector) {\n    const items = document.querySelectorAll(listSelector);\n    \n    items.forEach((item, index) => {\n        item.style.cursor = \"pointer\";\n        item.style.transition = \"background-color 0.3s ease\";\n        \n        item.addEventListener('click', function() {\n            // Remove active class from all items\n            items.forEach(i => i.classList.remove('active'));\n            \n            // Add active class to clicked item\n            this.classList.add('active');\n            this.style.backgroundColor = \"#007bff\";\n            this.style.color = \"white\";\n            \n            console.log(`Clicked item ${index + 1}:`, this.textContent);\n        });\n        \n        // Hover effects\n        item.addEventListener('mouseenter', function() {\n            if (!this.classList.contains('active')) {\n                this.style.backgroundColor = \"#e9ecef\";\n            }\n        });\n        \n        item.addEventListener('mouseleave', function() {\n            if (!this.classList.contains('active')) {\n                this.style.backgroundColor = \"\";\n            }\n        });\n    });\n}\n\n// Add click handlers\naddClickHandlers('.choice');\n\n// Create dynamic list items\nfunction createListItems(containerId, items) {\n    const container = document.getElementById(containerId);\n    if (!container) return;\n    \n    // Clear existing items\n    container.innerHTML = '';\n    \n    items.forEach((item, index) => {\n        const li = document.createElement('li');\n        li.textContent = item;\n        li.className = 'dynamic-item';\n        li.style.padding = \"8px 12px\";\n        li.style.margin = \"4px 0\";\n        li.style.backgroundColor = \"#f8f9fa\";\n        li.style.border = \"1px solid #dee2e6\";\n        li.style.borderRadius = \"4px\";\n        li.style.cursor = \"pointer\";\n        \n        // Add click handler\n        li.addEventListener('click', function() {\n            console.log(`Clicked: ${this.textContent}`);\n            this.style.backgroundColor = \"#007bff\";\n            this.style.color = \"white\";\n        });\n        \n        container.appendChild(li);\n    });\n    \n    console.log(`Created ${items.length} list items in ${containerId}`);\n}\n\n// Create dynamic list\nconst dynamicItems = [\"Apple\", \"Banana\", \"Orange\", \"Grape\", \"Strawberry\"];\ncreateListItems(\"dynamic-list\", dynamicItems);\n\n// Filter list items\nfunction filterListItems(listSelector, searchTerm) {\n    const items = document.querySelectorAll(listSelector);\n    \n    items.forEach(item => {\n        const text = item.textContent.toLowerCase();\n        const matches = text.includes(searchTerm.toLowerCase());\n        \n        if (matches) {\n            item.style.display = \"block\";\n            item.style.backgroundColor = \"#d4edda\";\n            item.style.border = \"1px solid #c3e6cb\";\n        } else {\n            item.style.display = \"none\";\n        }\n    });\n    \n    console.log(`Filtered list items by: ${searchTerm}`);\n}\n\n// Filter examples\nfilterListItems('.choice', \"item\");\n\n// Sort list items\nfunction sortListItems(listSelector, ascending = true) {\n    const container = document.querySelector(listSelector).parentNode;\n    const items = Array.from(document.querySelectorAll(listSelector));\n    \n    items.sort((a, b) => {\n        const textA = a.textContent.toLowerCase();\n        const textB = b.textContent.toLowerCase();\n        \n        if (ascending) {\n            return textA.localeCompare(textB);\n        } else {\n            return textB.localeCompare(textA);\n        }\n    });\n    \n    // Reorder DOM elements\n    items.forEach(item => container.appendChild(item));\n    \n    console.log(`Sorted list items ${ascending ? 'ascending' : 'descending'}`);\n}\n\n// Sort examples\nsortListItems('.choice', true);\n\n// Add/remove list items\nfunction addListItem(containerId, text) {\n    const container = document.getElementById(containerId);\n    if (!container) return;\n    \n    const li = document.createElement('li');\n    li.textContent = text;\n    li.className = 'new-item';\n    li.style.padding = \"8px 12px\";\n    li.style.margin = \"4px 0\";\n    li.style.backgroundColor = \"#fff3cd\";\n    li.style.border = \"1px solid #ffeaa7\";\n    li.style.borderRadius = \"4px\";\n    \n    // Add remove button\n    const removeBtn = document.createElement('button');\n    removeBtn.textContent = \"×\";\n    removeBtn.style.float = \"right\";\n    removeBtn.style.background = \"#dc3545\";\n    removeBtn.style.color = \"white\";\n    removeBtn.style.border = \"none\";\n    removeBtn.style.borderRadius = \"50%\";\n    removeBtn.style.width = \"20px\";\n    removeBtn.style.height = \"20px\";\n    removeBtn.style.cursor = \"pointer\";\n    \n    removeBtn.addEventListener('click', function() {\n        li.remove();\n        console.log(`Removed item: ${text}`);\n    });\n    \n    li.appendChild(removeBtn);\n    container.appendChild(li);\n    \n    console.log(`Added new item: ${text}`);\n}\n\n// Add new items\naddListItem(\"dynamic-list\", \"New Item 1\");\naddListItem(\"dynamic-list\", \"New Item 2\");\n\n// Toggle list item visibility\nfunction toggleListItem(listSelector, index) {\n    const items = document.querySelectorAll(listSelector);\n    if (items[index]) {\n        const isVisible = items[index].style.display !== \"none\";\n        items[index].style.display = isVisible ? \"none\" : \"block\";\n        \n        console.log(`Toggled item ${index + 1}: ${isVisible ? 'hidden' : 'visible'}`);\n    }\n}\n\n// Toggle examples\ntoggleListItem('.choice', 0);\ntoggleListItem('.choice', 1);\n\n// Highlight list items\nfunction highlightListItems(listSelector, highlightClass = 'highlight') {\n    const items = document.querySelectorAll(listSelector);\n    \n    items.forEach((item, index) => {\n        if (index % 2 === 0) {\n            item.classList.add(highlightClass);\n            item.style.backgroundColor = \"#fff3cd\";\n            item.style.border = \"1px solid #ffeaa7\";\n        }\n    });\n    \n    console.log(`Highlighted alternating items in ${listSelector}`);\n}\n\n// Highlight examples\nhighlightListItems('.choice');\n\n// Common patterns\nconsole.log(\"\\n=== COMMON PATTERNS ===\");\nconsole.log(\"1. Select all: document.querySelectorAll('.class')\");\nconsole.log(\"2. Loop through: for (let i = 0; i < items.length; i++)\");\nconsole.log(\"3. Style items: items[i].style.property = 'value'\");\nconsole.log(\"4. Add events: items[i].addEventListener('click', handler)\");\nconsole.log(\"5. Create new: document.createElement('li')\");\nconsole.log(\"6. Append to list: container.appendChild(newItem)\");\n\n// Best practices\nconsole.log(\"\\n=== BEST PRACTICES ===\");\nconsole.log(\"1. Use forEach for cleaner code\");\nconsole.log(\"2. Cache DOM queries for performance\");\nconsole.log(\"3. Use CSS classes instead of inline styles\");\nconsole.log(\"4. Add event listeners efficiently\");\nconsole.log(\"5. Use data attributes for metadata\");\nconsole.log(\"6. Implement proper error handling\");\nconsole.log(\"7. Use document fragments for bulk operations\");\n\n// Performance optimization\nfunction optimizeListUpdates(listSelector) {\n    const items = document.querySelectorAll(listSelector);\n    const fragment = document.createDocumentFragment();\n    \n    // Create new items in document fragment\n    items.forEach(item => {\n        const newItem = item.cloneNode(true);\n        newItem.style.backgroundColor = \"#e9ecef\";\n        newItem.style.padding = \"10px\";\n        fragment.appendChild(newItem);\n    });\n    \n    // Replace all items at once\n    const container = items[0].parentNode;\n    container.innerHTML = '';\n    container.appendChild(fragment);\n    \n    console.log(`Optimized update for ${items.length} items`);\n}\n\n// Error handling\nfunction safeListUpdate(listSelector, updateFunction) {\n    try {\n        const items = document.querySelectorAll(listSelector);\n        if (items.length === 0) {\n            throw new Error(`No elements found with selector: ${listSelector}`);\n        }\n        \n        updateFunction(items);\n        console.log(`Successfully updated ${items.length} items`);\n        return true;\n    } catch (error) {\n        console.error(`Failed to update list items:`, error.message);\n        return false;\n    }\n}\n\n// Safe list update\nsafeListUpdate('.choice', (items) => {\n    items.forEach(item => {\n        item.style.border = \"2px solid #007bff\";\n        item.style.borderRadius = \"8px\";\n    });\n});"
  },
  {
    "question": "What's the difference between innerText, textContent, and innerHTML?",
    "answer": "**innerText vs textContent vs innerHTML**\n\nThese are three different properties for accessing and modifying content in HTML elements.\n\n**innerText:**\n- Shows only the **visible text** inside an element\n- Respects CSS styling (hidden elements are ignored)\n- Returns formatted text as it appears to users\n\n**textContent:**\n- Shows **all text** inside an element, even if hidden\n- Ignores CSS styling and HTML tags\n- Returns plain text without formatting\n\n**innerHTML:**\n- Shows **all HTML content** (tags + text) inside an element\n- Includes HTML markup and formatting\n- Can be used to modify both text and HTML structure\n\n**Key differences:**\n- **Visibility:** innerText respects CSS, textContent doesn't\n- **Formatting:** innerText preserves formatting, textContent strips it\n- **HTML:** innerHTML includes HTML tags, others don't\n- **Performance:** textContent is fastest, innerHTML is slowest\n- **Security:** innerHTML can execute scripts, others are safer",
    "type": "javascript",
    "tags": ["javascript", "dom", "innerText", "textContent", "innerHTML", "content-properties"],
    "code": "// Example HTML element for testing\nconst bigBox = document.querySelector('.choice');\n\n// Basic usage\nconsole.log(\"\\n=== BASIC USAGE ===\");\nconsole.log(\"innerText:\", bigBox.innerText);\nconsole.log(\"textContent:\", bigBox.textContent);\nconsole.log(\"innerHTML:\", bigBox.innerHTML);\n\n// More detailed examples\nconsole.log(\"\\n=== DETAILED EXAMPLES ===\");\n\n// Create a test element with mixed content\nconst testElement = document.createElement('div');\ntestElement.innerHTML = `\n    <p>Visible paragraph</p>\n    <p style=\"display: none;\">Hidden paragraph</p>\n    <span>Visible span</span>\n    <div style=\"visibility: hidden;\">Hidden div</div>\n    <strong>Bold text</strong>\n    <em>Italic text</em>\n`;\n\ndocument.body.appendChild(testElement);\n\nconsole.log(\"\\nTest element content:\");\nconsole.log(\"innerText:\", testElement.innerText);\nconsole.log(\"textContent:\", testElement.textContent);\nconsole.log(\"innerHTML:\", testElement.innerHTML);\n\n// Practical examples\n\n// Setting content\nfunction demonstrateContentSetting() {\n    const demoElement = document.createElement('div');\n    demoElement.id = 'demo-content';\n    document.body.appendChild(demoElement);\n    \n    console.log(\"\\n=== SETTING CONTENT ===\");\n    \n    // Using innerText\n    demoElement.innerText = \"This is plain text\";\n    console.log(\"After innerText:\", demoElement.innerHTML);\n    \n    // Using textContent\n    demoElement.textContent = \"This is also plain text\";\n    console.log(\"After textContent:\", demoElement.innerHTML);\n    \n    // Using innerHTML\n    demoElement.innerHTML = \"<strong>This is <em>formatted</em> text</strong>\";\n    console.log(\"After innerHTML:\", demoElement.innerHTML);\n    \n    // Clean up\n    demoElement.remove();\n}\n\ndemonstrateContentSetting();\n\n// Performance comparison\nfunction performanceTest() {\n    const testData = \"<p>Test content</p>\".repeat(1000);\n    const element = document.createElement('div');\n    \n    console.log(\"\\n=== PERFORMANCE TEST ===\");\n    \n    // innerHTML performance\n    console.time(\"innerHTML\");\n    for (let i = 0; i < 100; i++) {\n        element.innerHTML = testData;\n    }\n    console.timeEnd(\"innerHTML\");\n    \n    // textContent performance\n    console.time(\"textContent\");\n    for (let i = 0; i < 100; i++) {\n        element.textContent = testData;\n    }\n    console.timeEnd(\"textContent\");\n    \n    // innerText performance\n    console.time(\"innerText\");\n    for (let i = 0; i < 100; i++) {\n        element.innerText = testData;\n    }\n    console.timeEnd(\"innerText\");\n}\n\nperformanceTest();\n\n// Security considerations\nfunction securityDemo() {\n    console.log(\"\\n=== SECURITY CONSIDERATIONS ===\");\n    \n    const safeElement = document.createElement('div');\n    const unsafeElement = document.createElement('div');\n    \n    // Safe: textContent and innerText don't execute scripts\n    const maliciousContent = '<script>alert(\"XSS Attack!\")</script><p>Safe text</p>';\n    \n    safeElement.textContent = maliciousContent;\n    console.log(\"Safe (textContent):\", safeElement.innerHTML);\n    \n    safeElement.innerText = maliciousContent;\n    console.log(\"Safe (innerText):\", safeElement.innerHTML);\n    \n    // Unsafe: innerHTML can execute scripts\n    unsafeElement.innerHTML = maliciousContent;\n    console.log(\"Unsafe (innerHTML):\", unsafeElement.innerHTML);\n    \n    // Clean up\n    safeElement.remove();\n    unsafeElement.remove();\n}\n\nsecurityDemo();\n\n// Real-world examples\n\n// Text extraction\nfunction extractText(element) {\n    return {\n        visibleText: element.innerText,\n        allText: element.textContent,\n        htmlContent: element.innerHTML\n    };\n}\n\n// Text replacement\nfunction replaceText(element, newText, method = 'textContent') {\n    switch (method) {\n        case 'innerText':\n            element.innerText = newText;\n            break;\n        case 'textContent':\n            element.textContent = newText;\n            break;\n        case 'innerHTML':\n            element.innerHTML = newText;\n            break;\n    }\n}\n\n// Content validation\nfunction validateContent(element) {\n    const hasHtml = element.innerHTML !== element.textContent;\n    const hasHiddenContent = element.textContent.length > element.innerText.length;\n    \n    return {\n        hasHtml,\n        hasHiddenContent,\n        textLength: element.textContent.length,\n        visibleLength: element.innerText.length\n    };\n}\n\n// Example usage\nconst sampleElement = document.createElement('div');\nsampleElement.innerHTML = '<p>Visible</p><p style=\"display:none\">Hidden</p>';\n\nconsole.log(\"\\n=== REAL-WORLD EXAMPLES ===\");\nconsole.log(\"Extracted text:\", extractText(sampleElement));\nconsole.log(\"Content validation:\", validateContent(sampleElement));\n\n// Best practices\nconsole.log(\"\\n=== BEST PRACTICES ===\");\nconsole.log(\"1. Use textContent for plain text (fastest, safest)\");\nconsole.log(\"2. Use innerText when you need visible text only\");\nconsole.log(\"3. Use innerHTML only when you need HTML formatting\");\nconsole.log(\"4. Always sanitize content when using innerHTML\");\nconsole.log(\"5. Consider performance implications for large content\");\nconsole.log(\"6. Use textContent for user input to prevent XSS\");\n\n// Common patterns\nconsole.log(\"\\n=== COMMON PATTERNS ===\");\nconsole.log(\"1. Get plain text: element.textContent\");\nconsole.log(\"2. Get visible text: element.innerText\");\nconsole.log(\"3. Get HTML content: element.innerHTML\");\nconsole.log(\"4. Set plain text: element.textContent = 'text'\");\nconsole.log(\"5. Set HTML: element.innerHTML = '<p>text</p>'\");\nconsole.log(\"6. Clear content: element.textContent = ''\");\n\n// Clean up\nsampleElement.remove();"
  },
  {
    "question": "How do you add a new content to your HTML using JavaScript?",
    "answer": "**Adding New Content to HTML with JavaScript**\n\nYou can dynamically add new content to your HTML using JavaScript DOM methods.\n\n**Basic Steps:**\n1. **Create it:** Use `document.createElement()` to create a new element\n2. **Fill it:** Set the content using `textContent`, `innerText`, or `innerHTML`\n3. **Add it:** Use methods like `append()`, `appendChild()`, or `insertBefore()` to add it to the DOM\n\n**Example:**\n```javascript\nconst bigBox = document.querySelector('.choice');\nconst box = document.createElement('div');\nbox.textContent = \"Iron Man\";\nbigBox.append(box);\n```\n\n**Key methods:**\n- **`createElement(tagName)`** - Creates a new HTML element\n- **`textContent`** - Sets plain text content\n- **`innerText`** - Sets visible text content\n- **`innerHTML`** - Sets HTML content with tags\n- **`append(element)`** - Adds element at the end\n- **`appendChild(element)`** - Adds element at the end (older method)\n- **`prepend(element)`** - Adds element at the beginning\n- **`insertBefore(newElement, referenceElement)`** - Inserts before a specific element",
    "type": "javascript",
    "tags": ["javascript", "dom", "createElement", "append", "content-addition", "html-manipulation"],
    "code": "// Basic example\nconst bigBox = document.querySelector('.choice');\nconst box = document.createElement('div');\nbox.textContent = \"Iron Man\";\n// Adding Elements innerText can also be used\nbigBox.append(box);\n\n// More comprehensive examples\nconsole.log(\"\\n=== CREATING ELEMENTS ===\");\n\n// Create different types of elements\nconst paragraph = document.createElement('p');\nparagraph.textContent = \"This is a paragraph\";\n\nconst heading = document.createElement('h2');\nheading.textContent = \"This is a heading\";\n\nconst button = document.createElement('button');\nbutton.textContent = \"Click me\";\nbutton.type = \"button\";\n\nconst input = document.createElement('input');\ninput.type = \"text\";\ninput.placeholder = \"Enter text here\";\n\nconst image = document.createElement('img');\nimage.src = \"https://via.placeholder.com/150\";\nimage.alt = \"Placeholder image\";\n\n// Create a container to hold all elements\nconst container = document.createElement('div');\ncontainer.className = 'dynamic-content';\n\n// Add elements to container\ncontainer.append(heading, paragraph, button, input, image);\n\n// Add container to page\nif (bigBox) {\n    bigBox.append(container);\n}\n\nconsole.log(\"Created elements:\", container.children);\n\n// Advanced content creation\n\n// Create element with attributes\nfunction createElementWithAttributes(tagName, attributes, content) {\n    const element = document.createElement(tagName);\n    \n    // Set attributes\n    Object.entries(attributes).forEach(([key, value]) => {\n        element.setAttribute(key, value);\n    });\n    \n    // Set content\n    if (content) {\n        if (typeof content === 'string') {\n            element.textContent = content;\n        } else if (content.innerHTML) {\n            element.innerHTML = content.innerHTML;\n        }\n    }\n    \n    return element;\n}\n\n// Example usage\nconst styledDiv = createElementWithAttributes('div', {\n    'class': 'styled-element',\n    'id': 'unique-id',\n    'data-custom': 'custom-value'\n}, 'Styled content');\n\nconsole.log(\"\\n=== CREATED ELEMENT WITH ATTRIBUTES ===\");\nconsole.log(\"Element:\", styledDiv);\nconsole.log(\"Classes:\", styledDiv.className);\nconsole.log(\"ID:\", styledDiv.id);\nconsole.log(\"Custom attribute:\", styledDiv.getAttribute('data-custom'));\n\n// Create element with HTML content\nfunction createElementWithHTML(tagName, htmlContent, attributes = {}) {\n    const element = document.createElement(tagName);\n    element.innerHTML = htmlContent;\n    \n    Object.entries(attributes).forEach(([key, value]) => {\n        element.setAttribute(key, value);\n    });\n    \n    return element;\n}\n\n// Example with HTML content\nconst htmlElement = createElementWithHTML('div', \n    '<h3>Title</h3><p>Paragraph with <strong>bold</strong> text</p>',\n    { 'class': 'html-content' }\n);\n\nconsole.log(\"\\n=== CREATED ELEMENT WITH HTML ===\");\nconsole.log(\"HTML content:\", htmlElement.innerHTML);\n\n// Different ways to add content\n\n// Method 1: append() - adds at the end\nfunction addWithAppend(parent, element) {\n    parent.append(element);\n}\n\n// Method 2: prepend() - adds at the beginning\nfunction addWithPrepend(parent, element) {\n    parent.prepend(element);\n}\n\n// Method 3: appendChild() - older method, adds at the end\nfunction addWithAppendChild(parent, element) {\n    parent.appendChild(element);\n}\n\n// Method 4: insertBefore() - inserts before a specific element\nfunction addWithInsertBefore(parent, newElement, referenceElement) {\n    parent.insertBefore(newElement, referenceElement);\n}\n\n// Method 5: insertAdjacentElement() - more flexible positioning\nfunction addWithInsertAdjacent(parent, element, position) {\n    parent.insertAdjacentElement(position, element);\n}\n\n// Demonstration of different methods\nconst demoContainer = document.createElement('div');\ndemoContainer.className = 'demo-container';\n\n// Add reference element\nconst referenceElement = document.createElement('div');\nreferenceElement.textContent = 'Reference element';\ndemoContainer.append(referenceElement);\n\n// Add elements using different methods\nconst element1 = document.createElement('div');\nelement1.textContent = 'Added with append';\nelement1.className = 'method-1';\naddWithAppend(demoContainer, element1);\n\nconst element2 = document.createElement('div');\nelement2.textContent = 'Added with prepend';\nelement2.className = 'method-2';\naddWithPrepend(demoContainer, element2);\n\nconst element3 = document.createElement('div');\nelement3.textContent = 'Added with insertBefore';\nelement3.className = 'method-3';\naddWithInsertBefore(demoContainer, element3, referenceElement);\n\nconst element4 = document.createElement('div');\nelement4.textContent = 'Added with insertAdjacent';\nelement4.className = 'method-4';\naddWithInsertAdjacent(demoContainer, element4, 'beforeend');\n\nconsole.log(\"\\n=== DIFFERENT ADDITION METHODS ===\");\nconsole.log(\"Container children:\", Array.from(demoContainer.children).map(el => el.textContent));\n\n// Batch content creation\nfunction createBatchContent(items, containerClass = 'batch-container') {\n    const container = document.createElement('div');\n    container.className = containerClass;\n    \n    items.forEach((item, index) => {\n        const element = document.createElement('div');\n        element.textContent = item;\n        element.className = `item-${index}`;\n        container.append(element);\n    });\n    \n    return container;\n}\n\n// Example batch creation\nconst items = ['Item 1', 'Item 2', 'Item 3', 'Item 4'];\nconst batchContainer = createBatchContent(items);\n\nconsole.log(\"\\n=== BATCH CONTENT CREATION ===\");\nconsole.log(\"Batch container:\", batchContainer);\nconsole.log(\"Number of items:\", batchContainer.children.length);\n\n// Content with event listeners\nfunction createInteractiveElement(tagName, content, eventType, handler) {\n    const element = document.createElement(tagName);\n    element.textContent = content;\n    element.addEventListener(eventType, handler);\n    return element;\n}\n\n// Example interactive element\nconst interactiveButton = createInteractiveElement('button', 'Click me!', 'click', function() {\n    console.log('Button clicked!');\n    this.textContent = 'Clicked!';\n});\n\nconsole.log(\"\\n=== INTERACTIVE ELEMENT ===\");\nconsole.log(\"Interactive button:\", interactiveButton);\n\n// Template-based content creation\nfunction createFromTemplate(template) {\n    const element = document.createElement('div');\n    element.innerHTML = template;\n    return element.firstElementChild;\n}\n\n// Example template\nconst template = `\n    <article class=\"article\">\n        <header>\n            <h2>Article Title</h2>\n        </header>\n        <main>\n            <p>Article content goes here...</p>\n        </main>\n        <footer>\n            <small>Published on ${new Date().toLocaleDateString()}</small>\n        </footer>\n    </article>\n`;\n\nconst articleElement = createFromTemplate(template);\n\nconsole.log(\"\\n=== TEMPLATE-BASED CREATION ===\");\nconsole.log(\"Article element:\", articleElement);\nconsole.log(\"Article HTML:\", articleElement.outerHTML);\n\n// Performance considerations\nfunction performanceTest() {\n    console.log(\"\\n=== PERFORMANCE TEST ===\");\n    \n    const testContainer = document.createElement('div');\n    \n    // Test 1: Individual append operations\n    console.time('Individual appends');\n    for (let i = 0; i < 1000; i++) {\n        const element = document.createElement('div');\n        element.textContent = `Item ${i}`;\n        testContainer.append(element);\n    }\n    console.timeEnd('Individual appends');\n    \n    // Test 2: Document fragment (faster)\n    const fragment = document.createDocumentFragment();\n    console.time('Document fragment');\n    for (let i = 0; i < 1000; i++) {\n        const element = document.createElement('div');\n        element.textContent = `Item ${i}`;\n        fragment.append(element);\n    }\n    testContainer.append(fragment);\n    console.timeEnd('Document fragment');\n    \n    // Clean up\n    testContainer.remove();\n}\n\nperformanceTest();\n\n// Best practices\nconsole.log(\"\\n=== BEST PRACTICES ===\");\nconsole.log(\"1. Use createElement() for new elements\");\nconsole.log(\"2. Use textContent for plain text (safer than innerHTML)\");\nconsole.log(\"3. Use append() instead of appendChild() (modern)\");\nconsole.log(\"4. Use document fragments for multiple elements\");\nconsole.log(\"5. Set attributes after creating the element\");\nconsole.log(\"6. Use insertAdjacentElement() for flexible positioning\");\nconsole.log(\"7. Clean up event listeners when removing elements\");\n\n// Common patterns\nconsole.log(\"\\n=== COMMON PATTERNS ===\");\nconsole.log(\"1. Create: const el = document.createElement('div')\");\nconsole.log(\"2. Configure: el.textContent = 'content'; el.className = 'class'\");\nconsole.log(\"3. Add: parent.append(el)\");\nconsole.log(\"4. Batch: fragment.append(el1, el2, el3); parent.append(fragment)\");\nconsole.log(\"5. Template: element.innerHTML = template; return element.firstElementChild\");\n\n// Clean up demo elements\nif (container && container.parentNode) container.remove();\nif (demoContainer && demoContainer.parentNode) demoContainer.remove();\nif (batchContainer && batchContainer.parentNode) batchContainer.remove();\nif (articleElement && articleElement.parentNode) articleElement.remove();"
  },
  {
    "question": "What are the three ways to add created elements to existing classes?",
    "answer": "**Three Ways to Add Created Elements to Existing Classes**\n\nThere are three main methods to add CSS classes to created elements:\n\n**1. `.className = \"your-class\"`**\n- Sets all classes at once\n- Replaces any existing classes\n- Use when you want to set the complete class list\n\n**2. `.classList.add(\"another-class\")`**\n- Adds one or more classes to existing ones\n- Preserves existing classes\n- Use when you want to add classes without removing others\n\n**3. `.id = \"element-id\"`**\n- Gives the element a unique ID\n- IDs should be unique across the entire document\n- Use for single, unique elements that need to be targeted\n\n**Key differences:**\n- **className:** Replaces all classes\n- **classList.add:** Adds to existing classes\n- **id:** Sets unique identifier (not a class)\n- **Performance:** className is fastest, classList is most flexible\n- **Use cases:** className for complete replacement, classList for additions, id for unique targeting",
    "type": "javascript",
    "tags": ["javascript", "dom", "className", "classList", "id", "css-classes", "element-styling"],
    "code": "// Method 1: className - Set all classes at once\nconst element1 = document.createElement('div');\nelement1.className = \"your-class\";\nconsole.log(\"Method 1 - className:\", element1.className);\n\n// Method 2: classList.add - Add classes to existing ones\nconst element2 = document.createElement('div');\nelement2.className = \"existing-class\";\nelement2.classList.add(\"another-class\");\nconsole.log(\"Method 2 - classList.add:\", element2.className);\n\n// Method 3: id - Set unique identifier\nconst element3 = document.createElement('div');\nelement3.id = \"element-id\";\nelement3.className = \"some-class\";\nconsole.log(\"Method 3 - id:\", element3.id);\nconsole.log(\"Method 3 - className:\", element3.className);\n\n// More comprehensive examples\nconsole.log(\"\\n=== COMPREHENSIVE EXAMPLES ===\");\n\n// className examples\nfunction demonstrateClassName() {\n    const element = document.createElement('div');\n    \n    // Set single class\n    element.className = 'single-class';\n    console.log(\"Single class:\", element.className);\n    \n    // Set multiple classes\n    element.className = 'class1 class2 class3';\n    console.log(\"Multiple classes:\", element.className);\n    \n    // Replace all classes\n    element.className = 'new-class';\n    console.log(\"Replaced classes:\", element.className);\n    \n    return element;\n}\n\ndemonstrateClassName();\n\n// classList examples\nfunction demonstrateClassList() {\n    const element = document.createElement('div');\n    element.className = 'base-class';\n    \n    // Add single class\n    element.classList.add('added-class');\n    console.log(\"After adding one:\", element.className);\n    \n    // Add multiple classes\n    element.classList.add('class-a', 'class-b', 'class-c');\n    console.log(\"After adding multiple:\", element.className);\n    \n    // Check if class exists\n    console.log(\"Has 'base-class':\", element.classList.contains('base-class'));\n    console.log(\"Has 'non-existent':\", element.classList.contains('non-existent'));\n    \n    // Remove classes\n    element.classList.remove('class-a', 'class-b');\n    console.log(\"After removing some:\", element.className);\n    \n    // Toggle class\n    element.classList.toggle('toggle-class');\n    console.log(\"After toggle (add):\", element.className);\n    \n    element.classList.toggle('toggle-class');\n    console.log(\"After toggle (remove):\", element.className);\n    \n    // Replace class\n    element.classList.replace('base-class', 'replaced-class');\n    console.log(\"After replace:\", element.className);\n    \n    return element;\n}\n\ndemonstrateClassList();\n\n// ID examples\nfunction demonstrateId() {\n    const element = document.createElement('div');\n    \n    // Set ID\n    element.id = 'unique-element';\n    console.log(\"Element ID:\", element.id);\n    \n    // Check if ID exists\n    console.log(\"Has ID:\", element.hasAttribute('id'));\n    \n    // Get element by ID\n    const foundElement = document.getElementById('unique-element');\n    console.log(\"Found by ID:\", foundElement === element);\n    \n    // Remove ID\n    element.removeAttribute('id');\n    console.log(\"After removing ID:\", element.id);\n    \n    return element;\n}\n\ndemonstrateId();\n\n// Practical examples\n\n// Create styled button\nfunction createStyledButton(text, classes = [], id = null) {\n    const button = document.createElement('button');\n    button.textContent = text;\n    button.type = 'button';\n    \n    // Add classes\n    if (classes.length > 0) {\n        button.classList.add(...classes);\n    }\n    \n    // Add ID if provided\n    if (id) {\n        button.id = id;\n    }\n    \n    return button;\n}\n\n// Example usage\nconst primaryButton = createStyledButton('Primary Button', ['btn', 'btn-primary'], 'primary-btn');\nconst secondaryButton = createStyledButton('Secondary Button', ['btn', 'btn-secondary']);\nconst dangerButton = createStyledButton('Danger Button', ['btn', 'btn-danger'], 'danger-btn');\n\nconsole.log(\"\\n=== PRACTICAL EXAMPLES ===\");\nconsole.log(\"Primary button:\", primaryButton.outerHTML);\nconsole.log(\"Secondary button:\", secondaryButton.outerHTML);\nconsole.log(\"Danger button:\", dangerButton.outerHTML);\n\n// Create card component\nfunction createCard(title, content, cardType = 'default') {\n    const card = document.createElement('div');\n    card.className = 'card';\n    \n    const cardHeader = document.createElement('div');\n    cardHeader.className = 'card-header';\n    cardHeader.textContent = title;\n    \n    const cardBody = document.createElement('div');\n    cardBody.className = 'card-body';\n    cardBody.textContent = content;\n    \n    // Add type-specific class\n    card.classList.add(`card-${cardType}`);\n    \n    // Add unique ID\n    card.id = `card-${Date.now()}`;\n    \n    card.append(cardHeader, cardBody);\n    \n    return card;\n}\n\n// Example cards\nconst infoCard = createCard('Info Card', 'This is an info card', 'info');\nconst warningCard = createCard('Warning Card', 'This is a warning card', 'warning');\nconst successCard = createCard('Success Card', 'This is a success card', 'success');\n\nconsole.log(\"\\n=== CARD COMPONENTS ===\");\nconsole.log(\"Info card:\", infoCard.outerHTML);\nconsole.log(\"Warning card:\", warningCard.outerHTML);\nconsole.log(\"Success card:\", successCard.outerHTML);\n\n// Dynamic class management\nfunction manageClasses(element, action, ...classes) {\n    switch (action) {\n        case 'add':\n            element.classList.add(...classes);\n            break;\n        case 'remove':\n            element.classList.remove(...classes);\n            break;\n        case 'toggle':\n            classes.forEach(cls => element.classList.toggle(cls));\n            break;\n        case 'replace':\n            if (classes.length >= 2) {\n                element.classList.replace(classes[0], classes[1]);\n            }\n            break;\n        case 'set':\n            element.className = classes.join(' ');\n            break;\n    }\n    \n    return element;\n}\n\n// Example dynamic management\nconst dynamicElement = document.createElement('div');\nmanageClasses(dynamicElement, 'add', 'base', 'active');\nconsole.log(\"After add:\", dynamicElement.className);\n\nmanageClasses(dynamicElement, 'add', 'highlighted');\nconsole.log(\"After add more:\", dynamicElement.className);\n\nmanageClasses(dynamicElement, 'toggle', 'active');\nconsole.log(\"After toggle active:\", dynamicElement.className);\n\nmanageClasses(dynamicElement, 'remove', 'base');\nconsole.log(\"After remove base:\", dynamicElement.className);\n\nmanageClasses(dynamicElement, 'set', 'final', 'class');\nconsole.log(\"After set:\", dynamicElement.className);\n\n// Performance comparison\nfunction performanceTest() {\n    console.log(\"\\n=== PERFORMANCE TEST ===\");\n    \n    const iterations = 10000;\n    \n    // Test className\n    console.time('className');\n    for (let i = 0; i < iterations; i++) {\n        const element = document.createElement('div');\n        element.className = 'class1 class2 class3';\n    }\n    console.timeEnd('className');\n    \n    // Test classList.add\n    console.time('classList.add');\n    for (let i = 0; i < iterations; i++) {\n        const element = document.createElement('div');\n        element.classList.add('class1', 'class2', 'class3');\n    }\n    console.timeEnd('classList.add');\n    \n    // Test id\n    console.time('id');\n    for (let i = 0; i < iterations; i++) {\n        const element = document.createElement('div');\n        element.id = `element-${i}`;\n    }\n    console.timeEnd('id');\n}\n\nperformanceTest();\n\n// Best practices\nconsole.log(\"\\n=== BEST PRACTICES ===\");\nconsole.log(\"1. Use className for complete class replacement\");\nconsole.log(\"2. Use classList.add() for adding classes to existing ones\");\nconsole.log(\"3. Use classList.remove() to remove specific classes\");\nconsole.log(\"4. Use classList.toggle() for conditional classes\");\nconsole.log(\"5. Use classList.contains() to check if class exists\");\nconsole.log(\"6. Use classList.replace() to replace one class with another\");\nconsole.log(\"7. Use id for unique elements that need to be targeted\");\nconsole.log(\"8. Ensure IDs are unique across the entire document\");\n\n// Common patterns\nconsole.log(\"\\n=== COMMON PATTERNS ===\");\nconsole.log(\"1. Set classes: element.className = 'class1 class2'\");\nconsole.log(\"2. Add classes: element.classList.add('new-class')\");\nconsole.log(\"3. Remove classes: element.classList.remove('old-class')\");\nconsole.log(\"4. Toggle classes: element.classList.toggle('active')\");\nconsole.log(\"5. Check classes: element.classList.contains('class')\");\nconsole.log(\"6. Set ID: element.id = 'unique-id'\");\nconsole.log(\"7. Get by ID: document.getElementById('unique-id')\");\n\n// Clean up\nif (primaryButton && primaryButton.parentNode) primaryButton.remove();\nif (secondaryButton && secondaryButton.parentNode) secondaryButton.remove();\nif (dangerButton && dangerButton.parentNode) dangerButton.remove();\nif (infoCard && infoCard.parentNode) infoCard.remove();\nif (warningCard && warningCard.parentNode) warningCard.remove();\nif (successCard && successCard.parentNode) successCard.remove();"
  }
]
  