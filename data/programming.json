[
  {
    "question": "How do I start a new JavaScript file?",
    "answer": "// In terminal:\nnode filename.js\n\n// Or in HTML:\n<script src=\"filename.js\"></script>",
    "type": "javascript",
    "tags": ["javascript"],
    "code": "// Example JavaScript file\nconsole.log('Hello, World!');\n\n// Function example\nfunction greet(name) {\n    return `Hello, ${name}!`;\n}\n\nconsole.log(greet('EVERMIND'));"
  },
  {
    "question": "How do I start a new Python file?",
    "answer": "# In terminal:\npython filename.py\n\n# Or:\npython3 filename.py",
    "type": "python",
    "tags": ["python"],
    "code": "# Example Python file\nprint('Hello, World!')\n\n# Function example\ndef greet(name):\n    return f'Hello, {name}!'\n\nprint(greet('EVERMIND'))"
  },
  {
    "question": "How do I start a new C program/file?",
    "answer": "// Compile:\ngcc filename.c -o filename\n\n// Run:\n./filename",
    "type": "c",
    "tags": ["c"]
  },
  {
    "question": "How do I start a new C++ program/file?",
    "answer": "// Compile:\ng++ filename.cpp -o filename\n\n// Run:\n./filename",
    "type": "c",
    "tags": ["c"]
  },
  {
    "question": "How do I run programs in CMD?",
    "answer": "# Navigate to folder:\ncd path/to/folder\n\n# Run executable:\nfilename.exe\n\n# Or:\nstart filename.exe",
    "type": "shell",
    "tags": ["terminal"]
  },
  {
    "question": "How do I start a Playwright file in CMD?",
    "answer": "# Install Playwright:\nnpm install playwright\n\n# Run test:\nnpx playwright test filename.spec.js",
    "type": "javascript",
    "tags": ["javascript", "playwright"]
  },
  {
    "question": "What does API stand for?",
    "answer": "API stands for Application Programming Interface.\n\nIt's a set of rules and protocols that allows different software applications to communicate with each other.",
    "type": "html",
    "tags": ["api"]
  },
  {
    "question": "What are the names of these symbols: () [] <> {} / \\ |",
    "answer": "() - Parentheses\n[] - Square brackets / Brackets\n<> - Angle brackets\n{} - Curly braces / Braces\n/ - Forward slash\n\\ - Backslash\n| - Pipe / Vertical bar",
    "type": "html",
    "tags": ["symbols"]
  },
  {
    "question": "How do I make a commit and push changes to GitHub?",
    "answer": "git add .\ngit commit -m \"Your commit message\"\ngit push origin main",
    "type": "shell",
    "tags": ["git"]
  },
  {
    "question": "How do I see the commit history?",
    "answer": "git log\n\n# Optional for a one-line view:\ngit log --oneline",
    "type": "shell",
    "tags": ["git"]
  },
  {
    "question": "How do I view all commits?",
    "answer": "git log\n\n# Optional for a one-line view:\ngit log --oneline",
    "type": "shell",
    "tags": ["git"]
  },
  {
    "question": "How do I restore a commit?",
    "answer": "# Creates a new commit undoing the changes:\ngit revert <commit-hash>\n\n# Or reset to a previous commit (destructive):\ngit reset --hard <commit-hash>",
    "type": "shell",
    "tags": ["git"]
  },
  {
    "question": "How do I view tags?",
    "answer": "git tag",
    "type": "shell",
    "tags": ["git"]
  },
  {
    "question": "How do I create a tag?",
    "answer": "git tag <tag-name>\n\n# For annotated tag:\ngit tag -a <tag-name> -m \"Tag message\"",
    "type": "shell",
    "tags": ["git"]
  },
  {
    "question": "How do I push tags to GitHub?",
    "answer": "# Push a single tag:\ngit push origin <tag-name>\n\n# Push all tags:\ngit push origin --tags",
    "type": "shell",
    "tags": ["git"]
  },
  {
    "question": "How do I delete a tag?",
    "answer": "# Delete locally:\ngit tag -d <tag-name>\n\n# Delete remotely:\ngit push origin --delete <tag-name>",
    "type": "shell",
    "tags": ["git"]
  },
  {
    "question": "How do I check the current branch?",
    "answer": "git branch\n\n# Or just the current branch:\ngit branch --show-current",
    "type": "shell",
    "tags": ["git"]
  },
  {
    "question": "How do you open Command Prompt directly from File Explorer in a directory?",
    "answer": "Go to the folder location in File Explorer, click the address/search bar, type `cmd`, and press Enter.",
    "type": "shell",
    "tags": ["terminal", "windows"]
  },
  {
    "question": "How do you run scrcpy?",
    "answer": "Use the following steps:\n\n1. Run `adb kill-server`\n2. Run `adb start-server`\n3. Connect your device using `adb connect <ip-address>`\n4. Launch scrcpy by typing `scrcpy`",
    "type": "shell",
    "tags": ["adb", "scrcpy", "android"]
  },
  {
    "question": "How do you start a localhost server on port 8000 using Python and Node.js?",
    "answer": "* Python (Works for both Python 2 and 3):\n  Run: `python -m http.server 8000`\n  Then visit: http://localhost:8000\n\n* Node.js:\n  First install: `npm install -g http-server`\n  Then run: `http-server -p 8000`",
    "type": "shell",
    "tags": ["python", "nodejs", "server"]
  },
  {
    "question": "How do you verify if port 8000 is running?",
    "answer": "Open Command Prompt and run: `netstat -ano | findstr :8000`",
    "type": "shell",
    "tags": ["netstat", "port"]
  },
  {
    "question": "What does IP stand for?",
    "answer": "Internet Protocol.",
    "type": "networking",
    "tags": ["ip", "protocol"]
  },
  {
    "question": "What does HTTP stand for?",
    "answer": "HyperText Transfer Protocol.",
    "type": "networking",
    "tags": ["http", "protocol"]
  },
  {
    "question": "What does URL stand for?",
    "answer": "Uniform Resource Locator.",
    "type": "networking",
    "tags": ["url", "web"]
  },
  {
    "question": "What does DNS stand for, and what does it mean?",
    "answer": "Domain Name System — it translates human-readable domain names (like google.com) into IP addresses that computers use to identify each other.",
    "type": "networking",
    "tags": ["dns", "domain"]
  },
  {
    "question": "What does HTML stand for, and what does it mean?",
    "answer": "HyperText Markup Language — the standard language used to structure and display content on the web.",
    "type": "html",
    "tags": ["html", "markup"]
  },
  {
    "question": "Explain how localhost works and give examples.",
    "answer": "Localhost refers to your own computer acting as a server for testing or development. Example: visiting localhost:8000 or opening indexed.html runs the website locally.",
    "type": "networking",
    "tags": ["development"]
  },
  {
    "question": "Why should you run an HTTP server (like port 8000) for localhost to work?",
    "answer": "Because web browsers require a running HTTP service to handle requests and serve files correctly, simulating how a real server operates.",
    "type": "networking",
    "tags": ["http", "server"]
  },
  {
    "question": "Why is HTML wrapped in tags?",
    "answer": "To give semantic meaning — tags describe the purpose of content (like <header>, <main>, <footer>), making structure and accessibility clearer.",
    "type": "html",
    "tags": ["html", "semantic"]
  },
  {
    "question": "What does CSS stand for, and what does it mean?",
    "answer": "Cascading Style Sheets — it controls the layout, colors, and overall appearance of a webpage.",
    "type": "css",
    "tags": ["css", "styling"]
  },
  {
    "question": "What was the previous name of JavaScript?",
    "answer": "ECMAScript.",
    "type": "javascript",
    "tags": ["javascript", "history"]
  },
  {
    "question": "What does DOM stand for?",
    "answer": "Document Object Model.",
    "type": "javascript",
    "tags": ["dom", "web"]
  },
  {
    "question": "What does NPM stand for?",
    "answer": "Node Package Manager — it's used to install and manage packages in Node.js projects.",
    "type": "javascript",
    "tags": ["npm", "nodejs"]
  },
  {
    "question": "What does SaaS stand for, and what does it mean?",
    "answer": "Software as a Service — software delivered over the internet, usually through a subscription, like Google Docs or Slack.",
    "type": "concepts",
    "tags": ["saas", "cloud"]
  },
  {
    "question": "What does JSON mean?",
    "answer": "JavaScript Object Notation — a lightweight format for storing and transferring data between systems.",
    "type": "javascript",
    "tags": ["json", "data"]
  },
  {
    "question": "Give an example of how systems communicate.",
    "answer": "The client sends a GET request to the server. The server responds with status codes like 200 (OK), 400 (client error), or 500 (server error).",
    "type": "networking",
    "tags": ["http", "communication"]
  },
  {
    "question": "What is a tech stack, what does it stand for, and give examples.",
    "answer": "A combination of technologies used to build an application. Examples include:\n\n* LAMP: Linux, Apache, MySQL, PHP\n* MEAN: MongoDB, Express, Angular, Node.js\n  It usually includes a front-end framework, an API, and a backend layer.",
    "type": "concepts",
    "tags": ["stack", "architecture"]
  },
  {
    "question": "How do you start a localhost HTML file on Chrome?",
    "answer": "Save your file (e.g., index.html), then run a local server using a tool like VS Code's Live Server, or open it via http://localhost:8000.",
    "type": "html",
    "tags": ["html", "localhost", "development"]
  },
  {
    "question": "What does LLM stand for?",
    "answer": "Large Language Model — an AI model trained on vast amounts of text data to understand and generate human-like language.",
    "type": "ai",
    "tags": ["llm", "ai", "machine-learning"]
  },
  {
    "question": "What does 'grepped' mean? How to pronounce it and when to use it?",
    "answer": "It refers to using the command-line tool `grep` to search through text or files for specific patterns. Informally used as a verb by developers (e.g., \"I grepped the logs to find the error\").\n\n**Pronunciation:** /grɛpt/ — phonetic: grept\n\n**Example:** I grepped the codebase to find every reference to that function.",
    "type": "command-line",
    "tags": ["grep", "search", "terminal"]
  },
  {
    "question": "How do you kill an active port like localhost:8000?",
    "answer": "Use one of these methods:\n\n**Windows:**\n`netstat -ano | findstr :8000` (find the PID)\n`taskkill /PID <PID> /F` (kill the process)\n\n**Mac/Linux:**\n`lsof -ti:8000 | xargs kill -9`\n\n**Alternative:**\n`npx kill-port 8000` (if you have kill-port installed)",
    "type": "command-line",
    "tags": ["port", "kill", "terminal"]
  },
  {
    "question": "What is the git command to delete a commit?",
    "answer": "**To delete the last commit (keeps changes):**\n`git reset --soft HEAD~1`\n\n**To delete the last commit (removes changes):**\n`git reset --hard HEAD~1`\n\n**To delete a specific commit:**\n`git rebase -i HEAD~n` (interactive rebase)\n\n**To delete commits from remote:**\n`git push --force-with-lease origin branch-name`",
    "type": "git",
    "tags": ["git", "commit"]
  },
  {
    "question": "What is a CPU made up of?",
    "answer": "A CPU (Central Processing Unit) is made up of:\n\n• **Control Unit (CU)** - Manages instruction execution\n• **Arithmetic Logic Unit (ALU)** - Performs calculations and logic operations\n• **Registers** - Small, fast storage locations\n• **Cache Memory** - High-speed memory for frequently used data\n• **Clock** - Synchronizes operations\n• **Bus Interface** - Connects to other computer components",
    "type": "hardware",
    "tags": ["hardware"]
  },
  {
    "question": "What is the smallest form of data?",
    "answer": "A **bit** (binary digit) is the smallest form of data. It can only have two values: 0 or 1.",
    "type": "data",
    "tags": ["data"]
  },
  {
    "question": "How many bits make up 1 byte and how many combinations can it make?",
    "answer": "1 byte is made up of **8 bits** and can make **256 different combinations** (2^8 = 256).",
    "type": "data",
    "tags": ["data"]
  },
  {
    "question": "What are OS kernels?",
    "answer": "OS kernels are the core components of operating systems that:\n\n• **Manage hardware resources** (CPU, memory, storage)\n• **Provide system services** to applications\n• **Handle process scheduling** and multitasking\n• **Manage memory allocation** and protection\n• **Control device drivers** and hardware communication\n• **Enforce security** and access control\n\nExamples: Linux kernel, Windows NT kernel, macOS XNU kernel",
    "type": "operating-system",
    "tags": ["os"]
  },
  {
    "question": "What does SSH stand for and what does it mean?",
    "answer": "SSH stands for **Secure Shell**.\n\nIt's a network protocol that provides secure, encrypted communication between computers over an unsecured network. SSH allows you to:\n\n• **Remotely access** another computer\n• **Execute commands** on remote systems\n• **Transfer files** securely\n• **Tunnel network traffic**\n\nExample: `ssh username@hostname`",
    "type": "networking",
    "tags": ["ssh"]
  },
  {
    "question": "Explain the difference between interpreter and compiler.",
    "answer": "**Interpreter:**\n• Translates and executes code line by line\n• No separate compilation step\n• Slower execution but faster development\n• Examples: Python, JavaScript, Ruby\n\n**Compiler:**\n• Translates entire program to machine code before execution\n• Creates executable file\n• Faster execution but slower development\n• Examples: C, C++, Go, Rust\n\n**Hybrid (JIT):**\n• Compiles code at runtime\n• Examples: Java, C#",
    "type": "programming-concepts",
    "tags": ["programming"]
  },
  {
    "question": "What does EXE stand for?",
    "answer": "EXE stands for **Executable**.\n\nIt's a file extension used in Windows for executable files that contain machine code instructions that can be directly executed by the operating system.",
    "type": "file-formats",
    "tags": ["windows"]
  },
  {
    "question": "What does HTML stand for?",
    "answer": "HTML stands for **HyperText Markup Language**.\n\nIt's the standard markup language used to create and structure content on the World Wide Web. HTML uses tags to define elements like headings, paragraphs, links, images, etc.",
    "type": "html",
    "tags": ["html", "markup", "web", "hypertext"]
  },
  {
    "question": "Write the default HTML skeleton structure.",
    "answer": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n    \n</body>\n</html>\n```",
    "type": "html",
    "tags": ["html", "skeleton", "structure", "doctype"],
    "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>EVERMIND Test</title>\n</head>\n<body>\n    <h1>Welcome to EVERMIND</h1>\n    <p>This is a test HTML page.</p>\n</body>\n</html>"
  },
  {
    "question": "Why do we name files index.html?",
    "answer": "We name files `index.html` because:\n\n• **Default behavior** - Web servers automatically serve `index.html` when no specific file is requested\n• **Convention** - It's the standard name for the main/home page of a website\n• **User-friendly** - Visitors can access your site with just the domain name (e.g., `example.com` instead of `example.com/index.html`)\n• **SEO benefits** - Search engines recognize it as the primary page",
    "type": "html",
    "tags": ["html", "naming"]
  },
  {
    "question": "Explain how HTML indentation works with parent, sibling, child, and grandparent tags.",
    "answer": "**HTML Indentation Structure:**\n\n```html\n<html>                    <!-- Grandparent -->\n  <head>                  <!-- Parent of title -->\n    <title>Title</title>  <!-- Child of head, sibling of meta -->\n    <meta charset=\"UTF-8\"> <!-- Child of head, sibling of title -->\n  </head>                 <!-- Parent of title, child of html -->\n  <body>                  <!-- Parent of div, child of html -->\n    <div>                 <!-- Child of body, parent of p -->\n      <p>Text</p>         <!-- Child of div, grandchild of body -->\n    </div>\n  </body>\n</html>\n```\n\n• **Parent**: Contains other elements\n• **Child**: Nested inside another element\n• **Sibling**: Elements at the same level\n• **Grandparent**: Two levels up in the hierarchy",
    "type": "html",
    "tags": ["html", "structure"]
  },
  {
    "question": "What is the title tag used for and write a short code example?",
    "answer": "The `<title>` tag is used to:\n\n• **Set the browser tab title**\n• **Define the page title** for search engines\n• **Provide the title** when bookmarking\n• **Display in search results**\n\n**Example:**\n```html\n<title>Chuks Test</title>\n```\n\nThis will show \"Chuks Test\" in the browser tab and search results.",
    "type": "html",
    "tags": ["html", "seo"]
  },
  {
    "question": "What are meta charset and meta description used for and how do you write them?",
    "answer": "**Meta Charset:**\n• Defines the character encoding for the page\n• Prevents character display issues\n• **Code:** `<meta charset=\"UTF-8\">`\n\n**Meta Description:**\n• Provides a summary of the page content\n• Used by search engines in search results\n• **Code:** `<meta name=\"description\" content=\"Your page description here\">`\n\n**Example:**\n```html\n<meta charset=\"UTF-8\">\n<meta name=\"description\" content=\"Learn HTML basics with practical examples\">\n```",
    "type": "html",
    "tags": ["html", "meta", "seo"]
  },
  {
    "question": "How many types of headers are there in HTML and give an example?",
    "answer": "There are **6 types of headers** in HTML: `<h1>` through `<h6>`\n\n• `<h1>` - Most important (largest)\n• `<h2>` - Second level\n• `<h3>` - Third level\n• `<h4>` - Fourth level\n• `<h5>` - Fifth level\n• `<h6>` - Least important (smallest)\n\n**Example:**\n```html\n<h1>Main Title</h1>\n<h2>Section Title</h2>\n<h3>Subsection Title</h3>\n```",
    "type": "html",
    "tags": ["html", "headers"]
  },
  {
    "question": "How do you write a paragraph in HTML?",
    "answer": "Use the `<p>` tag to create paragraphs:\n\n```html\n<p>This is a paragraph of text.</p>\n<p>This is another paragraph.</p>\n```\n\nEach `<p>` tag creates a new paragraph with automatic spacing between them.",
    "type": "html",
    "tags": ["html", "text"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Paragraph Example</title>\n</head>\n<body>\n    <p>This is the first paragraph of text.</p>\n    <p>This is the second paragraph with more content.</p>\n    <p>Each paragraph appears on a new line with spacing.</p>\n</body>\n</html>"
  },
  {
    "question": "How do you make text both italic and bold in a paragraph?",
    "answer": "Use nested `<b>` and `<i>` tags:\n\n```html\n<p>This is <b><i>italic and bolded text</i></b> in a paragraph.</p>\n```\n\n**Alternative modern approach:**\n```html\n<p>This is <strong><em>italic and bolded text</em></strong> in a paragraph.</p>\n```\n\nNote: `<strong>` and `<em>` are preferred for semantic meaning.",
    "type": "html",
    "tags": ["html", "formatting"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Text Formatting</title>\n</head>\n<body>\n    <p>This is <b><i>italic and bolded text</i></b> in a paragraph.</p>\n    <p>This is <strong><em>modern semantic formatting</em></strong>.</p>\n    <p>Regular text with <b>bold</b> and <i>italic</i> separately.</p>\n</body>\n</html>"
  },
  {
    "question": "How do you create a new line in HTML?",
    "answer": "Use the `<br>` or `<br/>` tag:\n\n```html\n<p>This is the first line.<br>This is the second line.</p>\n```\n\n**Note:** `<br>` is a self-closing tag, so both `<br>` and `<br/>` work the same way.",
    "type": "html",
    "tags": ["html", "formatting"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Line Breaks</title>\n</head>\n<body>\n    <p>This is the first line.<br>This is the second line.</p>\n    <p>Line 1<br/>Line 2<br/>Line 3</p>\n    <p>Without br tags, everything stays on one line.</p>\n</body>\n</html>"
  },
  {
    "question": "How do you create a horizontal line in HTML?",
    "answer": "Use the `<hr>` or `<hr/>` tag:\n\n```html\n<p>Content above the line</p>\n<hr>\n<p>Content below the line</p>\n```\n\nThis creates a horizontal line that spans the width of its container.",
    "type": "html",
    "tags": ["html", "formatting"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Horizontal Lines</title>\n</head>\n<body>\n    <h1>Section 1</h1>\n    <p>Content above the line</p>\n    <hr>\n    <h2>Section 2</h2>\n    <p>Content below the line</p>\n    <hr/>\n    <h3>Section 3</h3>\n    <p>Another section after another line</p>\n</body>\n</html>"
  },
  {
    "question": "What is the git command to create a new branch?",
    "answer": "Use the `git switch -c` command:\n\n```bash\ngit switch -c <name-of-new-branch>\n```\n\n**Alternative methods:**\n```bash\n# Create and switch to new branch\ngit checkout -b <branch-name>\n\n# Just create branch (stay on current)\ngit branch <branch-name>\n```\n\n**Example:**\n```bash\ngit switch -c feature-login\n```",
    "type": "git",
    "tags": ["git", "branch"],
    "code": "# Create and switch to new branch\ngit switch -c feature-login\n\n# Alternative method\ngit checkout -b feature-login\n\n# Just create branch (stay on current)\ngit branch feature-login\n\n# Check current branch\ngit branch\n\n# Switch to existing branch\ngit switch main"
  },
  {
    "question": "How do you merge git branches?",
    "answer": "**To merge your branch into main:**\n\n```bash\n# Switch to main branch\ngit checkout main\n\n# Merge your branch\ngit merge new-branch-name\n\n# Push the changes\ngit push origin main\n```\n\n**Alternative (if using git switch):**\n```bash\ngit switch main\ngit merge feature-branch\ngit push origin main\n```",
    "type": "git",
    "tags": ["git", "merge"],
    "code": "# Switch to main branch\ngit checkout main\n\n# Merge your branch\ngit merge feature-login\n\n# Push the changes\ngit push origin main\n\n# Alternative using git switch\ngit switch main\ngit merge feature-login\ngit push origin main\n\n# Check merge status\ngit status"
  },
  {
    "question": "How do you make text big or small in HTML?",
    "answer": "Use the `<big>` and `<small>` tags:\n\n```html\n<p>This is <big>big text</big> and this is <small>small text</small>.</p>\n```\n\n**Note:** These tags are deprecated in HTML5. Modern approach uses CSS:\n```html\n<p>This is <span style=\"font-size: larger;\">big text</span> and this is <span style=\"font-size: smaller;\">small text</span>.</p>\n```",
    "type": "html",
    "tags": ["html", "formatting"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Text Size</title>\n</head>\n<body>\n    <p>This is <big>big text</big> and this is <small>small text</small>.</p>\n    <p>Modern approach: <span style=\"font-size: larger;\">larger text</span> and <span style=\"font-size: smaller;\">smaller text</span>.</p>\n    <p>Normal size text for comparison.</p>\n</body>\n</html>"
  },
  {
    "question": "What are subscript and superscript in HTML and give examples?",
    "answer": "**Subscript** (`<sub>`) - Text below the baseline\n**Superscript** (`<sup>`) - Text above the baseline\n\n**Examples:**\n```html\n<p>H<sub>2</sub>O (water molecule)</p>\n<p>E=mc<sup>2</sup> (Einstein's equation)</p>\n<p>2<sup>3</sup> = 8 (2 to the power of 3)</p>\n<p>CO<sub>2</sub> (carbon dioxide)</p>\n```",
    "type": "html",
    "tags": ["html", "formatting"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Subscript and Superscript</title>\n</head>\n<body>\n    <h2>Chemistry Examples</h2>\n    <p>Water: H<sub>2</sub>O</p>\n    <p>Carbon dioxide: CO<sub>2</sub></p>\n    <p>Sulfuric acid: H<sub>2</sub>SO<sub>4</sub></p>\n    \n    <h2>Math Examples</h2>\n    <p>Einstein's equation: E=mc<sup>2</sup></p>\n    <p>Power of 2: 2<sup>3</sup> = 8</p>\n    <p>Square root: √<sup>2</sup></p>\n</body>\n</html>"
  },
  {
    "question": "How do you return to a previous commit in git?",
    "answer": "Use the `git reset --hard` command:\n\n```bash\ngit reset --hard <commit-hash>\n```\n\n**Example:**\n```bash\ngit reset --hard cef8caf\n```\n\n**Warning:** This permanently deletes all changes after that commit.\n\n**Safer alternative:**\n```bash\ngit reset --soft <commit-hash>  # Keeps changes staged\ngit reset --mixed <commit-hash>  # Keeps changes unstaged\n```",
    "type": "git",
    "tags": ["git", "reset"]
  },
  {
    "question": "How do you write comments in HTML?",
    "answer": "Use the `<!-- -->` syntax:\n\n```html\n<!-- This is a single-line comment -->\n\n<!--\n  This is a\n  multi-line comment\n-->\n\n<p>Visible content</p> <!-- Inline comment -->\n```\n\n**Note:** Comments are not displayed in the browser but are visible in the HTML source code.",
    "type": "html",
    "tags": ["html", "syntax"]
  },
  {
    "question": "How do you change the color of a paragraph in HTML?",
    "answer": "Use the `style` attribute with `color`:\n\n```html\n<p style=\"color: red;\">This text is red</p>\n<p style=\"color: blue;\">This text is blue</p>\n<p style=\"color: #ff0000;\">This text is red (hex)</p>\n```\n\n**Common colors:** red, blue, green, yellow, purple, orange, black, white",
    "type": "html",
    "tags": ["html", "css"]
  },
  {
    "question": "How do you change the background color of a paragraph in HTML?",
    "answer": "Use the `style` attribute with `background-color`:\n\n```html\n<p style=\"background-color: green;\">This paragraph has a green background</p>\n<p style=\"background-color: yellow;\">This paragraph has a yellow background</p>\n<p style=\"background-color: #00ff00;\">This paragraph has a green background (hex)</p>\n```\n\n**Note:** The correct property is `background-color`, not `backgrounf-color`.",
    "type": "html",
    "tags": ["html", "css"]
  },
  {
    "question": "How do you change the entire background color of a website?",
    "answer": "Add the `background-color` style to the `<body>` tag:\n\n```html\n<body style=\"background-color: lightblue;\">\n  <h1>My Website</h1>\n  <p>Content here</p>\n</body>\n```\n\n**Alternative using CSS:**\n```html\n<style>\n  body {\n    background-color: lightblue;\n  }\n</style>\n```",
    "type": "html",
    "tags": ["html", "css"]
  },
  {
    "question": "What is the proper format of HTML code with header, main, and footer?",
    "answer": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n    <header>\n        <h1>Website Header</h1>\n        <nav>Navigation links</nav>\n    </header>\n    \n    <main>\n        <h2>Main Content</h2>\n        <p>Your main content goes here</p>\n    </main>\n    \n    <footer>\n        <p>&copy; 2024 Your Website</p>\n    </footer>\n</body>\n</html>\n```",
    "type": "html",
    "tags": ["html", "semantic"]
  },
  {
    "question": "What HTML tag do you use for navigation items in the header?",
    "answer": "Use the `<nav>` tag for navigation items:\n\n```html\n<header>\n    <h1>My Website</h1>\n    <nav>\n        <a href=\"#home\">Home</a>\n        <a href=\"#about\">About</a>\n        <a href=\"#contact\">Contact</a>\n    </nav>\n</header>\n```\n\nThe `<nav>` tag semantically indicates that the content is for navigation purposes.",
    "type": "html",
    "tags": ["html", "semantic"]
  },
  {
    "question": "What HTML tag do you use for blog posts and how do you divide into sections?",
    "answer": "Use the `<article>` tag for blog posts and `<section>` tags to divide into sections:\n\n```html\n<article>\n    <h2>Blog Post Title</h2>\n    \n    <section>\n        <h3>Introduction</h3>\n        <p>Introduction content...</p>\n    </section>\n    \n    <section>\n        <h3>Main Content</h3>\n        <p>Main content...</p>\n    </section>\n    \n    <section>\n        <h3>Conclusion</h3>\n        <p>Conclusion content...</p>\n    </section>\n</article>\n```",
    "type": "html",
    "tags": ["html", "semantic"]
  },
  {
    "question": "What HTML tag do you use to show content that's not directly related to the main site?",
    "answer": "Use the `<aside>` tag for content not directly related to the main site:\n\n```html\n<main>\n    <article>\n        <h2>Main Article</h2>\n        <p>Main content...</p>\n    </article>\n    \n    <aside>\n        <h3>Related Links</h3>\n        <ul>\n            <li><a href=\"#\">Related Article 1</a></li>\n            <li><a href=\"#\">Related Article 2</a></li>\n        </ul>\n        \n        <h3>Advertisement</h3>\n        <p>Ad content...</p>\n    </aside>\n</main>\n```\n\nCommon uses: sidebars, advertisements, related links, author info.",
    "type": "html",
    "tags": ["html", "semantic"]
  },
  {
    "question": "Why might a website intentionally freeze when I open DevTools?",
    "answer": "Websites freeze DevTools to prevent debugging, reverse engineering, or code inspection. Common reasons:\n\n1. **Anti-debugging protection** - Prevents competitors from copying code\n2. **Security measures** - Protects sensitive algorithms or API keys\n3. **Performance monitoring** - DevTools can slow down the site\n4. **User experience** - Prevents users from accidentally breaking the site\n\n**How to bypass:**\n- Disable JavaScript\n- Use browser extensions\n- Inspect source code directly\n- Use mobile debugging tools",
    "type": "web-development",
    "tags": ["devtools", "debugging", "security"]
  },
  {
    "question": "What does the debugger command tell the browser to do?",
    "answer": "The `debugger` command tells the browser to:\n\n1. **Pause execution** at that exact line\n2. **Open DevTools** automatically (if not already open)\n3. **Enter debug mode** - you can inspect variables, step through code\n4. **Set breakpoint** - similar to clicking the line number in DevTools\n\n**Example:**\n```javascript\nfunction calculateTotal(items) {\n    let total = 0;\n    debugger; // Browser pauses here\n    for (let item of items) {\n        total += item.price;\n    }\n    return total;\n}\n```\n\n**Use cases:**\n- Debug complex functions\n- Inspect variable values\n- Step through code line by line",
    "type": "javascript",
    "tags": ["debugging", "devtools", "javascript"],
    "code": "function debugExample() {\n    let x = 10;\n    let y = 20;\n    debugger; // Browser pauses here\n    let result = x + y;\n    console.log(result);\n    return result;\n}\n\ndebugExample();"
  },
  {
    "question": "How to ping websites? Example: ping google.com",
    "answer": "**Windows Command:**\n```cmd\nping google.com\nping 8.8.8.8\n```\n\n**What ping does:**\n- Sends packets to test connectivity\n- Measures response time (latency)\n- Shows if website/server is reachable\n\n**Example output:**\n```\nPinging google.com [142.250.191.14] with 32 bytes of data:\nReply from 142.250.191.14: bytes=32 time=15ms TTL=54\nReply from 142.250.191.14: bytes=32 time=12ms TTL=54\n```\n\n**Useful options:**\n- `ping -t google.com` (continuous ping)\n- `ping -n 4 google.com` (send 4 packets)\n- `ping -l 1000 google.com` (send 1000 byte packets)",
    "type": "networking",
    "tags": ["ping", "networking", "command-line"]
  },
  {
    "question": "What's the difference between a port and a PID?",
    "answer": "**Port:**\n- Communication channel/endpoint\n- Like a door number (80, 443, 3000)\n- Used for network communication\n- Multiple processes can use same port (with different protocols)\n\n**PID (Process ID):**\n- Unique identifier for a running process\n- Like a person's ID number\n- Each process has only one PID\n- Used to identify and manage processes\n\n**Analogy:**\n- Port = Apartment building address (123 Main St)\n- PID = Specific apartment number (Apt 5B)\n\n**Example:**\n- Port 3000 = Web server communication channel\n- PID 1234 = The actual Node.js process using port 3000",
    "type": "networking",
    "tags": ["ports", "pid", "processes", "networking"]
  },
  {
    "question": "What does this command do? netstat -ano | findstr :8000",
    "answer": "**Command breakdown:**\n\n`netstat -ano`:\n- Shows all network connections\n- `-a` = all connections\n- `-n` = show addresses numerically\n- `-o` = show process ID (PID)\n\n`| findstr :8000`:\n- Filters results to only show port 8000\n- `|` = pipe (passes output to next command)\n- `findstr` = Windows search command\n\n**What it does:**\nFinds which process is using port 8000 and shows its PID\n\n**Example output:**\n```\nTCP    0.0.0.0:8000    0.0.0.0:0    LISTENING    1234\n```\n\n**Next step:**\nUse the PID (1234) to kill the process:\n`taskkill /PID 1234 /F`",
    "type": "command-line",
    "tags": ["netstat", "findstr", "ports", "windows"]
  },
  {
    "question": "Why does taskkill /PID 8000 /F fail?",
    "answer": "**The problem:**\nYou're trying to kill PID 8000, but 8000 is a **port number**, not a PID!\n\n**What happens:**\n- `taskkill /PID 8000 /F` looks for process with ID 8000\n- But 8000 is the port, not the process ID\n- Process might have PID 1234, 5678, etc.\n\n**Correct process:**\n1. **Find the PID:** `netstat -ano | findstr :8000`\n2. **Get the actual PID** (e.g., 1234)\n3. **Kill the process:** `taskkill /PID 1234 /F`\n\n**Remember:**\n- Port = communication channel (8000)\n- PID = process identifier (1234)\n- You kill processes (PIDs), not ports",
    "type": "command-line",
    "tags": ["taskkill", "pid", "ports", "troubleshooting"]
  },
  {
    "question": "What are the two steps to free a port that's in use?",
    "answer": "**Step 1: Find the PID using the port**\n```cmd\nnetstat -ano | findstr :8000\n```\n\n**Step 2: Kill the process using that PID**\n```cmd\ntaskkill /PID <PID_NUMBER> /F\n```\n\n**Complete example:**\n```cmd\n# Step 1: Find what's using port 3000\nnetstat -ano | findstr :3000\n# Output: TCP 0.0.0.0:3000 0.0.0.0:0 LISTENING 1234\n\n# Step 2: Kill process 1234\ntaskkill /PID 1234 /F\n# Output: SUCCESS: The process with PID 1234 has been terminated.\n```\n\n**Why this works:**\n- Ports are just communication channels\n- Processes are the actual programs\n- Kill the process → port becomes free",
    "type": "command-line",
    "tags": ["ports", "netstat", "taskkill", "troubleshooting"]
  },
  {
    "question": "How do you kill the process using port 8000?",
    "answer": "**Complete solution:**\n\n**Step 1:** Find the PID\n```cmd\nnetstat -ano | findstr :8000\n```\n\n**Step 2:** Kill the process\n```cmd\ntaskkill /PID <PID_FROM_STEP_1> /F\n```\n\n**Real example:**\n```cmd\n# Find process using port 8000\nnetstat -ano | findstr :8000\n# Output: TCP 0.0.0.0:8000 0.0.0.0:0 LISTENING 5678\n\n# Kill process 5678\ntaskkill /PID 5678 /F\n# Output: SUCCESS: The process with PID 5678 has been terminated.\n```\n\n**One-liner (if you know the PID):**\n```cmd\ntaskkill /PID 5678 /F\n```\n\n**Remember:**\n- Always find the PID first\n- Use `/F` for force kill\n- Port 8000 → Find PID → Kill PID",
    "type": "command-line",
    "tags": ["taskkill", "netstat", "ports", "processes"]
  },
  {
    "question": "How to check all files in a project? Use: dir",
    "answer": "**Windows Command:**\n```cmd\ndir\n```\n\n**What it shows:**\n- All files and folders in current directory\n- File sizes\n- Creation dates\n- File types\n\n**Useful variations:**\n```cmd\ndir /p          # Pause between screens\ndir /w          # Wide format\ndir *.js        # Show only .js files\ndir /s          # Show subdirectories too\ndir /a          # Show hidden files\n```\n\n**Example output:**\n```\nDirectory of C:\\MyProject\n\nindex.html    1,234 bytes  10/13/2025\nstyle.css     2,456 bytes  10/13/2025\nscript.js     3,789 bytes  10/13/2025\nREADME.md     456 bytes    10/13/2025\n```\n\n**Linux/Mac equivalent:**\n```bash\nls -la\n```",
    "type": "command-line",
    "tags": ["dir", "files", "directory", "windows"]
  },
  {
    "question": "How to check what's inside a file? Use: type filename",
    "answer": "**Windows Command:**\n```cmd\ntype filename.txt\ntype index.html\ntype script.js\n```\n\n**What it does:**\n- Displays the entire contents of a file\n- Shows text files in the terminal\n- Useful for quick file inspection\n\n**Example:**\n```cmd\ntype README.md\n```\n\n**Output:**\n```\n# My Project\nThis is a sample README file.\n\n## Features\n- Feature 1\n- Feature 2\n```\n\n**Useful for:**\n- Quick file preview\n- Checking file contents\n- Reading configuration files\n\n**Linux/Mac equivalent:**\n```bash\ncat filename\nless filename\nmore filename\n```",
    "type": "command-line",
    "tags": ["type", "files", "content", "windows"]
  },
  {
    "question": "What does 'git status porcelain' mean?",
    "answer": "**Git Status Porcelain:**\n\n**What it is:**\n- `git status --porcelain` gives machine-readable output\n- Designed for scripts and automation\n- Clean, consistent format\n\n**Regular git status:**\n```\nOn branch main\nChanges not staged for commit:\n  modified:   file.txt\n  new file:   newfile.js\n```\n\n**Porcelain format:**\n```\n M file.txt\n?? newfile.js\n```\n\n**Status codes:**\n- `M` = Modified\n- `A` = Added\n- `D` = Deleted\n- `??` = Untracked\n- `R` = Renamed\n\n**Why use it:**\n- Scripts can parse it easily\n- Consistent output format\n- No human-friendly text to filter out\n\n**Example:**\n```bash\ngit status --porcelain | grep \"^ M\"\n```",
    "type": "git",
    "tags": ["git", "status", "porcelain", "automation"]
  },
  {
    "question": "What is the Gobuster tool?",
    "answer": "**Gobuster:**\n\n**What it is:**\n- Directory/file brute-forcing tool\n- Written in Go programming language\n- Used for web application security testing\n\n**What it does:**\n- Discovers hidden directories and files\n- Brute-forces common web paths\n- Finds sensitive files (admin panels, config files)\n\n**Basic usage:**\n```bash\n# Directory brute-forcing\ngobuster dir -u http://target.com -w wordlist.txt\n\n# DNS subdomain enumeration\ngobuster dns -d target.com -w subdomains.txt\n\n# VHost enumeration\ngobuster vhost -u http://target.com -w vhosts.txt\n```\n\n**Common wordlists:**\n- `/usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt`\n- `/usr/share/wordlists/dirb/common.txt`\n\n**Example output:**\n```\n/admin (Status: 200)\n/config (Status: 403)\n/backup (Status: 200)\n```\n\n**Legal use only:**\n- Only test your own systems\n- Get permission before testing",
    "type": "security",
    "tags": ["gobuster", "security", "brute-force", "pentesting"]
  },
  {
    "question": "What is the Hydra tool?",
    "answer": "**Hydra:**\n\n**What it is:**\n- Password brute-forcing tool\n- Supports many protocols (HTTP, FTP, SSH, etc.)\n- Fast parallel attacks\n\n**What it does:**\n- Tests username/password combinations\n- Brute-forces login credentials\n- Supports various authentication methods\n\n**Basic usage:**\n```bash\n# HTTP form login\nhydra -l admin -P passwords.txt target.com http-post-form \"/login:username=^USER^&password=^PASS^:Invalid\"\n\n# SSH brute-force\nhydra -l root -P passwords.txt ssh://192.168.1.100\n\n# FTP brute-force\nhydra -l admin -P passwords.txt ftp://target.com\n```\n\n**Common options:**\n- `-l` = single username\n- `-L` = username list\n- `-p` = single password\n- `-P` = password list\n- `-t` = number of threads\n\n**Example:**\n```bash\nhydra -l admin -P /usr/share/wordlists/rockyou.txt -t 4 target.com http-post-form \"/login:user=^USER^&pass=^PASS^:Login failed\"\n```\n\n**Legal use only:**\n- Only test your own systems\n- Get permission before testing",
    "type": "security"
  },
  {
    "question": "How to add links in HTML?",
    "answer": "**Different types of links:**\n\n**Link to another website:**\n```html\n<a href=\"https://www.google.com\">Google Homepage</a>\n```\n\n**Link to another HTML file in project directory:**\n```html\n<a href=\"about.html\">About Page</a>\n```\n\n**Link to HTML file in different folder:**\n```html\n<a href=\"pages/contact.html\">Contact Page</a>\n```\n\n**Link to image in directory:**\n```html\n<a href=\"images/photo.jpg\">View Photo</a>\n```\n\n**Link to image outside HTML folder:**\n```html\n<a href=\"../assets/logo.png\">Company Logo</a>\n```\n\n**Important:** Always include `https://` for external websites!",
    "type": "html",
    "tags": ["html", "links", "anchors"]
  },
  {
    "question": "How to make links open in a new tab?",
    "answer": "Use `target=\"_blank\"` attribute:\n\n```html\n<a href=\"https://www.google.com\" target=\"_blank\">Google (New Tab)</a>\n```\n\n**What it does:**\n- Opens the link in a new browser tab\n- Keeps the original page open\n- Useful for external links",
    "type": "html",
    "tags": ["html", "links", "target"]
  },
  {
    "question": "How to create image tags in HTML?",
    "answer": "**Basic image tag:**\n```html\n<img src=\"image.jpg\" alt=\"Description\">\n```\n\n**Image from internet:**\n```html\n<img src=\"https://example.com/image.jpg\" alt=\"Online Image\">\n```\n\n**Image from directory:**\n```html\n<img src=\"images/photo.jpg\" alt=\"Local Photo\">\n```\n\n**With size control:**\n```html\n<img src=\"image.jpg\" alt=\"Description\" width=\"300\" height=\"200\">\n```\n\n**Important:** Always include `alt` attribute for accessibility!",
    "type": "html",
    "tags": ["html", "images", "alt"]
  },
  {
    "question": "How to edit image size in HTML?",
    "answer": "**Set both width and height:**\n```html\n<img src=\"image.jpg\" width=\"300\" height=\"200\" alt=\"Description\">\n```\n\n**Set only width (height auto-adjusts):**\n```html\n<img src=\"image.jpg\" width=\"300\" alt=\"Description\">\n```\n\n**Set only height (width auto-adjusts):**\n```html\n<img src=\"image.jpg\" height=\"200\" alt=\"Description\">\n```\n\n**Tips:**\n- You can check image dimensions before setting\n- Setting only one dimension maintains aspect ratio\n- `alt` is very important for accessibility",
    "type": "html",
    "tags": ["html", "images", "sizing"]
  },
  {
    "question": "How to add videos to HTML?",
    "answer": "**Basic video tag:**\n```html\n<video src=\"video.mp4\" controls width=\"400\"></video>\n```\n\n**With thumbnail (poster):**\n```html\n<video src=\"video.mp4\" poster=\"thumbnail.jpg\" controls width=\"400\"></video>\n```\n\n**Auto-play and loop:**\n```html\n<video src=\"video.mp4\" autoplay loop muted controls></video>\n```\n\n**Full example:**\n```html\n<video src=\"video.mp4\" poster=\"thumb.jpg\" controls width=\"500\" height=\"300\" autoplay loop muted>\n    Your browser doesn't support video.\n</video>\n```\n\n**Note:** Use `muted` with `autoplay` for browser compatibility",
    "type": "html",
    "tags": ["html", "video", "multimedia"]
  },
  {
    "question": "How to add YouTube videos to HTML?",
    "answer": "**Get embedded link from YouTube:**\n1. Go to YouTube video\n2. Click \"Share\" → \"Embed\"\n3. Copy the iframe code\n\n**Use the iframe code:**\n```html\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/VIDEO_ID\" frameborder=\"0\" allowfullscreen></iframe>\n```\n\n**Example:**\n```html\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/dQw4w9WgXcQ\" frameborder=\"0\" allowfullscreen></iframe>\n```\n\n**Same process as regular videos, just use the YouTube embed link!**",
    "type": "html",
    "tags": ["html", "youtube", "iframe"]
  },
  {
    "question": "How to create unordered lists in HTML?",
    "answer": "**Basic unordered list:**\n```html\n<ul>\n    <li>Item 1</li>\n    <li>Item 2</li>\n    <li>Item 3</li>\n</ul>\n```\n\n**With links:**\n```html\n<ul>\n    <li><a href=\"home.html\">Home</a></li>\n    <li><a href=\"about.html\">About</a></li>\n    <li><a href=\"contact.html\">Contact</a></li>\n</ul>\n```\n\n**When to use:**\n- Navigation menus\n- Feature lists\n- Any items without specific order\n- Bullet points",
    "type": "html",
    "tags": ["html", "lists", "navigation"]
  },
  {
    "question": "How to create ordered lists in HTML?",
    "answer": "**Basic ordered list:**\n```html\n<ol>\n    <li>First item</li>\n    <li>Second item</li>\n    <li>Third item</li>\n</ol>\n```\n\n**Different number formats:**\n```html\n<!-- Numbers (default) -->\n<ol type=\"1\">\n    <li>Item 1</li>\n    <li>Item 2</li>\n</ol>\n\n<!-- Letters -->\n<ol type=\"A\">\n    <li>Item A</li>\n    <li>Item B</li>\n</ol>\n\n<!-- Roman numerals -->\n<ol type=\"I\">\n    <li>Item I</li>\n    <li>Item II</li>\n</ol>\n```\n\n**When to use:**\n- Step-by-step instructions\n- Rankings\n- Any items with specific order",
    "type": "html",
    "tags": ["html", "lists", "ordered"]
  },
  {
    "question": "How to create description lists in HTML?",
    "answer": "**Description list structure:**\n```html\n<dl>\n    <dt>Term 1</dt>\n    <dd>Description of term 1</dd>\n    \n    <dt>Term 2</dt>\n    <dd>Description of term 2</dd>\n</dl>\n```\n\n**Example:**\n```html\n<dl>\n    <dt>HTML</dt>\n    <dd>HyperText Markup Language - used for web pages</dd>\n    \n    <dt>CSS</dt>\n    <dd>Cascading Style Sheets - used for styling</dd>\n    \n    <dt>JavaScript</dt>\n    <dd>Programming language for web interactivity</dd>\n</dl>\n```\n\n**When to use:**\n- Glossaries\n- Definitions\n- Terms with descriptions\n- FAQ sections",
    "type": "html",
    "tags": ["html", "lists", "descriptions"]
  },
  {
    "question": "How to create tables in HTML?",
    "answer": "**Basic table:**\n```html\n<table>\n    <tr>\n        <td>Cell 1</td>\n        <td>Cell 2</td>\n    </tr>\n    <tr>\n        <td>Cell 3</td>\n        <td>Cell 4</td>\n    </tr>\n</table>\n```\n\n**With headers:**\n```html\n<table>\n    <caption>Student Grades</caption>\n    <tr>\n        <th>Name</th>\n        <th>Math</th>\n        <th>Science</th>\n    </tr>\n    <tr>\n        <td>John</td>\n        <td>85</td>\n        <td>90</td>\n    </tr>\n</table>\n```\n\n**With formatting:**\n```html\n<table>\n    <thead>\n        <tr><th>Header 1</th><th>Header 2</th></tr>\n    </thead>\n    <tbody>\n        <tr><td>Data 1</td><td>Data 2</td></tr>\n    </tbody>\n</table>\n```",
    "type": "html",
    "tags": ["html", "tables", "data"]
  },
  {
    "question": "How to make table cells span multiple columns?",
    "answer": "Use `colspan` attribute:\n\n```html\n<table>\n    <tr>\n        <th>Name</th>\n        <th>Subject</th>\n        <th>Grade</th>\n    </tr>\n    <tr>\n        <td>John</td>\n        <td colspan=\"2\">Math - A</td>\n    </tr>\n    <tr>\n        <td>Jane</td>\n        <td>Science</td>\n        <td>B+</td>\n    </tr>\n</table>\n```\n\n**What `colspan=\"2\"` does:**\n- Makes the cell span 2 columns\n- Useful for headers that cover multiple columns\n- Adjusts the table layout automatically",
    "type": "html",
    "tags": ["html", "tables", "colspan"]
  },
  {
    "question": "What's the difference between inline and block elements?",
    "answer": "**Inline Elements:**\n- Stay next to each other on the same line\n- Only take up as much space as needed\n- Examples: `<a>`, `<span>`, `<img>`, `<strong>`\n\n```html\n<a href=\"#\">Link 1</a>\n<a href=\"#\">Link 2</a>\n<!-- These stay on the same line -->\n```\n\n**Block Elements:**\n- Take up the entire width of their container\n- Start on a new line\n- Examples: `<p>`, `<div>`, `<h1>`, `<ul>`\n\n```html\n<p>Paragraph 1</p>\n<p>Paragraph 2</p>\n<!-- These are on separate lines -->\n```\n\n**Containers:**\n- `<span>` = inline container\n- `<div>` = block container\n\nBoth can be used to group and style content!",
    "type": "html",
    "tags": ["html", "inline", "block", "elements"]
  },
  {
    "question": "How to create different input types in HTML forms?",
    "answer": "**Text inputs:**\n```html\n<!-- Text -->\n<input type=\"text\" placeholder=\"Enter your name\">\n\n<!-- Password -->\n<input type=\"password\" placeholder=\"Enter password\">\n\n<!-- Email -->\n<input type=\"email\" placeholder=\"Enter email\">\n\n<!-- Phone -->\n<input type=\"tel\" placeholder=\"Enter phone number\">\n\n<!-- Date -->\n<input type=\"date\">\n\n<!-- Number -->\n<input type=\"number\" min=\"1\" max=\"100\">\n\n<!-- Range -->\n<input type=\"range\" min=\"0\" max=\"100\">\n\n<!-- File -->\n<input type=\"file\">\n\n<!-- Checkbox -->\n<input type=\"checkbox\" id=\"agree\">\n<label for=\"agree\">I agree</label>\n\n<!-- Radio buttons -->\n<input type=\"radio\" name=\"gender\" value=\"male\"> Male\n<input type=\"radio\" name=\"gender\" value=\"female\"> Female\n\n<!-- Button -->\n<input type=\"submit\" value=\"Submit\">\n```\n\n**Default values:**\n```html\n<input type=\"text\" value=\"Default text\">\n```\n\n**Note:** Radio buttons with the same `name` allow only one selection!",
    "type": "html",
    "tags": ["html", "forms", "input", "validation"]
  },
  {
    "question": "What is a textarea used for in HTML?",
    "answer": "**Textarea is used for:**\n- Multi-line text input\n- Comments, messages, descriptions\n- Longer text that doesn't fit in regular input\n\n**How to write it:**\n```html\n<textarea rows=\"4\" cols=\"50\" placeholder=\"Enter your message here...\"></textarea>\n```\n\n**With default text:**\n```html\n<textarea rows=\"4\" cols=\"50\">Default message text</textarea>\n```\n\n**Attributes:**\n- `rows` = number of visible lines\n- `cols` = number of visible characters per line\n- `placeholder` = hint text\n- `maxlength` = maximum characters allowed\n\n**Example:**\n```html\n<label for=\"comment\">Your Comment:</label>\n<textarea id=\"comment\" name=\"comment\" rows=\"5\" cols=\"40\" placeholder=\"Write your comment here...\"></textarea>\n```",
    "type": "html",
    "tags": ["html", "forms", "textarea", "multiline"]
  },
  {
    "question": "What is a form in HTML and how to write it?",
    "answer": "**What forms are used for:**\n- Collecting user input\n- Submitting data to servers\n- User registration, contact forms, surveys\n\n**Basic form structure:**\n```html\n<form action=\"submit.php\" method=\"POST\">\n    <label for=\"name\">Name:</label>\n    <input type=\"text\" id=\"name\" name=\"name\" required>\n    \n    <label for=\"email\">Email:</label>\n    <input type=\"email\" id=\"email\" name=\"email\" required>\n    \n    <label for=\"message\">Message:</label>\n    <textarea id=\"message\" name=\"message\" rows=\"4\"></textarea>\n    \n    <input type=\"submit\" value=\"Send Message\">\n</form>\n```\n\n**Form attributes:**\n- `action` = where to send the data\n- `method` = GET or POST\n- `required` = makes field mandatory\n\n**Example with different inputs:**\n```html\n<form action=\"process.php\" method=\"POST\">\n    <input type=\"text\" name=\"username\" placeholder=\"Username\">\n    <input type=\"password\" name=\"password\" placeholder=\"Password\">\n    <input type=\"checkbox\" name=\"remember\"> Remember me\n    <input type=\"submit\" value=\"Login\">\n</form>\n```",
    "type": "html",
    "tags": ["html", "forms", "submission", "data"]
  },
  {
    "question": "What is an iframe in HTML?",
    "answer": "**What iframe does:**\n- Embeds another webpage inside your page\n- Creates a \"window\" to another site\n- Useful for videos, maps, external content\n\n**Basic iframe:**\n```html\n<iframe src=\"https://www.example.com\" width=\"600\" height=\"400\" frameborder=\"0\"></iframe>\n```\n\n**With fallback text:**\n```html\n<iframe src=\"https://www.example.com\" width=\"600\" height=\"400\" frameborder=\"0\">\n    Your browser doesn't support iframes.\n</iframe>\n```\n\n**Common uses:**\n- YouTube videos\n- Google Maps\n- External widgets\n- Embedded content\n\n**Important:**\n- Some websites block iframe embedding (like Amazon)\n- Always include fallback text\n- Use `frameborder=\"0\"` for cleaner look\n\n**Example:**\n```html\n<iframe src=\"https://www.google.com/maps/embed?pb=...\" width=\"400\" height=\"300\" frameborder=\"0\" allowfullscreen></iframe>\n```",
    "type": "html",
    "tags": ["html", "iframe", "embedding", "external"]
  },
  {
    "question": "What are meta tags in HTML?",
    "answer": "**Meta tags provide information about the webpage:**\n\n**Character encoding:**\n```html\n<meta charset=\"UTF-8\">\n```\n\n**Page description:**\n```html\n<meta name=\"description\" content=\"This is a great website about programming\">\n```\n\n**Author information:**\n```html\n<meta name=\"author\" content=\"John Doe\">\n```\n\n**Keywords for SEO:**\n```html\n<meta name=\"keywords\" content=\"html, css, javascript, web development\">\n```\n\n**Viewport for mobile:**\n```html\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n```\n\n**Complete example:**\n```html\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"description\" content=\"Learn HTML, CSS, and JavaScript\">\n    <meta name=\"author\" content=\"Web Developer\">\n    <meta name=\"keywords\" content=\"html, css, javascript\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>My Website</title>\n</head>\n```\n\n**Purpose:**\n- SEO optimization\n- Browser compatibility\n- Mobile responsiveness\n- Search engine information",
    "type": "html",
    "tags": ["html", "meta", "seo", "head"]
  },
  {
    "question": "What is the difference between Git and GitHub?",
    "answer": "**Git:**\n- Free, open-source version control system\n- Runs on your local computer\n- Tracks changes in your code\n- Command-line tool\n\n**GitHub:**\n- Online platform that hosts Git repositories\n- Web-based service\n- Provides collaboration features\n- Stores your code in the cloud\n\n**Analogy:**\n- Git = The engine of a car (does the work)\n- GitHub = The garage where you park the car (stores it)\n\n**Git manages your code changes locally**\n**GitHub stores and shares your code online**\n\n**Think of it like:**\n- Git = Your personal filing system\n- GitHub = The shared office where everyone can access files",
    "type": "git",
    "tags": ["git", "github", "version-control", "collaboration"]
  },
  {
    "question": "What is Git?",
    "answer": "**Git is:**\n- A free, open-source version control system\n- A tool that tracks changes in your code\n- Created by Linus Torvalds (Linux creator)\n- Used by developers worldwide\n\n**What Git does:**\n- Saves snapshots of your code\n- Tracks who made what changes\n- Allows you to go back to previous versions\n- Helps manage different versions of your project\n\n**Think of Git like:**\n- A time machine for your code\n- A backup system that remembers every change\n- A collaboration tool for teams\n\n**Why use Git:**\n- Never lose your work\n- Work with others easily\n- Experiment without fear\n- Keep track of project history",
    "type": "git",
    "tags": ["git", "version-control", "tracking", "history"]
  },
  {
    "question": "What is version control?",
    "answer": "**Version control is:**\nThe management of changes to documents, computer programs, large websites, and other collections of information.\n\n**What it does:**\n- Tracks every change you make\n- Saves different versions of your work\n- Allows you to go back to any previous version\n- Helps teams work together without conflicts\n\n**Real-world analogy:**\n- Like saving different drafts of a document\n- Like having multiple backup copies\n- Like a timeline of all your changes\n\n**Benefits:**\n- Never lose your work\n- See what changed and when\n- Work with others safely\n- Experiment without fear\n\n**Examples:**\n- Google Docs (saves versions automatically)\n- Microsoft Word (track changes)\n- Git (for code)\n\n**Version control = Time travel for your files!**",
    "type": "git",
    "tags": ["version-control", "tracking", "history", "management"]
  },
  {
    "question": "Explain these Git terms simply:",
    "answer": "**Directory:**\nA folder on your computer that contains files and other folders.\n\n**Terminal/Command Line:**\nA text-based way to interact with your computer (like talking to your computer with text commands).\n\n**CLI:**\nCommand Line Interface - another name for terminal/command line.\n\n**cd (Change Directory):**\nCommand to move between folders: `cd folder-name`\n\n**Code Editor:**\nA program for writing code (like VS Code, Sublime Text, Atom).\n\n**Repository:**\nA project folder that Git is tracking (contains your code and Git history).\n\n**GitHub:**\nOnline platform where you can store and share your Git repositories.\n\n**README.md:**\nA file that explains what your project is about (like a project description).",
    "type": "git",
    "tags": ["git", "terminology", "basics", "concepts"]
  },
  {
    "question": "Explain these Git commands simply:",
    "answer": "**Clone:**\n`git clone` - Downloads a copy of a repository from GitHub to your computer.\n\n**Add:**\n`git add` - Tells Git to start tracking changes in your files (stages them).\n\n**Commit:**\n`git commit` - Saves your changes with a message (like saving a snapshot).\n\n**Push:**\n`git push` - Uploads your local changes to GitHub (sends your work to the cloud).\n\n**Pull:**\n`git pull` - Downloads the latest changes from GitHub to your computer.\n\n**Simple workflow:**\n1. `git add .` (stage changes)\n2. `git commit -m \"message\"` (save snapshot)\n3. `git push` (upload to GitHub)\n\n**Think of it like:**\n- Add = Put items in a box\n- Commit = Seal the box with a label\n- Push = Send the box to storage\n- Pull = Get the latest box from storage",
    "type": "git",
    "tags": ["git", "commands", "workflow", "basics"]
  },
  {
    "question": "How to check if Git is installed?",
    "answer": "**Command:**\n```bash\ngit --version\n```\n\n**What it shows:**\n- If Git is installed: Shows version number (e.g., `git version 2.34.1`)\n- If Git is NOT installed: Shows error message\n\n**Example output:**\n```bash\n$ git --version\ngit version 2.34.1\n```\n\n**If Git is not installed:**\n- Download from: https://git-scm.com/\n- Install the program\n- Restart your terminal\n- Run `git --version` again\n\n**This is the first command to run when learning Git!**",
    "type": "git",
    "tags": ["git", "installation", "check", "version"]
  },
  {
    "question": "How to show hidden files in directory?",
    "answer": "**Command:**\n```bash\nls -la\n```\n\n**What it does:**\n- `ls` = list files\n- `-l` = long format (shows details)\n- `-a` = all files (including hidden ones)\n\n**What you'll see:**\n- Regular files and folders\n- Hidden files (starting with `.`)\n- File permissions, sizes, dates\n\n**Example output:**\n```bash\n$ ls -la\ndrwxr-xr-x  user  staff  4096 Oct 13 10:30 .\ndrwxr-xr-x  user  staff  4096 Oct 13 10:30 ..\n-rw-r--r--  user  staff   123 Oct 13 10:30 .gitignore\n-rw-r--r--  user  staff   456 Oct 13 10:30 index.html\n```\n\n**Hidden files start with a dot (.)**\n- `.git` = Git repository folder\n- `.gitignore` = Files to ignore\n- `.env` = Environment variables",
    "type": "git",
    "tags": ["git", "files", "hidden", "directory"]
  },
  {
    "question": "How to check files that haven't been committed yet?",
    "answer": "**Command:**\n```bash\ngit status\n```\n\n**What it shows:**\n- Files that are modified but not staged\n- Files that are staged but not committed\n- Files that are untracked (new files)\n\n**Example output:**\n```bash\n$ git status\nOn branch main\nChanges not staged for commit:\n  modified:   index.html\n  modified:   style.css\n\nUntracked files:\n  new-file.js\n\nChanges to be committed:\n  modified:   README.md\n```\n\n**What the colors mean:**\n- **Red** = Modified but not staged\n- **Green** = Staged and ready to commit\n- **Untracked** = New files Git doesn't know about\n\n**This is your Git dashboard - shows what's changed!**",
    "type": "git",
    "tags": ["git", "status", "tracking", "changes"]
  },
  {
    "question": "How to add files in Git?",
    "answer": "**Add individual file:**\n```bash\ngit add filename.html\n```\n\n**Add all files:**\n```bash\ngit add .\n```\n\n**Examples:**\n```bash\n# Add specific file\ngit add index.html\n\n# Add all files in current directory\ngit add .\n\n# Add all HTML files\ngit add *.html\n\n# Add all files in a folder\ngit add css/\n```\n\n**What `git add` does:**\n- Stages files for commit\n- Tells Git \"I want to save these changes\"\n- Prepares files to be committed\n\n**Think of it like:**\n- Putting items in a shopping cart\n- Selecting files to save\n- Preparing for checkout (commit)\n\n**After `git add`, use `git commit` to save!**",
    "type": "git",
    "tags": ["git", "add", "staging", "files"]
  },
  {
    "question": "How does the /folder/ path work to move between files?",
    "answer": "**Path navigation explained:**\n\n**Current directory:**\n```bash\n.\n```\n\n**Parent directory (go up one level):**\n```bash\n..\n```\n\n**Examples:**\n```bash\n# Go to parent directory\ncd ..\n\n# Go to grandparent directory\ncd ../..\n\n# Go to sibling directory\ncd ../sibling-folder\n\n# Go to specific path\ncd ../demo-repo2\n```\n\n**Real-world analogy:**\n- Think of folders like rooms in a house\n- `.` = current room\n- `..` = parent room (one level up)\n- `../..` = grandparent room (two levels up)\n\n**File structure example:**\n```\nhome/\n├── user/\n│   ├── project1/\n│   └── project2/\n└── documents/\n```\n\n**From project1 to project2:**\n```bash\ncd ../project2\n```\n\n**From project1 to documents:**\n```bash\ncd ../../documents\n```",
    "type": "git",
    "tags": ["git", "paths", "navigation", "directories"]
  },
  {
    "question": "How to solve 'origin does not appear to be a git repo' error?",
    "answer": "**The error means:**\nGit doesn't know where to send your code (no remote repository set up).\n\n**How to solve:**\n\n**Step 1: Create repository on GitHub**\n- Go to GitHub.com\n- Click \"New repository\"\n- Give it a name\n- Click \"Create repository\"\n\n**Step 2: Copy the repository URL**\n- Copy the HTTPS or SSH URL from GitHub\n- Example: `https://github.com/username/repo-name.git`\n\n**Step 3: Connect your local repo to GitHub**\n```bash\ngit remote add origin https://github.com/username/repo-name.git\n```\n\n**Step 4: Verify it worked**\n```bash\ngit remote -v\n```\n\n**Step 5: Push your code**\n```bash\ngit push -u origin main\n```\n\n**What this does:**\n- `remote add origin` = tells Git where GitHub repo is\n- `remote -v` = shows connected repositories\n- `push -u origin main` = uploads code and sets default branch",
    "type": "git",
    "tags": ["git", "error", "origin", "remote", "github"]
  },
  {
    "question": "How to set shortcut so you don't always type 'origin main'?",
    "answer": "**Use the `-u` flag:**\n```bash\ngit push -u origin main\n```\n\n**What `-u` does:**\n- Sets up tracking between local and remote branch\n- Creates a shortcut for future pushes\n- Links your local `main` branch to `origin/main`\n\n**After using `-u` once:**\n```bash\n# Instead of this:\ngit push origin main\n\n# You can just do:\ngit push\n```\n\n**Same works for pull:**\n```bash\n# Instead of:\ngit pull origin main\n\n# You can do:\ngit pull\n```\n\n**Think of `-u` as:**\n- Setting up a \"favorite\" connection\n- Creating a shortcut\n- Telling Git \"remember this connection\"\n\n**One-time setup, then simple commands forever!**",
    "type": "git",
    "tags": ["git", "shortcut", "upstream", "tracking"]
  },
  {
    "question": "How to switch between branches and check differences?",
    "answer": "**Switch to existing branch:**\n```bash\ngit checkout branch-name\n```\n\n**Create and switch to new branch:**\n```bash\ngit checkout -b new-branch-name\n```\n\n**Check differences between branches:**\n```bash\ngit diff feature-branch\n```\n\n**Examples:**\n```bash\n# Switch to main branch\ngit checkout main\n\n# Switch to feature branch\ngit checkout feature-login\n\n# Create new branch\ngit checkout -b feature-signup\n\n# See what's different\ngit diff main\n```\n\n**What `git diff` shows:**\n- Lines added (+)\n- Lines removed (-)\n- Files that changed\n- Detailed differences\n\n**Think of branches like:**\n- Different versions of your project\n- Parallel universes\n- Separate workspaces\n\n**Use `git branch` to see all branches!**",
    "type": "git",
    "tags": ["git", "branches", "switching", "differences"]
  },
  {
    "question": "What is a Pull Request (PR) and how does it work?",
    "answer": "**What is a Pull Request:**\nA way to propose changes to a project and get them reviewed before merging.\n\n**Sample scenario:**\n\n**1. You make changes:**\n```bash\ngit checkout -b feature-login\ngit add .\ngit commit -m \"Add login form\"\ngit push origin feature-login\n```\n\n**2. Create PR on GitHub:**\n- Go to your repository\n- Click \"Compare & pull request\"\n- Add description of changes\n- Click \"Create pull request\"\n\n**3. Team reviews:**\n- Others can see your changes\n- Leave comments and suggestions\n- Approve or request changes\n\n**4. Merge the PR:**\n- Once approved, merge into main branch\n- Your changes become part of the project\n\n**Why use PRs:**\n- Code review before merging\n- Discussion about changes\n- Quality control\n- Team collaboration\n\n**Think of PR as:**\n- Asking permission to add your changes\n- Getting feedback before finalizing\n- Professional way to contribute",
    "type": "git",
    "tags": ["git", "pull-request", "collaboration", "review"]
  },
  {
    "question": "How to delete branches in Git?",
    "answer": "**Delete local branch:**\n```bash\ngit branch -d branch-name\n```\n\n**Force delete (if branch has unmerged changes):**\n```bash\ngit branch -D branch-name\n```\n\n**Delete remote branch:**\n```bash\ngit push origin --delete branch-name\n```\n\n**Examples:**\n```bash\n# Delete local feature branch\ngit branch -d feature-login\n\n# Force delete (careful!)\ngit branch -D old-feature\n\n# Delete remote branch\ngit push origin --delete feature-signup\n```\n\n**What happens:**\n- `-d` = safe delete (only if merged)\n- `-D` = force delete (even if not merged)\n- Remote delete = removes from GitHub\n\n**Best practice:**\n- Delete branches after merging\n- Keep main branches (main, develop)\n- Clean up old feature branches\n\n**Think of it like:**\n- Throwing away old drafts\n- Cleaning up your workspace\n- Keeping only what you need",
    "type": "git",
    "tags": ["git", "branches", "delete", "cleanup"]
  },
  {
    "question": "What is the shortcut to upload modified files to Git?",
    "answer": "**Shortcut command:**\n```bash\ngit commit -am \"Your message\"\n```\n\n**What `-am` does:**\n- `-a` = automatically add all modified files\n- `-m` = add commit message\n- Skips the `git add` step\n\n**Regular way:**\n```bash\ngit add .\ngit commit -m \"Your message\"\n```\n\n**Shortcut way:**\n```bash\ngit commit -am \"Your message\"\n```\n\n**Important:**\n- Only works for **modified** files\n- Does NOT add **new** files\n- For new files, still need `git add`\n\n**Examples:**\n```bash\n# Modified existing files\ngit commit -am \"Fixed login bug\"\n\n# New files need separate add\ngit add new-file.js\ngit commit -m \"Added new feature\"\n```\n\n**Think of `-am` as:**\n- \"Add and commit modified files\"\n- One-step process for changes\n- Time saver for quick updates",
    "type": "git",
    "tags": ["git", "shortcut", "commit", "modified"]
  },
  {
    "question": "How to undo staging in Git?",
    "answer": "**Undo staging for single file:**\n```bash\ngit reset filename\n```\n\n**Undo staging for all files:**\n```bash\ngit reset\n```\n\n**Examples:**\n```bash\n# Unstage specific file\ngit reset index.html\n\n# Unstage all files\ngit reset\n\n# Unstage all files in directory\ngit reset css/\n```\n\n**What `git reset` does:**\n- Removes files from staging area\n- Files go back to \"modified\" status\n- Changes are still there, just not staged\n\n**Before reset:**\n```bash\n$ git status\nChanges to be committed:\n  modified:   index.html\n  modified:   style.css\n```\n\n**After `git reset index.html`:**\n```bash\n$ git status\nChanges to be committed:\n  modified:   style.css\n\nChanges not staged for commit:\n  modified:   index.html\n```\n\n**Think of it like:**\n- Taking items out of shopping cart\n- Unchecking files you don't want to commit\n- Going back to \"modified\" status",
    "type": "git",
    "tags": ["git", "reset", "unstage", "undo"]
  },
  {
    "question": "How to undo a commit in Git?",
    "answer": "**Undo last commit (keep changes):**\n```bash\ngit reset HEAD~1\n```\n\n**Undo last commit (discard changes):**\n```bash\ngit reset --hard HEAD~1\n```\n\n**What this means:**\n- `HEAD~1` = go back one commit\n- `--hard` = also discard all changes\n- Without `--hard` = keep changes but unstage them\n\n**Examples:**\n```bash\n# Undo last commit, keep changes\ngit reset HEAD~1\n\n# Undo last commit, lose all changes\ngit reset --hard HEAD~1\n\n# Undo last 2 commits\ngit reset HEAD~2\n```\n\n**What happens:**\n- Commit is removed from history\n- Files go back to previous state\n- `--hard` = changes are lost forever\n- Without `--hard` = changes become unstaged\n\n**Be careful with `--hard`!**\n- It permanently deletes your changes\n- Use only if you're sure\n- Consider `git stash` to save changes first\n\n**Think of it like:**\n- Undoing the last save\n- Going back in time\n- `--hard` = throwing away your work",
    "type": "git",
    "tags": ["git", "reset", "undo", "commit", "history"]
  },
  {
    "question": "What is forking code and give a simple analogy?",
    "answer": "**What is forking:**\nCreating your own copy of someone else's project that you can modify independently.\n\n**Simple analogy:**\n**Forking is like photocopying a recipe book:**\n\n1. **Original recipe book** = Someone else's project on GitHub\n2. **Photocopy the book** = Fork their repository\n3. **Your copy** = You can now modify recipes without affecting the original\n4. **Make changes** = Add your own recipes or modify existing ones\n5. **Share back** = Send your improvements back to the original author\n\n**Real example:**\n- You find a cool open-source project on GitHub\n- You fork it (copy to your account)\n- You make improvements or add features\n- You can submit a pull request to share your changes\n\n**Why fork:**\n- Contribute to open-source projects\n- Use someone's code as a starting point\n- Experiment without affecting the original\n- Learn from other people's code\n\n**Fork = Personal copy you can modify!**",
    "type": "git",
    "tags": ["git", "forking", "copying", "collaboration"]
  },
  {
    "question": "When should you encode passwords?",
    "answer": "**Always encode passwords when:**\n- Storing them in databases\n- Sending them over networks\n- Comparing them for login\n- Handling them in any way\n\n**Never store passwords in plain text!**\n\n**Common encoding methods:**\n- **Hashing** (one-way, can't be reversed)\n- **Encryption** (two-way, can be decrypted)\n- **Salting** (adds random data before hashing)\n\n**Examples:**\n```javascript\n// BAD - Never do this!\npassword = \"mypassword123\"\n\n// GOOD - Hash the password\nhashedPassword = hash(\"mypassword123\")\n```\n\n**Why encode:**\n- Security if database is compromised\n- Protection against data breaches\n- Industry best practice\n- User privacy protection\n\n**Think of it like:**\n- Putting money in a safe instead of leaving it out\n- Locking your house when you leave\n- Basic security measure\n\n**Rule: If it's a password, encode it!**",
    "type": "security",
    "tags": ["security", "passwords", "hashing", "encryption"]
  },
  {
    "question": "How to kill a Node.js process?",
    "answer": "**Windows command:**\n```cmd\ntaskkill /F /IM node.exe\n```\n\n**What this does:**\n- `taskkill` = terminate processes\n- `/F` = force kill (no confirmation)\n- `/IM node.exe` = target Node.js processes\n\n**Alternative methods:**\n\n**Find and kill specific process:**\n```cmd\n# Find Node processes\ntasklist | findstr node\n\n# Kill specific process by PID\ntaskkill /F /PID 1234\n```\n\n**Using PowerShell:**\n```powershell\nGet-Process node | Stop-Process -Force\n```\n\n**Why you might need this:**\n- Server won't stop normally\n- Port is still in use\n- Node process is stuck\n- Need to restart development server\n\n**Common scenario:**\n- You start a server with `npm start`\n- It gets stuck or won't stop\n- Use `taskkill /F /IM node.exe` to force stop\n\n**Think of it like:**\n- Force-quitting an unresponsive app\n- Emergency stop button\n- Nuclear option for stuck processes",
    "type": "nodejs",
    "tags": ["nodejs", "process", "kill", "windows"]
  },
  {
    "question": "What is dotenv?",
    "answer": "**What dotenv is:**\nA package that loads environment variables from a `.env` file into your application.\n\n**What it does:**\n- Reads variables from `.env` file\n- Makes them available in your code\n- Keeps sensitive data separate from code\n\n**How to use:**\n\n**1. Install dotenv:**\n```bash\nnpm install dotenv\n```\n\n**2. Create .env file:**\n```env\nDATABASE_URL=mongodb://localhost:27017/myapp\nAPI_KEY=your-secret-key-here\nPORT=3000\n```\n\n**3. Load in your code:**\n```javascript\nrequire('dotenv').config();\n\n// Now you can use:\nconst dbUrl = process.env.DATABASE_URL;\nconst apiKey = process.env.API_KEY;\nconst port = process.env.PORT;\n```\n\n**Why use dotenv:**\n- Keep secrets out of your code\n- Different settings for different environments\n- Easy to change without editing code\n- Security best practice\n\n**Think of .env like:**\n- A settings file\n- A configuration file\n- A way to store secrets safely\n\n**Never commit .env files to Git!**",
    "type": "nodejs",
    "tags": ["nodejs", "dotenv", "environment", "variables"]
  },
  {
    "question": "What does '$ echo %port%' do?",
    "answer": "**What it does:**\nDisplays the value of the `PORT` environment variable.\n\n**Command breakdown:**\n- `echo` = print/display text\n- `%port%` = Windows environment variable syntax\n- Shows the current value of PORT variable\n\n**Examples:**\n```cmd\n# If PORT=3000\necho %port%\n# Output: 3000\n\n# If PORT is not set\necho %port%\n# Output: %port%\n```\n\n**Common use cases:**\n- Check what port your app is using\n- Debug environment variables\n- Verify configuration\n\n**In different systems:**\n- **Windows:** `echo %PORT%`\n- **Linux/Mac:** `echo $PORT`\n- **PowerShell:** `echo $env:PORT`\n\n**Real example:**\n```cmd\n# Check if port is set\necho %PORT%\n\n# Set port if not set\nset PORT=3000\necho %PORT%\n```\n\n**Think of it like:**\n- Checking a setting\n- Reading a configuration value\n- Debugging environment variables\n\n**Useful for troubleshooting!**",
    "type": "command-line",
    "tags": ["command-line", "environment", "variables", "windows"]
  },
  {
    "question": "What is the fastest method to learn programming through real experience?",
    "answer": "The fastest way is the **Build → Break → Fix method**:\n\n**Step 1: Build**\n- Create a small working feature or project\n- Start with something simple that actually works\n\n**Step 2: Break**\n- Break it on purpose by deleting, renaming, or changing something\n- Make it stop working intentionally\n\n**Step 3: Fix**\n- Fix the errors without starting over\n- Debug and troubleshoot like a real developer\n\n**Why this method works fast:**\n- You debug like a real developer\n- You understand how files, routes, and logic connect\n- You stop being scared of errors\n- You gain real experience in less time than watching tutorials\n\n**The result:**\nThis method turns 1 hour into the experience of 10 hours because you're actively solving problems, not just consuming information. You learn by doing, not just by watching.",
    "type": "programming-methods",
    "tags": ["programming", "learning", "debugging", "experience", "methodology"]
  },
  {
    "question": "How do you write comments in different programming languages?",
    "answer": "**JavaScript:**\n```javascript\n// Single line comment\n/* Multi-line comment */\n```\n\n**JSON:**\n```json\n// JSON does NOT support comments!\n// This will cause an error\n{\n  \"name\": \"John\",\n  \"age\": 30\n}\n```\n\n**C++:**\n```cpp\n// Single line comment\n/* Multi-line comment */\n```\n\n**Important Notes:**\n- JSON files cannot contain comments - they will cause parsing errors\n- Use `//` for single-line comments in JavaScript and C++\n- Use `/* */` for multi-line comments in JavaScript and C++\n- Comments are ignored by the compiler/interpreter",
    "type": "programming-syntax",
    "tags": ["comments", "javascript", "json", "c++", "syntax"],
    "code": "// JavaScript Comments Example\nconsole.log('Hello World'); // This is a single line comment\n\n/*\nThis is a multi-line comment\nin JavaScript\n*/\n\n// JSON Example (NO COMMENTS ALLOWED)\n{\n  \"name\": \"John\",\n  \"age\": 30,\n  \"city\": \"New York\"\n}\n\n// C++ Comments Example\n#include <iostream>\nusing namespace std;\n\nint main() {\n    cout << \"Hello World\"; // Single line comment\n    \n    /*\n    Multi-line comment\n    in C++\n    */\n    \n    return 0;\n}"
  },
  {
    "question": "List and explain the three ways to apply CSS: inline, internal, and external",
    "answer": "**1. Inline CSS:**\nApplied directly to HTML elements using the `style` attribute.\n\n**2. Internal CSS:**\nWritten inside the `<head>` section using `<style>` tags.\n\n**3. External CSS:**\nWritten in a separate `.css` file and linked to HTML using `<link>` tag.",
    "type": "css",
    "tags": ["css", "styling", "methods"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>CSS Methods</title>\n    <!-- Internal CSS -->\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n        .internal-style {\n            color: blue;\n            font-size: 18px;\n        }\n    </style>\n</head>\n<body>\n    <!-- Inline CSS -->\n    <h1 style=\"color: red; text-align: center;\">Inline CSS Example</h1>\n    \n    <p class=\"internal-style\">This uses internal CSS</p>\n    \n    <p style=\"background-color: yellow; padding: 10px;\">This uses inline CSS</p>\n    \n    <div style=\"border: 2px solid green; margin: 10px; padding: 15px;\">\n        <h2>Mixed Styling</h2>\n        <p>This div combines inline and internal CSS</p>\n    </div>\n</body>\n</html>"
  },
  {
    "question": "How to use internal style sheet in head of HTML document to edit body, headers (h1) and paragraphs?",
    "answer": "Use `<style>` tags inside the `<head>` section:\n\n```html\n<head>\n    <style>\n        body {\n            background-color: black;\n            color: white;\n        }\n        h1 {\n            color: red;\n            font-size: 24px;\n        }\n        p {\n            color: blue;\n            font-size: 16px;\n        }\n    </style>\n</head>\n```",
    "type": "css",
    "tags": ["css", "internal", "styling"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Internal CSS Example</title>\n    <style>\n        body {\n            background-color: black;\n            color: white;\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n        h1 {\n            color: red;\n            font-size: 28px;\n            text-align: center;\n        }\n        h2 {\n            color: yellow;\n            font-size: 22px;\n        }\n        p {\n            color: lightblue;\n            font-size: 16px;\n            line-height: 1.5;\n        }\n    </style>\n</head>\n<body>\n    <h1>Main Heading</h1>\n    <h2>Sub Heading</h2>\n    <p>This paragraph uses internal CSS styling.</p>\n    <p>Another paragraph with the same styling applied.</p>\n</body>\n</html>"
  },
  {
    "question": "How to link external style sheet in directory and not in directory to main HTML code?",
    "answer": "**In same directory:**\n```html\n<link rel=\"stylesheet\" href=\"style.css\">\n```\n\n**In different directory:**\n```html\n<link rel=\"stylesheet\" href=\"css/style.css\">\n<link rel=\"stylesheet\" href=\"../styles/style.css\">\n```\n\n**External style sheet content (style.css):**\n```css\nbody {\n    color: red;\n    font-family: Arial, sans-serif;\n}\n```",
    "type": "css",
    "tags": ["css", "external", "linking"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>External CSS</title>\n    <!-- Link to external CSS file -->\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <h1>External CSS Example</h1>\n    <p>This text is styled by external CSS file.</p>\n    <div class=\"box\">\n        <h2>Styled Box</h2>\n        <p>Content inside styled box</p>\n    </div>\n</body>\n</html>\n\n<!-- style.css content would be:\nbody {\n    color: red;\n    font-family: Arial, sans-serif;\n    margin: 20px;\n}\n\n.box {\n    background-color: lightgray;\n    padding: 20px;\n    border: 2px solid blue;\n    margin: 10px;\n}\n\nh1, h2 {\n    color: darkblue;\n}\n-->"
  },
  {
    "question": "What is the VS Code shortcut for HTML skeleton?",
    "answer": "**HTML Skeleton:**\n`!` + `Tab`\n\n**Sample Text:**\n`lorem` + `Tab`\n\n**Example output:**\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n    \n</body>\n</html>\n```",
    "type": "html",
    "tags": ["html", "shortcuts", "vscode"],
    "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>VS Code Shortcuts Demo</title>\n</head>\n<body>\n    <h1>HTML Skeleton Shortcut</h1>\n    <p>Type '!' then press Tab for HTML skeleton</p>\n    \n    <h2>Lorem Ipsum Shortcut</h2>\n    <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptatum.</p>\n    <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptatum.</p>\n    <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, voluptatum.</p>\n</body>\n</html>"
  },
  {
    "question": "Give an example of how to give ID to paragraph and headers and how to edit it in style.css file",
    "answer": "**HTML with IDs:**\n```html\n<p id=\"p1\">This paragraph has ID p1</p>\n<h1 id=\"main-title\">Main Title</h1>\n<h2 id=\"subtitle\">Subtitle</h2>\n```\n\n**CSS styling with IDs:**\n```css\n#p1 {\n    color: red;\n    font-size: 18px;\n}\n\n#main-title {\n    color: blue;\n    text-align: center;\n}\n\n#subtitle {\n    color: green;\n    font-style: italic;\n}\n```",
    "type": "css",
    "tags": ["css", "id", "selectors"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>CSS IDs Example</title>\n    <style>\n        #p1 {\n            color: red;\n            font-size: 18px;\n            background-color: lightyellow;\n            padding: 10px;\n        }\n        \n        #main-title {\n            color: blue;\n            text-align: center;\n            font-size: 32px;\n            margin-bottom: 20px;\n        }\n        \n        #subtitle {\n            color: green;\n            font-style: italic;\n            font-size: 20px;\n            border-bottom: 2px solid green;\n        }\n        \n        #special-paragraph {\n            background-color: lightblue;\n            border: 2px solid darkblue;\n            padding: 15px;\n            margin: 10px;\n        }\n    </style>\n</head>\n<body>\n    <h1 id=\"main-title\">Main Title with ID</h1>\n    <h2 id=\"subtitle\">Subtitle with ID</h2>\n    <p id=\"p1\">This paragraph has ID p1</p>\n    <p id=\"special-paragraph\">This is a special paragraph with unique styling</p>\n    <p>Regular paragraph without ID</p>\n</body>\n</html>"
  },
  {
    "question": "Give an example how to give class to paragraphs and other elements and how to edit with CSS",
    "answer": "**HTML with Classes:**\n```html\n<p class=\"highlight\">Highlighted paragraph</p>\n<div class=\"box\">Box content</div>\n<h1 class=\"title\">Title with class</h1>\n```\n\n**CSS styling with Classes:**\n```css\n.highlight {\n    background-color: yellow;\n    font-weight: bold;\n}\n\n.box {\n    border: 2px solid black;\n    padding: 20px;\n    margin: 10px;\n}\n\n.title {\n    color: red;\n    text-align: center;\n}\n```",
    "type": "css",
    "tags": ["css", "class", "selectors"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>CSS Classes Example</title>\n    <style>\n        .highlight {\n            background-color: yellow;\n            font-weight: bold;\n            padding: 5px;\n        }\n        \n        .box {\n            border: 2px solid black;\n            padding: 20px;\n            margin: 10px;\n            background-color: lightgray;\n        }\n        \n        .title {\n            color: red;\n            text-align: center;\n            font-size: 24px;\n        }\n        \n        .warning {\n            background-color: orange;\n            color: white;\n            padding: 10px;\n            border-radius: 5px;\n        }\n        \n        .success {\n            background-color: green;\n            color: white;\n            padding: 10px;\n            border-radius: 5px;\n        }\n    </style>\n</head>\n<body>\n    <h1 class=\"title\">Title with Class</h1>\n    <p class=\"highlight\">This paragraph has a highlight class</p>\n    <div class=\"box\">\n        <h2>Box Content</h2>\n        <p>This div has a box class</p>\n    </div>\n    <p class=\"warning\">Warning message with class</p>\n    <p class=\"success\">Success message with class</p>\n    <p>Regular paragraph without class</p>\n</body>\n</html>"
  },
  {
    "question": "How to change font style using CSS in style.css with contingencies?",
    "answer": "**Font Family with Fallbacks:**\n```css\np {\n    color: red;\n    font-family: \"Arial\", \"Helvetica\", sans-serif;\n}\n\nh1 {\n    font-family: \"Times New Roman\", \"Times\", serif;\n}\n\n.code {\n    font-family: \"Consolas\", \"Monaco\", \"Courier New\", monospace;\n}\n```\n\n**Why use multiple fonts:**\n- If first font isn't available, browser tries the next one\n- Ensures text displays even if preferred font fails to load\n- Provides consistent appearance across different systems",
    "type": "css",
    "tags": ["css", "fonts", "typography"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Font Family Examples</title>\n    <style>\n        body {\n            font-family: \"Arial\", \"Helvetica\", sans-serif;\n            margin: 20px;\n        }\n        \n        .serif-text {\n            font-family: \"Times New Roman\", \"Times\", serif;\n            font-size: 18px;\n            color: blue;\n        }\n        \n        .sans-serif-text {\n            font-family: \"Arial\", \"Helvetica\", sans-serif;\n            font-size: 18px;\n            color: green;\n        }\n        \n        .monospace-text {\n            font-family: \"Consolas\", \"Monaco\", \"Courier New\", monospace;\n            font-size: 18px;\n            color: red;\n            background-color: lightgray;\n            padding: 10px;\n        }\n        \n        .fancy-text {\n            font-family: \"Georgia\", \"Times New Roman\", serif;\n            font-size: 20px;\n            font-style: italic;\n            color: purple;\n        }\n    </style>\n</head>\n<body>\n    <h1>Font Family Examples</h1>\n    <p class=\"serif-text\">This text uses serif fonts with fallbacks</p>\n    <p class=\"sans-serif-text\">This text uses sans-serif fonts with fallbacks</p>\n    <p class=\"monospace-text\">This text uses monospace fonts (good for code)</p>\n    <p class=\"fancy-text\">This text uses a fancy serif font</p>\n    <p>Default body text with Arial fallback</p>\n</body>\n</html>"
  },
  {
    "question": "How to use Google Fonts (fonts.google.com) for custom fonts?",
    "answer": "**Steps to use Google Fonts:**\n\n1. **Go to fonts.google.com**\n2. **Select your font style**\n3. **Go to 'View selected families'**\n4. **Copy the href link**\n5. **Paste in HTML `<head>`:**\n```html\n<link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;700&display=swap\" rel=\"stylesheet\">\n```\n6. **Use in CSS:**\n```css\nbody {\n    font-family: 'Roboto', sans-serif;\n}\n```",
    "type": "css",
    "tags": ["css", "google-fonts", "typography"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Google Fonts Example</title>\n    <!-- Google Fonts Link -->\n    <link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;700&family=Dancing+Script:wght@400;700&display=swap\" rel=\"stylesheet\">\n    <style>\n        body {\n            font-family: 'Roboto', sans-serif;\n            margin: 20px;\n            line-height: 1.6;\n        }\n        \n        .light-text {\n            font-family: 'Roboto', sans-serif;\n            font-weight: 300;\n            font-size: 18px;\n            color: #666;\n        }\n        \n        .normal-text {\n            font-family: 'Roboto', sans-serif;\n            font-weight: 400;\n            font-size: 18px;\n            color: #333;\n        }\n        \n        .bold-text {\n            font-family: 'Roboto', sans-serif;\n            font-weight: 700;\n            font-size: 20px;\n            color: #000;\n        }\n        \n        .script-text {\n            font-family: 'Dancing Script', cursive;\n            font-size: 24px;\n            color: #8B4513;\n        }\n    </style>\n</head>\n<body>\n    <h1 class=\"bold-text\">Google Fonts Demo</h1>\n    <p class=\"light-text\">This is Roboto Light (300 weight)</p>\n    <p class=\"normal-text\">This is Roboto Normal (400 weight)</p>\n    <p class=\"bold-text\">This is Roboto Bold (700 weight)</p>\n    <p class=\"script-text\">This is Dancing Script - a cursive font!</p>\n</body>\n</html>"
  },
  {
    "question": "Give the code to add font style, weight and size to HTML code",
    "answer": "**Font Properties:**\n```css\np {\n    font-style: italic;        /* normal, italic, oblique */\n    font-weight: bold;         /* normal, bold, 100-900 */\n    font-size: 18px;           /* px, em, rem, % */\n}\n\nh1 {\n    font-style: normal;\n    font-weight: 700;\n    font-size: 2.5em;\n}\n```\n\n**Shorthand:**\n```css\n.text {\n    font: italic bold 16px Arial, sans-serif;\n}\n```",
    "type": "css",
    "tags": ["css", "fonts", "typography"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Font Properties</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n        \n        .normal-text {\n            font-style: normal;\n            font-weight: normal;\n            font-size: 16px;\n        }\n        \n        .italic-text {\n            font-style: italic;\n            font-weight: normal;\n            font-size: 18px;\n        }\n        \n        .bold-text {\n            font-style: normal;\n            font-weight: bold;\n            font-size: 20px;\n        }\n        \n        .bold-italic {\n            font-style: italic;\n            font-weight: bold;\n            font-size: 22px;\n        }\n        \n        .large-text {\n            font-size: 24px;\n            font-weight: 300;\n        }\n        \n        .shorthand-example {\n            font: italic bold 18px Georgia, serif;\n        }\n    </style>\n</head>\n<body>\n    <h1>Font Properties Examples</h1>\n    <p class=\"normal-text\">Normal text (normal style, normal weight, 16px)</p>\n    <p class=\"italic-text\">Italic text (italic style, normal weight, 18px)</p>\n    <p class=\"bold-text\">Bold text (normal style, bold weight, 20px)</p>\n    <p class=\"bold-italic\">Bold italic text (italic style, bold weight, 22px)</p>\n    <p class=\"large-text\">Large light text (24px, weight 300)</p>\n    <p class=\"shorthand-example\">Shorthand font property example</p>\n</body>\n</html>"
  },
  {
    "question": "What are some ways to design your text? Give example of text-decoration",
    "answer": "**Text Decoration Options:**\n```css\n.underline {\n    text-decoration: underline;\n}\n\n.overline {\n    text-decoration: overline;\n}\n\n.line-through {\n    text-decoration: line-through;\n}\n\n.dotted-underline {\n    text-decoration: cyan dotted underline;\n}\n\n.wavy-underline {\n    text-decoration: red wavy underline;\n}\n\n.no-decoration {\n    text-decoration: none;\n}\n```",
    "type": "css",
    "tags": ["css", "text-decoration", "styling"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Text Decoration Examples</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            line-height: 2;\n        }\n        \n        .underline {\n            text-decoration: underline;\n        }\n        \n        .overline {\n            text-decoration: overline;\n        }\n        \n        .line-through {\n            text-decoration: line-through;\n        }\n        \n        .dotted-underline {\n            text-decoration: cyan dotted underline;\n        }\n        \n        .wavy-underline {\n            text-decoration: red wavy underline;\n        }\n        \n        .double-underline {\n            text-decoration: blue double underline;\n        }\n        \n        .dashed-overline {\n            text-decoration: green dashed overline;\n        }\n        \n        .no-decoration {\n            text-decoration: none;\n        }\n        \n        .link {\n            color: blue;\n            text-decoration: underline;\n        }\n        \n        .link:hover {\n            text-decoration: none;\n        }\n    </style>\n</head>\n<body>\n    <h1>Text Decoration Examples</h1>\n    <p class=\"underline\">This text has underline decoration</p>\n    <p class=\"overline\">This text has overline decoration</p>\n    <p class=\"line-through\">This text has line-through decoration</p>\n    <p class=\"dotted-underline\">This text has cyan dotted underline</p>\n    <p class=\"wavy-underline\">This text has red wavy underline</p>\n    <p class=\"double-underline\">This text has blue double underline</p>\n    <p class=\"dashed-overline\">This text has green dashed overline</p>\n    <p class=\"no-decoration\">This text has no decoration</p>\n    <a href=\"#\" class=\"link\">This link has underline (hover to remove)</a>\n</body>\n</html>"
  },
  {
    "question": "How to add size, color, design, radius, padding to border on HTML and list common border styles?",
    "answer": "**Border Properties:**\n```css\n.box {\n    border-width: 3px;\n    border-color: red;\n    border-style: solid;\n    border-radius: 10px;\n    padding: 20px;\n}\n\n/* Shorthand */\n.box2 {\n    border: 2px dashed blue;\n    border-radius: 5px;\n    padding: 15px;\n}\n```\n\n**Common Border Styles:**\n- `solid` - solid line\n- `dashed` - dashed line\n- `dotted` - dotted line\n- `double` - double line\n- `ridge` - 3D ridged border\n- `groove` - 3D grooved border\n- `inset` - 3D inset border\n- `outset` - 3D outset border",
    "type": "css",
    "tags": ["css", "borders", "styling"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Border Examples</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n        \n        .solid-border {\n            border: 3px solid red;\n            border-radius: 10px;\n            padding: 20px;\n            margin: 10px;\n        }\n        \n        .dashed-border {\n            border: 2px dashed blue;\n            border-radius: 5px;\n            padding: 15px;\n            margin: 10px;\n        }\n        \n        .dotted-border {\n            border: 2px dotted green;\n            border-radius: 15px;\n            padding: 15px;\n            margin: 10px;\n        }\n        \n        .double-border {\n            border: 4px double purple;\n            border-radius: 8px;\n            padding: 20px;\n            margin: 10px;\n        }\n        \n        .ridge-border {\n            border: 5px ridge orange;\n            border-radius: 12px;\n            padding: 20px;\n            margin: 10px;\n        }\n        \n        .groove-border {\n            border: 5px groove teal;\n            border-radius: 12px;\n            padding: 20px;\n            margin: 10px;\n        }\n        \n        .inset-border {\n            border: 5px inset brown;\n            border-radius: 12px;\n            padding: 20px;\n            margin: 10px;\n        }\n        \n        .outset-border {\n            border: 5px outset pink;\n            border-radius: 12px;\n            padding: 20px;\n            margin: 10px;\n        }\n    </style>\n</head>\n<body>\n    <h1>Border Style Examples</h1>\n    <div class=\"solid-border\">Solid Border</div>\n    <div class=\"dashed-border\">Dashed Border</div>\n    <div class=\"dotted-border\">Dotted Border</div>\n    <div class=\"double-border\">Double Border</div>\n    <div class=\"ridge-border\">Ridge Border (3D)</div>\n    <div class=\"groove-border\">Groove Border (3D)</div>\n    <div class=\"inset-border\">Inset Border (3D)</div>\n    <div class=\"outset-border\">Outset Border (3D)</div>\n</body>\n</html>"
  },
  {
    "question": "How to edit individual dimensions of border in CSS (left, right, top, bottom)?",
    "answer": "**Individual Border Properties:**\n```css\nh1 {\n    border-top-style: solid;\n    border-bottom-style: dashed;\n    border-left-style: dotted;\n    border-right-style: double;\n}\n\n.box {\n    border-top-width: 5px;\n    border-bottom-width: 3px;\n    border-left-width: 2px;\n    border-right-width: 4px;\n    \n    border-top-color: red;\n    border-bottom-color: blue;\n    border-left-color: green;\n    border-right-color: yellow;\n}\n```",
    "type": "css",
    "tags": ["css", "borders", "individual"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Individual Border Properties</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n        \n        .mixed-styles {\n            border-top-style: solid;\n            border-bottom-style: dashed;\n            border-left-style: dotted;\n            border-right-style: double;\n            border-top-width: 3px;\n            border-bottom-width: 2px;\n            border-left-width: 4px;\n            border-right-width: 1px;\n            padding: 20px;\n            margin: 10px;\n        }\n        \n        .mixed-colors {\n            border-top-color: red;\n            border-bottom-color: blue;\n            border-left-color: green;\n            border-right-color: yellow;\n            border-width: 5px;\n            border-style: solid;\n            padding: 20px;\n            margin: 10px;\n        }\n        \n        .asymmetric {\n            border-top: 8px solid purple;\n            border-bottom: 2px dashed orange;\n            border-left: 6px dotted teal;\n            border-right: 4px ridge pink;\n            padding: 20px;\n            margin: 10px;\n        }\n    </style>\n</head>\n<body>\n    <h1>Individual Border Properties</h1>\n    <div class=\"mixed-styles\">Different styles on each side</div>\n    <div class=\"mixed-colors\">Different colors on each side</div>\n    <div class=\"asymmetric\">Asymmetric borders with different styles and colors</div>\n</body>\n</html>"
  },
  {
    "question": "How to set multiple colors as background in CSS and how to control position of a certain color?",
    "answer": "**Linear Gradient Backgrounds:**\n```css\n.gradient1 {\n    background: linear-gradient(blue, red);\n}\n\n.gradient2 {\n    background: linear-gradient(to top, blue, red);\n}\n\n.gradient3 {\n    background: linear-gradient(to bottom, blue, red);\n}\n\n.gradient4 {\n    background: linear-gradient(to right, blue, red);\n}\n\n.gradient5 {\n    background: linear-gradient(to left, blue, red);\n}\n\n.gradient6 {\n    background: linear-gradient(45deg, blue, red, green);\n}\n```",
    "type": "css",
    "tags": ["css", "backgrounds", "gradients"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Background Gradients</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n        \n        .gradient1 {\n            background: linear-gradient(blue, red);\n            padding: 30px;\n            margin: 10px;\n            color: white;\n            text-align: center;\n        }\n        \n        .gradient2 {\n            background: linear-gradient(to top, blue, red);\n            padding: 30px;\n            margin: 10px;\n            color: white;\n            text-align: center;\n        }\n        \n        .gradient3 {\n            background: linear-gradient(to bottom, blue, red);\n            padding: 30px;\n            margin: 10px;\n            color: white;\n            text-align: center;\n        }\n        \n        .gradient4 {\n            background: linear-gradient(to right, blue, red);\n            padding: 30px;\n            margin: 10px;\n            color: white;\n            text-align: center;\n        }\n        \n        .gradient5 {\n            background: linear-gradient(to left, blue, red);\n            padding: 30px;\n            margin: 10px;\n            color: white;\n            text-align: center;\n        }\n        \n        .gradient6 {\n            background: linear-gradient(45deg, blue, red, green);\n            padding: 30px;\n            margin: 10px;\n            color: white;\n            text-align: center;\n        }\n        \n        .gradient7 {\n            background: linear-gradient(90deg, yellow, orange, red);\n            padding: 30px;\n            margin: 10px;\n            color: white;\n            text-align: center;\n        }\n    </style>\n</head>\n<body>\n    <h1>Background Gradient Examples</h1>\n    <div class=\"gradient1\">Default Gradient (top to bottom)</div>\n    <div class=\"gradient2\">To Top Gradient</div>\n    <div class=\"gradient3\">To Bottom Gradient</div>\n    <div class=\"gradient4\">To Right Gradient</div>\n    <div class=\"gradient5\">To Left Gradient</div>\n    <div class=\"gradient6\">45 Degree Angle with 3 Colors</div>\n    <div class=\"gradient7\">90 Degree with Multiple Colors</div>\n</body>\n</html>"
  },
  {
    "question": "How to stop background from repeating and fix empty background with background-attachment: fixed?",
    "answer": "**Background Repeat Control:**\n```css\n.no-repeat {\n    background-repeat: no-repeat;\n}\n\n.fixed-background {\n    background-attachment: fixed;\n    background-repeat: no-repeat;\n}\n\n.cover-background {\n    background-size: cover;\n    background-repeat: no-repeat;\n}\n```\n\n**Common with gradients:**\n- Gradients don't repeat by default\n- Use `background-attachment: fixed` to keep background in place when scrolling\n- Use `background-size: cover` to make image fit screen",
    "type": "css",
    "tags": ["css", "backgrounds", "repeating"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Background Repeat Control</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 0;\n            padding: 20px;\n        }\n        \n        .repeat-example {\n            background-image: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"50\" height=\"50\"><rect width=\"50\" height=\"50\" fill=\"%23ff0000\"/><circle cx=\"25\" cy=\"25\" r=\"10\" fill=\"%23ffffff\"/></svg>');\n            background-repeat: repeat;\n            padding: 50px;\n            margin: 10px;\n            border: 2px solid black;\n        }\n        \n        .no-repeat {\n            background-image: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100\" height=\"100\"><rect width=\"100\" height=\"100\" fill=\"%2300ff00\"/><circle cx=\"50\" cy=\"50\" r=\"20\" fill=\"%23ffffff\"/></svg>');\n            background-repeat: no-repeat;\n            background-position: center;\n            padding: 50px;\n            margin: 10px;\n            border: 2px solid black;\n        }\n        \n        .gradient-no-repeat {\n            background: linear-gradient(45deg, blue, red);\n            background-repeat: no-repeat;\n            padding: 50px;\n            margin: 10px;\n            border: 2px solid black;\n            color: white;\n            text-align: center;\n        }\n        \n        .fixed-background {\n            background: linear-gradient(135deg, purple, pink);\n            background-attachment: fixed;\n            background-repeat: no-repeat;\n            padding: 50px;\n            margin: 10px;\n            border: 2px solid black;\n            color: white;\n            text-align: center;\n        }\n    </style>\n</head>\n<body>\n    <h1>Background Repeat Control Examples</h1>\n    <div class=\"repeat-example\">Background with repeat (default)</div>\n    <div class=\"no-repeat\">Background with no-repeat</div>\n    <div class=\"gradient-no-repeat\">Gradient with no-repeat</div>\n    <div class=\"fixed-background\">Fixed background attachment</div>\n    <div style=\"height: 200px; background: lightgray; margin: 10px; padding: 20px;\">\n        <p>Scroll to see the fixed background effect above</p>\n    </div>\n</body>\n</html>"
  },
  {
    "question": "How to set image as background in CSS, make image stay in middle and make image fit the screen?",
    "answer": "**Background Image Properties:**\n```css\nbody {\n    background-image: url('my-background.jpg');\n    background-position: center;\n    background-size: cover;\n    background-repeat: no-repeat;\n}\n\n/* Alternative sizes */\n.contain {\n    background-size: contain;\n}\n\n.specific-size {\n    background-size: 800px 600px;\n}\n\n.percentage {\n    background-size: 100% 100%;\n}\n```",
    "type": "css",
    "tags": ["css", "backgrounds", "images"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Background Image Examples</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 0;\n            padding: 20px;\n        }\n        \n        .background-example {\n            background-image: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"200\" height=\"200\"><rect width=\"200\" height=\"200\" fill=\"%23ff6b6b\"/><circle cx=\"100\" cy=\"100\" r=\"50\" fill=\"%23ffffff\"/><text x=\"100\" y=\"110\" text-anchor=\"middle\" fill=\"%23ff6b6b\" font-size=\"20\">BG</text></svg>');\n            background-position: center;\n            background-size: cover;\n            background-repeat: no-repeat;\n            height: 300px;\n            margin: 10px;\n            border: 2px solid black;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            color: white;\n            font-size: 24px;\n            font-weight: bold;\n        }\n        \n        .contain-example {\n            background-image: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"150\" height=\"150\"><rect width=\"150\" height=\"150\" fill=\"%234ecdc4\"/><polygon points=\"75,25 125,75 75,125 25,75\" fill=\"%23ffffff\"/></svg>');\n            background-position: center;\n            background-size: contain;\n            background-repeat: no-repeat;\n            height: 300px;\n            margin: 10px;\n            border: 2px solid black;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            color: white;\n            font-size: 24px;\n            font-weight: bold;\n        }\n        \n        .specific-size {\n            background-image: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100\" height=\"100\"><rect width=\"100\" height=\"100\" fill=\"%2345b7d1\"/><rect x=\"25\" y=\"25\" width=\"50\" height=\"50\" fill=\"%23ffffff\"/></svg>');\n            background-position: center;\n            background-size: 100px 100px;\n            background-repeat: no-repeat;\n            height: 300px;\n            margin: 10px;\n            border: 2px solid black;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            color: white;\n            font-size: 24px;\n            font-weight: bold;\n        }\n    </style>\n</head>\n<body>\n    <h1>Background Image Examples</h1>\n    <div class=\"background-example\">Cover - Fits screen</div>\n    <div class=\"contain-example\">Contain - Shows full image</div>\n    <div class=\"specific-size\">Specific Size - 100px x 100px</div>\n</body>\n</html>"
  },
  {
    "question": "What is a margin and what is padding? Give examples of margin code for top, left, right, bottom, and one line for all",
    "answer": "**Margin vs Padding:**\n- **Margin**: Space outside the element (between elements)\n- **Padding**: Space inside the element (between content and border)\n\n**Individual Margins:**\n```css\n.box {\n    margin-top: 20px;\n    margin-left: 15px;\n    margin-right: 10px;\n    margin-bottom: 25px;\n}\n```\n\n**One Line Margin:**\n```css\n.box {\n    margin: 20px;           /* All sides */\n    margin: 10px 20px;      /* top/bottom left/right */\n    margin: 10px 20px 15px; /* top left/right bottom */\n    margin: 10px 20px 15px 5px; /* top right bottom left */\n}\n```\n\n**Zero Margin:**\n```css\n.no-margin {\n    margin: 0px; /* Border will touch edge of website */\n}\n```",
    "type": "css",
    "tags": ["css", "margin", "padding", "spacing"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Margin and Padding Examples</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 0;\n            padding: 20px;\n            background-color: #f0f0f0;\n        }\n        \n        .margin-example {\n            background-color: lightblue;\n            border: 3px solid blue;\n            padding: 20px;\n            margin-top: 20px;\n            margin-left: 15px;\n            margin-right: 10px;\n            margin-bottom: 25px;\n        }\n        \n        .padding-example {\n            background-color: lightgreen;\n            border: 3px solid green;\n            margin: 20px;\n            padding-top: 30px;\n            padding-left: 25px;\n            padding-right: 20px;\n            padding-bottom: 35px;\n        }\n        \n        .one-line-margin {\n            background-color: lightcoral;\n            border: 3px solid red;\n            padding: 20px;\n            margin: 20px; /* All sides equal */\n        }\n        \n        .different-margins {\n            background-color: lightyellow;\n            border: 3px solid orange;\n            padding: 20px;\n            margin: 10px 30px 20px 5px; /* top right bottom left */\n        }\n        \n        .no-margin {\n            background-color: lightgray;\n            border: 3px solid black;\n            padding: 20px;\n            margin: 0px; /* Touches edge */\n        }\n        \n        .container {\n            background-color: white;\n            border: 2px dashed #333;\n            margin: 10px;\n            padding: 10px;\n        }\n    </style>\n</head>\n<body>\n    <h1>Margin and Padding Examples</h1>\n    <div class=\"container\">\n        <div class=\"margin-example\">Individual margins (top: 20px, left: 15px, right: 10px, bottom: 25px)</div>\n        <div class=\"padding-example\">Individual padding (top: 30px, left: 25px, right: 20px, bottom: 35px)</div>\n        <div class=\"one-line-margin\">One line margin: 20px all sides</div>\n        <div class=\"different-margins\">Different margins: 10px 30px 20px 5px (top right bottom left)</div>\n        <div class=\"no-margin\">No margin (0px) - touches edges</div>\n    </div>\n</body>\n</html>"
  },
  {
    "question": "How to make div stick to left or right and center regardless of browser size?",
    "answer": "**Centering with Auto Margins:**\n```css\n.center {\n    margin-left: auto;\n    margin-right: auto;\n    width: 300px;\n}\n\n.left {\n    margin-left: 0;\n    margin-right: auto;\n}\n\n.right {\n    margin-left: auto;\n    margin-right: 0;\n}\n```\n\n**Note:** Setting both left and right to auto makes div stay in the middle regardless of browser size.",
    "type": "css",
    "tags": ["css", "centering", "layout"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Div Positioning</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 0;\n            padding: 20px;\n            background-color: #f0f0f0;\n        }\n        \n        .center {\n            background-color: lightblue;\n            border: 3px solid blue;\n            padding: 20px;\n            margin-left: auto;\n            margin-right: auto;\n            width: 300px;\n            text-align: center;\n        }\n        \n        .left {\n            background-color: lightgreen;\n            border: 3px solid green;\n            padding: 20px;\n            margin-left: 0;\n            margin-right: auto;\n            width: 250px;\n        }\n        \n        .right {\n            background-color: lightcoral;\n            border: 3px solid red;\n            padding: 20px;\n            margin-left: auto;\n            margin-right: 0;\n            width: 250px;\n        }\n        \n        .container {\n            background-color: white;\n            border: 2px dashed #333;\n            padding: 20px;\n            margin: 10px;\n        }\n    </style>\n</head>\n<body>\n    <h1>Div Positioning Examples</h1>\n    <div class=\"container\">\n        <div class=\"center\">Centered Div (auto margins)</div>\n        <div class=\"left\">Left Aligned Div</div>\n        <div class=\"right\">Right Aligned Div</div>\n    </div>\n    <p>Resize browser window to see how the centered div stays in the middle!</p>\n</body>\n</html>"
  },
  {
    "question": "What is the float property in CSS and how to use it?",
    "answer": "**Float Property:**\n```css\nimg {\n    float: left;    /* Takes all images to top left */\n}\n\nimg {\n    float: right;   /* Takes images to top right */\n}\n\n.clear {\n    clear: both;    /* Stops floating elements */\n}\n```\n\n**Popular for wrapping text around images:**\n- `float: left` - Element floats to left, text wraps around right\n- `float: right` - Element floats to right, text wraps around left\n- `clear: left/right/both` - Stops elements from floating",
    "type": "css",
    "tags": ["css", "float", "layout"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Float Property Examples</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            line-height: 1.6;\n        }\n        \n        .float-left {\n            float: left;\n            width: 150px;\n            height: 100px;\n            background-color: lightblue;\n            border: 2px solid blue;\n            margin: 10px 15px 10px 0;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-weight: bold;\n        }\n        \n        .float-right {\n            float: right;\n            width: 150px;\n            height: 100px;\n            background-color: lightcoral;\n            border: 2px solid red;\n            margin: 10px 0 10px 15px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-weight: bold;\n        }\n        \n        .clear {\n            clear: both;\n            background-color: lightyellow;\n            padding: 20px;\n            border: 2px solid orange;\n            margin: 20px 0;\n        }\n        \n        .container {\n            background-color: white;\n            border: 2px dashed #333;\n            padding: 20px;\n            margin: 10px 0;\n        }\n    </style>\n</head>\n<body>\n    <h1>Float Property Examples</h1>\n    <div class=\"container\">\n        <div class=\"float-left\">Float Left</div>\n        <p>This text wraps around the left-floating element. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>\n        \n        <div class=\"float-right\">Float Right</div>\n        <p>This text wraps around the right-floating element. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>\n        \n        <div class=\"clear\">This div clears both floats and appears below all floating elements.</div>\n    </div>\n</body>\n</html>"
  },
  {
    "question": "How to change location of text in HTML and CSS (inline and external)?",
    "answer": "**Text Alignment:**\n```css\n.center {\n    text-align: center;\n}\n\n.left {\n    text-align: left;\n}\n\n.right {\n    text-align: right;\n}\n\n.justify {\n    text-align: justify;\n}\n```\n\n**Inline CSS:**\n```html\n<h1 style=\"text-align: center;\">Centered Heading</h1>\n<p style=\"text-align: right;\">Right-aligned paragraph</p>\n```\n\n**External CSS:**\n```css\nh1 { text-align: center; }\np { text-align: justify; }\n```",
    "type": "css",
    "tags": ["css", "text-align", "alignment"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Text Alignment Examples</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            line-height: 1.6;\n        }\n        \n        .center {\n            text-align: center;\n            background-color: lightblue;\n            padding: 20px;\n            margin: 10px;\n            border: 2px solid blue;\n        }\n        \n        .left {\n            text-align: left;\n            background-color: lightgreen;\n            padding: 20px;\n            margin: 10px;\n            border: 2px solid green;\n        }\n        \n        .right {\n            text-align: right;\n            background-color: lightcoral;\n            padding: 20px;\n            margin: 10px;\n            border: 2px solid red;\n        }\n        \n        .justify {\n            text-align: justify;\n            background-color: lightyellow;\n            padding: 20px;\n            margin: 10px;\n            border: 2px solid orange;\n        }\n        \n        .inline-example {\n            background-color: lightgray;\n            padding: 20px;\n            margin: 10px;\n            border: 2px solid gray;\n        }\n    </style>\n</head>\n<body>\n    <h1>Text Alignment Examples</h1>\n    <div class=\"center\">This text is centered using CSS</div>\n    <div class=\"left\">This text is left-aligned using CSS</div>\n    <div class=\"right\">This text is right-aligned using CSS</div>\n    <div class=\"justify\">This text is justified using CSS. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</div>\n    \n    <div class=\"inline-example\">\n        <h2 style=\"text-align: center;\">Inline CSS Example</h2>\n        <p style=\"text-align: right;\">This paragraph uses inline CSS for right alignment</p>\n    </div>\n</body>\n</html>"
  },
  {
    "question": "How to stop paragraph from wrapping with float function?",
    "answer": "**Clear Property:**\n```css\n.float-left {\n    float: left;\n}\n\n.clear-left {\n    clear: left;\n}\n\n.clear-both {\n    clear: both;\n}\n\n.clear-right {\n    clear: right;\n}\n```\n\n**If float: left, use:**\n- `clear: left` - Stops left-floating elements\n- `clear: both` - Stops all floating elements\n\n**If float: right, use:**\n- `clear: right` - Stops right-floating elements\n- `clear: both` - Stops all floating elements",
    "type": "css",
    "tags": ["css", "float", "clear", "layout"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Clear Property Examples</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            line-height: 1.6;\n        }\n        \n        .float-left {\n            float: left;\n            width: 120px;\n            height: 80px;\n            background-color: lightblue;\n            border: 2px solid blue;\n            margin: 10px 15px 10px 0;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-weight: bold;\n        }\n        \n        .float-right {\n            float: right;\n            width: 120px;\n            height: 80px;\n            background-color: lightcoral;\n            border: 2px solid red;\n            margin: 10px 0 10px 15px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-weight: bold;\n        }\n        \n        .clear-left {\n            clear: left;\n            background-color: lightgreen;\n            padding: 15px;\n            border: 2px solid green;\n            margin: 10px 0;\n        }\n        \n        .clear-right {\n            clear: right;\n            background-color: lightyellow;\n            padding: 15px;\n            border: 2px solid orange;\n            margin: 10px 0;\n        }\n        \n        .clear-both {\n            clear: both;\n            background-color: lightpink;\n            padding: 15px;\n            border: 2px solid pink;\n            margin: 10px 0;\n        }\n        \n        .container {\n            background-color: white;\n            border: 2px dashed #333;\n            padding: 20px;\n            margin: 10px 0;\n        }\n    </style>\n</head>\n<body>\n    <h1>Clear Property Examples</h1>\n    <div class=\"container\">\n        <div class=\"float-left\">Float Left</div>\n        <div class=\"float-right\">Float Right</div>\n        <p>This text wraps around both floating elements. Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n        \n        <div class=\"clear-left\">Clear Left - Stops left-floating elements</div>\n        <p>This text continues after clearing left floats.</p>\n        \n        <div class=\"clear-right\">Clear Right - Stops right-floating elements</div>\n        <p>This text continues after clearing right floats.</p>\n        \n        <div class=\"clear-both\">Clear Both - Stops all floating elements</div>\n        <p>This text appears below all floating elements.</p>\n    </div>\n</body>\n</html>"
  },
  {
    "question": "Discuss static positions, how to use and its offsets and examples",
    "answer": "**Static Position (Default):**\n```css\n.static {\n    position: static;\n    top: 50px;    /* Ignored - no effect */\n    left: 50px;   /* Ignored - no effect */\n}\n```\n\n**Static Position:**\n- Default position for all elements\n- Elements flow normally in document\n- `top`, `left`, `right`, `bottom` properties have NO effect\n- Cannot be moved with offset properties\n- Elements appear in normal document flow",
    "type": "css",
    "tags": ["css", "positioning", "static"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Static Position Examples</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            line-height: 1.6;\n        }\n        \n        .static-box {\n            position: static;\n            background-color: lightblue;\n            border: 3px solid blue;\n            padding: 20px;\n            margin: 10px;\n            /* These properties are ignored in static position */\n            top: 100px;\n            left: 100px;\n            right: 100px;\n            bottom: 100px;\n        }\n        \n        .normal-box {\n            background-color: lightgreen;\n            border: 3px solid green;\n            padding: 20px;\n            margin: 10px;\n        }\n        \n        .container {\n            background-color: white;\n            border: 2px dashed #333;\n            padding: 20px;\n            margin: 10px;\n        }\n    </style>\n</head>\n<body>\n    <h1>Static Position Examples</h1>\n    <div class=\"container\">\n        <div class=\"normal-box\">Normal Box (default static)</div>\n        <div class=\"static-box\">Static Box with ignored offset properties</div>\n        <div class=\"normal-box\">Another Normal Box</div>\n    </div>\n    <p><strong>Note:</strong> Static position ignores top, left, right, bottom properties. Elements flow normally in the document.</p>\n</body>\n</html>"
  },
  {
    "question": "Discuss relative positions, how to use, its offset and examples",
    "answer": "**Relative Position:**\n```css\n.relative {\n    position: relative;\n    top: 50px;\n    left: 50px;\n}\n```\n\n**Relative Position:**\n- Element positioned relative to its normal position\n- `top`, `left`, `right`, `bottom` properties work\n- Original space is preserved (other elements don't move)\n- Element moves from its original position\n- Useful for fine-tuning element placement",
    "type": "css",
    "tags": ["css", "positioning", "relative"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Relative Position Examples</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            line-height: 1.6;\n        }\n        \n        .normal-box {\n            background-color: lightgray;\n            border: 2px solid gray;\n            padding: 20px;\n            margin: 10px;\n        }\n        \n        .relative-box {\n            position: relative;\n            background-color: lightblue;\n            border: 3px solid blue;\n            padding: 20px;\n            margin: 10px;\n            top: 30px;\n            left: 50px;\n        }\n        \n        .relative-negative {\n            position: relative;\n            background-color: lightcoral;\n            border: 3px solid red;\n            padding: 20px;\n            margin: 10px;\n            top: -20px;\n            left: -30px;\n        }\n        \n        .container {\n            background-color: white;\n            border: 2px dashed #333;\n            padding: 20px;\n            margin: 10px;\n        }\n    </style>\n</head>\n<body>\n    <h1>Relative Position Examples</h1>\n    <div class=\"container\">\n        <div class=\"normal-box\">Normal Box 1</div>\n        <div class=\"relative-box\">Relative Box (moved down 30px, right 50px)</div>\n        <div class=\"normal-box\">Normal Box 2 (space preserved)</div>\n        <div class=\"relative-negative\">Relative Box (moved up 20px, left 30px)</div>\n        <div class=\"normal-box\">Normal Box 3</div>\n    </div>\n    <p><strong>Note:</strong> Relative positioning moves elements from their original position while preserving the original space.</p>\n</body>\n</html>"
  },
  {
    "question": "Discuss absolute positions, how to use, its offset and examples",
    "answer": "**Absolute Position:**\n```css\n.absolute {\n    position: absolute;\n    top: 0;\n    left: 0;\n}\n```\n\n**Absolute Position:**\n- Element positioned relative to nearest positioned ancestor\n- If no positioned ancestor, positioned relative to document body\n- Removed from normal document flow\n- Other elements act as if it doesn't exist\n- `top`, `left`, `right`, `bottom` properties work\n- Used for overlays, modals, tooltips",
    "type": "css",
    "tags": ["css", "positioning", "absolute"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Absolute Position Examples</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            line-height: 1.6;\n        }\n        \n        .container {\n            position: relative;\n            background-color: lightgray;\n            border: 3px solid gray;\n            padding: 40px;\n            margin: 20px;\n            height: 300px;\n        }\n        \n        .absolute-top-left {\n            position: absolute;\n            top: 0;\n            left: 0;\n            background-color: lightblue;\n            border: 2px solid blue;\n            padding: 15px;\n            width: 100px;\n        }\n        \n        .absolute-top-right {\n            position: absolute;\n            top: 0;\n            right: 0;\n            background-color: lightcoral;\n            border: 2px solid red;\n            padding: 15px;\n            width: 100px;\n        }\n        \n        .absolute-bottom-left {\n            position: absolute;\n            bottom: 0;\n            left: 0;\n            background-color: lightgreen;\n            border: 2px solid green;\n            padding: 15px;\n            width: 100px;\n        }\n        \n        .absolute-center {\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%);\n            background-color: lightyellow;\n            border: 2px solid orange;\n            padding: 15px;\n            width: 120px;\n            text-align: center;\n        }\n        \n        .normal-box {\n            background-color: white;\n            border: 2px solid black;\n            padding: 20px;\n            margin: 10px;\n        }\n    </style>\n</head>\n<body>\n    <h1>Absolute Position Examples</h1>\n    <div class=\"normal-box\">Normal Box (not affected by absolute elements)</div>\n    \n    <div class=\"container\">\n        <div class=\"absolute-top-left\">Top Left</div>\n        <div class=\"absolute-top-right\">Top Right</div>\n        <div class=\"absolute-bottom-left\">Bottom Left</div>\n        <div class=\"absolute-center\">Center</div>\n        <p>This container has relative positioning, so absolute elements position relative to it.</p>\n    </div>\n    \n    <div class=\"normal-box\">Another Normal Box</div>\n    <p><strong>Note:</strong> Absolute positioning removes elements from normal flow and positions them relative to the nearest positioned ancestor.</p>\n</body>\n</html>"
  },
  {
    "question": "Discuss fixed positions, how to use, its offset and examples",
    "answer": "**Fixed Position:**\n```css\n.fixed {\n    position: fixed;\n    top: 0;\n    left: 0;\n}\n```\n\n**Fixed Position:**\n- Element positioned relative to viewport (browser window)\n- Stays in same position when scrolling\n- Removed from normal document flow\n- `top`, `left`, `right`, `bottom` properties work\n- Used for navigation bars, chat buttons, back-to-top buttons\n- Always visible regardless of scroll position",
    "type": "css",
    "tags": ["css", "positioning", "fixed"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Fixed Position Examples</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 0;\n            padding: 20px;\n            line-height: 1.6;\n        }\n        \n        .fixed-header {\n            position: fixed;\n            top: 0;\n            left: 0;\n            right: 0;\n            background-color: #333;\n            color: white;\n            padding: 15px;\n            text-align: center;\n            z-index: 1000;\n        }\n        \n        .fixed-sidebar {\n            position: fixed;\n            top: 80px;\n            right: 0;\n            width: 200px;\n            background-color: lightblue;\n            border: 2px solid blue;\n            padding: 20px;\n            z-index: 999;\n        }\n        \n        .fixed-button {\n            position: fixed;\n            bottom: 20px;\n            right: 20px;\n            background-color: red;\n            color: white;\n            border: none;\n            padding: 15px;\n            border-radius: 50%;\n            cursor: pointer;\n            z-index: 1000;\n        }\n        \n        .content {\n            margin-top: 80px;\n            margin-right: 250px;\n            padding: 20px;\n        }\n        \n        .scroll-content {\n            height: 2000px;\n            background: linear-gradient(to bottom, lightgray, white);\n            padding: 20px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"fixed-header\">Fixed Header - Always Visible</div>\n    \n    <div class=\"fixed-sidebar\">\n        <h3>Fixed Sidebar</h3>\n        <p>This sidebar stays in place when scrolling</p>\n    </div>\n    \n    <button class=\"fixed-button\" onclick=\"alert('Back to top!')\">↑</button>\n    \n    <div class=\"content\">\n        <h1>Fixed Position Examples</h1>\n        <div class=\"scroll-content\">\n            <h2>Scrollable Content</h2>\n            <p>This content is scrollable. Notice how the fixed elements stay in place:</p>\n            <ul>\n                <li>Fixed header at the top</li>\n                <li>Fixed sidebar on the right</li>\n                <li>Fixed button at bottom right</li>\n            </ul>\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>\n            <p>Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>\n            <p>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.</p>\n        </div>\n    </div>\n</body>\n</html>"
  },
  {
    "question": "What is the transform in CSS and give some examples?",
    "answer": "**CSS Transform Properties:**\n```css\n.translate {\n    transform: translateX(50px);\n    transform: translateY(30px);\n    transform: translate(50px, 30px);\n}\n\n.rotate {\n    transform: rotateX(45deg);\n    transform: rotateY(30deg);\n    transform: rotateZ(90deg);\n    transform: rotate(45deg);\n}\n\n.scale {\n    transform: scaleX(1.5);\n    transform: scaleY(0.8);\n    transform: scale(1.2, 0.9);\n}\n\n.skew {\n    transform: skewX(20deg);\n    transform: skewY(15deg);\n    transform: skew(20deg, 15deg);\n}\n```",
    "type": "css",
    "tags": ["css", "transform", "animation"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>CSS Transform Examples</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            background-color: #f0f0f0;\n        }\n        \n        .container {\n            display: flex;\n            flex-wrap: wrap;\n            gap: 20px;\n            margin: 20px 0;\n        }\n        \n        .box {\n            width: 100px;\n            height: 100px;\n            background-color: lightblue;\n            border: 3px solid blue;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-weight: bold;\n            margin: 10px;\n        }\n        \n        .translate-x {\n            transform: translateX(50px);\n        }\n        \n        .translate-y {\n            transform: translateY(30px);\n        }\n        \n        .translate {\n            transform: translate(50px, 30px);\n        }\n        \n        .rotate {\n            transform: rotate(45deg);\n        }\n        \n        .rotate-z {\n            transform: rotateZ(90deg);\n        }\n        \n        .scale {\n            transform: scale(1.5);\n        }\n        \n        .scale-x {\n            transform: scaleX(1.5);\n        }\n        \n        .scale-y {\n            transform: scaleY(1.5);\n        }\n        \n        .skew {\n            transform: skew(20deg, 10deg);\n        }\n        \n        .skew-x {\n            transform: skewX(30deg);\n        }\n        \n        .skew-y {\n            transform: skewY(20deg);\n        }\n        \n        .multiple {\n            transform: translate(30px, 20px) rotate(45deg) scale(1.2);\n        }\n    </style>\n</head>\n<body>\n    <h1>CSS Transform Examples</h1>\n    <div class=\"container\">\n        <div class=\"box\">Normal</div>\n        <div class=\"box translate-x\">TranslateX</div>\n        <div class=\"box translate-y\">TranslateY</div>\n        <div class=\"box translate\">Translate</div>\n        <div class=\"box rotate\">Rotate</div>\n        <div class=\"box rotate-z\">RotateZ</div>\n        <div class=\"box scale\">Scale</div>\n        <div class=\"box scale-x\">ScaleX</div>\n        <div class=\"box scale-y\">ScaleY</div>\n        <div class=\"box skew\">Skew</div>\n        <div class=\"box skew-x\">SkewX</div>\n        <div class=\"box skew-y\">SkewY</div>\n        <div class=\"box multiple\">Multiple</div>\n    </div>\n</body>\n</html>"
  },
  {
    "question": "What are pseudo-classes and how to use them? Give examples with links and buttons",
    "answer": "**Pseudo-classes:**\nSpecial keywords added to selectors that specify a special state of the element.\n\n**Link Pseudo-classes:**\n```css\na:link { color: blue; }        /* Unvisited link */\na:visited { color: purple; }   /* Visited link */\na:hover { color: red; }         /* Mouse over */\na:active { color: green; }      /* Clicked */\n```\n\n**Button Pseudo-classes:**\n```css\nbutton:hover { background: yellow; }\nbutton:active { background: orange; }\nbutton:focus { outline: 2px solid blue; }\n```\n\n**Common Pseudo-classes:**\n- `:hover` - Mouse over element\n- `:active` - Element being clicked\n- `:focus` - Element has keyboard focus\n- `:visited` - Visited link\n- `:link` - Unvisited link",
    "type": "css",
    "tags": ["css", "pseudo-classes", "interactive"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Pseudo-classes Examples</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            line-height: 1.6;\n        }\n        \n        /* Link pseudo-classes */\n        a:link {\n            color: blue;\n            text-decoration: underline;\n        }\n        \n        a:visited {\n            color: purple;\n        }\n        \n        a:hover {\n            color: red;\n            text-decoration: none;\n            font-weight: bold;\n        }\n        \n        a:active {\n            color: green;\n            background-color: yellow;\n        }\n        \n        /* Button pseudo-classes */\n        .button {\n            background-color: #4CAF50;\n            color: white;\n            padding: 15px 30px;\n            border: none;\n            border-radius: 5px;\n            cursor: pointer;\n            font-size: 16px;\n            margin: 10px;\n            transition: all 0.3s;\n        }\n        \n        .button:hover {\n            background-color: #45a049;\n            transform: scale(1.05);\n        }\n        \n        .button:active {\n            background-color: #3e8e41;\n            transform: scale(0.95);\n        }\n        \n        .button:focus {\n            outline: 3px solid #2196F3;\n        }\n        \n        /* Input pseudo-classes */\n        input {\n            padding: 10px;\n            margin: 10px;\n            border: 2px solid #ccc;\n            border-radius: 4px;\n        }\n        \n        input:focus {\n            border-color: #4CAF50;\n            outline: none;\n        }\n        \n        input:hover {\n            border-color: #45a049;\n        }\n        \n        /* Div pseudo-classes */\n        .hover-box {\n            background-color: lightblue;\n            padding: 20px;\n            margin: 10px;\n            border: 2px solid blue;\n            transition: all 0.3s;\n        }\n        \n        .hover-box:hover {\n            background-color: lightcoral;\n            transform: translateY(-5px);\n            box-shadow: 0 5px 15px rgba(0,0,0,0.3);\n        }\n    </style>\n</head>\n<body>\n    <h1>Pseudo-classes Examples</h1>\n    \n    <h2>Link Pseudo-classes</h2>\n    <p><a href=\"#\">This is a link - hover over it!</a></p>\n    <p><a href=\"#visited\">This link changes when visited</a></p>\n    \n    <h2>Button Pseudo-classes</h2>\n    <button class=\"button\">Hover Button</button>\n    <button class=\"button\">Focus Button (click then press Tab)</button>\n    \n    <h2>Input Pseudo-classes</h2>\n    <input type=\"text\" placeholder=\"Focus and hover over this input\">\n    <input type=\"email\" placeholder=\"Email input\">\n    \n    <h2>Div Hover Effect</h2>\n    <div class=\"hover-box\">Hover over this box!</div>\n    \n    <p><strong>Try:</strong> Hovering, clicking, focusing, and visiting links to see different pseudo-class effects!</p>\n</body>\n</html>"
  },
  {
    "question": "How to write comments in CSS?",
    "answer": "**CSS Comments:**\n```css\n/* This is a single-line comment */\n\n/*\nThis is a\nmulti-line comment\nin CSS\n*/\n\np {\n    color: red;\n    /* This is an inline comment */\n    font-size: 16px;\n}\n```\n\n**Important:**\n- CSS comments use `/* */` syntax\n- Comments are ignored by the browser\n- Useful for documentation and debugging\n- Can span multiple lines\n- Cannot be nested",
    "type": "css",
    "tags": ["css", "comments", "syntax"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>CSS Comments Example</title>\n    <style>\n        /* This is a single-line comment */\n        \n        /*\n        This is a multi-line comment\n        that spans several lines\n        */\n        \n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            /* This is an inline comment */\n        }\n        \n        /* Header styling */\n        h1 {\n            color: blue;\n            text-align: center;\n        }\n        \n        /* Paragraph styling with comments */\n        p {\n            color: #333;\n            line-height: 1.6;\n            /* margin: 10px; */ /* This line is commented out */\n        }\n        \n        /*\n        .commented-out {\n            background-color: red;\n            padding: 20px;\n        }\n        */\n        \n        .active {\n            background-color: lightblue;\n            padding: 15px;\n            border: 2px solid blue;\n            /* border-radius: 5px; */ /* Commented out property */\n        }\n    </style>\n</head>\n<body>\n    <h1>CSS Comments Example</h1>\n    <p>This page demonstrates CSS comments. Check the source code to see the comments!</p>\n    <div class=\"active\">This div has active styling</div>\n    <p>Comments in CSS use /* */ syntax and are ignored by the browser.</p>\n</body>\n</html>"
  },
  {
    "question": "How to make a div animation in CSS using keyframes?",
    "answer": "**CSS Animations with Keyframes:**\n```css\n@keyframes myslide {\n    from { margin-left: 100px; }\n    to { margin-left: 0px; }\n}\n\n@keyframes myrotate {\n    100% { transform: rotateZ(360deg); }\n}\n\n@keyframes myopacity {\n    100% { opacity: 0; }\n}\n\n@keyframes mycolorchange {\n    20% { background-color: red; }\n    40% { background-color: orange; }\n    60% { background-color: yellow; }\n    80% { background-color: blue; }\n    100% { background-color: purple; }\n}\n\n.animated {\n    animation: myslide 3s linear 0s infinite running;\n}\n```\n\n**Animation Properties:**\n- `animation-name` - Name of keyframe\n- `animation-duration` - How long animation lasts\n- `animation-iteration-count` - How many times to repeat\n- `animation-timing-function` - Speed curve\n- `animation-delay` - Delay before starting",
    "type": "css",
    "tags": ["css", "animations", "keyframes"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>CSS Animations with Keyframes</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            background-color: #f0f0f0;\n        }\n        \n        .box {\n            width: 100px;\n            height: 100px;\n            margin: 20px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-weight: bold;\n            color: white;\n        }\n        \n        /* Slide animation */\n        @keyframes myslide {\n            from { margin-left: 100px; }\n            to { margin-left: 0px; }\n        }\n        \n        .slide {\n            background-color: lightblue;\n            animation: myslide 2s ease-in-out infinite alternate;\n        }\n        \n        /* Rotate animation */\n        @keyframes myrotate {\n            100% { transform: rotateZ(360deg); }\n        }\n        \n        .rotate {\n            background-color: lightcoral;\n            animation: myrotate 3s linear infinite;\n        }\n        \n        /* Opacity animation */\n        @keyframes myopacity {\n            0% { opacity: 1; }\n            50% { opacity: 0.3; }\n            100% { opacity: 1; }\n        }\n        \n        .opacity {\n            background-color: lightgreen;\n            animation: myopacity 2s ease-in-out infinite;\n        }\n        \n        /* Color change animation */\n        @keyframes mycolorchange {\n            0% { background-color: red; }\n            25% { background-color: orange; }\n            50% { background-color: yellow; }\n            75% { background-color: blue; }\n            100% { background-color: purple; }\n        }\n        \n        .colorchange {\n            background-color: red;\n            animation: mycolorchange 4s ease-in-out infinite;\n        }\n        \n        /* Scale animation */\n        @keyframes myscale {\n            0% { transform: scale(1); }\n            50% { transform: scale(1.5); }\n            100% { transform: scale(1); }\n        }\n        \n        .scale {\n            background-color: lightyellow;\n            animation: myscale 2s ease-in-out infinite;\n        }\n        \n        /* Multiple animations */\n        @keyframes multiple {\n            0% { transform: translateX(0) rotate(0deg) scale(1); }\n            50% { transform: translateX(50px) rotate(180deg) scale(1.2); }\n            100% { transform: translateX(0) rotate(360deg) scale(1); }\n        }\n        \n        .multiple {\n            background-color: lightpink;\n            animation: multiple 3s ease-in-out infinite;\n        }\n    </style>\n</head>\n<body>\n    <h1>CSS Animations with Keyframes</h1>\n    <div class=\"box slide\">Slide</div>\n    <div class=\"box rotate\">Rotate</div>\n    <div class=\"box opacity\">Opacity</div>\n    <div class=\"box colorchange\">Colors</div>\n    <div class=\"box scale\">Scale</div>\n    <div class=\"box multiple\">Multiple</div>\n    \n    <h2>Animation Properties Used:</h2>\n    <ul>\n        <li><strong>animation-name:</strong> Name of the keyframe</li>\n        <li><strong>animation-duration:</strong> How long the animation lasts</li>\n        <li><strong>animation-iteration-count:</strong> How many times to repeat (infinite)</li>\n        <li><strong>animation-timing-function:</strong> Speed curve (ease-in-out, linear)</li>\n        <li><strong>animation-direction:</strong> Direction (alternate, normal)</li>\n    </ul>\n</body>\n</html>"
  }
]
