[
  {
    "question": "How do I start a new JavaScript file?",
    "answer": "// In terminal:\nnode filename.js\n\n// Or in HTML:\n<script src=\"filename.js\"></script>",
    "type": "javascript",
    "tags": ["javascript"],
    "code": "// Example JavaScript file\nconsole.log('Hello, World!');\n\n// Function example\nfunction greet(name) {\n    return `Hello, ${name}!`;\n}\n\nconsole.log(greet('EVERMIND'));"
  },
  {
    "question": "How do I start a new Python file?",
    "answer": "# In terminal:\npython filename.py\n\n# Or:\npython3 filename.py",
    "type": "python",
    "tags": ["python"],
    "code": "# Example Python file\nprint('Hello, World!')\n\n# Function example\ndef greet(name):\n    return f'Hello, {name}!'\n\nprint(greet('EVERMIND'))"
  },
  {
    "question": "How do I start a new C program/file?",
    "answer": "// Compile:\ngcc filename.c -o filename\n\n// Run:\n./filename",
    "type": "c",
    "tags": ["c"]
  },
  {
    "question": "How do I start a new C++ program/file?",
    "answer": "// Compile:\ng++ filename.cpp -o filename\n\n// Run:\n./filename",
    "type": "c",
    "tags": ["c"]
  },
  {
    "question": "How do I start a Playwright file in CMD?",
    "answer": "# Install Playwright:\nnpm install playwright\n\n# Run test:\nnpx playwright test filename.spec.js",
    "type": "javascript",
    "tags": ["javascript", "playwright"]
  },
  {
    "question": "What does API stand for?",
    "answer": "API stands for Application Programming Interface.\n\nIt's a set of rules and protocols that allows different software applications to communicate with each other.",
    "type": "html",
    "tags": ["api"]
  },
  {
    "question": "What are the names of these symbols: () [] <> {} / \\ |",
    "answer": "() - Parentheses\n[] - Square brackets / Brackets\n<> - Angle brackets\n{} - Curly braces / Braces\n/ - Forward slash\n\\ - Backslash\n| - Pipe / Vertical bar",
    "type": "html",
    "tags": ["symbols"]
  },
  {
    "question": "How do I make a commit and push changes to GitHub?",
    "answer": "git add .\ngit commit -m \"Your commit message\"\ngit push origin main",
    "type": "shell",
    "tags": ["git"]
  },
  {
    "question": "How do I see the commit history?",
    "answer": "git log\n\n# Optional for a one-line view:\ngit log --oneline",
    "type": "shell",
    "tags": ["git"]
  },
  {
    "question": "How do I view tags?",
    "answer": "git tag",
    "type": "shell",
    "tags": ["git"]
  },
  {
    "question": "How do I create a tag?",
    "answer": "git tag <tag-name>\n\n# For annotated tag:\ngit tag -a <tag-name> -m \"Tag message\"",
    "type": "shell",
    "tags": ["git"]
  },
  {
    "question": "How do I push tags to GitHub?",
    "answer": "# Push a single tag:\ngit push origin <tag-name>\n\n# Push all tags:\ngit push origin --tags",
    "type": "shell",
    "tags": ["git"]
  },
  {
    "question": "How do I delete a tag?",
    "answer": "# Delete locally:\ngit tag -d <tag-name>\n\n# Delete remotely:\ngit push origin --delete <tag-name>",
    "type": "shell",
    "tags": ["git"]
  },
  {
    "question": "How do I check the current branch?",
    "answer": "git branch\n\n# Or just the current branch:\ngit branch --show-current",
    "type": "shell",
    "tags": ["git"]
  },
  {
  "question": "How do you open Command Prompt or PowerShell directly from File Explorer in a directory?",
  "answer": "Go to the folder location in File Explorer. To open Command Prompt, click the address/search bar, type `cmd`, and press Enter. To open PowerShell, click the address bar, type `powershell`, and press Enter. Alternatively, you can hold Shift, then right-click on an empty area in the folder and choose 'Open PowerShell window here' or 'Open Command window here' if the option is available.",
    "type": "shell",
    "tags": ["terminal", "windows"]
  },

  {
    "question": "How do you run scrcpy?",
    "answer": "Use the following steps:\n\n1. Run `adb kill-server`\n2. Run `adb start-server`\n3. Connect your device using `adb connect <ip-address>`\n4. Launch scrcpy by typing `scrcpy`",
    "type": "shell",
    "tags": ["adb", "scrcpy", "android"]
  },
  {
    "question": "How do you start a localhost server on port 8000 using Python and Node.js?",
    "answer": "* Python (Works for both Python 2 and 3):\n  Run: `python -m http.server 8000`\n  Then visit: http://localhost:8000\n\n* Node.js:\n  First install: `npm install -g http-server`\n  Then run: `http-server -p 8000`",
    "type": "shell",
    "tags": ["python", "nodejs", "server"]
  },
  {
    "question": "What does IP stand for?",
    "answer": "Internet Protocol.",
    "type": "networking",
    "tags": ["ip", "protocol"]
  },
  {
    "question": "What does HTTP stand for?",
    "answer": "HyperText Transfer Protocol.",
    "type": "networking",
    "tags": ["http", "protocol"]
  },
  {
    "question": "What does URL stand for?",
    "answer": "Uniform Resource Locator.",
    "type": "networking",
    "tags": ["url", "web"]
  },
  {
    "question": "What does DNS stand for, and what does it mean?",
    "answer": "Domain Name System — it translates human-readable domain names (like google.com) into IP addresses that computers use to identify each other.",
    "type": "networking",
    "tags": ["dns", "domain"]
  },
  {
    "question": "What does HTML stand for, and what does it mean?",
    "answer": "HyperText Markup Language — the standard language used to structure and display content on the web.",
    "type": "html",
    "tags": ["html", "markup"]
  },
  {
    "question": "What does CSS stand for, and what does it mean?",
    "answer": "Cascading Style Sheets — it controls the layout, colors, and overall appearance of a webpage.",
    "type": "css",
    "tags": ["css", "styling"]
  },
  {
    "question": "What was the previous name of JavaScript?",
    "answer": "ECMAScript.",
    "type": "javascript",
    "tags": ["javascript", "history"]
  },
  {
    "question": "What does DOM stand for?",
    "answer": "Document Object Model.",
    "type": "javascript",
    "tags": ["dom", "web"]
  },
  {
    "question": "What does NPM stand for?",
    "answer": "Node Package Manager — it's used to install and manage packages in Node.js projects.",
    "type": "javascript",
    "tags": ["npm", "nodejs"]
  },
  {
    "question": "What does SaaS stand for, and what does it mean?",
    "answer": "Software as a Service — software delivered over the internet, usually through a subscription, like Google Docs or Slack.",
    "type": "concepts",
    "tags": ["saas", "cloud"]
  },
  {
    "question": "What does JSON mean?",
    "answer": "JavaScript Object Notation — a lightweight format for storing and transferring data between systems.",
    "type": "javascript",
    "tags": ["json", "data"]
  },
  {
    "question": "Give an example of how systems communicate.",
    "answer": "The client sends a GET request to the server. The server responds with status codes like 200 (OK), 400 (client error), or 500 (server error).",
    "type": "networking",
    "tags": ["http", "communication"]
  },
  {
    "question": "What is a tech stack, what does it stand for, and give examples.",
    "answer": "A combination of technologies used to build an application. Examples include:\n\n* LAMP: Linux, Apache, MySQL, PHP\n* MEAN: MongoDB, Express, Angular, Node.js\n  It usually includes a front-end framework, an API, and a backend layer.",
    "type": "concepts",
    "tags": ["stack", "architecture"]
  },
  {
    "question": "What does LLM stand for?",
    "answer": "Large Language Model — an AI model trained on vast amounts of text data to understand and generate human-like language.",
    "type": "ai",
    "tags": ["llm", "ai", "machine-learning"]
  },
  {
    "question": "How do you kill an active port like localhost:8000?",
    "answer": "Use one of these methods:\n\n**Windows:**\n`netstat -ano | findstr :8000` (find the PID)\n`taskkill /PID <PID> /F` (kill the process)\n\n**Mac/Linux:**\n`lsof -ti:8000 | xargs kill -9`\n\n**Alternative:**\n`npx kill-port 8000` (if you have kill-port installed)",
    "type": "command-line",
    "tags": ["port", "kill", "terminal"]
  },
  {
    "question": "What is a CPU made up of?",
    "answer": "A CPU (Central Processing Unit) is made up of:\n\n• **Control Unit (CU)** - Manages instruction execution\n• **Arithmetic Logic Unit (ALU)** - Performs calculations and logic operations\n• **Registers** - Small, fast storage locations\n• **Cache Memory** - High-speed memory for frequently used data\n• **Clock** - Synchronizes operations\n• **Bus Interface** - Connects to other computer components",
    "type": "hardware",
    "tags": ["hardware"]
  },
  {
    "question": "What is the smallest form of data?",
    "answer": "A **bit** (binary digit) is the smallest form of data. It can only have two values: 0 or 1.",
    "type": "data",
    "tags": ["data"]
  },
  {
    "question": "How many bits make up 1 byte and how many combinations can it make?",
    "answer": "1 byte is made up of **8 bits** and can make **256 different combinations** (2^8 = 256).",
    "type": "data",
    "tags": ["data"]
  },
  {
    "question": "Explain the difference between interpreter and compiler.",
    "answer": "**Interpreter:**\n• Translates and executes code line by line\n• No separate compilation step\n• Slower execution but faster development\n• Examples: Python, JavaScript, Ruby\n\n**Compiler:**\n• Translates entire program to machine code before execution\n• Creates executable file\n• Faster execution but slower development\n• Examples: C, C++, Go, Rust\n\n**Hybrid (JIT):**\n• Compiles code at runtime\n• Examples: Java, C#",
    "type": "programming-concepts",
    "tags": ["programming"]
  },

  {
    "question": "Write the default HTML skeleton structure.",
    "answer": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n    \n</body>\n</html>\n```",
    "type": "html",
    "tags": ["html", "skeleton", "structure", "doctype"],
    "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>EVERMIND Test</title>\n</head>\n<body>\n    <h1>Welcome to EVERMIND</h1>\n    <p>This is a test HTML page.</p>\n</body>\n</html>"
  },
  {
    "question": "Why do we name files index.html?",
    "answer": "We name files `index.html` because:\n\n• **Default behavior** - Web servers automatically serve `index.html` when no specific file is requested\n• **Convention** - It's the standard name for the main/home page of a website\n• **User-friendly** - Visitors can access your site with just the domain name (e.g., `example.com` instead of `example.com/index.html`)\n• **SEO benefits** - Search engines recognize it as the primary page",
    "type": "html",
    "tags": ["html", "naming"]
  },
  {
    "question": "Explain how HTML indentation works with parent, sibling, child, and grandparent tags.",
    "answer": "**HTML Indentation Structure:**\n\n```html\n<html>                    <!-- Grandparent -->\n  <head>                  <!-- Parent of title -->\n    <title>Title</title>  <!-- Child of head, sibling of meta -->\n    <meta charset=\"UTF-8\"> <!-- Child of head, sibling of title -->\n  </head>                 <!-- Parent of title, child of html -->\n  <body>                  <!-- Parent of div, child of html -->\n    <div>                 <!-- Child of body, parent of p -->\n      <p>Text</p>         <!-- Child of div, grandchild of body -->\n    </div>\n  </body>\n</html>\n```\n\n• **Parent**: Contains other elements\n• **Child**: Nested inside another element\n• **Sibling**: Elements at the same level\n• **Grandparent**: Two levels up in the hierarchy",
    "type": "html",
    "tags": ["html", "structure"]
  },
  {
    "question": "What is the title tag used for and write a short code example?",
    "answer": "The `<title>` tag is used to:\n\n• **Set the browser tab title**\n• **Define the page title** for search engines\n• **Provide the title** when bookmarking\n• **Display in search results**\n\n**Example:**\n```html\n<title>Chuks Test</title>\n```\n\nThis will show \"Chuks Test\" in the browser tab and search results.",
    "type": "html",
    "tags": ["html", "seo"]
  },
  {
    "question": "How many types of headers are there in HTML and give an example?",
    "answer": "There are **6 types of headers** in HTML: `<h1>` through `<h6>`\n\n• `<h1>` - Most important (largest)\n• `<h2>` - Second level\n• `<h3>` - Third level\n• `<h4>` - Fourth level\n• `<h5>` - Fifth level\n• `<h6>` - Least important (smallest)\n\n**Example:**\n```html\n<h1>Main Title</h1>\n<h2>Section Title</h2>\n<h3>Subsection Title</h3>\n```",
    "type": "html",
    "tags": ["html", "headers"]
  },
  {
    "question": "How do you write a paragraph in HTML?",
    "answer": "Use the `<p>` tag to create paragraphs:\n\n```html\n<p>This is a paragraph of text.</p>\n<p>This is another paragraph.</p>\n```\n\nEach `<p>` tag creates a new paragraph with automatic spacing between them.",
    "type": "html",
    "tags": ["html", "text"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Paragraph Example</title>\n</head>\n<body>\n    <p>This is the first paragraph of text.</p>\n    <p>This is the second paragraph with more content.</p>\n    <p>Each paragraph appears on a new line with spacing.</p>\n</body>\n</html>"
  },
  {
    "question": "How do you make text both italic and bold in a paragraph?",
    "answer": "Use nested `<b>` and `<i>` tags:\n\n```html\n<p>This is <b><i>italic and bolded text</i></b> in a paragraph.</p>\n```\n\n**Alternative modern approach:**\n```html\n<p>This is <strong><em>italic and bolded text</em></strong> in a paragraph.</p>\n```\n\nNote: `<strong>` and `<em>` are preferred for semantic meaning.",
    "type": "html",
    "tags": ["html", "formatting"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Text Formatting</title>\n</head>\n<body>\n    <p>This is <b><i>italic and bolded text</i></b> in a paragraph.</p>\n    <p>This is <strong><em>modern semantic formatting</em></strong>.</p>\n    <p>Regular text with <b>bold</b> and <i>italic</i> separately.</p>\n</body>\n</html>"
  },
  {
    "question": "How do you create a new line in HTML?",
    "answer": "Use the `<br>` or `<br/>` tag:\n\n```html\n<p>This is the first line.<br>This is the second line.</p>\n```\n\n**Note:** `<br>` is a self-closing tag, so both `<br>` and `<br/>` work the same way.",
    "type": "html",
    "tags": ["html", "formatting"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Line Breaks</title>\n</head>\n<body>\n    <p>This is the first line.<br>This is the second line.</p>\n    <p>Line 1<br/>Line 2<br/>Line 3</p>\n    <p>Without br tags, everything stays on one line.</p>\n</body>\n</html>"
  },
  {
    "question": "How do you create a horizontal line in HTML?",
    "answer": "Use the `<hr>` or `<hr/>` tag:\n\n```html\n<p>Content above the line</p>\n<hr>\n<p>Content below the line</p>\n```\n\nThis creates a horizontal line that spans the width of its container.",
    "type": "html",
    "tags": ["html", "formatting"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Horizontal Lines</title>\n</head>\n<body>\n    <h1>Section 1</h1>\n    <p>Content above the line</p>\n    <hr>\n    <h2>Section 2</h2>\n    <p>Content below the line</p>\n    <hr/>\n    <h3>Section 3</h3>\n    <p>Another section after another line</p>\n</body>\n</html>"
  },
  {
    "question": "What is the git command to create a new branch?",
    "answer": "Use the `git switch -c` command:\n\n```bash\ngit switch -c <name-of-new-branch>\n```\n\n**Alternative methods:**\n```bash\n# Create and switch to new branch\ngit checkout -b <branch-name>\n\n# Just create branch (stay on current)\ngit branch <branch-name>\n```\n\n**Example:**\n```bash\ngit switch -c feature-login\n```",
    "type": "git",
    "tags": ["git", "branch"],
    "code": "# Create and switch to new branch\ngit switch -c feature-login\n\n# Alternative method\ngit checkout -b feature-login\n\n# Just create branch (stay on current)\ngit branch feature-login\n\n# Check current branch\ngit branch\n\n# Switch to existing branch\ngit switch main"
  },
  {
    "question": "How do you merge git branches?",
    "answer": "**To merge your branch into main:**\n\n```bash\n# Switch to main branch\ngit checkout main\n\n# Merge your branch\ngit merge new-branch-name\n\n# Push the changes\ngit push origin main\n```\n\n**Alternative (if using git switch):**\n```bash\ngit switch main\ngit merge feature-branch\ngit push origin main\n```",
    "type": "git",
    "tags": ["git", "merge"],
    "code": "# Switch to main branch\ngit checkout main\n\n# Merge your branch\ngit merge feature-login\n\n# Push the changes\ngit push origin main\n\n# Alternative using git switch\ngit switch main\ngit merge feature-login\ngit push origin main\n\n# Check merge status\ngit status"
  },
  {
    "question": "How do you make text big or small in HTML?",
    "answer": "Use the `<big>` and `<small>` tags:\n\n```html\n<p>This is <big>big text</big> and this is <small>small text</small>.</p>\n```\n\n**Note:** These tags are deprecated in HTML5. Modern approach uses CSS:\n```html\n<p>This is <span style=\"font-size: larger;\">big text</span> and this is <span style=\"font-size: smaller;\">small text</span>.</p>\n```",
    "type": "html",
    "tags": ["html", "formatting"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Text Size</title>\n</head>\n<body>\n    <p>This is <big>big text</big> and this is <small>small text</small>.</p>\n    <p>Modern approach: <span style=\"font-size: larger;\">larger text</span> and <span style=\"font-size: smaller;\">smaller text</span>.</p>\n    <p>Normal size text for comparison.</p>\n</body>\n</html>"
  },
  {
    "question": "What are subscript and superscript in HTML and give examples?",
    "answer": "**Subscript** (`<sub>`) - Text below the baseline\n**Superscript** (`<sup>`) - Text above the baseline\n\n**Examples:**\n```html\n<p>H<sub>2</sub>O (water molecule)</p>\n<p>E=mc<sup>2</sup> (Einstein's equation)</p>\n<p>2<sup>3</sup> = 8 (2 to the power of 3)</p>\n<p>CO<sub>2</sub> (carbon dioxide)</p>\n```",
    "type": "html",
    "tags": ["html", "formatting"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Subscript and Superscript</title>\n</head>\n<body>\n    <h2>Chemistry Examples</h2>\n    <p>Water: H<sub>2</sub>O</p>\n    <p>Carbon dioxide: CO<sub>2</sub></p>\n    <p>Sulfuric acid: H<sub>2</sub>SO<sub>4</sub></p>\n    \n    <h2>Math Examples</h2>\n    <p>Einstein's equation: E=mc<sup>2</sup></p>\n    <p>Power of 2: 2<sup>3</sup> = 8</p>\n    <p>Square root: √<sup>2</sup></p>\n</body>\n</html>"
  },
  {
    "question": "How do you write comments in HTML?",
    "answer": "Use the `<!-- -->` syntax:\n\n```html\n<!-- This is a single-line comment -->\n\n<!--\n  This is a\n  multi-line comment\n-->\n\n<p>Visible content</p> <!-- Inline comment -->\n```\n\n**Note:** Comments are not displayed in the browser but are visible in the HTML source code.",
    "type": "html",
    "tags": ["html", "syntax"]
  },
  {
    "question": "How do you change the color of a paragraph in HTML?",
    "answer": "Use the `style` attribute with `color`:\n\n```html\n<p style=\"color: red;\">This text is red</p>\n<p style=\"color: blue;\">This text is blue</p>\n<p style=\"color: #ff0000;\">This text is red (hex)</p>\n```\n\n**Common colors:** red, blue, green, yellow, purple, orange, black, white",
    "type": "html",
    "tags": ["html", "css"]
  },
  {
    "question": "How do you change the background color of a paragraph in HTML?",
    "answer": "Use the `style` attribute with `background-color`:\n\n```html\n<p style=\"background-color: green;\">This paragraph has a green background</p>\n<p style=\"background-color: yellow;\">This paragraph has a yellow background</p>\n<p style=\"background-color: #00ff00;\">This paragraph has a green background (hex)</p>\n```\n\n**Note:** The correct property is `background-color`, not `backgrounf-color`.",
    "type": "html",
    "tags": ["html", "css"]
  },
  {
    "question": "How do you change the entire background color of a website?",
    "answer": "Add the `background-color` style to the `<body>` tag:\n\n```html\n<body style=\"background-color: lightblue;\">\n  <h1>My Website</h1>\n  <p>Content here</p>\n</body>\n```\n\n**Alternative using CSS:**\n```html\n<style>\n  body {\n    background-color: lightblue;\n  }\n</style>\n```",
    "type": "html",
    "tags": ["html", "css"]
  },
  {
    "question": "What is the proper format of HTML code with header, main, and footer?",
    "answer": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n    <header>\n        <h1>Website Header</h1>\n        <nav>Navigation links</nav>\n    </header>\n    \n    <main>\n        <h2>Main Content</h2>\n        <p>Your main content goes here</p>\n    </main>\n    \n    <footer>\n        <p>&copy; 2024 Your Website</p>\n    </footer>\n</body>\n</html>\n```",
    "type": "html",
    "tags": ["html", "semantic"]
  },
  {
    "question": "What HTML tag do you use for navigation items in the header?",
    "answer": "Use the `<nav>` tag for navigation items:\n\n```html\n<header>\n    <h1>My Website</h1>\n    <nav>\n        <a href=\"#home\">Home</a>\n        <a href=\"#about\">About</a>\n        <a href=\"#contact\">Contact</a>\n    </nav>\n</header>\n```\n\nThe `<nav>` tag semantically indicates that the content is for navigation purposes.",
    "type": "html",
    "tags": ["html", "semantic"]
  },
  {
    "question": "What HTML tag do you use for blog posts and how do you divide into sections?",
    "answer": "Use the `<article>` tag for blog posts and `<section>` tags to divide into sections:\n\n```html\n<article>\n    <h2>Blog Post Title</h2>\n    \n    <section>\n        <h3>Introduction</h3>\n        <p>Introduction content...</p>\n    </section>\n    \n    <section>\n        <h3>Main Content</h3>\n        <p>Main content...</p>\n    </section>\n    \n    <section>\n        <h3>Conclusion</h3>\n        <p>Conclusion content...</p>\n    </section>\n</article>\n```",
    "type": "html",
    "tags": ["html", "semantic"]
  },
  {
    "question": "What HTML tag do you use to show content that's not directly related to the main site?",
    "answer": "Use the `<aside>` tag for content not directly related to the main site:\n\n```html\n<main>\n    <article>\n        <h2>Main Article</h2>\n        <p>Main content...</p>\n    </article>\n    \n    <aside>\n        <h3>Related Links</h3>\n        <ul>\n            <li><a href=\"#\">Related Article 1</a></li>\n            <li><a href=\"#\">Related Article 2</a></li>\n        </ul>\n        \n        <h3>Advertisement</h3>\n        <p>Ad content...</p>\n    </aside>\n</main>\n```\n\nCommon uses: sidebars, advertisements, related links, author info.",
    "type": "html",
    "tags": ["html", "semantic"]
  },
  {
    "question": "How to ping websites? Example: ping google.com",
    "answer": "**Windows Command:**\n```cmd\nping google.com\nping 8.8.8.8\n```\n\n**What ping does:**\n- Sends packets to test connectivity\n- Measures response time (latency)\n- Shows if website/server is reachable\n\n**Example output:**\n```\nPinging google.com [142.250.191.14] with 32 bytes of data:\nReply from 142.250.191.14: bytes=32 time=15ms TTL=54\nReply from 142.250.191.14: bytes=32 time=12ms TTL=54\n```\n\n**Useful options:**\n- `ping -t google.com` (continuous ping)\n- `ping -n 4 google.com` (send 4 packets)\n- `ping -l 1000 google.com` (send 1000 byte packets)",
    "type": "networking",
    "tags": ["ping", "networking", "command-line"]
  },
 
  {
    "question": "How to check all files in a project? Use: dir",
    "answer": "**Windows Command:**\n```cmd\ndir\n```\n\n**What it shows:**\n- All files and folders in current directory\n- File sizes\n- Creation dates\n- File types\n\n**Useful variations:**\n```cmd\ndir /p          # Pause between screens\ndir /w          # Wide format\ndir *.js        # Show only .js files\ndir /s          # Show subdirectories too\ndir /a          # Show hidden files\n```\n\n**Example output:**\n```\nDirectory of C:\\MyProject\n\nindex.html    1,234 bytes  10/13/2025\nstyle.css     2,456 bytes  10/13/2025\nscript.js     3,789 bytes  10/13/2025\nREADME.md     456 bytes    10/13/2025\n```\n\n**Linux/Mac equivalent:**\n```bash\nls -la\n```",
    "type": "command-line",
    "tags": ["dir", "files", "directory", "windows"]
  },
  {
    "question": "How to check what's inside a file? Use: type filename",
    "answer": "**Windows Command:**\n```cmd\ntype filename.txt\ntype index.html\ntype script.js\n```\n\n**What it does:**\n- Displays the entire contents of a file\n- Shows text files in the terminal\n- Useful for quick file inspection\n\n**Example:**\n```cmd\ntype README.md\n```\n\n**Output:**\n```\n# My Project\nThis is a sample README file.\n\n## Features\n- Feature 1\n- Feature 2\n```\n\n**Useful for:**\n- Quick file preview\n- Checking file contents\n- Reading configuration files\n\n**Linux/Mac equivalent:**\n```bash\ncat filename\nless filename\nmore filename\n```",
    "type": "command-line",
    "tags": ["type", "files", "content", "windows"]
  },
  {
    "question": "What does 'git status porcelain' mean?",
    "answer": "**Git Status Porcelain:**\n\n**What it is:**\n- `git status --porcelain` gives machine-readable output\n- Designed for scripts and automation\n- Clean, consistent format\n\n**Regular git status:**\n```\nOn branch main\nChanges not staged for commit:\n  modified:   file.txt\n  new file:   newfile.js\n```\n\n**Porcelain format:**\n```\n M file.txt\n?? newfile.js\n```\n\n**Status codes:**\n- `M` = Modified\n- `A` = Added\n- `D` = Deleted\n- `??` = Untracked\n- `R` = Renamed\n\n**Why use it:**\n- Scripts can parse it easily\n- Consistent output format\n- No human-friendly text to filter out\n\n**Example:**\n```bash\ngit status --porcelain | grep \"^ M\"\n```",
    "type": "git",
    "tags": ["git", "status", "porcelain", "automation"]
  },
  {
    "question": "How to add links in HTML?",
    "answer": "**Different types of links:**\n\n**Link to another website:**\n```html\n<a href=\"https://www.google.com\">Google Homepage</a>\n```\n\n**Link to another HTML file in project directory:**\n```html\n<a href=\"about.html\">About Page</a>\n```\n\n**Link to HTML file in different folder:**\n```html\n<a href=\"pages/contact.html\">Contact Page</a>\n```\n\n**Link to image in directory:**\n```html\n<a href=\"images/photo.jpg\">View Photo</a>\n```\n\n**Link to image outside HTML folder:**\n```html\n<a href=\"../assets/logo.png\">Company Logo</a>\n```\n\n**Important:** Always include `https://` for external websites!",
    "type": "html",
    "tags": ["html", "links", "anchors"]
  },
  {
    "question": "How to make links open in a new tab?",
    "answer": "Use `target=\"_blank\"` attribute:\n\n```html\n<a href=\"https://www.google.com\" target=\"_blank\">Google (New Tab)</a>\n```\n\n**What it does:**\n- Opens the link in a new browser tab\n- Keeps the original page open\n- Useful for external links",
    "type": "html",
    "tags": ["html", "links", "target"]
  },
  {
    "question": "How to create image tags in HTML?",
    "answer": "**Basic image tag:**\n```html\n<img src=\"image.jpg\" alt=\"Description\">\n```\n\n**Image from internet:**\n```html\n<img src=\"https://example.com/image.jpg\" alt=\"Online Image\">\n```\n\n**Image from directory:**\n```html\n<img src=\"images/photo.jpg\" alt=\"Local Photo\">\n```\n\n**With size control:**\n```html\n<img src=\"image.jpg\" alt=\"Description\" width=\"300\" height=\"200\">\n```\n\n**Important:** Always include `alt` attribute for accessibility!",
    "type": "html",
    "tags": ["html", "images", "alt"]
  },
  {
    "question": "How to edit image size in HTML?",
    "answer": "**Set both width and height:**\n```html\n<img src=\"image.jpg\" width=\"300\" height=\"200\" alt=\"Description\">\n```\n\n**Set only width (height auto-adjusts):**\n```html\n<img src=\"image.jpg\" width=\"300\" alt=\"Description\">\n```\n\n**Set only height (width auto-adjusts):**\n```html\n<img src=\"image.jpg\" height=\"200\" alt=\"Description\">\n```\n\n**Tips:**\n- You can check image dimensions before setting\n- Setting only one dimension maintains aspect ratio\n- `alt` is very important for accessibility",
    "type": "html",
    "tags": ["html", "images", "sizing"]
  },
  {
    "question": "How to add videos to HTML?",
    "answer": "**Basic video tag:**\n```html\n<video src=\"video.mp4\" controls width=\"400\"></video>\n```\n\n**With thumbnail (poster):**\n```html\n<video src=\"video.mp4\" poster=\"thumbnail.jpg\" controls width=\"400\"></video>\n```\n\n**Auto-play and loop:**\n```html\n<video src=\"video.mp4\" autoplay loop muted controls></video>\n```\n\n**Full example:**\n```html\n<video src=\"video.mp4\" poster=\"thumb.jpg\" controls width=\"500\" height=\"300\" autoplay loop muted>\n    Your browser doesn't support video.\n</video>\n```\n\n**Note:** Use `muted` with `autoplay` for browser compatibility",
    "type": "html",
    "tags": ["html", "video", "multimedia"]
  },
  {
    "question": "How to add YouTube videos to HTML?",
    "answer": "**Get embedded link from YouTube:**\n1. Go to YouTube video\n2. Click \"Share\" → \"Embed\"\n3. Copy the iframe code\n\n**Use the iframe code:**\n```html\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/VIDEO_ID\" frameborder=\"0\" allowfullscreen></iframe>\n```\n\n**Example:**\n```html\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/dQw4w9WgXcQ\" frameborder=\"0\" allowfullscreen></iframe>\n```\n\n**Same process as regular videos, just use the YouTube embed link!**",
    "type": "html",
    "tags": ["html", "youtube", "iframe"]
  },
  {
    "question": "How to create unordered lists in HTML?",
    "answer": "**Basic unordered list:**\n```html\n<ul>\n    <li>Item 1</li>\n    <li>Item 2</li>\n    <li>Item 3</li>\n</ul>\n```\n\n**With links:**\n```html\n<ul>\n    <li><a href=\"home.html\">Home</a></li>\n    <li><a href=\"about.html\">About</a></li>\n    <li><a href=\"contact.html\">Contact</a></li>\n</ul>\n```\n\n**When to use:**\n- Navigation menus\n- Feature lists\n- Any items without specific order\n- Bullet points",
    "type": "html",
    "tags": ["html", "lists", "navigation"]
  },
  {
    "question": "How to create ordered lists in HTML?",
    "answer": "**Basic ordered list:**\n```html\n<ol>\n    <li>First item</li>\n    <li>Second item</li>\n    <li>Third item</li>\n</ol>\n```\n\n**Different number formats:**\n```html\n<!-- Numbers (default) -->\n<ol type=\"1\">\n    <li>Item 1</li>\n    <li>Item 2</li>\n</ol>\n\n<!-- Letters -->\n<ol type=\"A\">\n    <li>Item A</li>\n    <li>Item B</li>\n</ol>\n\n<!-- Roman numerals -->\n<ol type=\"I\">\n    <li>Item I</li>\n    <li>Item II</li>\n</ol>\n```\n\n**When to use:**\n- Step-by-step instructions\n- Rankings\n- Any items with specific order",
    "type": "html",
    "tags": ["html", "lists", "ordered"]
  },
  {
    "question": "How to create description lists in HTML?",
    "answer": "**Description list structure:**\n```html\n<dl>\n    <dt>Term 1</dt>\n    <dd>Description of term 1</dd>\n    \n    <dt>Term 2</dt>\n    <dd>Description of term 2</dd>\n</dl>\n```\n\n**Example:**\n```html\n<dl>\n    <dt>HTML</dt>\n    <dd>HyperText Markup Language - used for web pages</dd>\n    \n    <dt>CSS</dt>\n    <dd>Cascading Style Sheets - used for styling</dd>\n    \n    <dt>JavaScript</dt>\n    <dd>Programming language for web interactivity</dd>\n</dl>\n```\n\n**When to use:**\n- Glossaries\n- Definitions\n- Terms with descriptions\n- FAQ sections",
    "type": "html",
    "tags": ["html", "lists", "descriptions"]
  },
  {
    "question": "How to create tables in HTML?",
    "answer": "**Basic table:**\n```html\n<table>\n    <tr>\n        <td>Cell 1</td>\n        <td>Cell 2</td>\n    </tr>\n    <tr>\n        <td>Cell 3</td>\n        <td>Cell 4</td>\n    </tr>\n</table>\n```\n\n**With headers:**\n```html\n<table>\n    <caption>Student Grades</caption>\n    <tr>\n        <th>Name</th>\n        <th>Math</th>\n        <th>Science</th>\n    </tr>\n    <tr>\n        <td>John</td>\n        <td>85</td>\n        <td>90</td>\n    </tr>\n</table>\n```\n\n**With formatting:**\n```html\n<table>\n    <thead>\n        <tr><th>Header 1</th><th>Header 2</th></tr>\n    </thead>\n    <tbody>\n        <tr><td>Data 1</td><td>Data 2</td></tr>\n    </tbody>\n</table>\n```",
    "type": "html",
    "tags": ["html", "tables", "data"]
  },
  {
    "question": "How to make table cells span multiple columns?",
    "answer": "Use `colspan` attribute:\n\n```html\n<table>\n    <tr>\n        <th>Name</th>\n        <th>Subject</th>\n        <th>Grade</th>\n    </tr>\n    <tr>\n        <td>John</td>\n        <td colspan=\"2\">Math - A</td>\n    </tr>\n    <tr>\n        <td>Jane</td>\n        <td>Science</td>\n        <td>B+</td>\n    </tr>\n</table>\n```\n\n**What `colspan=\"2\"` does:**\n- Makes the cell span 2 columns\n- Useful for headers that cover multiple columns\n- Adjusts the table layout automatically",
    "type": "html",
    "tags": ["html", "tables", "colspan"]
  },
  {
    "question": "What's the difference between inline and block elements?",
    "answer": "**Inline Elements:**\n- Stay next to each other on the same line\n- Only take up as much space as needed\n- Examples: `<a>`, `<span>`, `<img>`, `<strong>`\n\n```html\n<a href=\"#\">Link 1</a>\n<a href=\"#\">Link 2</a>\n<!-- These stay on the same line -->\n```\n\n**Block Elements:**\n- Take up the entire width of their container\n- Start on a new line\n- Examples: `<p>`, `<div>`, `<h1>`, `<ul>`\n\n```html\n<p>Paragraph 1</p>\n<p>Paragraph 2</p>\n<!-- These are on separate lines -->\n```\n\n**Containers:**\n- `<span>` = inline container\n- `<div>` = block container\n\nBoth can be used to group and style content!",
    "type": "html",
    "tags": ["html", "inline", "block", "elements"]
  },
  {
    "question": "How to create different input types in HTML forms?",
    "answer": "**Text inputs:**\n```html\n<!-- Text -->\n<input type=\"text\" placeholder=\"Enter your name\">\n\n<!-- Password -->\n<input type=\"password\" placeholder=\"Enter password\">\n\n<!-- Email -->\n<input type=\"email\" placeholder=\"Enter email\">\n\n<!-- Phone -->\n<input type=\"tel\" placeholder=\"Enter phone number\">\n\n<!-- Date -->\n<input type=\"date\">\n\n<!-- Number -->\n<input type=\"number\" min=\"1\" max=\"100\">\n\n<!-- Range -->\n<input type=\"range\" min=\"0\" max=\"100\">\n\n<!-- File -->\n<input type=\"file\">\n\n<!-- Checkbox -->\n<input type=\"checkbox\" id=\"agree\">\n<label for=\"agree\">I agree</label>\n\n<!-- Radio buttons -->\n<input type=\"radio\" name=\"gender\" value=\"male\"> Male\n<input type=\"radio\" name=\"gender\" value=\"female\"> Female\n\n<!-- Button -->\n<input type=\"submit\" value=\"Submit\">\n```\n\n**Default values:**\n```html\n<input type=\"text\" value=\"Default text\">\n```\n\n**Note:** Radio buttons with the same `name` allow only one selection!",
    "type": "html",
    "tags": ["html", "forms", "input", "validation"]
  },
  {
    "question": "What is a textarea used for in HTML?",
    "answer": "**Textarea is used for:**\n- Multi-line text input\n- Comments, messages, descriptions\n- Longer text that doesn't fit in regular input\n\n**How to write it:**\n```html\n<textarea rows=\"4\" cols=\"50\" placeholder=\"Enter your message here...\"></textarea>\n```\n\n**With default text:**\n```html\n<textarea rows=\"4\" cols=\"50\">Default message text</textarea>\n```\n\n**Attributes:**\n- `rows` = number of visible lines\n- `cols` = number of visible characters per line\n- `placeholder` = hint text\n- `maxlength` = maximum characters allowed\n\n**Example:**\n```html\n<label for=\"comment\">Your Comment:</label>\n<textarea id=\"comment\" name=\"comment\" rows=\"5\" cols=\"40\" placeholder=\"Write your comment here...\"></textarea>\n```",
    "type": "html",
    "tags": ["html", "forms", "textarea", "multiline"]
  },
  {
    "question": "What is a form in HTML and how to write it?",
    "answer": "**What forms are used for:**\n- Collecting user input\n- Submitting data to servers\n- User registration, contact forms, surveys\n\n**Basic form structure:**\n```html\n<form action=\"submit.php\" method=\"POST\">\n    <label for=\"name\">Name:</label>\n    <input type=\"text\" id=\"name\" name=\"name\" required>\n    \n    <label for=\"email\">Email:</label>\n    <input type=\"email\" id=\"email\" name=\"email\" required>\n    \n    <label for=\"message\">Message:</label>\n    <textarea id=\"message\" name=\"message\" rows=\"4\"></textarea>\n    \n    <input type=\"submit\" value=\"Send Message\">\n</form>\n```\n\n**Form attributes:**\n- `action` = where to send the data\n- `method` = GET or POST\n- `required` = makes field mandatory\n\n**Example with different inputs:**\n```html\n<form action=\"process.php\" method=\"POST\">\n    <input type=\"text\" name=\"username\" placeholder=\"Username\">\n    <input type=\"password\" name=\"password\" placeholder=\"Password\">\n    <input type=\"checkbox\" name=\"remember\"> Remember me\n    <input type=\"submit\" value=\"Login\">\n</form>\n```",
    "type": "html",
    "tags": ["html", "forms", "submission", "data"]
  },
  {
    "question": "What is an iframe in HTML?",
    "answer": "**What iframe does:**\n- Embeds another webpage inside your page\n- Creates a \"window\" to another site\n- Useful for videos, maps, external content\n\n**Basic iframe:**\n```html\n<iframe src=\"https://www.example.com\" width=\"600\" height=\"400\" frameborder=\"0\"></iframe>\n```\n\n**With fallback text:**\n```html\n<iframe src=\"https://www.example.com\" width=\"600\" height=\"400\" frameborder=\"0\">\n    Your browser doesn't support iframes.\n</iframe>\n```\n\n**Common uses:**\n- YouTube videos\n- Google Maps\n- External widgets\n- Embedded content\n\n**Important:**\n- Some websites block iframe embedding (like Amazon)\n- Always include fallback text\n- Use `frameborder=\"0\"` for cleaner look\n\n**Example:**\n```html\n<iframe src=\"https://www.google.com/maps/embed?pb=...\" width=\"400\" height=\"300\" frameborder=\"0\" allowfullscreen></iframe>\n```",
    "type": "html",
    "tags": ["html", "iframe", "embedding", "external"]
  },
  {
    "question": "What are meta tags in HTML?",
    "answer": "**Meta tags provide information about the webpage:**\n\n**Character encoding:**\n```html\n<meta charset=\"UTF-8\">\n```\n\n**Page description:**\n```html\n<meta name=\"description\" content=\"This is a great website about programming\">\n```\n\n**Author information:**\n```html\n<meta name=\"author\" content=\"John Doe\">\n```\n\n**Keywords for SEO:**\n```html\n<meta name=\"keywords\" content=\"html, css, javascript, web development\">\n```\n\n**Viewport for mobile:**\n```html\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n```\n\n**Complete example:**\n```html\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"description\" content=\"Learn HTML, CSS, and JavaScript\">\n    <meta name=\"author\" content=\"Web Developer\">\n    <meta name=\"keywords\" content=\"html, css, javascript\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>My Website</title>\n</head>\n```\n\n**Purpose:**\n- SEO optimization\n- Browser compatibility\n- Mobile responsiveness\n- Search engine information",
    "type": "html",
    "tags": ["html", "meta", "seo", "head"]
  },
  {
    "question": "What is the difference between Git and GitHub?",
    "answer": "**Git:**\n- Free, open-source version control system\n- Runs on your local computer\n- Tracks changes in your code\n- Command-line tool\n\n**GitHub:**\n- Online platform that hosts Git repositories\n- Web-based service\n- Provides collaboration features\n- Stores your code in the cloud\n\n**Analogy:**\n- Git = The engine of a car (does the work)\n- GitHub = The garage where you park the car (stores it)\n\n**Git manages your code changes locally**\n**GitHub stores and shares your code online**\n\n**Think of it like:**\n- Git = Your personal filing system\n- GitHub = The shared office where everyone can access files",
    "type": "git",
    "tags": ["git", "github", "version-control", "collaboration"]
  },
  {
    "question": "Explain these Git terms simply:",
    "answer": "**Directory:**\nA folder on your computer that contains files and other folders.\n\n**Terminal/Command Line:**\nA text-based way to interact with your computer (like talking to your computer with text commands).\n\n**CLI:**\nCommand Line Interface - another name for terminal/command line.\n\n**cd (Change Directory):**\nCommand to move between folders: `cd folder-name`\n\n**Code Editor:**\nA program for writing code (like VS Code, Sublime Text, Atom).\n\n**Repository:**\nA project folder that Git is tracking (contains your code and Git history).\n\n**GitHub:**\nOnline platform where you can store and share your Git repositories.\n\n**README.md:**\nA file that explains what your project is about (like a project description).",
    "type": "git",
    "tags": ["git", "terminology", "basics", "concepts"]
  },
  {
    "question": "Explain these Git commands simply:",
    "answer": "**Clone:**\n`git clone` - Downloads a copy of a repository from GitHub to your computer.\n\n**Add:**\n`git add` - Tells Git to start tracking changes in your files (stages them).\n\n**Commit:**\n`git commit` - Saves your changes with a message (like saving a snapshot).\n\n**Push:**\n`git push` - Uploads your local changes to GitHub (sends your work to the cloud).\n\n**Pull:**\n`git pull` - Downloads the latest changes from GitHub to your computer.\n\n**Simple workflow:**\n1. `git add .` (stage changes)\n2. `git commit -m \"message\"` (save snapshot)\n3. `git push` (upload to GitHub)\n\n**Think of it like:**\n- Add = Put items in a box\n- Commit = Seal the box with a label\n- Push = Send the box to storage\n- Pull = Get the latest box from storage",
    "type": "git",
    "tags": ["git", "commands", "workflow", "basics"]
  },
  {
    "question": "How to check if Git is installed?",
    "answer": "**Command:**\n```bash\ngit --version\n```\n\n**What it shows:**\n- If Git is installed: Shows version number (e.g., `git version 2.34.1`)\n- If Git is NOT installed: Shows error message\n\n**Example output:**\n```bash\n$ git --version\ngit version 2.34.1\n```\n\n**If Git is not installed:**\n- Download from: https://git-scm.com/\n- Install the program\n- Restart your terminal\n- Run `git --version` again\n\n**This is the first command to run when learning Git!**",
    "type": "git",
    "tags": ["git", "installation", "check", "version"]
  },
  {
    "question": "How to check files that haven't been committed yet?",
    "answer": "**Command:**\n```bash\ngit status\n```\n\n**What it shows:**\n- Files that are modified but not staged\n- Files that are staged but not committed\n- Files that are untracked (new files)\n\n**Example output:**\n```bash\n$ git status\nOn branch main\nChanges not staged for commit:\n  modified:   index.html\n  modified:   style.css\n\nUntracked files:\n  new-file.js\n\nChanges to be committed:\n  modified:   README.md\n```\n\n**What the colors mean:**\n- **Red** = Modified but not staged\n- **Green** = Staged and ready to commit\n- **Untracked** = New files Git doesn't know about\n\n**This is your Git dashboard - shows what's changed!**",
    "type": "git",
    "tags": ["git", "status", "tracking", "changes"]
  },
  {
    "question": "How to add files in Git?",
    "answer": "**Add individual file:**\n```bash\ngit add filename.html\n```\n\n**Add all files:**\n```bash\ngit add .\n```\n\n**Examples:**\n```bash\n# Add specific file\ngit add index.html\n\n# Add all files in current directory\ngit add .\n\n# Add all HTML files\ngit add *.html\n\n# Add all files in a folder\ngit add css/\n```\n\n**What `git add` does:**\n- Stages files for commit\n- Tells Git \"I want to save these changes\"\n- Prepares files to be committed\n\n**Think of it like:**\n- Putting items in a shopping cart\n- Selecting files to save\n- Preparing for checkout (commit)\n\n**After `git add`, use `git commit` to save!**",
    "type": "git",
    "tags": ["git", "add", "staging", "files"]
  },
  {
    "question": "How does the /folder/ path work to move between files?",
    "answer": "**Path navigation explained:**\n\n**Current directory:**\n```bash\n.\n```\n\n**Parent directory (go up one level):**\n```bash\n..\n```\n\n**Examples:**\n```bash\n# Go to parent directory\ncd ..\n\n# Go to grandparent directory\ncd ../..\n\n# Go to sibling directory\ncd ../sibling-folder\n\n# Go to specific path\ncd ../demo-repo2\n```\n\n**Real-world analogy:**\n- Think of folders like rooms in a house\n- `.` = current room\n- `..` = parent room (one level up)\n- `../..` = grandparent room (two levels up)\n\n**File structure example:**\n```\nhome/\n├── user/\n│   ├── project1/\n│   └── project2/\n└── documents/\n```\n\n**From project1 to project2:**\n```bash\ncd ../project2\n```\n\n**From project1 to documents:**\n```bash\ncd ../../documents\n```",
    "type": "git",
    "tags": ["git", "paths", "navigation", "directories"]
  },
  {
    "question": "How to solve 'origin does not appear to be a git repo' error?",
    "answer": "**The error means:**\nGit doesn't know where to send your code (no remote repository set up).\n\n**How to solve:**\n\n**Step 1: Create repository on GitHub**\n- Go to GitHub.com\n- Click \"New repository\"\n- Give it a name\n- Click \"Create repository\"\n\n**Step 2: Copy the repository URL**\n- Copy the HTTPS or SSH URL from GitHub\n- Example: `https://github.com/username/repo-name.git`\n\n**Step 3: Connect your local repo to GitHub**\n```bash\ngit remote add origin https://github.com/username/repo-name.git\n```\n\n**Step 4: Verify it worked**\n```bash\ngit remote -v\n```\n\n**Step 5: Push your code**\n```bash\ngit push -u origin main\n```\n\n**What this does:**\n- `remote add origin` = tells Git where GitHub repo is\n- `remote -v` = shows connected repositories\n- `push -u origin main` = uploads code and sets default branch",
    "type": "git",
    "tags": ["git", "error", "origin", "remote", "github"]
  },
  {
    "question": "How to set shortcut so you don't always type 'origin main'?",
    "answer": "**Use the `-u` flag:**\n```bash\ngit push -u origin main\n```\n\n**What `-u` does:**\n- Sets up tracking between local and remote branch\n- Creates a shortcut for future pushes\n- Links your local `main` branch to `origin/main`\n\n**After using `-u` once:**\n```bash\n# Instead of this:\ngit push origin main\n\n# You can just do:\ngit push\n```\n\n**Same works for pull:**\n```bash\n# Instead of:\ngit pull origin main\n\n# You can do:\ngit pull\n```\n\n**Think of `-u` as:**\n- Setting up a \"favorite\" connection\n- Creating a shortcut\n- Telling Git \"remember this connection\"\n\n**One-time setup, then simple commands forever!**",
    "type": "git",
    "tags": ["git", "shortcut", "upstream", "tracking"]
  },
  {
    "question": "How to switch between branches and check differences?",
    "answer": "**Switch to existing branch:**\n```bash\ngit checkout branch-name\n```\n\n**Create and switch to new branch:**\n```bash\ngit checkout -b new-branch-name\n```\n\n**Check differences between branches:**\n```bash\ngit diff feature-branch\n```\n\n**Examples:**\n```bash\n# Switch to main branch\ngit checkout main\n\n# Switch to feature branch\ngit checkout feature-login\n\n# Create new branch\ngit checkout -b feature-signup\n\n# See what's different\ngit diff main\n```\n\n**What `git diff` shows:**\n- Lines added (+)\n- Lines removed (-)\n- Files that changed\n- Detailed differences\n\n**Think of branches like:**\n- Different versions of your project\n- Parallel universes\n- Separate workspaces\n\n**Use `git branch` to see all branches!**",
    "type": "git",
    "tags": ["git", "branches", "switching", "differences"]
  },
  {
    "question": "What is a Pull Request (PR) and how does it work?",
    "answer": "**What is a Pull Request:**\nA way to propose changes to a project and get them reviewed before merging.\n\n**Sample scenario:**\n\n**1. You make changes:**\n```bash\ngit checkout -b feature-login\ngit add .\ngit commit -m \"Add login form\"\ngit push origin feature-login\n```\n\n**2. Create PR on GitHub:**\n- Go to your repository\n- Click \"Compare & pull request\"\n- Add description of changes\n- Click \"Create pull request\"\n\n**3. Team reviews:**\n- Others can see your changes\n- Leave comments and suggestions\n- Approve or request changes\n\n**4. Merge the PR:**\n- Once approved, merge into main branch\n- Your changes become part of the project\n\n**Why use PRs:**\n- Code review before merging\n- Discussion about changes\n- Quality control\n- Team collaboration\n\n**Think of PR as:**\n- Asking permission to add your changes\n- Getting feedback before finalizing\n- Professional way to contribute",
    "type": "git",
    "tags": ["git", "pull-request", "collaboration", "review"]
  },
  {
    "question": "How to delete branches in Git?",
    "answer": "**Delete local branch:**\n```bash\ngit branch -d branch-name\n```\n\n**Force delete (if branch has unmerged changes):**\n```bash\ngit branch -D branch-name\n```\n\n**Delete remote branch:**\n```bash\ngit push origin --delete branch-name\n```\n\n**Examples:**\n```bash\n# Delete local feature branch\ngit branch -d feature-login\n\n# Force delete (careful!)\ngit branch -D old-feature\n\n# Delete remote branch\ngit push origin --delete feature-signup\n```\n\n**What happens:**\n- `-d` = safe delete (only if merged)\n- `-D` = force delete (even if not merged)\n- Remote delete = removes from GitHub\n\n**Best practice:**\n- Delete branches after merging\n- Keep main branches (main, develop)\n- Clean up old feature branches\n\n**Think of it like:**\n- Throwing away old drafts\n- Cleaning up your workspace\n- Keeping only what you need",
    "type": "git",
    "tags": ["git", "branches", "delete", "cleanup"]
  },
  {
    "question": "How to undo staging in Git?",
    "answer": "**Undo staging for single file:**\n```bash\ngit reset filename\n```\n\n**Undo staging for all files:**\n```bash\ngit reset\n```\n\n**Examples:**\n```bash\n# Unstage specific file\ngit reset index.html\n\n# Unstage all files\ngit reset\n\n# Unstage all files in directory\ngit reset css/\n```\n\n**What `git reset` does:**\n- Removes files from staging area\n- Files go back to \"modified\" status\n- Changes are still there, just not staged\n\n**Before reset:**\n```bash\n$ git status\nChanges to be committed:\n  modified:   index.html\n  modified:   style.css\n```\n\n**After `git reset index.html`:**\n```bash\n$ git status\nChanges to be committed:\n  modified:   style.css\n\nChanges not staged for commit:\n  modified:   index.html\n```\n\n**Think of it like:**\n- Taking items out of shopping cart\n- Unchecking files you don't want to commit\n- Going back to \"modified\" status",
    "type": "git",
    "tags": ["git", "reset", "unstage", "undo"]
  },
  {
    "question": "What is forking code and give a simple analogy?",
    "answer": "**What is forking:**\nCreating your own copy of someone else's project that you can modify independently.\n\n**Simple analogy:**\n**Forking is like photocopying a recipe book:**\n\n1. **Original recipe book** = Someone else's project on GitHub\n2. **Photocopy the book** = Fork their repository\n3. **Your copy** = You can now modify recipes without affecting the original\n4. **Make changes** = Add your own recipes or modify existing ones\n5. **Share back** = Send your improvements back to the original author\n\n**Real example:**\n- You find a cool open-source project on GitHub\n- You fork it (copy to your account)\n- You make improvements or add features\n- You can submit a pull request to share your changes\n\n**Why fork:**\n- Contribute to open-source projects\n- Use someone's code as a starting point\n- Experiment without affecting the original\n- Learn from other people's code\n\n**Fork = Personal copy you can modify!**",
    "type": "git",
    "tags": ["git", "forking", "copying", "collaboration"]
  },
  {
    "question": "What is the fastest method to learn programming through real experience?",
    "answer": "The fastest way is the **Build → Break → Fix method**:\n\n**Step 1: Build**\n- Create a small working feature or project\n- Start with something simple that actually works\n\n**Step 2: Break**\n- Break it on purpose by deleting, renaming, or changing something\n- Make it stop working intentionally\n\n**Step 3: Fix**\n- Fix the errors without starting over\n- Debug and troubleshoot like a real developer\n\n**Why this method works fast:**\n- You debug like a real developer\n- You understand how files, routes, and logic connect\n- You stop being scared of errors\n- You gain real experience in less time than watching tutorials\n\n**The result:**\nThis method turns 1 hour into the experience of 10 hours because you're actively solving problems, not just consuming information. You learn by doing, not just by watching.",
    "type": "programming-methods",
    "tags": ["programming", "learning", "debugging", "experience", "methodology"]
  },
  {
    "question": "List and explain the three ways to apply CSS: inline, internal, and external",
    "answer": "**1. Inline CSS:**\nApplied directly to HTML elements using the `style` attribute.\n\n**2. Internal CSS:**\nWritten inside the `<head>` section using `<style>` tags.\n\n**3. External CSS:**\nWritten in a separate `.css` file and linked to HTML using `<link>` tag.",
    "type": "css",
    "tags": ["css", "styling", "methods"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>CSS Methods</title>\n    <!-- Internal CSS -->\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n        .internal-style {\n            color: blue;\n            font-size: 18px;\n        }\n    </style>\n</head>\n<body>\n    <!-- Inline CSS -->\n    <h1 style=\"color: red; text-align: center;\">Inline CSS Example</h1>\n    \n    <p class=\"internal-style\">This uses internal CSS</p>\n    \n    <p style=\"background-color: yellow; padding: 10px;\">This uses inline CSS</p>\n    \n    <div style=\"border: 2px solid green; margin: 10px; padding: 15px;\">\n        <h2>Mixed Styling</h2>\n        <p>This div combines inline and internal CSS</p>\n    </div>\n</body>\n</html>"
  },
  {
    "question": "How to use internal style sheet in head of HTML document to edit body, headers (h1) and paragraphs?",
    "answer": "Use `<style>` tags inside the `<head>` section:\n\n```html\n<head>\n    <style>\n        body {\n            background-color: black;\n            color: white;\n        }\n        h1 {\n            color: red;\n            font-size: 24px;\n        }\n        p {\n            color: blue;\n            font-size: 16px;\n        }\n    </style>\n</head>\n```",
    "type": "css",
    "tags": ["css", "internal", "styling"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Internal CSS Example</title>\n    <style>\n        body {\n            background-color: black;\n            color: white;\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n        h1 {\n            color: red;\n            font-size: 28px;\n            text-align: center;\n        }\n        h2 {\n            color: yellow;\n            font-size: 22px;\n        }\n        p {\n            color: lightblue;\n            font-size: 16px;\n            line-height: 1.5;\n        }\n    </style>\n</head>\n<body>\n    <h1>Main Heading</h1>\n    <h2>Sub Heading</h2>\n    <p>This paragraph uses internal CSS styling.</p>\n    <p>Another paragraph with the same styling applied.</p>\n</body>\n</html>"
  },
  {
    "question": "How to link external style sheet in directory and not in directory to main HTML code?",
    "answer": "**In same directory:**\n```html\n<link rel=\"stylesheet\" href=\"style.css\">\n```\n\n**In different directory:**\n```html\n<link rel=\"stylesheet\" href=\"css/style.css\">\n<link rel=\"stylesheet\" href=\"../styles/style.css\">\n```\n\n**External style sheet content (style.css):**\n```css\nbody {\n    color: red;\n    font-family: Arial, sans-serif;\n}\n```",
    "type": "css",
    "tags": ["css", "external", "linking"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>External CSS</title>\n    <!-- Link to external CSS file -->\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <h1>External CSS Example</h1>\n    <p>This text is styled by external CSS file.</p>\n    <div class=\"box\">\n        <h2>Styled Box</h2>\n        <p>Content inside styled box</p>\n    </div>\n</body>\n</html>\n\n<!-- style.css content would be:\nbody {\n    color: red;\n    font-family: Arial, sans-serif;\n    margin: 20px;\n}\n\n.box {\n    background-color: lightgray;\n    padding: 20px;\n    border: 2px solid blue;\n    margin: 10px;\n}\n\nh1, h2 {\n    color: darkblue;\n}\n-->"
  },

  {
    "question": "Give an example of how to give ID to paragraph and headers and how to edit it in style.css file",
    "answer": "**HTML with IDs:**\n```html\n<p id=\"p1\">This paragraph has ID p1</p>\n<h1 id=\"main-title\">Main Title</h1>\n<h2 id=\"subtitle\">Subtitle</h2>\n```\n\n**CSS styling with IDs:**\n```css\n#p1 {\n    color: red;\n    font-size: 18px;\n}\n\n#main-title {\n    color: blue;\n    text-align: center;\n}\n\n#subtitle {\n    color: green;\n    font-style: italic;\n}\n```",
    "type": "css",
    "tags": ["css", "id", "selectors"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>CSS IDs Example</title>\n    <style>\n        #p1 {\n            color: red;\n            font-size: 18px;\n            background-color: lightyellow;\n            padding: 10px;\n        }\n        \n        #main-title {\n            color: blue;\n            text-align: center;\n            font-size: 32px;\n            margin-bottom: 20px;\n        }\n        \n        #subtitle {\n            color: green;\n            font-style: italic;\n            font-size: 20px;\n            border-bottom: 2px solid green;\n        }\n        \n        #special-paragraph {\n            background-color: lightblue;\n            border: 2px solid darkblue;\n            padding: 15px;\n            margin: 10px;\n        }\n    </style>\n</head>\n<body>\n    <h1 id=\"main-title\">Main Title with ID</h1>\n    <h2 id=\"subtitle\">Subtitle with ID</h2>\n    <p id=\"p1\">This paragraph has ID p1</p>\n    <p id=\"special-paragraph\">This is a special paragraph with unique styling</p>\n    <p>Regular paragraph without ID</p>\n</body>\n</html>"
  },
  {
    "question": "Give an example how to give class to paragraphs and other elements and how to edit with CSS",
    "answer": "**HTML with Classes:**\n```html\n<p class=\"highlight\">Highlighted paragraph</p>\n<div class=\"box\">Box content</div>\n<h1 class=\"title\">Title with class</h1>\n```\n\n**CSS styling with Classes:**\n```css\n.highlight {\n    background-color: yellow;\n    font-weight: bold;\n}\n\n.box {\n    border: 2px solid black;\n    padding: 20px;\n    margin: 10px;\n}\n\n.title {\n    color: red;\n    text-align: center;\n}\n```",
    "type": "css",
    "tags": ["css", "class", "selectors"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>CSS Classes Example</title>\n    <style>\n        .highlight {\n            background-color: yellow;\n            font-weight: bold;\n            padding: 5px;\n        }\n        \n        .box {\n            border: 2px solid black;\n            padding: 20px;\n            margin: 10px;\n            background-color: lightgray;\n        }\n        \n        .title {\n            color: red;\n            text-align: center;\n            font-size: 24px;\n        }\n        \n        .warning {\n            background-color: orange;\n            color: white;\n            padding: 10px;\n            border-radius: 5px;\n        }\n        \n        .success {\n            background-color: green;\n            color: white;\n            padding: 10px;\n            border-radius: 5px;\n        }\n    </style>\n</head>\n<body>\n    <h1 class=\"title\">Title with Class</h1>\n    <p class=\"highlight\">This paragraph has a highlight class</p>\n    <div class=\"box\">\n        <h2>Box Content</h2>\n        <p>This div has a box class</p>\n    </div>\n    <p class=\"warning\">Warning message with class</p>\n    <p class=\"success\">Success message with class</p>\n    <p>Regular paragraph without class</p>\n</body>\n</html>"
  },
  {
    "question": "How to change font style using CSS in style.css with contingencies?",
    "answer": "**Font Family with Fallbacks:**\n```css\np {\n    color: red;\n    font-family: \"Arial\", \"Helvetica\", sans-serif;\n}\n\nh1 {\n    font-family: \"Times New Roman\", \"Times\", serif;\n}\n\n.code {\n    font-family: \"Consolas\", \"Monaco\", \"Courier New\", monospace;\n}\n```\n\n**Why use multiple fonts:**\n- If first font isn't available, browser tries the next one\n- Ensures text displays even if preferred font fails to load\n- Provides consistent appearance across different systems",
    "type": "css",
    "tags": ["css", "fonts", "typography"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Font Family Examples</title>\n    <style>\n        body {\n            font-family: \"Arial\", \"Helvetica\", sans-serif;\n            margin: 20px;\n        }\n        \n        .serif-text {\n            font-family: \"Times New Roman\", \"Times\", serif;\n            font-size: 18px;\n            color: blue;\n        }\n        \n        .sans-serif-text {\n            font-family: \"Arial\", \"Helvetica\", sans-serif;\n            font-size: 18px;\n            color: green;\n        }\n        \n        .monospace-text {\n            font-family: \"Consolas\", \"Monaco\", \"Courier New\", monospace;\n            font-size: 18px;\n            color: red;\n            background-color: lightgray;\n            padding: 10px;\n        }\n        \n        .fancy-text {\n            font-family: \"Georgia\", \"Times New Roman\", serif;\n            font-size: 20px;\n            font-style: italic;\n            color: purple;\n        }\n    </style>\n</head>\n<body>\n    <h1>Font Family Examples</h1>\n    <p class=\"serif-text\">This text uses serif fonts with fallbacks</p>\n    <p class=\"sans-serif-text\">This text uses sans-serif fonts with fallbacks</p>\n    <p class=\"monospace-text\">This text uses monospace fonts (good for code)</p>\n    <p class=\"fancy-text\">This text uses a fancy serif font</p>\n    <p>Default body text with Arial fallback</p>\n</body>\n</html>"
  },
  {
    "question": "How to use Google Fonts (fonts.google.com) for custom fonts?",
    "answer": "**Steps to use Google Fonts:**\n\n1. **Go to fonts.google.com**\n2. **Select your font style**\n3. **Go to 'View selected families'**\n4. **Copy the href link**\n5. **Paste in HTML `<head>`:**\n```html\n<link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;700&display=swap\" rel=\"stylesheet\">\n```\n6. **Use in CSS:**\n```css\nbody {\n    font-family: 'Roboto', sans-serif;\n}\n```",
    "type": "css",
    "tags": ["css", "google-fonts", "typography"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Google Fonts Example</title>\n    <!-- Google Fonts Link -->\n    <link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;700&family=Dancing+Script:wght@400;700&display=swap\" rel=\"stylesheet\">\n    <style>\n        body {\n            font-family: 'Roboto', sans-serif;\n            margin: 20px;\n            line-height: 1.6;\n        }\n        \n        .light-text {\n            font-family: 'Roboto', sans-serif;\n            font-weight: 300;\n            font-size: 18px;\n            color: #666;\n        }\n        \n        .normal-text {\n            font-family: 'Roboto', sans-serif;\n            font-weight: 400;\n            font-size: 18px;\n            color: #333;\n        }\n        \n        .bold-text {\n            font-family: 'Roboto', sans-serif;\n            font-weight: 700;\n            font-size: 20px;\n            color: #000;\n        }\n        \n        .script-text {\n            font-family: 'Dancing Script', cursive;\n            font-size: 24px;\n            color: #8B4513;\n        }\n    </style>\n</head>\n<body>\n    <h1 class=\"bold-text\">Google Fonts Demo</h1>\n    <p class=\"light-text\">This is Roboto Light (300 weight)</p>\n    <p class=\"normal-text\">This is Roboto Normal (400 weight)</p>\n    <p class=\"bold-text\">This is Roboto Bold (700 weight)</p>\n    <p class=\"script-text\">This is Dancing Script - a cursive font!</p>\n</body>\n</html>"
  },
  {
    "question": "Give the code to add font style, weight and size to HTML code",
    "answer": "**Font Properties:**\n```css\np {\n    font-style: italic;        /* normal, italic, oblique */\n    font-weight: bold;         /* normal, bold, 100-900 */\n    font-size: 18px;           /* px, em, rem, % */\n}\n\nh1 {\n    font-style: normal;\n    font-weight: 700;\n    font-size: 2.5em;\n}\n```\n\n**Shorthand:**\n```css\n.text {\n    font: italic bold 16px Arial, sans-serif;\n}\n```",
    "type": "css",
    "tags": ["css", "fonts", "typography"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Font Properties</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n        \n        .normal-text {\n            font-style: normal;\n            font-weight: normal;\n            font-size: 16px;\n        }\n        \n        .italic-text {\n            font-style: italic;\n            font-weight: normal;\n            font-size: 18px;\n        }\n        \n        .bold-text {\n            font-style: normal;\n            font-weight: bold;\n            font-size: 20px;\n        }\n        \n        .bold-italic {\n            font-style: italic;\n            font-weight: bold;\n            font-size: 22px;\n        }\n        \n        .large-text {\n            font-size: 24px;\n            font-weight: 300;\n        }\n        \n        .shorthand-example {\n            font: italic bold 18px Georgia, serif;\n        }\n    </style>\n</head>\n<body>\n    <h1>Font Properties Examples</h1>\n    <p class=\"normal-text\">Normal text (normal style, normal weight, 16px)</p>\n    <p class=\"italic-text\">Italic text (italic style, normal weight, 18px)</p>\n    <p class=\"bold-text\">Bold text (normal style, bold weight, 20px)</p>\n    <p class=\"bold-italic\">Bold italic text (italic style, bold weight, 22px)</p>\n    <p class=\"large-text\">Large light text (24px, weight 300)</p>\n    <p class=\"shorthand-example\">Shorthand font property example</p>\n</body>\n</html>"
  },
  {
    "question": "What are some ways to design your text? Give example of text-decoration",
    "answer": "**Text Decoration Options:**\n```css\n.underline {\n    text-decoration: underline;\n}\n\n.overline {\n    text-decoration: overline;\n}\n\n.line-through {\n    text-decoration: line-through;\n}\n\n.dotted-underline {\n    text-decoration: cyan dotted underline;\n}\n\n.wavy-underline {\n    text-decoration: red wavy underline;\n}\n\n.no-decoration {\n    text-decoration: none;\n}\n```",
    "type": "css",
    "tags": ["css", "text-decoration", "styling"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Text Decoration Examples</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            line-height: 2;\n        }\n        \n        .underline {\n            text-decoration: underline;\n        }\n        \n        .overline {\n            text-decoration: overline;\n        }\n        \n        .line-through {\n            text-decoration: line-through;\n        }\n        \n        .dotted-underline {\n            text-decoration: cyan dotted underline;\n        }\n        \n        .wavy-underline {\n            text-decoration: red wavy underline;\n        }\n        \n        .double-underline {\n            text-decoration: blue double underline;\n        }\n        \n        .dashed-overline {\n            text-decoration: green dashed overline;\n        }\n        \n        .no-decoration {\n            text-decoration: none;\n        }\n        \n        .link {\n            color: blue;\n            text-decoration: underline;\n        }\n        \n        .link:hover {\n            text-decoration: none;\n        }\n    </style>\n</head>\n<body>\n    <h1>Text Decoration Examples</h1>\n    <p class=\"underline\">This text has underline decoration</p>\n    <p class=\"overline\">This text has overline decoration</p>\n    <p class=\"line-through\">This text has line-through decoration</p>\n    <p class=\"dotted-underline\">This text has cyan dotted underline</p>\n    <p class=\"wavy-underline\">This text has red wavy underline</p>\n    <p class=\"double-underline\">This text has blue double underline</p>\n    <p class=\"dashed-overline\">This text has green dashed overline</p>\n    <p class=\"no-decoration\">This text has no decoration</p>\n    <a href=\"#\" class=\"link\">This link has underline (hover to remove)</a>\n</body>\n</html>"
  },
  {
    "question": "How to add size, color, design, radius, padding to border on HTML and list common border styles?",
    "answer": "**Border Properties:**\n```css\n.box {\n    border-width: 3px;\n    border-color: red;\n    border-style: solid;\n    border-radius: 10px;\n    padding: 20px;\n}\n\n/* Shorthand */\n.box2 {\n    border: 2px dashed blue;\n    border-radius: 5px;\n    padding: 15px;\n}\n```\n\n**Common Border Styles:**\n- `solid` - solid line\n- `dashed` - dashed line\n- `dotted` - dotted line\n- `double` - double line\n- `ridge` - 3D ridged border\n- `groove` - 3D grooved border\n- `inset` - 3D inset border\n- `outset` - 3D outset border",
    "type": "css",
    "tags": ["css", "borders", "styling"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Border Examples</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n        \n        .solid-border {\n            border: 3px solid red;\n            border-radius: 10px;\n            padding: 20px;\n            margin: 10px;\n        }\n        \n        .dashed-border {\n            border: 2px dashed blue;\n            border-radius: 5px;\n            padding: 15px;\n            margin: 10px;\n        }\n        \n        .dotted-border {\n            border: 2px dotted green;\n            border-radius: 15px;\n            padding: 15px;\n            margin: 10px;\n        }\n        \n        .double-border {\n            border: 4px double purple;\n            border-radius: 8px;\n            padding: 20px;\n            margin: 10px;\n        }\n        \n        .ridge-border {\n            border: 5px ridge orange;\n            border-radius: 12px;\n            padding: 20px;\n            margin: 10px;\n        }\n        \n        .groove-border {\n            border: 5px groove teal;\n            border-radius: 12px;\n            padding: 20px;\n            margin: 10px;\n        }\n        \n        .inset-border {\n            border: 5px inset brown;\n            border-radius: 12px;\n            padding: 20px;\n            margin: 10px;\n        }\n        \n        .outset-border {\n            border: 5px outset pink;\n            border-radius: 12px;\n            padding: 20px;\n            margin: 10px;\n        }\n    </style>\n</head>\n<body>\n    <h1>Border Style Examples</h1>\n    <div class=\"solid-border\">Solid Border</div>\n    <div class=\"dashed-border\">Dashed Border</div>\n    <div class=\"dotted-border\">Dotted Border</div>\n    <div class=\"double-border\">Double Border</div>\n    <div class=\"ridge-border\">Ridge Border (3D)</div>\n    <div class=\"groove-border\">Groove Border (3D)</div>\n    <div class=\"inset-border\">Inset Border (3D)</div>\n    <div class=\"outset-border\">Outset Border (3D)</div>\n</body>\n</html>"
  },
  {
    "question": "How to edit individual dimensions of border in CSS (left, right, top, bottom)?",
    "answer": "**Individual Border Properties:**\n```css\nh1 {\n    border-top-style: solid;\n    border-bottom-style: dashed;\n    border-left-style: dotted;\n    border-right-style: double;\n}\n\n.box {\n    border-top-width: 5px;\n    border-bottom-width: 3px;\n    border-left-width: 2px;\n    border-right-width: 4px;\n    \n    border-top-color: red;\n    border-bottom-color: blue;\n    border-left-color: green;\n    border-right-color: yellow;\n}\n```",
    "type": "css",
    "tags": ["css", "borders", "individual"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Individual Border Properties</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n        \n        .mixed-styles {\n            border-top-style: solid;\n            border-bottom-style: dashed;\n            border-left-style: dotted;\n            border-right-style: double;\n            border-top-width: 3px;\n            border-bottom-width: 2px;\n            border-left-width: 4px;\n            border-right-width: 1px;\n            padding: 20px;\n            margin: 10px;\n        }\n        \n        .mixed-colors {\n            border-top-color: red;\n            border-bottom-color: blue;\n            border-left-color: green;\n            border-right-color: yellow;\n            border-width: 5px;\n            border-style: solid;\n            padding: 20px;\n            margin: 10px;\n        }\n        \n        .asymmetric {\n            border-top: 8px solid purple;\n            border-bottom: 2px dashed orange;\n            border-left: 6px dotted teal;\n            border-right: 4px ridge pink;\n            padding: 20px;\n            margin: 10px;\n        }\n    </style>\n</head>\n<body>\n    <h1>Individual Border Properties</h1>\n    <div class=\"mixed-styles\">Different styles on each side</div>\n    <div class=\"mixed-colors\">Different colors on each side</div>\n    <div class=\"asymmetric\">Asymmetric borders with different styles and colors</div>\n</body>\n</html>"
  },
  {
    "question": "How to set multiple colors as background in CSS and how to control position of a certain color?",
    "answer": "**Linear Gradient Backgrounds:**\n```css\n.gradient1 {\n    background: linear-gradient(blue, red);\n}\n\n.gradient2 {\n    background: linear-gradient(to top, blue, red);\n}\n\n.gradient3 {\n    background: linear-gradient(to bottom, blue, red);\n}\n\n.gradient4 {\n    background: linear-gradient(to right, blue, red);\n}\n\n.gradient5 {\n    background: linear-gradient(to left, blue, red);\n}\n\n.gradient6 {\n    background: linear-gradient(45deg, blue, red, green);\n}\n```",
    "type": "css",
    "tags": ["css", "backgrounds", "gradients"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Background Gradients</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n        \n        .gradient1 {\n            background: linear-gradient(blue, red);\n            padding: 30px;\n            margin: 10px;\n            color: white;\n            text-align: center;\n        }\n        \n        .gradient2 {\n            background: linear-gradient(to top, blue, red);\n            padding: 30px;\n            margin: 10px;\n            color: white;\n            text-align: center;\n        }\n        \n        .gradient3 {\n            background: linear-gradient(to bottom, blue, red);\n            padding: 30px;\n            margin: 10px;\n            color: white;\n            text-align: center;\n        }\n        \n        .gradient4 {\n            background: linear-gradient(to right, blue, red);\n            padding: 30px;\n            margin: 10px;\n            color: white;\n            text-align: center;\n        }\n        \n        .gradient5 {\n            background: linear-gradient(to left, blue, red);\n            padding: 30px;\n            margin: 10px;\n            color: white;\n            text-align: center;\n        }\n        \n        .gradient6 {\n            background: linear-gradient(45deg, blue, red, green);\n            padding: 30px;\n            margin: 10px;\n            color: white;\n            text-align: center;\n        }\n        \n        .gradient7 {\n            background: linear-gradient(90deg, yellow, orange, red);\n            padding: 30px;\n            margin: 10px;\n            color: white;\n            text-align: center;\n        }\n    </style>\n</head>\n<body>\n    <h1>Background Gradient Examples</h1>\n    <div class=\"gradient1\">Default Gradient (top to bottom)</div>\n    <div class=\"gradient2\">To Top Gradient</div>\n    <div class=\"gradient3\">To Bottom Gradient</div>\n    <div class=\"gradient4\">To Right Gradient</div>\n    <div class=\"gradient5\">To Left Gradient</div>\n    <div class=\"gradient6\">45 Degree Angle with 3 Colors</div>\n    <div class=\"gradient7\">90 Degree with Multiple Colors</div>\n</body>\n</html>"
  },
  {
    "question": "How to stop background from repeating and fix empty background with background-attachment: fixed?",
    "answer": "**Background Repeat Control:**\n```css\n.no-repeat {\n    background-repeat: no-repeat;\n}\n\n.fixed-background {\n    background-attachment: fixed;\n    background-repeat: no-repeat;\n}\n\n.cover-background {\n    background-size: cover;\n    background-repeat: no-repeat;\n}\n```\n\n**Common with gradients:**\n- Gradients don't repeat by default\n- Use `background-attachment: fixed` to keep background in place when scrolling\n- Use `background-size: cover` to make image fit screen",
    "type": "css",
    "tags": ["css", "backgrounds", "repeating"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Background Repeat Control</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 0;\n            padding: 20px;\n        }\n        \n        .repeat-example {\n            background-image: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"50\" height=\"50\"><rect width=\"50\" height=\"50\" fill=\"%23ff0000\"/><circle cx=\"25\" cy=\"25\" r=\"10\" fill=\"%23ffffff\"/></svg>');\n            background-repeat: repeat;\n            padding: 50px;\n            margin: 10px;\n            border: 2px solid black;\n        }\n        \n        .no-repeat {\n            background-image: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100\" height=\"100\"><rect width=\"100\" height=\"100\" fill=\"%2300ff00\"/><circle cx=\"50\" cy=\"50\" r=\"20\" fill=\"%23ffffff\"/></svg>');\n            background-repeat: no-repeat;\n            background-position: center;\n            padding: 50px;\n            margin: 10px;\n            border: 2px solid black;\n        }\n        \n        .gradient-no-repeat {\n            background: linear-gradient(45deg, blue, red);\n            background-repeat: no-repeat;\n            padding: 50px;\n            margin: 10px;\n            border: 2px solid black;\n            color: white;\n            text-align: center;\n        }\n        \n        .fixed-background {\n            background: linear-gradient(135deg, purple, pink);\n            background-attachment: fixed;\n            background-repeat: no-repeat;\n            padding: 50px;\n            margin: 10px;\n            border: 2px solid black;\n            color: white;\n            text-align: center;\n        }\n    </style>\n</head>\n<body>\n    <h1>Background Repeat Control Examples</h1>\n    <div class=\"repeat-example\">Background with repeat (default)</div>\n    <div class=\"no-repeat\">Background with no-repeat</div>\n    <div class=\"gradient-no-repeat\">Gradient with no-repeat</div>\n    <div class=\"fixed-background\">Fixed background attachment</div>\n    <div style=\"height: 200px; background: lightgray; margin: 10px; padding: 20px;\">\n        <p>Scroll to see the fixed background effect above</p>\n    </div>\n</body>\n</html>"
  },
  {
    "question": "How to set image as background in CSS, make image stay in middle and make image fit the screen?",
    "answer": "**Background Image Properties:**\n```css\nbody {\n    background-image: url('my-background.jpg');\n    background-position: center;\n    background-size: cover;\n    background-repeat: no-repeat;\n}\n\n/* Alternative sizes */\n.contain {\n    background-size: contain;\n}\n\n.specific-size {\n    background-size: 800px 600px;\n}\n\n.percentage {\n    background-size: 100% 100%;\n}\n```",
    "type": "css",
    "tags": ["css", "backgrounds", "images"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Background Image Examples</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 0;\n            padding: 20px;\n        }\n        \n        .background-example {\n            background-image: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"200\" height=\"200\"><rect width=\"200\" height=\"200\" fill=\"%23ff6b6b\"/><circle cx=\"100\" cy=\"100\" r=\"50\" fill=\"%23ffffff\"/><text x=\"100\" y=\"110\" text-anchor=\"middle\" fill=\"%23ff6b6b\" font-size=\"20\">BG</text></svg>');\n            background-position: center;\n            background-size: cover;\n            background-repeat: no-repeat;\n            height: 300px;\n            margin: 10px;\n            border: 2px solid black;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            color: white;\n            font-size: 24px;\n            font-weight: bold;\n        }\n        \n        .contain-example {\n            background-image: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"150\" height=\"150\"><rect width=\"150\" height=\"150\" fill=\"%234ecdc4\"/><polygon points=\"75,25 125,75 75,125 25,75\" fill=\"%23ffffff\"/></svg>');\n            background-position: center;\n            background-size: contain;\n            background-repeat: no-repeat;\n            height: 300px;\n            margin: 10px;\n            border: 2px solid black;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            color: white;\n            font-size: 24px;\n            font-weight: bold;\n        }\n        \n        .specific-size {\n            background-image: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100\" height=\"100\"><rect width=\"100\" height=\"100\" fill=\"%2345b7d1\"/><rect x=\"25\" y=\"25\" width=\"50\" height=\"50\" fill=\"%23ffffff\"/></svg>');\n            background-position: center;\n            background-size: 100px 100px;\n            background-repeat: no-repeat;\n            height: 300px;\n            margin: 10px;\n            border: 2px solid black;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            color: white;\n            font-size: 24px;\n            font-weight: bold;\n        }\n    </style>\n</head>\n<body>\n    <h1>Background Image Examples</h1>\n    <div class=\"background-example\">Cover - Fits screen</div>\n    <div class=\"contain-example\">Contain - Shows full image</div>\n    <div class=\"specific-size\">Specific Size - 100px x 100px</div>\n</body>\n</html>"
  },
  {
    "question": "What is a margin and what is padding? Give examples of margin code for top, left, right, bottom, and one line for all",
    "answer": "**Margin vs Padding:**\n- **Margin**: Space outside the element (between elements)\n- **Padding**: Space inside the element (between content and border)\n\n**Individual Margins:**\n```css\n.box {\n    margin-top: 20px;\n    margin-left: 15px;\n    margin-right: 10px;\n    margin-bottom: 25px;\n}\n```\n\n**One Line Margin:**\n```css\n.box {\n    margin: 20px;           /* All sides */\n    margin: 10px 20px;      /* top/bottom left/right */\n    margin: 10px 20px 15px; /* top left/right bottom */\n    margin: 10px 20px 15px 5px; /* top right bottom left */\n}\n```\n\n**Zero Margin:**\n```css\n.no-margin {\n    margin: 0px; /* Border will touch edge of website */\n}\n```",
    "type": "css",
    "tags": ["css", "margin", "padding", "spacing"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Margin and Padding Examples</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 0;\n            padding: 20px;\n            background-color: #f0f0f0;\n        }\n        \n        .margin-example {\n            background-color: lightblue;\n            border: 3px solid blue;\n            padding: 20px;\n            margin-top: 20px;\n            margin-left: 15px;\n            margin-right: 10px;\n            margin-bottom: 25px;\n        }\n        \n        .padding-example {\n            background-color: lightgreen;\n            border: 3px solid green;\n            margin: 20px;\n            padding-top: 30px;\n            padding-left: 25px;\n            padding-right: 20px;\n            padding-bottom: 35px;\n        }\n        \n        .one-line-margin {\n            background-color: lightcoral;\n            border: 3px solid red;\n            padding: 20px;\n            margin: 20px; /* All sides equal */\n        }\n        \n        .different-margins {\n            background-color: lightyellow;\n            border: 3px solid orange;\n            padding: 20px;\n            margin: 10px 30px 20px 5px; /* top right bottom left */\n        }\n        \n        .no-margin {\n            background-color: lightgray;\n            border: 3px solid black;\n            padding: 20px;\n            margin: 0px; /* Touches edge */\n        }\n        \n        .container {\n            background-color: white;\n            border: 2px dashed #333;\n            margin: 10px;\n            padding: 10px;\n        }\n    </style>\n</head>\n<body>\n    <h1>Margin and Padding Examples</h1>\n    <div class=\"container\">\n        <div class=\"margin-example\">Individual margins (top: 20px, left: 15px, right: 10px, bottom: 25px)</div>\n        <div class=\"padding-example\">Individual padding (top: 30px, left: 25px, right: 20px, bottom: 35px)</div>\n        <div class=\"one-line-margin\">One line margin: 20px all sides</div>\n        <div class=\"different-margins\">Different margins: 10px 30px 20px 5px (top right bottom left)</div>\n        <div class=\"no-margin\">No margin (0px) - touches edges</div>\n    </div>\n</body>\n</html>"
  },
  {
    "question": "How to make div stick to left or right and center regardless of browser size?",
    "answer": "**Centering with Auto Margins:**\n```css\n.center {\n    margin-left: auto;\n    margin-right: auto;\n    width: 300px;\n}\n\n.left {\n    margin-left: 0;\n    margin-right: auto;\n}\n\n.right {\n    margin-left: auto;\n    margin-right: 0;\n}\n```\n\n**Note:** Setting both left and right to auto makes div stay in the middle regardless of browser size.",
    "type": "css",
    "tags": ["css", "centering", "layout"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Div Positioning</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 0;\n            padding: 20px;\n            background-color: #f0f0f0;\n        }\n        \n        .center {\n            background-color: lightblue;\n            border: 3px solid blue;\n            padding: 20px;\n            margin-left: auto;\n            margin-right: auto;\n            width: 300px;\n            text-align: center;\n        }\n        \n        .left {\n            background-color: lightgreen;\n            border: 3px solid green;\n            padding: 20px;\n            margin-left: 0;\n            margin-right: auto;\n            width: 250px;\n        }\n        \n        .right {\n            background-color: lightcoral;\n            border: 3px solid red;\n            padding: 20px;\n            margin-left: auto;\n            margin-right: 0;\n            width: 250px;\n        }\n        \n        .container {\n            background-color: white;\n            border: 2px dashed #333;\n            padding: 20px;\n            margin: 10px;\n        }\n    </style>\n</head>\n<body>\n    <h1>Div Positioning Examples</h1>\n    <div class=\"container\">\n        <div class=\"center\">Centered Div (auto margins)</div>\n        <div class=\"left\">Left Aligned Div</div>\n        <div class=\"right\">Right Aligned Div</div>\n    </div>\n    <p>Resize browser window to see how the centered div stays in the middle!</p>\n</body>\n</html>"
  },
  {
    "question": "What is the float property in CSS and how to use it?",
    "answer": "**Float Property:**\n```css\nimg {\n    float: left;    /* Takes all images to top left */\n}\n\nimg {\n    float: right;   /* Takes images to top right */\n}\n\n.clear {\n    clear: both;    /* Stops floating elements */\n}\n```\n\n**Popular for wrapping text around images:**\n- `float: left` - Element floats to left, text wraps around right\n- `float: right` - Element floats to right, text wraps around left\n- `clear: left/right/both` - Stops elements from floating",
    "type": "css",
    "tags": ["css", "float", "layout"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Float Property Examples</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            line-height: 1.6;\n        }\n        \n        .float-left {\n            float: left;\n            width: 150px;\n            height: 100px;\n            background-color: lightblue;\n            border: 2px solid blue;\n            margin: 10px 15px 10px 0;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-weight: bold;\n        }\n        \n        .float-right {\n            float: right;\n            width: 150px;\n            height: 100px;\n            background-color: lightcoral;\n            border: 2px solid red;\n            margin: 10px 0 10px 15px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-weight: bold;\n        }\n        \n        .clear {\n            clear: both;\n            background-color: lightyellow;\n            padding: 20px;\n            border: 2px solid orange;\n            margin: 20px 0;\n        }\n        \n        .container {\n            background-color: white;\n            border: 2px dashed #333;\n            padding: 20px;\n            margin: 10px 0;\n        }\n    </style>\n</head>\n<body>\n    <h1>Float Property Examples</h1>\n    <div class=\"container\">\n        <div class=\"float-left\">Float Left</div>\n        <p>This text wraps around the left-floating element. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>\n        \n        <div class=\"float-right\">Float Right</div>\n        <p>This text wraps around the right-floating element. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>\n        \n        <div class=\"clear\">This div clears both floats and appears below all floating elements.</div>\n    </div>\n</body>\n</html>"
  },
  {
    "question": "How to change location of text in HTML and CSS (inline and external)?",
    "answer": "**Text Alignment:**\n```css\n.center {\n    text-align: center;\n}\n\n.left {\n    text-align: left;\n}\n\n.right {\n    text-align: right;\n}\n\n.justify {\n    text-align: justify;\n}\n```\n\n**Inline CSS:**\n```html\n<h1 style=\"text-align: center;\">Centered Heading</h1>\n<p style=\"text-align: right;\">Right-aligned paragraph</p>\n```\n\n**External CSS:**\n```css\nh1 { text-align: center; }\np { text-align: justify; }\n```",
    "type": "css",
    "tags": ["css", "text-align", "alignment"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Text Alignment Examples</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            line-height: 1.6;\n        }\n        \n        .center {\n            text-align: center;\n            background-color: lightblue;\n            padding: 20px;\n            margin: 10px;\n            border: 2px solid blue;\n        }\n        \n        .left {\n            text-align: left;\n            background-color: lightgreen;\n            padding: 20px;\n            margin: 10px;\n            border: 2px solid green;\n        }\n        \n        .right {\n            text-align: right;\n            background-color: lightcoral;\n            padding: 20px;\n            margin: 10px;\n            border: 2px solid red;\n        }\n        \n        .justify {\n            text-align: justify;\n            background-color: lightyellow;\n            padding: 20px;\n            margin: 10px;\n            border: 2px solid orange;\n        }\n        \n        .inline-example {\n            background-color: lightgray;\n            padding: 20px;\n            margin: 10px;\n            border: 2px solid gray;\n        }\n    </style>\n</head>\n<body>\n    <h1>Text Alignment Examples</h1>\n    <div class=\"center\">This text is centered using CSS</div>\n    <div class=\"left\">This text is left-aligned using CSS</div>\n    <div class=\"right\">This text is right-aligned using CSS</div>\n    <div class=\"justify\">This text is justified using CSS. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</div>\n    \n    <div class=\"inline-example\">\n        <h2 style=\"text-align: center;\">Inline CSS Example</h2>\n        <p style=\"text-align: right;\">This paragraph uses inline CSS for right alignment</p>\n    </div>\n</body>\n</html>"
  },
  {
    "question": "How to stop paragraph from wrapping with float function?",
    "answer": "**Clear Property:**\n```css\n.float-left {\n    float: left;\n}\n\n.clear-left {\n    clear: left;\n}\n\n.clear-both {\n    clear: both;\n}\n\n.clear-right {\n    clear: right;\n}\n```\n\n**If float: left, use:**\n- `clear: left` - Stops left-floating elements\n- `clear: both` - Stops all floating elements\n\n**If float: right, use:**\n- `clear: right` - Stops right-floating elements\n- `clear: both` - Stops all floating elements",
    "type": "css",
    "tags": ["css", "float", "clear", "layout"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Clear Property Examples</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            line-height: 1.6;\n        }\n        \n        .float-left {\n            float: left;\n            width: 120px;\n            height: 80px;\n            background-color: lightblue;\n            border: 2px solid blue;\n            margin: 10px 15px 10px 0;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-weight: bold;\n        }\n        \n        .float-right {\n            float: right;\n            width: 120px;\n            height: 80px;\n            background-color: lightcoral;\n            border: 2px solid red;\n            margin: 10px 0 10px 15px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-weight: bold;\n        }\n        \n        .clear-left {\n            clear: left;\n            background-color: lightgreen;\n            padding: 15px;\n            border: 2px solid green;\n            margin: 10px 0;\n        }\n        \n        .clear-right {\n            clear: right;\n            background-color: lightyellow;\n            padding: 15px;\n            border: 2px solid orange;\n            margin: 10px 0;\n        }\n        \n        .clear-both {\n            clear: both;\n            background-color: lightpink;\n            padding: 15px;\n            border: 2px solid pink;\n            margin: 10px 0;\n        }\n        \n        .container {\n            background-color: white;\n            border: 2px dashed #333;\n            padding: 20px;\n            margin: 10px 0;\n        }\n    </style>\n</head>\n<body>\n    <h1>Clear Property Examples</h1>\n    <div class=\"container\">\n        <div class=\"float-left\">Float Left</div>\n        <div class=\"float-right\">Float Right</div>\n        <p>This text wraps around both floating elements. Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n        \n        <div class=\"clear-left\">Clear Left - Stops left-floating elements</div>\n        <p>This text continues after clearing left floats.</p>\n        \n        <div class=\"clear-right\">Clear Right - Stops right-floating elements</div>\n        <p>This text continues after clearing right floats.</p>\n        \n        <div class=\"clear-both\">Clear Both - Stops all floating elements</div>\n        <p>This text appears below all floating elements.</p>\n    </div>\n</body>\n</html>"
  },
  {
    "question": "Discuss static positions, how to use and its offsets and examples",
    "answer": "**Static Position (Default):**\n```css\n.static {\n    position: static;\n    top: 50px;    /* Ignored - no effect */\n    left: 50px;   /* Ignored - no effect */\n}\n```\n\n**Static Position:**\n- Default position for all elements\n- Elements flow normally in document\n- `top`, `left`, `right`, `bottom` properties have NO effect\n- Cannot be moved with offset properties\n- Elements appear in normal document flow",
    "type": "css",
    "tags": ["css", "positioning", "static"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Static Position Examples</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            line-height: 1.6;\n        }\n        \n        .static-box {\n            position: static;\n            background-color: lightblue;\n            border: 3px solid blue;\n            padding: 20px;\n            margin: 10px;\n            /* These properties are ignored in static position */\n            top: 100px;\n            left: 100px;\n            right: 100px;\n            bottom: 100px;\n        }\n        \n        .normal-box {\n            background-color: lightgreen;\n            border: 3px solid green;\n            padding: 20px;\n            margin: 10px;\n        }\n        \n        .container {\n            background-color: white;\n            border: 2px dashed #333;\n            padding: 20px;\n            margin: 10px;\n        }\n    </style>\n</head>\n<body>\n    <h1>Static Position Examples</h1>\n    <div class=\"container\">\n        <div class=\"normal-box\">Normal Box (default static)</div>\n        <div class=\"static-box\">Static Box with ignored offset properties</div>\n        <div class=\"normal-box\">Another Normal Box</div>\n    </div>\n    <p><strong>Note:</strong> Static position ignores top, left, right, bottom properties. Elements flow normally in the document.</p>\n</body>\n</html>"
  },
  {
    "question": "Discuss relative positions, how to use, its offset and examples",
    "answer": "**Relative Position:**\n```css\n.relative {\n    position: relative;\n    top: 50px;\n    left: 50px;\n}\n```\n\n**Relative Position:**\n- Element positioned relative to its normal position\n- `top`, `left`, `right`, `bottom` properties work\n- Original space is preserved (other elements don't move)\n- Element moves from its original position\n- Useful for fine-tuning element placement",
    "type": "css",
    "tags": ["css", "positioning", "relative"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Relative Position Examples</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            line-height: 1.6;\n        }\n        \n        .normal-box {\n            background-color: lightgray;\n            border: 2px solid gray;\n            padding: 20px;\n            margin: 10px;\n        }\n        \n        .relative-box {\n            position: relative;\n            background-color: lightblue;\n            border: 3px solid blue;\n            padding: 20px;\n            margin: 10px;\n            top: 30px;\n            left: 50px;\n        }\n        \n        .relative-negative {\n            position: relative;\n            background-color: lightcoral;\n            border: 3px solid red;\n            padding: 20px;\n            margin: 10px;\n            top: -20px;\n            left: -30px;\n        }\n        \n        .container {\n            background-color: white;\n            border: 2px dashed #333;\n            padding: 20px;\n            margin: 10px;\n        }\n    </style>\n</head>\n<body>\n    <h1>Relative Position Examples</h1>\n    <div class=\"container\">\n        <div class=\"normal-box\">Normal Box 1</div>\n        <div class=\"relative-box\">Relative Box (moved down 30px, right 50px)</div>\n        <div class=\"normal-box\">Normal Box 2 (space preserved)</div>\n        <div class=\"relative-negative\">Relative Box (moved up 20px, left 30px)</div>\n        <div class=\"normal-box\">Normal Box 3</div>\n    </div>\n    <p><strong>Note:</strong> Relative positioning moves elements from their original position while preserving the original space.</p>\n</body>\n</html>"
  },
  {
    "question": "Discuss absolute positions, how to use, its offset and examples",
    "answer": "**Absolute Position:**\n```css\n.absolute {\n    position: absolute;\n    top: 0;\n    left: 0;\n}\n```\n\n**Absolute Position:**\n- Element positioned relative to nearest positioned ancestor\n- If no positioned ancestor, positioned relative to document body\n- Removed from normal document flow\n- Other elements act as if it doesn't exist\n- `top`, `left`, `right`, `bottom` properties work\n- Used for overlays, modals, tooltips",
    "type": "css",
    "tags": ["css", "positioning", "absolute"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Absolute Position Examples</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            line-height: 1.6;\n        }\n        \n        .container {\n            position: relative;\n            background-color: lightgray;\n            border: 3px solid gray;\n            padding: 40px;\n            margin: 20px;\n            height: 300px;\n        }\n        \n        .absolute-top-left {\n            position: absolute;\n            top: 0;\n            left: 0;\n            background-color: lightblue;\n            border: 2px solid blue;\n            padding: 15px;\n            width: 100px;\n        }\n        \n        .absolute-top-right {\n            position: absolute;\n            top: 0;\n            right: 0;\n            background-color: lightcoral;\n            border: 2px solid red;\n            padding: 15px;\n            width: 100px;\n        }\n        \n        .absolute-bottom-left {\n            position: absolute;\n            bottom: 0;\n            left: 0;\n            background-color: lightgreen;\n            border: 2px solid green;\n            padding: 15px;\n            width: 100px;\n        }\n        \n        .absolute-center {\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%);\n            background-color: lightyellow;\n            border: 2px solid orange;\n            padding: 15px;\n            width: 120px;\n            text-align: center;\n        }\n        \n        .normal-box {\n            background-color: white;\n            border: 2px solid black;\n            padding: 20px;\n            margin: 10px;\n        }\n    </style>\n</head>\n<body>\n    <h1>Absolute Position Examples</h1>\n    <div class=\"normal-box\">Normal Box (not affected by absolute elements)</div>\n    \n    <div class=\"container\">\n        <div class=\"absolute-top-left\">Top Left</div>\n        <div class=\"absolute-top-right\">Top Right</div>\n        <div class=\"absolute-bottom-left\">Bottom Left</div>\n        <div class=\"absolute-center\">Center</div>\n        <p>This container has relative positioning, so absolute elements position relative to it.</p>\n    </div>\n    \n    <div class=\"normal-box\">Another Normal Box</div>\n    <p><strong>Note:</strong> Absolute positioning removes elements from normal flow and positions them relative to the nearest positioned ancestor.</p>\n</body>\n</html>"
  },
  {
    "question": "Discuss fixed positions, how to use, its offset and examples",
    "answer": "**Fixed Position:**\n```css\n.fixed {\n    position: fixed;\n    top: 0;\n    left: 0;\n}\n```\n\n**Fixed Position:**\n- Element positioned relative to viewport (browser window)\n- Stays in same position when scrolling\n- Removed from normal document flow\n- `top`, `left`, `right`, `bottom` properties work\n- Used for navigation bars, chat buttons, back-to-top buttons\n- Always visible regardless of scroll position",
    "type": "css",
    "tags": ["css", "positioning", "fixed"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Fixed Position Examples</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 0;\n            padding: 20px;\n            line-height: 1.6;\n        }\n        \n        .fixed-header {\n            position: fixed;\n            top: 0;\n            left: 0;\n            right: 0;\n            background-color: #333;\n            color: white;\n            padding: 15px;\n            text-align: center;\n            z-index: 1000;\n        }\n        \n        .fixed-sidebar {\n            position: fixed;\n            top: 80px;\n            right: 0;\n            width: 200px;\n            background-color: lightblue;\n            border: 2px solid blue;\n            padding: 20px;\n            z-index: 999;\n        }\n        \n        .fixed-button {\n            position: fixed;\n            bottom: 20px;\n            right: 20px;\n            background-color: red;\n            color: white;\n            border: none;\n            padding: 15px;\n            border-radius: 50%;\n            cursor: pointer;\n            z-index: 1000;\n        }\n        \n        .content {\n            margin-top: 80px;\n            margin-right: 250px;\n            padding: 20px;\n        }\n        \n        .scroll-content {\n            height: 2000px;\n            background: linear-gradient(to bottom, lightgray, white);\n            padding: 20px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"fixed-header\">Fixed Header - Always Visible</div>\n    \n    <div class=\"fixed-sidebar\">\n        <h3>Fixed Sidebar</h3>\n        <p>This sidebar stays in place when scrolling</p>\n    </div>\n    \n    <button class=\"fixed-button\" onclick=\"alert('Back to top!')\">↑</button>\n    \n    <div class=\"content\">\n        <h1>Fixed Position Examples</h1>\n        <div class=\"scroll-content\">\n            <h2>Scrollable Content</h2>\n            <p>This content is scrollable. Notice how the fixed elements stay in place:</p>\n            <ul>\n                <li>Fixed header at the top</li>\n                <li>Fixed sidebar on the right</li>\n                <li>Fixed button at bottom right</li>\n            </ul>\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>\n            <p>Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>\n            <p>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.</p>\n        </div>\n    </div>\n</body>\n</html>"
  },
  {
    "question": "What is the transform in CSS and give some examples?",
    "answer": "**CSS Transform Properties:**\n```css\n.translate {\n    transform: translateX(50px);\n    transform: translateY(30px);\n    transform: translate(50px, 30px);\n}\n\n.rotate {\n    transform: rotateX(45deg);\n    transform: rotateY(30deg);\n    transform: rotateZ(90deg);\n    transform: rotate(45deg);\n}\n\n.scale {\n    transform: scaleX(1.5);\n    transform: scaleY(0.8);\n    transform: scale(1.2, 0.9);\n}\n\n.skew {\n    transform: skewX(20deg);\n    transform: skewY(15deg);\n    transform: skew(20deg, 15deg);\n}\n```",
    "type": "css",
    "tags": ["css", "transform", "animation"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>CSS Transform Examples</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            background-color: #f0f0f0;\n        }\n        \n        .container {\n            display: flex;\n            flex-wrap: wrap;\n            gap: 20px;\n            margin: 20px 0;\n        }\n        \n        .box {\n            width: 100px;\n            height: 100px;\n            background-color: lightblue;\n            border: 3px solid blue;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-weight: bold;\n            margin: 10px;\n        }\n        \n        .translate-x {\n            transform: translateX(50px);\n        }\n        \n        .translate-y {\n            transform: translateY(30px);\n        }\n        \n        .translate {\n            transform: translate(50px, 30px);\n        }\n        \n        .rotate {\n            transform: rotate(45deg);\n        }\n        \n        .rotate-z {\n            transform: rotateZ(90deg);\n        }\n        \n        .scale {\n            transform: scale(1.5);\n        }\n        \n        .scale-x {\n            transform: scaleX(1.5);\n        }\n        \n        .scale-y {\n            transform: scaleY(1.5);\n        }\n        \n        .skew {\n            transform: skew(20deg, 10deg);\n        }\n        \n        .skew-x {\n            transform: skewX(30deg);\n        }\n        \n        .skew-y {\n            transform: skewY(20deg);\n        }\n        \n        .multiple {\n            transform: translate(30px, 20px) rotate(45deg) scale(1.2);\n        }\n    </style>\n</head>\n<body>\n    <h1>CSS Transform Examples</h1>\n    <div class=\"container\">\n        <div class=\"box\">Normal</div>\n        <div class=\"box translate-x\">TranslateX</div>\n        <div class=\"box translate-y\">TranslateY</div>\n        <div class=\"box translate\">Translate</div>\n        <div class=\"box rotate\">Rotate</div>\n        <div class=\"box rotate-z\">RotateZ</div>\n        <div class=\"box scale\">Scale</div>\n        <div class=\"box scale-x\">ScaleX</div>\n        <div class=\"box scale-y\">ScaleY</div>\n        <div class=\"box skew\">Skew</div>\n        <div class=\"box skew-x\">SkewX</div>\n        <div class=\"box skew-y\">SkewY</div>\n        <div class=\"box multiple\">Multiple</div>\n    </div>\n</body>\n</html>"
  },
  {
    "question": "What are pseudo-classes and how to use them? Give examples with links and buttons",
    "answer": "**Pseudo-classes:**\nSpecial keywords added to selectors that specify a special state of the element.\n\n**Link Pseudo-classes:**\n```css\na:link { color: blue; }        /* Unvisited link */\na:visited { color: purple; }   /* Visited link */\na:hover { color: red; }         /* Mouse over */\na:active { color: green; }      /* Clicked */\n```\n\n**Button Pseudo-classes:**\n```css\nbutton:hover { background: yellow; }\nbutton:active { background: orange; }\nbutton:focus { outline: 2px solid blue; }\n```\n\n**Common Pseudo-classes:**\n- `:hover` - Mouse over element\n- `:active` - Element being clicked\n- `:focus` - Element has keyboard focus\n- `:visited` - Visited link\n- `:link` - Unvisited link",
    "type": "css",
    "tags": ["css", "pseudo-classes", "interactive"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Pseudo-classes Examples</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            line-height: 1.6;\n        }\n        \n        /* Link pseudo-classes */\n        a:link {\n            color: blue;\n            text-decoration: underline;\n        }\n        \n        a:visited {\n            color: purple;\n        }\n        \n        a:hover {\n            color: red;\n            text-decoration: none;\n            font-weight: bold;\n        }\n        \n        a:active {\n            color: green;\n            background-color: yellow;\n        }\n        \n        /* Button pseudo-classes */\n        .button {\n            background-color: #4CAF50;\n            color: white;\n            padding: 15px 30px;\n            border: none;\n            border-radius: 5px;\n            cursor: pointer;\n            font-size: 16px;\n            margin: 10px;\n            transition: all 0.3s;\n        }\n        \n        .button:hover {\n            background-color: #45a049;\n            transform: scale(1.05);\n        }\n        \n        .button:active {\n            background-color: #3e8e41;\n            transform: scale(0.95);\n        }\n        \n        .button:focus {\n            outline: 3px solid #2196F3;\n        }\n        \n        /* Input pseudo-classes */\n        input {\n            padding: 10px;\n            margin: 10px;\n            border: 2px solid #ccc;\n            border-radius: 4px;\n        }\n        \n        input:focus {\n            border-color: #4CAF50;\n            outline: none;\n        }\n        \n        input:hover {\n            border-color: #45a049;\n        }\n        \n        /* Div pseudo-classes */\n        .hover-box {\n            background-color: lightblue;\n            padding: 20px;\n            margin: 10px;\n            border: 2px solid blue;\n            transition: all 0.3s;\n        }\n        \n        .hover-box:hover {\n            background-color: lightcoral;\n            transform: translateY(-5px);\n            box-shadow: 0 5px 15px rgba(0,0,0,0.3);\n        }\n    </style>\n</head>\n<body>\n    <h1>Pseudo-classes Examples</h1>\n    \n    <h2>Link Pseudo-classes</h2>\n    <p><a href=\"#\">This is a link - hover over it!</a></p>\n    <p><a href=\"#visited\">This link changes when visited</a></p>\n    \n    <h2>Button Pseudo-classes</h2>\n    <button class=\"button\">Hover Button</button>\n    <button class=\"button\">Focus Button (click then press Tab)</button>\n    \n    <h2>Input Pseudo-classes</h2>\n    <input type=\"text\" placeholder=\"Focus and hover over this input\">\n    <input type=\"email\" placeholder=\"Email input\">\n    \n    <h2>Div Hover Effect</h2>\n    <div class=\"hover-box\">Hover over this box!</div>\n    \n    <p><strong>Try:</strong> Hovering, clicking, focusing, and visiting links to see different pseudo-class effects!</p>\n</body>\n</html>"
  },
  {
    "question": "How to write comments in CSS?",
    "answer": "**CSS Comments:**\n```css\n/* This is a single-line comment */\n\n/*\nThis is a\nmulti-line comment\nin CSS\n*/\n\np {\n    color: red;\n    /* This is an inline comment */\n    font-size: 16px;\n}\n```\n\n**Important:**\n- CSS comments use `/* */` syntax\n- Comments are ignored by the browser\n- Useful for documentation and debugging\n- Can span multiple lines\n- Cannot be nested",
    "type": "css",
    "tags": ["css", "comments", "syntax"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>CSS Comments Example</title>\n    <style>\n        /* This is a single-line comment */\n        \n        /*\n        This is a multi-line comment\n        that spans several lines\n        */\n        \n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            /* This is an inline comment */\n        }\n        \n        /* Header styling */\n        h1 {\n            color: blue;\n            text-align: center;\n        }\n        \n        /* Paragraph styling with comments */\n        p {\n            color: #333;\n            line-height: 1.6;\n            /* margin: 10px; */ /* This line is commented out */\n        }\n        \n        /*\n        .commented-out {\n            background-color: red;\n            padding: 20px;\n        }\n        */\n        \n        .active {\n            background-color: lightblue;\n            padding: 15px;\n            border: 2px solid blue;\n            /* border-radius: 5px; */ /* Commented out property */\n        }\n    </style>\n</head>\n<body>\n    <h1>CSS Comments Example</h1>\n    <p>This page demonstrates CSS comments. Check the source code to see the comments!</p>\n    <div class=\"active\">This div has active styling</div>\n    <p>Comments in CSS use /* */ syntax and are ignored by the browser.</p>\n</body>\n</html>"
  },
  {
    "question": "How to make a div animation in CSS using keyframes?",
    "answer": "**CSS Animations with Keyframes:**\n```css\n@keyframes myslide {\n    from { margin-left: 100px; }\n    to { margin-left: 0px; }\n}\n\n@keyframes myrotate {\n    100% { transform: rotateZ(360deg); }\n}\n\n@keyframes myopacity {\n    100% { opacity: 0; }\n}\n\n@keyframes mycolorchange {\n    20% { background-color: red; }\n    40% { background-color: orange; }\n    60% { background-color: yellow; }\n    80% { background-color: blue; }\n    100% { background-color: purple; }\n}\n\n.animated {\n    animation: myslide 3s linear 0s infinite running;\n}\n```\n\n**Animation Properties:**\n- `animation-name` - Name of keyframe\n- `animation-duration` - How long animation lasts\n- `animation-iteration-count` - How many times to repeat\n- `animation-timing-function` - Speed curve\n- `animation-delay` - Delay before starting",
    "type": "css",
    "tags": ["css", "animations", "keyframes"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>CSS Animations with Keyframes</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            background-color: #f0f0f0;\n        }\n        \n        .box {\n            width: 100px;\n            height: 100px;\n            margin: 20px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-weight: bold;\n            color: white;\n        }\n        \n        /* Slide animation */\n        @keyframes myslide {\n            from { margin-left: 100px; }\n            to { margin-left: 0px; }\n        }\n        \n        .slide {\n            background-color: lightblue;\n            animation: myslide 2s ease-in-out infinite alternate;\n        }\n        \n        /* Rotate animation */\n        @keyframes myrotate {\n            100% { transform: rotateZ(360deg); }\n        }\n        \n        .rotate {\n            background-color: lightcoral;\n            animation: myrotate 3s linear infinite;\n        }\n        \n        /* Opacity animation */\n        @keyframes myopacity {\n            0% { opacity: 1; }\n            50% { opacity: 0.3; }\n            100% { opacity: 1; }\n        }\n        \n        .opacity {\n            background-color: lightgreen;\n            animation: myopacity 2s ease-in-out infinite;\n        }\n        \n        /* Color change animation */\n        @keyframes mycolorchange {\n            0% { background-color: red; }\n            25% { background-color: orange; }\n            50% { background-color: yellow; }\n            75% { background-color: blue; }\n            100% { background-color: purple; }\n        }\n        \n        .colorchange {\n            background-color: red;\n            animation: mycolorchange 4s ease-in-out infinite;\n        }\n        \n        /* Scale animation */\n        @keyframes myscale {\n            0% { transform: scale(1); }\n            50% { transform: scale(1.5); }\n            100% { transform: scale(1); }\n        }\n        \n        .scale {\n            background-color: lightyellow;\n            animation: myscale 2s ease-in-out infinite;\n        }\n        \n        /* Multiple animations */\n        @keyframes multiple {\n            0% { transform: translateX(0) rotate(0deg) scale(1); }\n            50% { transform: translateX(50px) rotate(180deg) scale(1.2); }\n            100% { transform: translateX(0) rotate(360deg) scale(1); }\n        }\n        \n        .multiple {\n            background-color: lightpink;\n            animation: multiple 3s ease-in-out infinite;\n        }\n    </style>\n</head>\n<body>\n    <h1>CSS Animations with Keyframes</h1>\n    <div class=\"box slide\">Slide</div>\n    <div class=\"box rotate\">Rotate</div>\n    <div class=\"box opacity\">Opacity</div>\n    <div class=\"box colorchange\">Colors</div>\n    <div class=\"box scale\">Scale</div>\n    <div class=\"box multiple\">Multiple</div>\n    \n    <h2>Animation Properties Used:</h2>\n    <ul>\n        <li><strong>animation-name:</strong> Name of the keyframe</li>\n        <li><strong>animation-duration:</strong> How long the animation lasts</li>\n        <li><strong>animation-iteration-count:</strong> How many times to repeat (infinite)</li>\n        <li><strong>animation-timing-function:</strong> Speed curve (ease-in-out, linear)</li>\n        <li><strong>animation-direction:</strong> Direction (alternate, normal)</li>\n    </ul>\n</body>\n</html>"
  },
  {
    "question": "How to create .env, .html, .js and other type of files from CMD?",
    "answer": "**Creating Files from Command Prompt:**\n\n**Method 1: Using `notepad` command**\n```cmd\nnotepad filename.env\nnotepad index.html\nnotepad script.js\nnotepad style.css\n```\n\n**Method 2: Using `echo` command**\n```cmd\necho. > filename.env\necho. > index.html\necho. > script.js\necho. > style.css\n```\n\n**Method 3: Using `type nul` command**\n```cmd\ntype nul > filename.env\ntype nul > index.html\ntype nul > script.js\ntype nul > style.css\n```\n\n**Method 4: Using `copy con` command**\n```cmd\ncopy con filename.env\n(press Ctrl+Z then Enter to save)\n```\n\n**Note:** `notepad` opens the file for editing, while other methods create empty files.",
    "type": "command-line",
    "tags": ["cmd", "files", "creation", "windows"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>CMD File Creation Examples</title>\n    <style>\n        body {\n            font-family: 'Courier New', monospace;\n            margin: 20px;\n            background-color: #1e1e1e;\n            color: #ffffff;\n        }\n        \n        .cmd-window {\n            background-color: #0c0c0c;\n            border: 2px solid #00ff00;\n            padding: 20px;\n            margin: 10px;\n            border-radius: 5px;\n            font-family: 'Courier New', monospace;\n        }\n        \n        .cmd-prompt {\n            color: #00ff00;\n        }\n        \n        .cmd-command {\n            color: #ffff00;\n        }\n        \n        .cmd-comment {\n            color: #888888;\n            font-style: italic;\n        }\n        \n        .method {\n            background-color: #2d2d2d;\n            padding: 15px;\n            margin: 10px 0;\n            border-left: 4px solid #007acc;\n        }\n        \n        .file-types {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n            gap: 10px;\n            margin: 20px 0;\n        }\n        \n        .file-type {\n            background-color: #333;\n            padding: 10px;\n            border-radius: 5px;\n            text-align: center;\n        }\n    </style>\n</head>\n<body>\n    <h1>Creating Files from CMD</h1>\n    \n    <div class=\"method\">\n        <h3>Method 1: Using notepad command</h3>\n        <div class=\"cmd-window\">\n            <span class=\"cmd-prompt\">C:\\Users\\YourName></span>\n            <span class=\"cmd-command\">notepad filename.env</span><br>\n            <span class=\"cmd-prompt\">C:\\Users\\YourName></span>\n            <span class=\"cmd-command\">notepad index.html</span><br>\n            <span class=\"cmd-prompt\">C:\\Users\\YourName></span>\n            <span class=\"cmd-command\">notepad script.js</span><br>\n            <span class=\"cmd-prompt\">C:\\Users\\YourName></span>\n            <span class=\"cmd-command\">notepad style.css</span>\n        </div>\n        <p class=\"cmd-comment\">Opens files in Notepad for editing</p>\n    </div>\n    \n    <div class=\"method\">\n        <h3>Method 2: Using echo command</h3>\n        <div class=\"cmd-window\">\n            <span class=\"cmd-prompt\">C:\\Users\\YourName></span>\n            <span class=\"cmd-command\">echo. > filename.env</span><br>\n            <span class=\"cmd-prompt\">C:\\Users\\YourName></span>\n            <span class=\"cmd-command\">echo. > index.html</span><br>\n            <span class=\"cmd-prompt\">C:\\Users\\YourName></span>\n            <span class=\"cmd-command\">echo. > script.js</span><br>\n            <span class=\"cmd-prompt\">C:\\Users\\YourName></span>\n            <span class=\"cmd-command\">echo. > style.css</span>\n        </div>\n        <p class=\"cmd-comment\">Creates empty files</p>\n    </div>\n    \n    <div class=\"method\">\n        <h3>Method 3: Using type nul command</h3>\n        <div class=\"cmd-window\">\n            <span class=\"cmd-prompt\">C:\\Users\\YourName></span>\n            <span class=\"cmd-command\">type nul > filename.env</span><br>\n            <span class=\"cmd-prompt\">C:\\Users\\YourName></span>\n            <span class=\"cmd-command\">type nul > index.html</span><br>\n            <span class=\"cmd-prompt\">C:\\Users\\YourName></span>\n            <span class=\"cmd-command\">type nul > script.js</span><br>\n            <span class=\"cmd-prompt\">C:\\Users\\YourName></span>\n            <span class=\"cmd-command\">type nul > style.css</span>\n        </div>\n        <p class=\"cmd-comment\">Creates empty files (alternative method)</p>\n    </div>\n    \n    <h2>Common File Types You Can Create:</h2>\n    <div class=\"file-types\">\n        <div class=\"file-type\">\n            <strong>.env</strong><br>\n            Environment variables\n        </div>\n        <div class=\"file-type\">\n            <strong>.html</strong><br>\n            Web pages\n        </div>\n        <div class=\"file-type\">\n            <strong>.js</strong><br>\n            JavaScript files\n        </div>\n        <div class=\"file-type\">\n            <strong>.css</strong><br>\n            Stylesheets\n        </div>\n        <div class=\"file-type\">\n            <strong>.json</strong><br>\n            Data files\n        </div>\n        <div class=\"file-type\">\n            <strong>.txt</strong><br>\n            Text files\n        </div>\n    </div>\n    \n    <div class=\"method\">\n        <h3>Example: Creating a complete project</h3>\n        <div class=\"cmd-window\">\n            <span class=\"cmd-prompt\">C:\\Users\\YourName></span>\n            <span class=\"cmd-command\">mkdir my-project</span><br>\n            <span class=\"cmd-prompt\">C:\\Users\\YourName></span>\n            <span class=\"cmd-command\">cd my-project</span><br>\n            <span class=\"cmd-prompt\">C:\\Users\\YourName\\my-project></span>\n            <span class=\"cmd-command\">notepad index.html</span><br>\n            <span class=\"cmd-prompt\">C:\\Users\\YourName\\my-project></span>\n            <span class=\"cmd-command\">notepad style.css</span><br>\n            <span class=\"cmd-prompt\">C:\\Users\\YourName\\my-project></span>\n            <span class=\"cmd-command\">notepad script.js</span><br>\n            <span class=\"cmd-prompt\">C:\\Users\\YourName\\my-project></span>\n            <span class=\"cmd-command\">notepad .env</span>\n        </div>\n    </div>\n</body>\n</html>"
  },
  {
    "question": "How to create a flexbox in CSS?",
    "answer": "**CSS Flexbox Complete Guide:**\n\n**Basic Flexbox Setup:**\n```css\n.box {\n    display: flex;\n}\n```\n\n**Complete Flexbox Properties:**\n\n**1. flex-wrap:**\n- `wrap` - Items wrap to next line\n- `nowrap` - Items stay on single line (default)\n- `wrap-reverse` - Items wrap in reverse order\n\n**2. align-content:**\n- `flex-start` - Pack items at start\n- `flex-end` - Pack items at end\n- `center` - Pack items at center\n- `space-between` - Distribute items evenly\n- `space-around` - Distribute items with space around\n- `space-evenly` - Distribute items with equal space\n- `stretch` - Stretch items to fill container (default)\n\n**3. flex-direction:**\n- `row` - Items in row (default)\n- `row-reverse` - Items in row, reversed\n- `column` - Items in column\n- `column-reverse` - Items in column, reversed\n\n**4. justify-content:**\n- `flex-start` - Pack items at start (default)\n- `flex-end` - Pack items at end\n- `center` - Pack items at center\n- `space-between` - Distribute items evenly\n- `space-around` - Distribute items with space around\n- `space-evenly` - Distribute items with equal space\n\n**5. align-items:**\n- `flex-start` - Align items at start\n- `flex-end` - Align items at end\n- `center` - Align items at center\n- `baseline` - Align items at baseline\n- `stretch` - Stretch items to fill container (default)\n\n**6. align-self:**\n- `auto` - Inherit from parent (default)\n- `flex-start` - Align item at start\n- `flex-end` - Align item at end\n- `center` - Align item at center\n- `baseline` - Align item at baseline\n- `stretch` - Stretch item to fill container\n\n**7. Gap Properties:**\n- `gap` - Space between items\n- `row-gap` - Space between rows\n- `column-gap` - Space between columns\n\n**8. Order:**\n- `order: 0` - Default order\n- `order: 1` - Higher numbers appear later\n- `order: -1` - Lower numbers appear earlier",
    "type": "css",
    "tags": ["css", "flexbox", "layout"],
    "code": "<!DOCTYPE html><html><head><title>CSS Flexbox Complete Guide</title><style>body{font-family:Arial,sans-serif;margin:20px;background:#f8f9fa}.container{max-width:1200px;margin:0 auto}.demo-section{background:white;padding:25px;margin:20px 0;border-radius:10px;box-shadow:0 2px 5px rgba(0,0,0,0.1)}.demo-title{color:#2c3e50;font-size:20px;font-weight:bold;margin-bottom:15px}.flex-container{display:flex;background:#e3f2fd;padding:20px;border-radius:8px;margin:15px 0;min-height:100px;border:2px solid #2196f3}.flex-item{background:#ff6b6b;color:white;padding:15px;margin:5px;border-radius:5px;text-align:center;font-weight:bold;min-width:80px}.flex-item:nth-child(2){background:#4ecdc4}.flex-item:nth-child(3){background:#45b7d1}.flex-item:nth-child(4){background:#96ceb4}.flex-item:nth-child(5){background:#feca57}.code-block{background:#2c3e50;color:#ecf0f1;padding:15px;border-radius:5px;font-family:monospace;margin:15px 0;overflow-x:auto}.controls{background:#fff3cd;padding:15px;border-radius:5px;margin:15px 0;border-left:4px solid #ffc107}.control-group{margin:10px 0}.control-group label{display:inline-block;width:150px;font-weight:bold}.control-group select{padding:5px;border-radius:3px;border:1px solid #ccc}.property-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(300px,1fr));gap:20px;margin:20px 0}.property-card{background:#f8f9fa;padding:15px;border-radius:5px;border-left:4px solid #007bff}.property-title{font-weight:bold;color:#2c3e50;margin-bottom:10px}.property-values{color:#666;font-size:14px}</style></head><body><div class=\"container\"><h1 style=\"text-align:center;color:#2c3e50\">🎯 CSS Flexbox Complete Guide</h1><div class=\"demo-section\"><div class=\"demo-title\">Interactive Flexbox Demo</div><div class=\"controls\"><div class=\"control-group\"><label>flex-direction:</label><select id=\"flexDirection\" onchange=\"updateFlexbox()\"><option value=\"row\">row</option><option value=\"row-reverse\">row-reverse</option><option value=\"column\">column</option><option value=\"column-reverse\">column-reverse</option></select></div><div class=\"control-group\"><label>justify-content:</label><select id=\"justifyContent\" onchange=\"updateFlexbox()\"><option value=\"flex-start\">flex-start</option><option value=\"flex-end\">flex-end</option><option value=\"center\">center</option><option value=\"space-between\">space-between</option><option value=\"space-around\">space-around</option><option value=\"space-evenly\">space-evenly</option></select></div><div class=\"control-group\"><label>align-items:</label><select id=\"alignItems\" onchange=\"updateFlexbox()\"><option value=\"flex-start\">flex-start</option><option value=\"flex-end\">flex-end</option><option value=\"center\">center</option><option value=\"baseline\">baseline</option><option value=\"stretch\">stretch</option></select></div><div class=\"control-group\"><label>flex-wrap:</label><select id=\"flexWrap\" onchange=\"updateFlexbox()\"><option value=\"nowrap\">nowrap</option><option value=\"wrap\">wrap</option><option value=\"wrap-reverse\">wrap-reverse</option></select></div><div class=\"control-group\"><label>align-content:</label><select id=\"alignContent\" onchange=\"updateFlexbox()\"><option value=\"stretch\">stretch</option><option value=\"flex-start\">flex-start</option><option value=\"flex-end\">flex-end</option><option value=\"center\">center</option><option value=\"space-between\">space-between</option><option value=\"space-around\">space-around</option><option value=\"space-evenly\">space-evenly</option></select></div><div class=\"control-group\"><label>gap:</label><select id=\"gap\" onchange=\"updateFlexbox()\"><option value=\"0\">0px</option><option value=\"10px\">10px</option><option value=\"20px\">20px</option><option value=\"30px\">30px</option></select></div></div><div class=\"flex-container\" id=\"flexContainer\"><div class=\"flex-item\">Item 1</div><div class=\"flex-item\">Item 2</div><div class=\"flex-item\">Item 3</div><div class=\"flex-item\">Item 4</div><div class=\"flex-item\">Item 5</div></div></div><div class=\"demo-section\"><div class=\"demo-title\">Flexbox Properties Reference</div><div class=\"property-grid\"><div class=\"property-card\"><div class=\"property-title\">flex-direction</div><div class=\"property-values\">row, row-reverse, column, column-reverse</div></div><div class=\"property-card\"><div class=\"property-title\">justify-content</div><div class=\"property-values\">flex-start, flex-end, center, space-between, space-around, space-evenly</div></div><div class=\"property-card\"><div class=\"property-title\">align-items</div><div class=\"property-values\">flex-start, flex-end, center, baseline, stretch</div></div><div class=\"property-card\"><div class=\"property-title\">flex-wrap</div><div class=\"property-values\">nowrap, wrap, wrap-reverse</div></div><div class=\"property-card\"><div class=\"property-title\">align-content</div><div class=\"property-values\">stretch, flex-start, flex-end, center, space-between, space-around, space-evenly</div></div><div class=\"property-card\"><div class=\"property-title\">align-self</div><div class=\"property-values\">auto, flex-start, flex-end, center, baseline, stretch</div></div><div class=\"property-card\"><div class=\"property-title\">gap</div><div class=\"property-values\">Any length value (px, em, rem, %)</div></div><div class=\"property-card\"><div class=\"property-title\">order</div><div class=\"property-values\">Any integer (0, 1, -1, 2, etc.)</div></div></div></div><div class=\"demo-section\"><div class=\"demo-title\">Complete Flexbox Example</div><div class=\"code-block\">.box {<br>&nbsp;&nbsp;display: flex;<br>&nbsp;&nbsp;flex-direction: row;<br>&nbsp;&nbsp;flex-wrap: wrap;<br>&nbsp;&nbsp;justify-content: space-between;<br>&nbsp;&nbsp;align-items: center;<br>&nbsp;&nbsp;align-content: flex-start;<br>&nbsp;&nbsp;gap: 20px;<br>&nbsp;&nbsp;row-gap: 10px;<br>&nbsp;&nbsp;column-gap: 30px;<br>&nbsp;&nbsp;height: 90vh;<br>&nbsp;&nbsp;border: 10px solid #ccc;<br>}<br><br>#box1 {<br>&nbsp;&nbsp;background-color: hsl(0, 100%, 70%);<br>&nbsp;&nbsp;align-self: center;<br>&nbsp;&nbsp;order: 1;<br>}</div></div></div><script>function updateFlexbox(){const container=document.getElementById('flexContainer');const flexDirection=document.getElementById('flexDirection').value;const justifyContent=document.getElementById('justifyContent').value;const alignItems=document.getElementById('alignItems').value;const flexWrap=document.getElementById('flexWrap').value;const alignContent=document.getElementById('alignContent').value;const gap=document.getElementById('gap').value;container.style.flexDirection=flexDirection;container.style.justifyContent=justifyContent;container.style.alignItems=alignItems;container.style.flexWrap=flexWrap;container.style.alignContent=alignContent;container.style.gap=gap;}</script></body></html>"
  },
  {
    "question": "What is CSS Grid?",
    "answer": "**CSS Grid:**\nA two-dimensional layout system that allows you to create complex grid-based layouts with rows and columns.\n\n**Key Features:**\n- **Two-dimensional** - Control both rows and columns\n- **Grid lines** - Invisible lines that divide the grid\n- **Grid tracks** - Space between grid lines\n- **Grid cells** - Intersection of row and column\n- **Grid areas** - Named areas spanning multiple cells\n\n**Grid vs Flexbox:**\n- **Grid:** Two-dimensional (rows + columns)\n- **Flexbox:** One-dimensional (row OR column)\n- **Grid:** Better for overall page layout\n- **Flexbox:** Better for component layout\n\n**Grid Properties:**\n- `display: grid` - Create grid container\n- `grid-template-rows` - Define row sizes\n- `grid-template-columns` - Define column sizes\n- `grid-gap` - Space between grid items\n- `grid-area` - Place items in named areas\n- `grid-row` - Specify row placement\n- `grid-column` - Specify column placement",
    "type": "css",
    "tags": ["css", "grid", "layout"],
    "code": "<!DOCTYPE html><html><head><title>CSS Grid Overview</title><style>body{font-family:Arial,sans-serif;margin:20px;background:#f8f9fa}.container{max-width:1000px;margin:0 auto}.demo-section{background:white;padding:25px;margin:20px 0;border-radius:10px;box-shadow:0 2px 5px rgba(0,0,0,0.1)}.demo-title{color:#2c3e50;font-size:20px;font-weight:bold;margin-bottom:15px}.grid-container{display:grid;background:#e3f2fd;padding:20px;border-radius:8px;margin:15px 0;border:2px solid #2196f3}.grid-item{background:#ff6b6b;color:white;padding:20px;border-radius:5px;text-align:center;font-weight:bold}.grid-item:nth-child(2){background:#4ecdc4}.grid-item:nth-child(3){background:#45b7d1}.grid-item:nth-child(4){background:#96ceb4}.grid-item:nth-child(5){background:#feca57}.grid-item:nth-child(6){background:#ff9ff3}.code-block{background:#2c3e50;color:#ecf0f1;padding:15px;border-radius:5px;font-family:monospace;margin:15px 0;overflow-x:auto}.comparison-table{width:100%;border-collapse:collapse;margin:20px 0}.comparison-table th,.comparison-table td{border:1px solid #ddd;padding:12px;text-align:left}.comparison-table th{background:#f8f9fa;font-weight:bold}.feature-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(250px,1fr));gap:20px;margin:20px 0}.feature-card{background:#f8f9fa;padding:15px;border-radius:5px;border-left:4px solid #007bff}.feature-title{font-weight:bold;color:#2c3e50;margin-bottom:10px}</style></head><body><div class=\"container\"><h1 style=\"text-align:center;color:#2c3e50\">📐 CSS Grid Complete Guide</h1><div class=\"demo-section\"><div class=\"demo-title\">Basic CSS Grid Example</div><div class=\"grid-container\" style=\"grid-template-columns:repeat(3,1fr);grid-template-rows:repeat(2,100px);gap:10px\"><div class=\"grid-item\">Item 1</div><div class=\"grid-item\">Item 2</div><div class=\"grid-item\">Item 3</div><div class=\"grid-item\">Item 4</div><div class=\"grid-item\">Item 5</div><div class=\"grid-item\">Item 6</div></div><div class=\"code-block\">.grid-container {<br>&nbsp;&nbsp;display: grid;<br>&nbsp;&nbsp;grid-template-columns: repeat(3, 1fr);<br>&nbsp;&nbsp;grid-template-rows: repeat(2, 100px);<br>&nbsp;&nbsp;gap: 10px;<br>}</div></div><div class=\"demo-section\"><div class=\"demo-title\">Grid vs Flexbox Comparison</div><table class=\"comparison-table\"><thead><tr><th>Feature</th><th>CSS Grid</th><th>Flexbox</th></tr></thead><tbody><tr><td>Dimensions</td><td>Two-dimensional (rows + columns)</td><td>One-dimensional (row OR column)</td></tr><tr><td>Use Case</td><td>Overall page layout</td><td>Component layout</td></tr><tr><td>Alignment</td><td>Built-in alignment</td><td>Flexible alignment</td></tr><tr><td>Browser Support</td><td>Modern browsers</td><td>Excellent support</td></tr><tr><td>Learning Curve</td><td>Steeper</td><td>Easier</td></tr></tbody></table></div><div class=\"demo-section\"><div class=\"demo-title\">CSS Grid Key Features</div><div class=\"feature-grid\"><div class=\"feature-card\"><div class=\"feature-title\">Two-Dimensional</div><p>Control both rows and columns simultaneously</p></div><div class=\"feature-card\"><div class=\"feature-title\">Grid Lines</div><p>Invisible lines that divide the grid</p></div><div class=\"feature-card\"><div class=\"feature-title\">Grid Tracks</div><p>Space between grid lines</p></div><div class=\"feature-card\"><div class=\"feature-title\">Grid Cells</div><p>Intersection of row and column</p></div><div class=\"feature-card\"><div class=\"feature-title\">Grid Areas</div><p>Named areas spanning multiple cells</p></div><div class=\"feature-card\"><div class=\"feature-title\">Responsive</div><p>Easy responsive layouts with auto-fit</p></div></div></div><div class=\"demo-section\"><div class=\"demo-title\">Grid Properties Overview</div><div class=\"code-block\">/* Container Properties */<br>display: grid;<br>grid-template-rows: 100px 200px 100px;<br>grid-template-columns: 1fr 2fr 1fr;<br>grid-gap: 20px;<br>grid-template-areas:<br>&nbsp;&nbsp;\"header header header\"<br>&nbsp;&nbsp;\"sidebar main main\"<br>&nbsp;&nbsp;\"footer footer footer\";<br><br>/* Item Properties */<br>grid-row: 1 / 3;<br>grid-column: 1 / 4;<br>grid-area: header;</div></div></div></body></html>"
  },
  {
    "question": "How do you create a CSS grid with n rows and n columns?",
    "answer": "**Creating CSS Grid with n rows and n columns:**\n\n**Basic Grid Setup:**\n```css\n.container {\n    display: grid;\n    grid-template-rows: /* row sizes */;\n    grid-template-columns: /* column sizes */;\n}\n```\n\n**Complete Grid Properties:**\n\n**1. grid-template-rows:**\n- `100px 200px 100px` - Fixed sizes\n- `1fr 2fr 1fr` - Fractional units\n- `repeat(3, 100px)` - Repeat function\n- `minmax(100px, 1fr)` - Min/max sizing\n- `auto` - Auto size\n- `min-content` - Minimum content size\n- `max-content` - Maximum content size\n\n**2. grid-template-columns:**\n- `100px 200px 100px` - Fixed sizes\n- `1fr 2fr 1fr` - Fractional units\n- `repeat(4, 1fr)` - Repeat function\n- `minmax(200px, 1fr)` - Min/max sizing\n- `auto` - Auto size\n- `min-content` - Minimum content size\n- `max-content` - Maximum content size\n\n**3. justify-content:**\n- `start` - Pack items at start\n- `end` - Pack items at end\n- `center` - Pack items at center\n- `stretch` - Stretch items to fill\n- `space-around` - Distribute with space around\n- `space-between` - Distribute evenly\n- `space-evenly` - Distribute with equal space\n\n**4. align-content:**\n- `start` - Pack items at start\n- `end` - Pack items at end\n- `center` - Pack items at center\n- `stretch` - Stretch items to fill\n- `space-around` - Distribute with space around\n- `space-between` - Distribute evenly\n- `space-evenly` - Distribute with equal space\n\n**5. Grid Gap:**\n- `grid-gap: 20px` - Space between all items\n- `row-gap: 10px` - Space between rows\n- `column-gap: 15px` - Space between columns",
    "type": "css",
    "tags": ["css", "grid", "layout", "rows", "columns"],
    "code": "<!DOCTYPE html><html><head><title>CSS Grid Rows and Columns</title><style>body{font-family:Arial,sans-serif;margin:20px;background:#f8f9fa}.container{max-width:1200px;margin:0 auto}.demo-section{background:white;padding:25px;margin:20px 0;border-radius:10px;box-shadow:0 2px 5px rgba(0,0,0,0.1)}.demo-title{color:#2c3e50;font-size:20px;font-weight:bold;margin-bottom:15px}.grid-container{display:grid;background:#e3f2fd;padding:20px;border-radius:8px;margin:15px 0;border:2px solid #2196f3}.grid-item{background:#ff6b6b;color:white;padding:15px;border-radius:5px;text-align:center;font-weight:bold}.grid-item:nth-child(2){background:#4ecdc4}.grid-item:nth-child(3){background:#45b7d1}.grid-item:nth-child(4){background:#96ceb4}.grid-item:nth-child(5){background:#feca57}.grid-item:nth-child(6){background:#ff9ff3}.grid-item:nth-child(7){background:#a8e6cf}.grid-item:nth-child(8){background:#ffd3a5}.grid-item:nth-child(9){background:#fd79a8}.code-block{background:#2c3e50;color:#ecf0f1;padding:15px;border-radius:5px;font-family:monospace;margin:15px 0;overflow-x:auto}.controls{background:#fff3cd;padding:15px;border-radius:5px;margin:15px 0;border-left:4px solid #ffc107}.control-group{margin:10px 0}.control-group label{display:inline-block;width:200px;font-weight:bold}.control-group select{padding:5px;border-radius:3px;border:1px solid #ccc}.example-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(300px,1fr));gap:20px;margin:20px 0}.example-card{background:#f8f9fa;padding:15px;border-radius:5px;border-left:4px solid #007bff}.example-title{font-weight:bold;color:#2c3e50;margin-bottom:10px}</style></head><body><div class=\"container\"><h1 style=\"text-align:center;color:#2c3e50\">📐 CSS Grid: Rows and Columns</h1><div class=\"demo-section\"><div class=\"demo-title\">Interactive Grid Demo</div><div class=\"controls\"><div class=\"control-group\"><label>grid-template-columns:</label><select id=\"gridColumns\" onchange=\"updateGrid()\"><option value=\"repeat(3,1fr)\">repeat(3, 1fr)</option><option value=\"repeat(4,1fr)\">repeat(4, 1fr)</option><option value=\"repeat(5,1fr)\">repeat(5, 1fr)</option><option value=\"1fr 2fr 1fr\">1fr 2fr 1fr</option><option value=\"100px 200px 100px\">100px 200px 100px</option><option value=\"minmax(100px,1fr) minmax(200px,1fr)\">minmax(100px,1fr) minmax(200px,1fr)</option></select></div><div class=\"control-group\"><label>grid-template-rows:</label><select id=\"gridRows\" onchange=\"updateGrid()\"><option value=\"repeat(2,100px)\">repeat(2, 100px)</option><option value=\"repeat(3,100px)\">repeat(3, 100px)</option><option value=\"100px 200px 100px\">100px 200px 100px</option><option value=\"1fr 2fr 1fr\">1fr 2fr 1fr</option><option value=\"auto auto auto\">auto auto auto</option></select></div><div class=\"control-group\"><label>gap:</label><select id=\"gridGap\" onchange=\"updateGrid()\"><option value=\"10px\">10px</option><option value=\"20px\">20px</option><option value=\"30px\">30px</option><option value=\"0\">0px</option></select></div></div><div class=\"grid-container\" id=\"gridContainer\"><div class=\"grid-item\">Item 1</div><div class=\"grid-item\">Item 2</div><div class=\"grid-item\">Item 3</div><div class=\"grid-item\">Item 4</div><div class=\"grid-item\">Item 5</div><div class=\"grid-item\">Item 6</div><div class=\"grid-item\">Item 7</div><div class=\"grid-item\">Item 8</div><div class=\"grid-item\">Item 9</div></div></div><div class=\"demo-section\"><div class=\"demo-title\">Grid Template Examples</div><div class=\"example-grid\"><div class=\"example-card\"><div class=\"example-title\">Fixed Sizes</div><div class=\"code-block\">grid-template-columns: 100px 200px 100px;<br>grid-template-rows: 100px 200px 100px;</div></div><div class=\"example-card\"><div class=\"example-title\">Fractional Units</div><div class=\"code-block\">grid-template-columns: 1fr 2fr 1fr;<br>grid-template-rows: 1fr 2fr 1fr;</div></div><div class=\"example-card\"><div class=\"example-title\">Repeat Function</div><div class=\"code-block\">grid-template-columns: repeat(3, 1fr);<br>grid-template-rows: repeat(3, 100px);</div></div><div class=\"example-card\"><div class=\"example-title\">Minmax Function</div><div class=\"code-block\">grid-template-columns: minmax(100px, 1fr);<br>grid-template-rows: minmax(100px, 1fr);</div></div><div class=\"example-card\"><div class=\"example-title\">Auto Sizing</div><div class=\"code-block\">grid-template-columns: auto auto auto;<br>grid-template-rows: auto auto auto;</div></div><div class=\"example-card\"><div class=\"example-title\">Mixed Units</div><div class=\"code-block\">grid-template-columns: 200px 1fr 100px;<br>grid-template-rows: auto 1fr auto;</div></div></div></div><div class=\"demo-section\"><div class=\"demo-title\">Complete Grid Properties</div><div class=\"code-block\">.container {<br>&nbsp;&nbsp;display: grid;<br>&nbsp;&nbsp;grid-template-rows: repeat(3, 100px);<br>&nbsp;&nbsp;grid-template-columns: repeat(4, 1fr);<br>&nbsp;&nbsp;gap: 20px;<br>&nbsp;&nbsp;row-gap: 10px;<br>&nbsp;&nbsp;column-gap: 30px;<br>&nbsp;&nbsp;justify-content: space-evenly;<br>&nbsp;&nbsp;align-content: center;<br>&nbsp;&nbsp;height: 90vh;<br>&nbsp;&nbsp;border: 10px solid #ccc;<br>}</div></div></div><script>function updateGrid(){const container=document.getElementById('gridContainer');const columns=document.getElementById('gridColumns').value;const rows=document.getElementById('gridRows').value;const gap=document.getElementById('gridGap').value;container.style.gridTemplateColumns=columns;container.style.gridTemplateRows=rows;container.style.gap=gap;}</script></body></html>"
  },
  {
    "question": "How to make responsive grids?",
    "answer": "**Responsive CSS Grid:**\n\n**Answer:** `grid-template-columns: repeat(auto-fit, minmax(100px, 1fr))`\n\n**Complete Responsive Grid Methods:**\n\n**1. Auto-fit with minmax:**\n```css\n.grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n    gap: 20px;\n}\n```\n\n**2. Auto-fill with minmax:**\n```css\n.grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));\n    gap: 15px;\n}\n```\n\n**3. Media Queries for Different Breakpoints:**\n```css\n.grid {\n    display: grid;\n    grid-template-columns: 1fr;\n    gap: 10px;\n}\n\n@media (min-width: 768px) {\n    .grid {\n        grid-template-columns: repeat(2, 1fr);\n    }\n}\n\n@media (min-width: 1024px) {\n    .grid {\n        grid-template-columns: repeat(3, 1fr);\n    }\n}\n```\n\n**4. Fractional Units:**\n```css\n.grid {\n    display: grid;\n    grid-template-columns: repeat(12, 1fr);\n    gap: 1rem;\n}\n```\n\n**5. CSS Grid with CSS Variables:**\n```css\n.grid {\n    display: grid;\n    grid-template-columns: repeat(var(--columns, 1), 1fr);\n    gap: var(--gap, 1rem);\n}\n\n@media (min-width: 768px) {\n    .grid {\n        --columns: 2;\n        --gap: 2rem;\n    }\n}\n```\n\n**Key Differences:**\n- **auto-fit:** Collapses empty tracks\n- **auto-fill:** Keeps empty tracks\n- **minmax():** Sets minimum and maximum sizes\n- **fr:** Fractional unit for flexible sizing",
    "type": "css",
    "tags": ["css", "grid", "responsive", "layout"],
    "code": "<!DOCTYPE html><html><head><title>Responsive CSS Grid</title><style>body{font-family:Arial,sans-serif;margin:20px;background:#f8f9fa}.container{max-width:1200px;margin:0 auto}.demo-section{background:white;padding:25px;margin:20px 0;border-radius:10px;box-shadow:0 2px 5px rgba(0,0,0,0.1)}.demo-title{color:#2c3e50;font-size:20px;font-weight:bold;margin-bottom:15px}.responsive-grid{display:grid;background:#e3f2fd;padding:20px;border-radius:8px;margin:15px 0;border:2px solid #2196f3}.grid-item{background:#ff6b6b;color:white;padding:20px;border-radius:5px;text-align:center;font-weight:bold}.grid-item:nth-child(2){background:#4ecdc4}.grid-item:nth-child(3){background:#45b7d1}.grid-item:nth-child(4){background:#96ceb4}.grid-item:nth-child(5){background:#feca57}.grid-item:nth-child(6){background:#ff9ff3}.grid-item:nth-child(7){background:#a8e6cf}.grid-item:nth-child(8){background:#ffd3a5}.code-block{background:#2c3e50;color:#ecf0f1;padding:15px;border-radius:5px;font-family:monospace;margin:15px 0;overflow-x:auto}.method-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(300px,1fr));gap:20px;margin:20px 0}.method-card{background:#f8f9fa;padding:15px;border-radius:5px;border-left:4px solid #007bff}.method-title{font-weight:bold;color:#2c3e50;margin-bottom:10px}.controls{background:#fff3cd;padding:15px;border-radius:5px;margin:15px 0;border-left:4px solid #ffc107}.control-group{margin:10px 0}.control-group label{display:inline-block;width:200px;font-weight:bold}.control-group select{padding:5px;border-radius:3px;border:1px solid #ccc}</style></head><body><div class=\"container\"><h1 style=\"text-align:center;color:#2c3e50\">📱 Responsive CSS Grid</h1><div class=\"demo-section\"><div class=\"demo-title\">Interactive Responsive Grid Demo</div><div class=\"controls\"><div class=\"control-group\"><label>Grid Method:</label><select id=\"gridMethod\" onchange=\"updateResponsiveGrid()\"><option value=\"auto-fit\">auto-fit with minmax</option><option value=\"auto-fill\">auto-fill with minmax</option><option value=\"media-queries\">Media Queries</option><option value=\"fractional\">Fractional Units</option></select></div><div class=\"control-group\"><label>Min Size:</label><select id=\"minSize\" onchange=\"updateResponsiveGrid()\"><option value=\"100px\">100px</option><option value=\"150px\">150px</option><option value=\"200px\">200px</option><option value=\"250px\">250px</option></select></div></div><div class=\"responsive-grid\" id=\"responsiveGrid\"><div class=\"grid-item\">Item 1</div><div class=\"grid-item\">Item 2</div><div class=\"grid-item\">Item 3</div><div class=\"grid-item\">Item 4</div><div class=\"grid-item\">Item 5</div><div class=\"grid-item\">Item 6</div><div class=\"grid-item\">Item 7</div><div class=\"grid-item\">Item 8</div></div></div><div class=\"demo-section\"><div class=\"demo-title\">Responsive Grid Methods</div><div class=\"method-grid\"><div class=\"method-card\"><div class=\"method-title\">1. Auto-fit with minmax</div><div class=\"code-block\">.grid {<br>&nbsp;&nbsp;display: grid;<br>&nbsp;&nbsp;grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));<br>&nbsp;&nbsp;gap: 20px;<br>}</div><p><strong>Use:</strong> Collapses empty tracks</p></div><div class=\"method-card\"><div class=\"method-title\">2. Auto-fill with minmax</div><div class=\"code-block\">.grid {<br>&nbsp;&nbsp;display: grid;<br>&nbsp;&nbsp;grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));<br>&nbsp;&nbsp;gap: 15px;<br>}</div><p><strong>Use:</strong> Keeps empty tracks</p></div><div class=\"method-card\"><div class=\"method-title\">3. Media Queries</div><div class=\"code-block\">.grid {<br>&nbsp;&nbsp;display: grid;<br>&nbsp;&nbsp;grid-template-columns: 1fr;<br>}<br><br>@media (min-width: 768px) {<br>&nbsp;&nbsp;.grid {<br>&nbsp;&nbsp;&nbsp;&nbsp;grid-template-columns: repeat(2, 1fr);<br>&nbsp;&nbsp;}<br>}</div><p><strong>Use:</strong> Different layouts per breakpoint</p></div><div class=\"method-card\"><div class=\"method-title\">4. CSS Variables</div><div class=\"code-block\">.grid {<br>&nbsp;&nbsp;display: grid;<br>&nbsp;&nbsp;grid-template-columns: repeat(var(--columns, 1), 1fr);<br>&nbsp;&nbsp;gap: var(--gap, 1rem);<br>}<br><br>@media (min-width: 768px) {<br>&nbsp;&nbsp;.grid {<br>&nbsp;&nbsp;&nbsp;&nbsp;--columns: 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;--gap: 2rem;<br>&nbsp;&nbsp;}<br>}</div><p><strong>Use:</strong> Dynamic responsive behavior</p></div></div></div><div class=\"demo-section\"><div class=\"demo-title\">Key Differences</div><div class=\"code-block\">/* auto-fit: Collapses empty tracks */<br>grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));<br><br>/* auto-fill: Keeps empty tracks */<br>grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));<br><br>/* minmax(): Sets min and max sizes */<br>minmax(100px, 1fr)<br><br>/* fr: Fractional unit for flexible sizing */<br>1fr 2fr 1fr</div></div></div><script>function updateResponsiveGrid(){const grid=document.getElementById('responsiveGrid');const method=document.getElementById('gridMethod').value;const minSize=document.getElementById('minSize').value;switch(method){case 'auto-fit':grid.style.gridTemplateColumns=`repeat(auto-fit, minmax(${minSize}, 1fr))`;break;case 'auto-fill':grid.style.gridTemplateColumns=`repeat(auto-fill, minmax(${minSize}, 1fr))`;break;case 'media-queries':grid.style.gridTemplateColumns='repeat(2, 1fr)';break;case 'fractional':grid.style.gridTemplateColumns='repeat(12, 1fr)';break;}}</script></body></html>"
  },
  {
    "question": "What is a media query, why is it called that, and what does it do in the code?",
    "answer": "**CSS Media Queries:**\n\n**What is a Media Query?**\nA CSS feature that allows you to apply styles conditionally based on device characteristics.\n\n**Why is it called \"Media Query\"?**\n- **Media:** Refers to the output medium (screen, print, etc.)\n- **Query:** Asks questions about device capabilities\n- **Media Query:** \"Query the media about its characteristics\"\n\n**What Media Queries Do:**\n- **Responsive Design:** Adapt layout to different screen sizes\n- **Device Targeting:** Apply styles for specific devices\n- **Feature Detection:** Check for device capabilities\n- **Print Styles:** Different styles for printing\n- **Accessibility:** High contrast, reduced motion\n\n**Complete Media Query Syntax:**\n```css\n@media media-type and (condition) {\n    /* CSS rules */\n}\n```\n\n**Media Types:**\n- `all` - All media types (default)\n- `screen` - Computer screens, tablets, phones\n- `print` - Printers and print preview\n- `speech` - Screen readers\n- `handheld` - Handheld devices (deprecated)\n\n**Common Media Features:**\n- `width` - Viewport width\n- `height` - Viewport height\n- `min-width` - Minimum viewport width\n- `max-width` - Maximum viewport width\n- `orientation` - Portrait or landscape\n- `resolution` - Device pixel ratio\n- `aspect-ratio` - Width to height ratio\n- `color` - Number of color bits\n- `hover` - Hover capability\n- `pointer` - Pointer type (coarse, fine)\n\n**Breakpoint Examples:**\n- **Mobile:** `@media (max-width: 767px)`\n- **Tablet:** `@media (min-width: 768px) and (max-width: 1023px)`\n- **Desktop:** `@media (min-width: 1024px)`\n- **Large Desktop:** `@media (min-width: 1440px)`",
    "type": "css",
    "tags": ["css", "media-queries", "responsive", "breakpoints"],
    "code": "<!DOCTYPE html><html><head><title>CSS Media Queries Guide</title><style>body{font-family:Arial,sans-serif;margin:20px;background:#f8f9fa}.container{max-width:1000px;margin:0 auto}.demo-section{background:white;padding:25px;margin:20px 0;border-radius:10px;box-shadow:0 2px 5px rgba(0,0,0,0.1)}.demo-title{color:#2c3e50;font-size:20px;font-weight:bold;margin-bottom:15px}.responsive-demo{background:#e3f2fd;padding:20px;border-radius:8px;margin:15px 0;border:2px solid #2196f3;text-align:center}.code-block{background:#2c3e50;color:#ecf0f1;padding:15px;border-radius:5px;font-family:monospace;margin:15px 0;overflow-x:auto}.breakpoint-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(200px,1fr));gap:15px;margin:20px 0}.breakpoint-card{background:#f8f9fa;padding:15px;border-radius:5px;border-left:4px solid #007bff}.breakpoint-title{font-weight:bold;color:#2c3e50;margin-bottom:10px}.feature-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(250px,1fr));gap:15px;margin:20px 0}.feature-card{background:#fff3cd;padding:15px;border-radius:5px;border-left:4px solid #ffc107}.feature-title{font-weight:bold;color:#2c3e50;margin-bottom:10px}.example-section{background:#e8f5e8;padding:20px;border-radius:5px;margin:20px 0;border-left:4px solid #27ae60}.example-title{font-weight:bold;color:#2c3e50;margin-bottom:15px}.current-size{background:#ff6b6b;color:white;padding:10px;border-radius:5px;margin:10px 0;font-weight:bold}</style></head><body><div class=\"container\"><h1 style=\"text-align:center;color:#2c3e50\">📱 CSS Media Queries Complete Guide</h1><div class=\"demo-section\"><div class=\"demo-title\">What is a Media Query?</div><p>A CSS feature that allows you to apply styles conditionally based on device characteristics like screen size, orientation, and capabilities.</p><div class=\"responsive-demo\"><div class=\"current-size\" id=\"currentSize\">Current Viewport: <span id=\"viewportSize\">Loading...</span></div><div style=\"background:#4ecdc4;color:white;padding:15px;border-radius:5px;margin:10px 0\">This content changes based on screen size!</div></div></div><div class=\"demo-section\"><div class=\"demo-title\">Why is it called \"Media Query\"?</div><div class=\"feature-grid\"><div class=\"feature-card\"><div class=\"feature-title\">Media</div><p>Refers to the output medium (screen, print, speech, etc.)</p></div><div class=\"feature-card\"><div class=\"feature-title\">Query</div><p>Asks questions about device capabilities and characteristics</p></div><div class=\"feature-card\"><div class=\"feature-title\">Media Query</div><p>\"Query the media about its characteristics\"</p></div></div></div><div class=\"demo-section\"><div class=\"demo-title\">What Media Queries Do</div><div class=\"feature-grid\"><div class=\"feature-card\"><div class=\"feature-title\">Responsive Design</div><p>Adapt layout to different screen sizes</p></div><div class=\"feature-card\"><div class=\"feature-title\">Device Targeting</div><p>Apply styles for specific devices</p></div><div class=\"feature-card\"><div class=\"feature-title\">Feature Detection</div><p>Check for device capabilities</p></div><div class=\"feature-card\"><div class=\"feature-title\">Print Styles</div><p>Different styles for printing</p></div><div class=\"feature-card\"><div class=\"feature-title\">Accessibility</div><p>High contrast, reduced motion</p></div></div></div><div class=\"demo-section\"><div class=\"demo-title\">Media Query Syntax</div><div class=\"code-block\">@media media-type and (condition) {<br>&nbsp;&nbsp;/* CSS rules */<br>}</div><div class=\"example-section\"><div class=\"example-title\">Basic Examples:</div><div class=\"code-block\">/* All devices */<br>@media all {<br>&nbsp;&nbsp;body { font-size: 16px; }<br>}<br><br>/* Screen devices only */<br>@media screen {<br>&nbsp;&nbsp;body { background: white; }<br>}<br><br>/* Print media */<br>@media print {<br>&nbsp;&nbsp;body { background: white; color: black; }<br>}</div></div></div><div class=\"demo-section\"><div class=\"demo-title\">Common Breakpoints</div><div class=\"breakpoint-grid\"><div class=\"breakpoint-card\"><div class=\"breakpoint-title\">Mobile</div><div class=\"code-block\">@media (max-width: 767px) {<br>&nbsp;&nbsp;/* Mobile styles */<br>}</div></div><div class=\"breakpoint-card\"><div class=\"breakpoint-title\">Tablet</div><div class=\"code-block\">@media (min-width: 768px) and (max-width: 1023px) {<br>&nbsp;&nbsp;/* Tablet styles */<br>}</div></div><div class=\"breakpoint-card\"><div class=\"breakpoint-title\">Desktop</div><div class=\"code-block\">@media (min-width: 1024px) {<br>&nbsp;&nbsp;/* Desktop styles */<br>}</div></div><div class=\"breakpoint-card\"><div class=\"breakpoint-title\">Large Desktop</div><div class=\"code-block\">@media (min-width: 1440px) {<br>&nbsp;&nbsp;/* Large desktop styles */<br>}</div></div></div></div><div class=\"demo-section\"><div class=\"demo-title\">Media Features</div><div class=\"code-block\">/* Width-based */<br>@media (min-width: 768px) { }<br>@media (max-width: 1024px) { }<br>@media (width: 800px) { }<br><br>/* Orientation */<br>@media (orientation: portrait) { }<br>@media (orientation: landscape) { }<br><br>/* Resolution */<br>@media (min-resolution: 2dppx) { }<br>@media (-webkit-min-device-pixel-ratio: 2) { }<br><br>/* Hover capability */<br>@media (hover: hover) { }<br>@media (hover: none) { }<br><br>/* Pointer type */<br>@media (pointer: coarse) { }<br>@media (pointer: fine) { }</div></div><div class=\"demo-section\"><div class=\"demo-title\">Complete Responsive Example</div><div class=\"code-block\">/* Mobile First Approach */<br>.container {<br>&nbsp;&nbsp;width: 100%;<br>&nbsp;&nbsp;padding: 10px;<br>}<br><br>/* Tablet */<br>@media (min-width: 768px) {<br>&nbsp;&nbsp;.container {<br>&nbsp;&nbsp;&nbsp;&nbsp;width: 80%;<br>&nbsp;&nbsp;&nbsp;&nbsp;padding: 20px;<br>&nbsp;&nbsp;}<br>}<br><br>/* Desktop */<br>@media (min-width: 1024px) {<br>&nbsp;&nbsp;.container {<br>&nbsp;&nbsp;&nbsp;&nbsp;width: 1200px;<br>&nbsp;&nbsp;&nbsp;&nbsp;margin: 0 auto;<br>&nbsp;&nbsp;&nbsp;&nbsp;padding: 30px;<br>&nbsp;&nbsp;}<br>}</div></div></div><script>function updateViewportSize(){const width=window.innerWidth;const height=window.innerHeight;document.getElementById('viewportSize').textContent=`${width}px × ${height}px`;let device='Mobile';if(width>=1440){device='Large Desktop';}else if(width>=1024){device='Desktop';}else if(width>=768){device='Tablet';}document.getElementById('currentSize').innerHTML=`Current Viewport: <span id=\"viewportSize\">${width}px × ${height}px</span> - ${device}`;}window.addEventListener('resize',updateViewportSize);updateViewportSize();</script></body></html>"
  },
  {
    "question": "How do you add items to grid?",
    "answer": "**Adding Items to CSS Grid:**\n\n**Complete Grid Placement Methods:**\n\n**1. Individual Properties:**\n```css\n.item {\n    grid-row-start: 1;\n    grid-row-end: 3;\n    grid-column-start: 1;\n    grid-column-end: 5;\n}\n```\n\n**2. Shorthand Properties:**\n```css\n.item {\n    grid-row: 1 / 3;\n    grid-column: 1 / 5;\n}\n```\n\n**3. Span Properties:**\n```css\n.item {\n    grid-row: span 2;\n    grid-column: span 3;\n}\n```\n\n**4. Grid Area (Named Areas):**\n```css\n.item {\n    grid-area: row-start / col-start / row-end / col-end;\n}\n```\n\n**5. Grid Area with Named Areas:**\n```css\n.container {\n    grid-template-areas:\n        \"header header header\"\n        \"sidebar main main\"\n        \"footer footer footer\";\n}\n\n.item {\n    grid-area: header;\n}\n```\n\n**Complete Grid Placement Values:**\n\n**Grid Row/Column Values:**\n- `1` - Line number\n- `1 / 3` - Start / End\n- `span 2` - Span 2 tracks\n- `auto` - Auto placement\n- `-1` - Last line\n- `-2` - Second to last line\n\n**Grid Area Values:**\n- `header` - Named area\n- `1 / 1 / 3 / 4` - Row-start / Col-start / Row-end / Col-end\n- `auto` - Auto placement\n\n**Grid Gap:**\n- `grid-gap: 20px` - Space between all items\n- `row-gap: 10px` - Space between rows\n- `column-gap: 15px` - Space between columns",
    "type": "css",
    "tags": ["css", "grid", "placement", "positioning"],
    "code": "<!DOCTYPE html><html><head><title>CSS Grid Item Placement</title><style>body{font-family:Arial,sans-serif;margin:20px;background:#f8f9fa}.container{max-width:1200px;margin:0 auto}.demo-section{background:white;padding:25px;margin:20px 0;border-radius:10px;box-shadow:0 2px 5px rgba(0,0,0,0.1)}.demo-title{color:#2c3e50;font-size:20px;font-weight:bold;margin-bottom:15px}.grid-container{display:grid;background:#e3f2fd;padding:20px;border-radius:8px;margin:15px 0;border:2px solid #2196f3}.grid-item{background:#ff6b6b;color:white;padding:15px;border-radius:5px;text-align:center;font-weight:bold}.grid-item:nth-child(2){background:#4ecdc4}.grid-item:nth-child(3){background:#45b7d1}.grid-item:nth-child(4){background:#96ceb4}.grid-item:nth-child(5){background:#feca57}.grid-item:nth-child(6){background:#ff9ff3}.code-block{background:#2c3e50;color:#ecf0f1;padding:15px;border-radius:5px;font-family:monospace;margin:15px 0;overflow-x:auto}.method-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(300px,1fr));gap:20px;margin:20px 0}.method-card{background:#f8f9fa;padding:15px;border-radius:5px;border-left:4px solid #007bff}.method-title{font-weight:bold;color:#2c3e50;margin-bottom:10px}.controls{background:#fff3cd;padding:15px;border-radius:5px;margin:15px 0;border-left:4px solid #ffc107}.control-group{margin:10px 0}.control-group label{display:inline-block;width:200px;font-weight:bold}.control-group select{padding:5px;border-radius:3px;border:1px solid #ccc}.example-section{background:#e8f5e8;padding:20px;border-radius:5px;margin:20px 0;border-left:4px solid #27ae60}.example-title{font-weight:bold;color:#2c3e50;margin-bottom:15px}</style></head><body><div class=\"container\"><h1 style=\"text-align:center;color:#2c3e50\">📍 CSS Grid Item Placement</h1><div class=\"demo-section\"><div class=\"demo-title\">Interactive Grid Placement Demo</div><div class=\"controls\"><div class=\"control-group\"><label>Placement Method:</label><select id=\"placementMethod\" onchange=\"updateGridPlacement()\"><option value=\"individual\">Individual Properties</option><option value=\"shorthand\">Shorthand Properties</option><option value=\"span\">Span Properties</option><option value=\"named-areas\">Named Areas</option></select></div></div><div class=\"grid-container\" id=\"gridContainer\" style=\"grid-template-columns:repeat(4,1fr);grid-template-rows:repeat(3,100px);gap:10px\"><div class=\"grid-item\" id=\"item1\">Item 1</div><div class=\"grid-item\" id=\"item2\">Item 2</div><div class=\"grid-item\" id=\"item3\">Item 3</div><div class=\"grid-item\" id=\"item4\">Item 4</div><div class=\"grid-item\" id=\"item5\">Item 5</div><div class=\"grid-item\" id=\"item6\">Item 6</div></div></div><div class=\"demo-section\"><div class=\"demo-title\">Grid Placement Methods</div><div class=\"method-grid\"><div class=\"method-card\"><div class=\"method-title\">1. Individual Properties</div><div class=\"code-block\">.item {<br>&nbsp;&nbsp;grid-row-start: 1;<br>&nbsp;&nbsp;grid-row-end: 3;<br>&nbsp;&nbsp;grid-column-start: 1;<br>&nbsp;&nbsp;grid-column-end: 5;<br>}</div></div><div class=\"method-card\"><div class=\"method-title\">2. Shorthand Properties</div><div class=\"code-block\">.item {<br>&nbsp;&nbsp;grid-row: 1 / 3;<br>&nbsp;&nbsp;grid-column: 1 / 5;<br>}</div></div><div class=\"method-card\"><div class=\"method-title\">3. Span Properties</div><div class=\"code-block\">.item {<br>&nbsp;&nbsp;grid-row: span 2;<br>&nbsp;&nbsp;grid-column: span 3;<br>}</div></div><div class=\"method-card\"><div class=\"method-title\">4. Grid Area</div><div class=\"code-block\">.item {<br>&nbsp;&nbsp;grid-area: 1 / 1 / 3 / 4;<br>}<br><br>/* Row-start / Col-start / Row-end / Col-end */</div></div></div></div><div class=\"demo-section\"><div class=\"demo-title\">Named Grid Areas</div><div class=\"example-section\"><div class=\"example-title\">Container Setup:</div><div class=\"code-block\">.container {<br>&nbsp;&nbsp;display: grid;<br>&nbsp;&nbsp;grid-template-areas:<br>&nbsp;&nbsp;&nbsp;&nbsp;\"header header header\"<br>&nbsp;&nbsp;&nbsp;&nbsp;\"sidebar main main\"<br>&nbsp;&nbsp;&nbsp;&nbsp;\"footer footer footer\";<br>&nbsp;&nbsp;grid-template-columns: 1fr 2fr 1fr;<br>&nbsp;&nbsp;grid-template-rows: auto 1fr auto;<br>&nbsp;&nbsp;gap: 20px;<br>}</div><div class=\"example-title\">Item Placement:</div><div class=\"code-block\">.header { grid-area: header; }<br>.sidebar { grid-area: sidebar; }<br>.main { grid-area: main; }<br>.footer { grid-area: footer; }</div></div></div><div class=\"demo-section\"><div class=\"demo-title\">Complete Grid Placement Values</div><div class=\"code-block\">/* Line Numbers */<br>grid-row: 1;<br>grid-column: 2;<br><br>/* Start / End */<br>grid-row: 1 / 3;<br>grid-column: 1 / 4;<br><br>/* Span */<br>grid-row: span 2;<br>grid-column: span 3;<br><br>/* Auto */<br>grid-row: auto;<br>grid-column: auto;<br><br>/* Negative Values */<br>grid-row: 1 / -1;<br>grid-column: -2 / -1;</div></div><div class=\"demo-section\"><div class=\"demo-title\">Grid Gap Properties</div><div class=\"code-block\">/* All gaps */<br>grid-gap: 20px;<br><br>/* Individual gaps */<br>row-gap: 10px;<br>column-gap: 15px;<br><br>/* Shorthand */<br>gap: 10px 20px; /* row-gap column-gap */</div></div></div><script>function updateGridPlacement(){const method=document.getElementById('placementMethod').value;const item1=document.getElementById('item1');const item2=document.getElementById('item2');switch(method){case 'individual':item1.style.gridRowStart='1';item1.style.gridRowEnd='3';item1.style.gridColumnStart='1';item1.style.gridColumnEnd='3';break;case 'shorthand':item1.style.gridRow='1 / 3';item1.style.gridColumn='1 / 3';break;case 'span':item1.style.gridRow='span 2';item1.style.gridColumn='span 2';break;case 'named-areas':item1.style.gridArea='1 / 1 / 3 / 3';break;}}</script></body></html>"
  },
  {
    "question": "Explain implicit and explicit grid",
    "answer": "**CSS Grid: Implicit vs Explicit Grid:**\n\n**Explicit Grid:**\n- **Definition:** Grid tracks you explicitly define\n- **Properties:** `grid-template-rows` and `grid-template-columns`\n- **Control:** You have full control over size and placement\n- **Example:** `grid-template-columns: repeat(3, 1fr)`\n\n**Implicit Grid:**\n- **Definition:** Grid tracks created automatically when items are placed outside explicit grid\n- **Properties:** `grid-auto-rows` and `grid-auto-columns`\n- **Control:** Browser creates tracks as needed\n- **Example:** Items placed in row 4 when only 3 rows defined\n\n**Complete Grid Auto Properties:**\n\n**1. grid-auto-rows:**\n- `auto` - Size based on content (default)\n- `100px` - Fixed size\n- `1fr` - Fractional unit\n- `minmax(100px, 1fr)` - Min/max sizing\n- `min-content` - Minimum content size\n- `max-content` - Maximum content size\n\n**2. grid-auto-columns:**\n- `auto` - Size based on content (default)\n- `150px` - Fixed size\n- `1fr` - Fractional unit\n- `minmax(150px, 1fr)` - Min/max sizing\n- `min-content` - Minimum content size\n- `max-content` - Maximum content size\n\n**3. grid-auto-flow:**\n- `row` - Fill rows first (default)\n- `column` - Fill columns first\n- `dense` - Fill gaps in grid\n- `row dense` - Fill rows first, then gaps\n- `column dense` - Fill columns first, then gaps\n\n**4. grid-auto-flow Properties:**\n- `grid-auto-flow: row` - Items flow horizontally\n- `grid-auto-flow: column` - Items flow vertically\n- `grid-auto-flow: dense` - Fill gaps\n- `grid-auto-flow: row dense` - Row-first with gap filling\n- `grid-auto-flow: column dense` - Column-first with gap filling",
    "type": "css",
    "tags": ["css", "grid", "implicit", "explicit"],
    "code": "<!DOCTYPE html><html><head><title>CSS Grid: Implicit vs Explicit</title><style>body{font-family:Arial,sans-serif;margin:20px;background:#f8f9fa}.container{max-width:1200px;margin:0 auto}.demo-section{background:white;padding:25px;margin:20px 0;border-radius:10px;box-shadow:0 2px 5px rgba(0,0,0,0.1)}.demo-title{color:#2c3e50;font-size:20px;font-weight:bold;margin-bottom:15px}.grid-container{display:grid;background:#e3f2fd;padding:20px;border-radius:8px;margin:15px 0;border:2px solid #2196f3}.grid-item{background:#ff6b6b;color:white;padding:15px;border-radius:5px;text-align:center;font-weight:bold}.grid-item:nth-child(2){background:#4ecdc4}.grid-item:nth-child(3){background:#45b7d1}.grid-item:nth-child(4){background:#96ceb4}.grid-item:nth-child(5){background:#feca57}.grid-item:nth-child(6){background:#ff9ff3}.grid-item:nth-child(7){background:#a8e6cf}.grid-item:nth-child(8){background:#ffd3a5}.code-block{background:#2c3e50;color:#ecf0f1;padding:15px;border-radius:5px;font-family:monospace;margin:15px 0;overflow-x:auto}.comparison-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(300px,1fr));gap:20px;margin:20px 0}.comparison-card{background:#f8f9fa;padding:15px;border-radius:5px;border-left:4px solid #007bff}.comparison-title{font-weight:bold;color:#2c3e50;margin-bottom:10px}.controls{background:#fff3cd;padding:15px;border-radius:5px;margin:15px 0;border-left:4px solid #ffc107}.control-group{margin:10px 0}.control-group label{display:inline-block;width:200px;font-weight:bold}.control-group select{padding:5px;border-radius:3px;border:1px solid #ccc}.example-section{background:#e8f5e8;padding:20px;border-radius:5px;margin:20px 0;border-left:4px solid #27ae60}.example-title{font-weight:bold;color:#2c3e50;margin-bottom:15px}</style></head><body><div class=\"container\"><h1 style=\"text-align:center;color:#2c3e50\">🔍 CSS Grid: Implicit vs Explicit</h1><div class=\"demo-section\"><div class=\"demo-title\">Interactive Grid Demo</div><div class=\"controls\"><div class=\"control-group\"><label>Grid Type:</label><select id=\"gridType\" onchange=\"updateGridType()\"><option value=\"explicit\">Explicit Grid</option><option value=\"implicit\">Implicit Grid</option><option value=\"mixed\">Mixed Grid</option></select></div><div class=\"control-group\"><label>Auto Flow:</label><select id=\"autoFlow\" onchange=\"updateGridType()\"><option value=\"row\">row</option><option value=\"column\">column</option><option value=\"dense\">dense</option><option value=\"row-dense\">row dense</option><option value=\"column-dense\">column dense</option></select></div></div><div class=\"grid-container\" id=\"gridContainer\"><div class=\"grid-item\">Item 1</div><div class=\"grid-item\">Item 2</div><div class=\"grid-item\">Item 3</div><div class=\"grid-item\">Item 4</div><div class=\"grid-item\">Item 5</div><div class=\"grid-item\">Item 6</div><div class=\"grid-item\">Item 7</div><div class=\"grid-item\">Item 8</div></div></div><div class=\"demo-section\"><div class=\"demo-title\">Explicit vs Implicit Grid</div><div class=\"comparison-grid\"><div class=\"comparison-card\"><div class=\"comparison-title\">Explicit Grid</div><p><strong>Definition:</strong> Grid tracks you explicitly define</p><p><strong>Properties:</strong></p><ul><li>grid-template-rows</li><li>grid-template-columns</li></ul><p><strong>Control:</strong> Full control over size and placement</p><div class=\"code-block\">grid-template-columns: repeat(3, 1fr);<br>grid-template-rows: repeat(2, 100px);</div></div><div class=\"comparison-card\"><div class=\"comparison-title\">Implicit Grid</div><p><strong>Definition:</strong> Grid tracks created automatically</p><p><strong>Properties:</strong></p><ul><li>grid-auto-rows</li><li>grid-auto-columns</li><li>grid-auto-flow</li></ul><p><strong>Control:</strong> Browser creates tracks as needed</p><div class=\"code-block\">grid-auto-rows: 100px;<br>grid-auto-columns: 1fr;<br>grid-auto-flow: row;</div></div></div></div><div class=\"demo-section\"><div class=\"demo-title\">Grid Auto Properties</div><div class=\"example-section\"><div class=\"example-title\">grid-auto-rows Values:</div><div class=\"code-block\">grid-auto-rows: auto; /* Default - size based on content */<br>grid-auto-rows: 100px; /* Fixed size */<br>grid-auto-rows: 1fr; /* Fractional unit */<br>grid-auto-rows: minmax(100px, 1fr); /* Min/max sizing */<br>grid-auto-rows: min-content; /* Minimum content size */<br>grid-auto-rows: max-content; /* Maximum content size */</div><div class=\"example-title\">grid-auto-columns Values:</div><div class=\"code-block\">grid-auto-columns: auto; /* Default - size based on content */<br>grid-auto-columns: 150px; /* Fixed size */<br>grid-auto-columns: 1fr; /* Fractional unit */<br>grid-auto-columns: minmax(150px, 1fr); /* Min/max sizing */<br>grid-auto-columns: min-content; /* Minimum content size */<br>grid-auto-columns: max-content; /* Maximum content size */</div><div class=\"example-title\">grid-auto-flow Values:</div><div class=\"code-block\">grid-auto-flow: row; /* Fill rows first (default) */<br>grid-auto-flow: column; /* Fill columns first */<br>grid-auto-flow: dense; /* Fill gaps in grid */<br>grid-auto-flow: row dense; /* Fill rows first, then gaps */<br>grid-auto-flow: column dense; /* Fill columns first, then gaps */</div></div></div><div class=\"demo-section\"><div class=\"demo-title\">Complete Example</div><div class=\"code-block\">.container {<br>&nbsp;&nbsp;display: grid;<br>&nbsp;&nbsp;/* Explicit Grid */<br>&nbsp;&nbsp;grid-template-columns: repeat(3, 1fr);<br>&nbsp;&nbsp;grid-template-rows: repeat(2, 100px);<br>&nbsp;&nbsp;/* Implicit Grid */<br>&nbsp;&nbsp;grid-auto-rows: 80px;<br>&nbsp;&nbsp;grid-auto-columns: 1fr;<br>&nbsp;&nbsp;grid-auto-flow: row dense;<br>&nbsp;&nbsp;gap: 10px;<br>}</div></div></div><script>function updateGridType(){const container=document.getElementById('gridContainer');const type=document.getElementById('gridType').value;const flow=document.getElementById('autoFlow').value;switch(type){case 'explicit':container.style.gridTemplateColumns='repeat(3, 1fr)';container.style.gridTemplateRows='repeat(2, 100px)';container.style.gridAutoRows='';container.style.gridAutoColumns='';break;case 'implicit':container.style.gridTemplateColumns='';container.style.gridTemplateRows='';container.style.gridAutoRows='100px';container.style.gridAutoColumns='1fr';break;case 'mixed':container.style.gridTemplateColumns='repeat(2, 1fr)';container.style.gridTemplateRows='repeat(2, 100px)';container.style.gridAutoRows='80px';container.style.gridAutoColumns='1fr';break;}container.style.gridAutoFlow=flow;}</script></body></html>"
  },
  {
    "question": "How to use grid template areas?",
    "answer": "**CSS Grid Template Areas:**\n\n**Complete Grid Template Areas Guide:**\n\n**1. Basic Setup:**\n```css\n.container {\n    display: grid;\n    grid-template-areas:\n        \"header header header\"\n        \"sidebar main main\"\n        \"footer footer footer\";\n}\n```\n\n**2. Item Placement:**\n```css\n.item-1 { grid-area: header; }\n.item-2 { grid-area: sidebar; }\n.item-3 { grid-area: main; }\n.item-4 { grid-area: footer; }\n```\n\n**Complete Grid Template Areas Rules:**\n\n**Area Naming Rules:**\n- Use single quotes for each row\n- Each row must have same number of areas\n- Use dots (.) for empty areas\n- Use same name for spanning areas\n\n**Area Values:**\n- `header` - Named area\n- `main` - Named area\n- `.` - Empty area\n- `sidebar` - Named area\n- `footer` - Named area\n\n**Grid Template Areas Examples:**\n\n**1. Basic Layout:**\n```css\n.container {\n    grid-template-areas:\n        \"header header header\"\n        \"sidebar main main\"\n        \"footer footer footer\";\n}\n```\n\n**2. Complex Layout:**\n```css\n.container {\n    grid-template-areas:\n        \"nav nav nav nav\"\n        \"sidebar main main aside\"\n        \"sidebar main main aside\"\n        \"footer footer footer footer\";\n}\n```\n\n**3. Empty Areas:**\n```css\n.container {\n    grid-template-areas:\n        \"header header header\"\n        \". main main\"\n        \"footer footer footer\";\n}\n```\n\n**4. Responsive Areas:**\n```css\n.container {\n    grid-template-areas:\n        \"header\"\n        \"main\"\n        \"footer\";\n}\n\n@media (min-width: 768px) {\n    .container {\n        grid-template-areas:\n            \"header header\"\n            \"sidebar main\"\n            \"footer footer\";\n    }\n}\n```",
    "type": "css",
    "tags": ["css", "grid", "template-areas", "layout"],
    "code": "<!DOCTYPE html><html><head><title>CSS Grid Template Areas</title><style>body{font-family:Arial,sans-serif;margin:20px;background:#f8f9fa}.container{max-width:1200px;margin:0 auto}.demo-section{background:white;padding:25px;margin:20px 0;border-radius:10px;box-shadow:0 2px 5px rgba(0,0,0,0.1)}.demo-title{color:#2c3e50;font-size:20px;font-weight:bold;margin-bottom:15px}.grid-container{display:grid;background:#e3f2fd;padding:20px;border-radius:8px;margin:15px 0;border:2px solid #2196f3}.grid-item{color:white;padding:15px;border-radius:5px;text-align:center;font-weight:bold}.header{background:#ff6b6b;grid-area:header}.sidebar{background:#4ecdc4;grid-area:sidebar}.main{background:#45b7d1;grid-area:main}.aside{background:#96ceb4;grid-area:aside}.footer{background:#feca57;grid-area:footer}.code-block{background:#2c3e50;color:#ecf0f1;padding:15px;border-radius:5px;font-family:monospace;margin:15px 0;overflow-x:auto}.example-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(300px,1fr));gap:20px;margin:20px 0}.example-card{background:#f8f9fa;padding:15px;border-radius:5px;border-left:4px solid #007bff}.example-title{font-weight:bold;color:#2c3e50;margin-bottom:10px}.controls{background:#fff3cd;padding:15px;border-radius:5px;margin:15px 0;border-left:4px solid #ffc107}.control-group{margin:10px 0}.control-group label{display:inline-block;width:200px;font-weight:bold}.control-group select{padding:5px;border-radius:3px;border:1px solid #ccc}.example-section{background:#e8f5e8;padding:20px;border-radius:5px;margin:20px 0;border-left:4px solid #27ae60}.example-title{font-weight:bold;color:#2c3e50;margin-bottom:15px}</style></head><body><div class=\"container\"><h1 style=\"text-align:center;color:#2c3e50\">🏗️ CSS Grid Template Areas</h1><div class=\"demo-section\"><div class=\"demo-title\">Interactive Grid Template Areas Demo</div><div class=\"controls\"><div class=\"control-group\"><label>Layout Type:</label><select id=\"layoutType\" onchange=\"updateLayout()\"><option value=\"basic\">Basic Layout</option><option value=\"complex\">Complex Layout</option><option value=\"empty\">Empty Areas</option><option value=\"responsive\">Responsive Layout</option></select></div></div><div class=\"grid-container\" id=\"gridContainer\"><div class=\"grid-item header\">Header</div><div class=\"grid-item sidebar\">Sidebar</div><div class=\"grid-item main\">Main Content</div><div class=\"grid-item aside\">Aside</div><div class=\"grid-item footer\">Footer</div></div></div><div class=\"demo-section\"><div class=\"demo-title\">Grid Template Areas Examples</div><div class=\"example-grid\"><div class=\"example-card\"><div class=\"example-title\">1. Basic Layout</div><div class=\"code-block\">.container {<br>&nbsp;&nbsp;display: grid;<br>&nbsp;&nbsp;grid-template-areas:<br>&nbsp;&nbsp;&nbsp;&nbsp;\"header header header\"<br>&nbsp;&nbsp;&nbsp;&nbsp;\"sidebar main main\"<br>&nbsp;&nbsp;&nbsp;&nbsp;\"footer footer footer\";<br>}<br><br>.header { grid-area: header; }<br>.sidebar { grid-area: sidebar; }<br>.main { grid-area: main; }<br>.footer { grid-area: footer; }</div></div><div class=\"example-card\"><div class=\"example-title\">2. Complex Layout</div><div class=\"code-block\">.container {<br>&nbsp;&nbsp;display: grid;<br>&nbsp;&nbsp;grid-template-areas:<br>&nbsp;&nbsp;&nbsp;&nbsp;\"nav nav nav nav\"<br>&nbsp;&nbsp;&nbsp;&nbsp;\"sidebar main main aside\"<br>&nbsp;&nbsp;&nbsp;&nbsp;\"sidebar main main aside\"<br>&nbsp;&nbsp;&nbsp;&nbsp;\"footer footer footer footer\";<br>}</div></div><div class=\"example-card\"><div class=\"example-title\">3. Empty Areas</div><div class=\"code-block\">.container {<br>&nbsp;&nbsp;display: grid;<br>&nbsp;&nbsp;grid-template-areas:<br>&nbsp;&nbsp;&nbsp;&nbsp;\"header header header\"<br>&nbsp;&nbsp;&nbsp;&nbsp;\". main main\"<br>&nbsp;&nbsp;&nbsp;&nbsp;\"footer footer footer\";<br>}</div></div><div class=\"example-card\"><div class=\"example-title\">4. Responsive Areas</div><div class=\"code-block\">.container {<br>&nbsp;&nbsp;grid-template-areas:<br>&nbsp;&nbsp;&nbsp;&nbsp;\"header\"<br>&nbsp;&nbsp;&nbsp;&nbsp;\"main\"<br>&nbsp;&nbsp;&nbsp;&nbsp;\"footer\";<br>}<br><br>@media (min-width: 768px) {<br>&nbsp;&nbsp;.container {<br>&nbsp;&nbsp;&nbsp;&nbsp;grid-template-areas:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"header header\"<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"sidebar main\"<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"footer footer\";<br>&nbsp;&nbsp;}<br>}</div></div></div></div><div class=\"demo-section\"><div class=\"demo-title\">Grid Template Areas Rules</div><div class=\"example-section\"><div class=\"example-title\">Area Naming Rules:</div><ul><li>Use single quotes for each row</li><li>Each row must have same number of areas</li><li>Use dots (.) for empty areas</li><li>Use same name for spanning areas</li></ul><div class=\"example-title\">Area Values:</div><ul><li><code>header</code> - Named area</li><li><code>main</code> - Named area</li><li><code>.</code> - Empty area</li><li><code>sidebar</code> - Named area</li><li><code>footer</code> - Named area</li></ul></div></div><div class=\"demo-section\"><div class=\"demo-title\">Complete Grid Template Areas Example</div><div class=\"code-block\">.container {<br>&nbsp;&nbsp;display: grid;<br>&nbsp;&nbsp;grid-template-areas:<br>&nbsp;&nbsp;&nbsp;&nbsp;\"header header header\"<br>&nbsp;&nbsp;&nbsp;&nbsp;\"sidebar main main\"<br>&nbsp;&nbsp;&nbsp;&nbsp;\"footer footer footer\";<br>&nbsp;&nbsp;grid-template-columns: 1fr 2fr 1fr;<br>&nbsp;&nbsp;grid-template-rows: auto 1fr auto;<br>&nbsp;&nbsp;gap: 20px;<br>&nbsp;&nbsp;height: 100vh;<br>}<br><br>.header { grid-area: header; }<br>.sidebar { grid-area: sidebar; }<br>.main { grid-area: main; }<br>.footer { grid-area: footer; }</div></div></div><script>function updateLayout(){const container=document.getElementById('gridContainer');const type=document.getElementById('layoutType').value;switch(type){case 'basic':container.style.gridTemplateAreas='\"header header header\" \"sidebar main main\" \"footer footer footer\"';container.style.gridTemplateColumns='1fr 2fr 1fr';container.style.gridTemplateRows='auto 1fr auto';break;case 'complex':container.style.gridTemplateAreas='\"nav nav nav nav\" \"sidebar main main aside\" \"sidebar main main aside\" \"footer footer footer footer\"';container.style.gridTemplateColumns='1fr 2fr 2fr 1fr';container.style.gridTemplateRows='auto 1fr 1fr auto';break;case 'empty':container.style.gridTemplateAreas='\"header header header\" \". main main\" \"footer footer footer\"';container.style.gridTemplateColumns='1fr 2fr 1fr';container.style.gridTemplateRows='auto 1fr auto';break;case 'responsive':container.style.gridTemplateAreas='\"header\" \"main\" \"footer\"';container.style.gridTemplateColumns='1fr';container.style.gridTemplateRows='auto 1fr auto';break;}}</script></body></html>"
  },
  {
    "question": "Can you give elements both class and id?",
    "answer": "**Yes! Elements can have both class and id:**\n\n**HTML Example:**\n```html\n<div id=\"unique-element\" class=\"container primary\">\n    <h1 id=\"main-title\" class=\"heading large\">Title</h1>\n    <p id=\"intro-text\" class=\"text description\">Content</p>\n</div>\n```\n\n**CSS Targeting:**\n```css\n/* Target by ID */\n#unique-element {\n    background: blue;\n}\n\n/* Target by Class */\n.container {\n    padding: 20px;\n}\n\n/* Target by both ID and Class */\n#unique-element.container {\n    border: 2px solid red;\n}\n```\n\n**Key Differences:**\n\n**ID:**\n- **Unique:** Only one element per page\n- **Specificity:** Higher specificity (100)\n- **JavaScript:** `document.getElementById()`\n- **CSS:** `#id-name`\n- **Use:** Unique elements (header, main, navigation)\n\n**Class:**\n- **Reusable:** Multiple elements can have same class\n- **Specificity:** Lower specificity (10)\n- **JavaScript:** `document.getElementsByClassName()`\n- **CSS:** `.class-name`\n- **Use:** Reusable styles (buttons, cards, text)\n\n**Multiple Classes:**\n```html\n<div class=\"container primary large\">Content</div>\n```\n\n**CSS Specificity Order:**\n1. Inline styles (1000)\n2. IDs (100)\n3. Classes (10)\n4. Elements (1)\n\n**Best Practices:**\n- Use IDs for unique elements\n- Use classes for reusable styles\n- Combine both for specific targeting\n- Keep class names semantic\n- Use descriptive ID names",
    "type": "html",
    "tags": ["html", "css", "id", "class", "selectors"],
    "code": "<!DOCTYPE html><html><head><title>ID vs Class in HTML</title><style>body{font-family:Arial,sans-serif;margin:20px;background:#f8f9fa}.container{max-width:1000px;margin:0 auto}.demo-section{background:white;padding:25px;margin:20px 0;border-radius:10px;box-shadow:0 2px 5px rgba(0,0,0,0.1)}.demo-title{color:#2c3e50;font-size:20px;font-weight:bold;margin-bottom:15px}.code-block{background:#2c3e50;color:#ecf0f1;padding:15px;border-radius:5px;font-family:monospace;margin:15px 0;overflow-x:auto}.comparison-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(300px,1fr));gap:20px;margin:20px 0}.comparison-card{background:#f8f9fa;padding:15px;border-radius:5px;border-left:4px solid #007bff}.comparison-title{font-weight:bold;color:#2c3e50;margin-bottom:10px}.example-section{background:#e8f5e8;padding:20px;border-radius:5px;margin:20px 0;border-left:4px solid #27ae60}.example-title{font-weight:bold;color:#2c3e50;margin-bottom:15px}.demo-element{background:#ff6b6b;color:white;padding:15px;border-radius:5px;margin:10px 0;text-align:center;font-weight:bold}.demo-element.container{background:#4ecdc4}.demo-element.primary{background:#45b7d1}.demo-element.large{background:#96ceb4}.demo-element#unique-demo{background:#feca57;border:3px solid #ff6b6b}</style></head><body><div class=\"container\"><h1 style=\"text-align:center;color:#2c3e50\">🏷️ ID vs Class in HTML</h1><div class=\"demo-section\"><div class=\"demo-title\">Elements with Both ID and Class</div><div class=\"demo-element container primary large\" id=\"unique-demo\">This element has both ID and multiple classes!</div><div class=\"demo-element container primary\">This element has only classes</div><div class=\"demo-element large\">This element has only one class</div></div><div class=\"demo-section\"><div class=\"demo-title\">HTML Example</div><div class=\"code-block\">&lt;div id=\"unique-element\" class=\"container primary\"&gt;<br>&nbsp;&nbsp;&lt;h1 id=\"main-title\" class=\"heading large\"&gt;Title&lt;/h1&gt;<br>&nbsp;&nbsp;&lt;p id=\"intro-text\" class=\"text description\"&gt;Content&lt;/p&gt;<br>&lt;/div&gt;</div></div><div class=\"demo-section\"><div class=\"demo-title\">CSS Targeting</div><div class=\"code-block\">/* Target by ID */<br>#unique-element {<br>&nbsp;&nbsp;background: blue;<br>}<br><br>/* Target by Class */<br>.container {<br>&nbsp;&nbsp;padding: 20px;<br>}<br><br>/* Target by both ID and Class */<br>#unique-element.container {<br>&nbsp;&nbsp;border: 2px solid red;<br>}</div></div><div class=\"demo-section\"><div class=\"demo-title\">ID vs Class Comparison</div><div class=\"comparison-grid\"><div class=\"comparison-card\"><div class=\"comparison-title\">ID</div><ul><li><strong>Unique:</strong> Only one element per page</li><li><strong>Specificity:</strong> Higher specificity (100)</li><li><strong>JavaScript:</strong> document.getElementById()</li><li><strong>CSS:</strong> #id-name</li><li><strong>Use:</strong> Unique elements (header, main, navigation)</li></ul></div><div class=\"comparison-card\"><div class=\"comparison-title\">Class</div><ul><li><strong>Reusable:</strong> Multiple elements can have same class</li><li><strong>Specificity:</strong> Lower specificity (10)</li><li><strong>JavaScript:</strong> document.getElementsByClassName()</li><li><strong>CSS:</strong> .class-name</li><li><strong>Use:</strong> Reusable styles (buttons, cards, text)</li></ul></div></div></div><div class=\"demo-section\"><div class=\"demo-title\">CSS Specificity Order</div><div class=\"example-section\"><div class=\"example-title\">Specificity Values:</div><ol><li><strong>Inline styles:</strong> 1000 points</li><li><strong>IDs:</strong> 100 points</li><li><strong>Classes:</strong> 10 points</li><li><strong>Elements:</strong> 1 point</li></ol><div class=\"example-title\">Example:</div><div class=\"code-block\">/* Specificity: 1 */<br>div { color: black; }<br><br>/* Specificity: 10 */<br>.container { color: blue; }<br><br>/* Specificity: 100 */<br>#unique { color: red; }<br><br>/* Specificity: 111 */<br>#unique.container div { color: green; }</div></div></div><div class=\"demo-section\"><div class=\"demo-title\">Best Practices</div><div class=\"example-section\"><div class=\"example-title\">When to Use ID:</div><ul><li>Unique elements (header, main, navigation)</li><li>JavaScript targeting</li><li>Anchor links</li><li>Form labels</li></ul><div class=\"example-title\">When to Use Class:</div><ul><li>Reusable styles (buttons, cards, text)</li><li>Component styling</li><li>State changes (active, disabled)</li><li>Layout utilities</li></ul><div class=\"example-title\">Multiple Classes:</div><div class=\"code-block\">&lt;div class=\"container primary large\"&gt;Content&lt;/div&gt;</div></div></div></div></div></body></html>"
  },
  {
    "question": "Difference between em, px and fr",
    "answer": "**CSS Units Comparison: em, px, and fr:**\n\n**1. px (Pixels):**\n- **Definition:** Absolute unit, fixed size\n- **Behavior:** Always same size regardless of context\n- **Use:** Fixed measurements, borders, precise positioning\n- **Example:** `width: 200px`\n- **Responsive:** No, doesn't scale with font size\n\n**2. em (Relative to parent):**\n- **Definition:** Relative unit, based on parent's font-size\n- **Behavior:** Scales with parent's font-size\n- **Use:** Typography, spacing, scalable layouts\n- **Example:** `font-size: 1.5em` (1.5 × parent font-size)\n- **Responsive:** Yes, scales with font size\n\n**3. fr (Fractional unit):**\n- **Definition:** Fractional unit for CSS Grid\n- **Behavior:** Takes available space in grid container\n- **Use:** Grid layouts, flexible sizing\n- **Example:** `grid-template-columns: 1fr 2fr 1fr`\n- **Responsive:** Yes, flexible grid sizing\n\n**Complete Units Comparison:**\n\n**px (Pixels):**\n- `10px` - Fixed 10 pixels\n- `100px` - Fixed 100 pixels\n- `0px` - No size\n- `1px` - Minimum visible size\n\n**em (Relative to parent):**\n- `1em` - Same as parent font-size\n- `1.5em` - 1.5 × parent font-size\n- `0.5em` - Half of parent font-size\n- `2em` - Double parent font-size\n\n**fr (Fractional):**\n- `1fr` - One fraction of available space\n- `2fr` - Two fractions of available space\n- `0.5fr` - Half fraction of available space\n- `auto` - Size based on content\n\n**Other Related Units:**\n- `rem` - Relative to root font-size\n- `%` - Percentage of parent element\n- `vw/vh` - Viewport width/height\n- `ch` - Width of character \"0\"\n- `ex` - Height of lowercase \"x\"",
    "type": "css",
    "tags": ["css", "units", "px", "em", "fr"],
    "code": "<!DOCTYPE html><html><head><title>CSS Units: px, em, fr</title><style>body{font-family:Arial,sans-serif;margin:20px;background:#f8f9fa}.container{max-width:1000px;margin:0 auto}.demo-section{background:white;padding:25px;margin:20px 0;border-radius:10px;box-shadow:0 2px 5px rgba(0,0,0,0.1)}.demo-title{color:#2c3e50;font-size:20px;font-weight:bold;margin-bottom:15px}.code-block{background:#2c3e50;color:#ecf0f1;padding:15px;border-radius:5px;font-family:monospace;margin:15px 0;overflow-x:auto}.comparison-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(300px,1fr));gap:20px;margin:20px 0}.comparison-card{background:#f8f9fa;padding:15px;border-radius:5px;border-left:4px solid #007bff}.comparison-title{font-weight:bold;color:#2c3e50;margin-bottom:10px}.demo-container{background:#e3f2fd;padding:20px;border-radius:8px;margin:15px 0;border:2px solid #2196f3}.demo-element{background:#ff6b6b;color:white;padding:10px;border-radius:5px;margin:5px 0;text-align:center;font-weight:bold}.px-demo{width:200px;background:#4ecdc4}.em-demo{width:10em;background:#45b7d1}.fr-demo{background:#96ceb4}.grid-demo{display:grid;grid-template-columns:1fr 2fr 1fr;gap:10px;margin:10px 0}.grid-item{background:#feca57;color:white;padding:15px;border-radius:5px;text-align:center;font-weight:bold}.controls{background:#fff3cd;padding:15px;border-radius:5px;margin:15px 0;border-left:4px solid #ffc107}.control-group{margin:10px 0}.control-group label{display:inline-block;width:150px;font-weight:bold}.control-group select{padding:5px;border-radius:3px;border:1px solid #ccc}.example-section{background:#e8f5e8;padding:20px;border-radius:5px;margin:20px 0;border-left:4px solid #27ae60}.example-title{font-weight:bold;color:#2c3e50;margin-bottom:15px}</style></head><body><div class=\"container\"><h1 style=\"text-align:center;color:#2c3e50\">📏 CSS Units: px, em, fr</h1><div class=\"demo-section\"><div class=\"demo-title\">Interactive Units Demo</div><div class=\"controls\"><div class=\"control-group\"><label>Font Size:</label><select id=\"fontSize\" onchange=\"updateUnits()\"><option value=\"16px\">16px (Default)</option><option value=\"20px\">20px (Large)</option><option value=\"12px\">12px (Small)</option></select></div></div><div class=\"demo-container\" id=\"demoContainer\"><div class=\"demo-element px-demo\">px: 200px (Fixed)</div><div class=\"demo-element em-demo\">em: 10em (Relative)</div><div class=\"grid-demo\"><div class=\"grid-item fr-demo\">1fr</div><div class=\"grid-item fr-demo\">2fr</div><div class=\"grid-item fr-demo\">1fr</div></div></div></div><div class=\"demo-section\"><div class=\"demo-title\">Units Comparison</div><div class=\"comparison-grid\"><div class=\"comparison-card\"><div class=\"comparison-title\">px (Pixels)</div><ul><li><strong>Type:</strong> Absolute unit</li><li><strong>Behavior:</strong> Fixed size</li><li><strong>Use:</strong> Borders, precise positioning</li><li><strong>Responsive:</strong> No</li><li><strong>Example:</strong> width: 200px</li></ul><div class=\"code-block\">.element {<br>&nbsp;&nbsp;width: 200px;<br>&nbsp;&nbsp;height: 100px;<br>&nbsp;&nbsp;border: 1px solid black;<br>}</div></div><div class=\"comparison-card\"><div class=\"comparison-title\">em (Relative to parent)</div><ul><li><strong>Type:</strong> Relative unit</li><li><strong>Behavior:</strong> Scales with parent</li><li><strong>Use:</strong> Typography, spacing</li><li><strong>Responsive:</strong> Yes</li><li><strong>Example:</strong> font-size: 1.5em</li></ul><div class=\"code-block\">.element {<br>&nbsp;&nbsp;font-size: 1.5em;<br>&nbsp;&nbsp;margin: 2em;<br>&nbsp;&nbsp;padding: 0.5em;<br>}</div></div><div class=\"comparison-card\"><div class=\"comparison-title\">fr (Fractional)</div><ul><li><strong>Type:</strong> Grid unit</li><li><strong>Behavior:</strong> Takes available space</li><li><strong>Use:</strong> Grid layouts</li><li><strong>Responsive:</strong> Yes</li><li><strong>Example:</strong> 1fr 2fr 1fr</li></ul><div class=\"code-block\">.grid {<br>&nbsp;&nbsp;display: grid;<br>&nbsp;&nbsp;grid-template-columns: 1fr 2fr 1fr;<br>&nbsp;&nbsp;gap: 1rem;<br>}</div></div></div></div><div class=\"demo-section\"><div class=\"demo-title\">Complete Units Reference</div><div class=\"example-section\"><div class=\"example-title\">px Values:</div><div class=\"code-block\">width: 10px;   /* Fixed 10 pixels */<br>width: 100px;  /* Fixed 100 pixels */<br>width: 0px;    /* No size */<br>width: 1px;   /* Minimum visible size */</div><div class=\"example-title\">em Values:</div><div class=\"code-block\">font-size: 1em;   /* Same as parent */<br>font-size: 1.5em; /* 1.5 × parent */<br>font-size: 0.5em; /* Half of parent */<br>font-size: 2em;   /* Double parent */</div><div class=\"example-title\">fr Values:</div><div class=\"code-block\">grid-template-columns: 1fr;    /* One fraction */<br>grid-template-columns: 2fr;    /* Two fractions */<br>grid-template-columns: 0.5fr;  /* Half fraction */<br>grid-template-columns: auto;  /* Content-based */</div></div></div><div class=\"demo-section\"><div class=\"demo-title\">Other CSS Units</div><div class=\"code-block\">/* Relative Units */<br>font-size: 1rem;    /* Root font-size */<br>width: 50%;         /* 50% of parent */<br>width: 100vw;       /* 100% viewport width */<br>height: 100vh;      /* 100% viewport height */<br><br>/* Typography Units */<br>width: 20ch;        /* 20 characters wide */<br>height: 2ex;        /* 2 × height of 'x' */<br><br>/* Modern Units */<br>width: 100dvw;      /* Dynamic viewport width */<br>height: 100dvh;     /* Dynamic viewport height */</div></div></div><script>function updateUnits(){const container=document.getElementById('demoContainer');const fontSize=document.getElementById('fontSize').value;container.style.fontSize=fontSize;}</script></body></html>"
  },
  {
    "question": "How to see hidden files in CMD and PowerShell?",
    "answer": "**PowerShell:**\n```powershell\n# Show all files including hidden\nGet-ChildItem -Force\n\n# Or use alias\nls -Force\n```\n\n**CMD (Command Prompt):**\n```cmd\n# Show all files\nDir /a\n\n# Show all files with details\nDir /a /q\n\n# Show all files recursively\nDir /a /s\n\n# /a = all files (hidden, system, etc.)\n# /q = show ownership information\n# /s = include subdirectories recursively\n```\n\n**Explanation:**\n- Hidden files start with a dot (.) or have hidden attribute\n- `/a` shows all file attributes\n- `/q` adds ownership details\n- `/s` searches subdirectories"
  },
  {
    "question": "How do you apply a single commit from another branch to main without merging the whole branch?",
    "answer": "**Git Cherry-Pick:**\n\n**What it does:**\n- Applies a specific commit from one branch to another\n- Copies the commit without merging the entire branch\n- Useful for applying hotfixes or specific features\n\n**Command:**\n```bash\ngit cherry-pick <commit-hash>\n```\n\n**Steps:**\n1. Switch to target branch (main)\n2. Find the commit hash you want to apply\n3. Run cherry-pick command\n4. Resolve any conflicts if they occur\n\n**Example:**\n```bash\n# Switch to main branch\ngit checkout main\n\n# Apply specific commit\ngit cherry-pick abc1234\n\n# If conflicts occur, resolve them\ngit add .\ngit cherry-pick --continue\n```\n\n**Use Cases:**\n- Apply hotfixes to production\n- Move specific features between branches\n- Extract commits from feature branches\n- Apply bug fixes without full merge\n\n**Benefits:**\n- Selective commit application\n- Clean commit history\n- No unwanted changes\n- Precise control over what gets merged"
  },
  { 
     "question": "How to go back to a previous branch or commit in Git?",
    "answer": "**Git: Going Back to Previous Commits**\n\n**1. Just go back and look at a previous commit (no history change):**\n```bash\ngit checkout <commit-hash>\n```\n- Use this if you just want your files to match that commit temporarily\n- Creates a \"detached HEAD\" state\n- No permanent changes to your branch history\n- Files will match the state at that commit\n\n**2. Permanently move your branch back to an older commit (history rewrite):**\n```bash\ngit reset --hard <commit-hash>\n```\n- Permanently moves your current branch back to the specified commit\n- **WARNING:** This rewrites history and can lose commits\n- All commits after the specified commit will be lost\n- Use with caution, especially on shared branches\n\n**Additional Options:**\n```bash\n# Soft reset (keeps changes in staging area)\ngit reset --soft <commit-hash>\n\n# Mixed reset (keeps changes in working directory)\ngit reset --mixed <commit-hash>\n\n# Go back to previous commit\ngit reset --hard HEAD~1\n\n# Go back 3 commits\ngit reset --hard HEAD~3\n```\n\n**Best Practices:**\n- Use `git checkout` for temporary inspection\n- Use `git reset --hard` only when you're sure about losing commits\n- Create a backup branch before using `git reset --hard`\n- Never use `git reset --hard` on shared/public branches",
    "type": "git",
    "tags": ["git", "version-control", "commits", "branches"],
    "code": "// Example workflow:\n// 1. Check commit history\ngit log --oneline\n\n// 2. Go back temporarily to inspect\ngit checkout abc1234\n\n// 3. Return to latest commit\ngit checkout main\n\n// 4. Permanently reset (DANGEROUS!)\ngit reset --hard abc1234\n\n// 5. Create backup before reset\ngit branch backup-branch\ngit reset --hard abc1234"
  },
  {
    "question": "How to change a section or div from rectangle to square?",
    "answer": "**Add width and height:**\n\n```css\n.square {\n    width: 200px;\n    height: 200px;\n}\n```\n\n**Key points:**\n- Set both `width` and `height` to the same value\n- Use any unit: `px`, `em`, `rem`, `%`, `vh`, `vw`\n- The element will become a perfect square\n\n**Example:**\n```css\n/* Rectangle */\n.rectangle {\n    width: 300px;\n    height: 100px;\n}\n\n/* Square */\n.square {\n    width: 200px;\n    height: 200px;\n}\n```",
    "type": "css",
    "tags": ["css", "layout", "shapes"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Rectangle to Square</title>\n    <style>\n        .container {\n            display: flex;\n            gap: 20px;\n            padding: 20px;\n        }\n        \n        .rectangle {\n            width: 300px;\n            height: 100px;\n            background-color: #ff6b6b;\n            border-radius: 8px;\n        }\n        \n        .square {\n            width: 200px;\n            height: 200px;\n            background-color: #4ecdc4;\n            border-radius: 8px;\n        }\n        \n        .label {\n            text-align: center;\n            margin-top: 10px;\n            font-weight: bold;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div>\n            <div class=\"rectangle\"></div>\n            <div class=\"label\">Rectangle (300x100)</div>\n        </div>\n        <div>\n            <div class=\"square\"></div>\n            <div class=\"label\">Square (200x200)</div>\n        </div>\n    </div>\n</body>\n</html>"
  },
  {
    "question": "How to make text bold?",
    "answer": "**Use `font-weight` property:**\n\n```css\n.bold-text {\n    font-weight: bold;\n}\n```\n\n**Font-weight values:**\n- `normal` - Regular text (default)\n- `bold` - Bold text\n- `bolder` - Bolder than parent\n- `lighter` - Lighter than parent\n- `100-900` - Numeric values (100=lightest, 900=boldest)\n\n**Examples:**\n```css\n.light-text { font-weight: 300; }\n.normal-text { font-weight: normal; }\n.bold-text { font-weight: bold; }\n.heavy-text { font-weight: 900; }\n```\n\n**HTML alternative:**\n```html\n<b>Bold text</b>\n<strong>Strong text</strong>\n```",
    "type": "css",
    "tags": ["css", "typography", "font"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Font Weight Examples</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            background-color: #f8f9fa;\n        }\n        \n        .example {\n            margin: 15px 0;\n            padding: 15px;\n            background: white;\n            border-radius: 8px;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n        }\n        \n        .light { font-weight: 300; }\n        .normal { font-weight: normal; }\n        .bold { font-weight: bold; }\n        .heavy { font-weight: 900; }\n        \n        .label {\n            color: #666;\n            font-size: 14px;\n            margin-bottom: 5px;\n        }\n    </style>\n</head>\n<body>\n    <h1>Font Weight Examples</h1>\n    \n    <div class=\"example\">\n        <div class=\"label\">font-weight: 300 (light)</div>\n        <div class=\"light\">This is light text</div>\n    </div>\n    \n    <div class=\"example\">\n        <div class=\"label\">font-weight: normal</div>\n        <div class=\"normal\">This is normal text</div>\n    </div>\n    \n    <div class=\"example\">\n        <div class=\"label\">font-weight: bold</div>\n        <div class=\"bold\">This is bold text</div>\n    </div>\n    \n    <div class=\"example\">\n        <div class=\"label\">font-weight: 900 (heavy)</div>\n        <div class=\"heavy\">This is heavy text</div>\n    </div>\n</body>\n</html>"
  },
  {
    "question": "How to make single and multi-line text align center?",
    "answer": "**Single Line Text:**\n```css\n.single-line {\n    line-height: 50px;  /* Same as height */\n    text-align: center;\n    height: 50px;\n}\n```\n\n**Multi-line Text:**\n```css\n.multi-line {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    text-align: center;\n    height: 100px;\n}\n```\n\n**Alternative for multi-line:**\n```css\n.multi-line-alt {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 100px;\n}\n```\n\n**Key differences:**\n- **Single line:** Use `line-height = height`\n- **Multi-line:** Use `display: flex` with `align-items: center`",
    "type": "css",
    "tags": ["css", "alignment", "text", "flexbox"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Text Alignment</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            background-color: #f8f9fa;\n        }\n        \n        .example {\n            margin: 20px 0;\n            padding: 20px;\n            background: white;\n            border-radius: 8px;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n        }\n        \n        .single-line {\n            line-height: 50px;\n            text-align: center;\n            height: 50px;\n            background-color: #e3f2fd;\n            border: 2px solid #2196f3;\n        }\n        \n        .multi-line {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            text-align: center;\n            height: 100px;\n            background-color: #f3e5f5;\n            border: 2px solid #9c27b0;\n        }\n        \n        .label {\n            color: #666;\n            font-size: 14px;\n            margin-bottom: 10px;\n            font-weight: bold;\n        }\n    </style>\n</head>\n<body>\n    <h1>Text Alignment Examples</h1>\n    \n    <div class=\"example\">\n        <div class=\"label\">Single Line Text (line-height = height)</div>\n        <div class=\"single-line\">This is single line text</div>\n    </div>\n    \n    <div class=\"example\">\n        <div class=\"label\">Multi-line Text (display: flex)</div>\n        <div class=\"multi-line\">This is multi-line text that can wrap to multiple lines and still stay centered</div>\n    </div>\n</body>\n</html>"
  },
  {
    "question": "Can users send data directly to databases?",
    "answer": "**Not exactly** — you can't write `action=\"mongodb\"` directly, because:\n\n**Why it doesn't work:**\n- The `action` must be a URL or file path (something the browser can send a request to)\n- MongoDB is a database, not a web page or file\n- Browsers can't send data directly to a database — only to a server\n\n**How it actually works:**\n```html\n<!-- ❌ This won't work -->\n<form action=\"mongodb://localhost:27017\">\n\n<!-- ✅ This works -->\n<form action=\"/api/save-data\" method=\"POST\">\n    <input name=\"username\" type=\"text\">\n    <button type=\"submit\">Save</button>\n</form>\n```\n\n**The flow:**\n1. **Browser** → sends data to **server** (PHP, Node.js, Python)\n2. **Server** → processes data and talks to **database**\n3. **Database** → stores the data\n4. **Server** → sends response back to **browser**\n\n**Server examples:**\n- PHP file: `action=\"save.php\"`\n- Node.js: `action=\"/api/users\"`\n- Python: `action=\"/submit\"`",
    "type": "web",
    "tags": ["html", "database", "forms", "server"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Form Submission Examples</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            background-color: #f8f9fa;\n        }\n        \n        .example {\n            margin: 20px 0;\n            padding: 20px;\n            background: white;\n            border-radius: 8px;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n        }\n        \n        .wrong {\n            border: 2px solid #f44336;\n            background-color: #ffebee;\n        }\n        \n        .right {\n            border: 2px solid #4caf50;\n            background-color: #e8f5e8;\n        }\n        \n        form {\n            margin: 10px 0;\n        }\n        \n        input, button {\n            padding: 8px;\n            margin: 5px;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n        }\n        \n        button {\n            background-color: #2196f3;\n            color: white;\n            cursor: pointer;\n        }\n    </style>\n</head>\n<body>\n    <h1>Form Submission Examples</h1>\n    \n    <div class=\"example wrong\">\n        <h3>❌ Wrong Way (Won't Work)</h3>\n        <p>Browsers can't send data directly to databases:</p>\n        <form action=\"mongodb://localhost:27017\">\n            <input name=\"username\" placeholder=\"Username\" type=\"text\">\n            <button type=\"submit\">Save to MongoDB</button>\n        </form>\n    </div>\n    \n    <div class=\"example right\">\n        <h3>✅ Right Way (Will Work)</h3>\n        <p>Send data to a server that talks to the database:</p>\n        <form action=\"/api/save-user\" method=\"POST\">\n            <input name=\"username\" placeholder=\"Username\" type=\"text\">\n            <button type=\"submit\">Save User</button>\n        </form>\n    </div>\n    \n    <div class=\"example\">\n        <h3>📋 The Flow:</h3>\n        <ol>\n            <li><strong>Browser</strong> → sends data to <strong>Server</strong></li>\n            <li><strong>Server</strong> → processes data and talks to <strong>Database</strong></li>\n            <li><strong>Database</strong> → stores the data</li>\n            <li><strong>Server</strong> → sends response back to <strong>Browser</strong></li>\n        </ol>\n    </div>\n</body>\n</html>"
  },
  {
    "question": "Explain POST and GET methods",
    "answer": "**GET Method:**\n- Sends data in the URL\n- Example: `https://example.com/search?name=John&age=20`\n- Used for searches, filters, page navigation\n- **Not good for passwords** or private info (visible in URL)\n- Data is visible in browser history\n\n**POST Method:**\n- Sends data hidden inside the request body (not in URL)\n- Used for logins, forms, messages, file uploads\n- **Safer for sensitive data** (not visible in URL)\n- Data is not stored in browser history\n\n**When to use each:**\n\n**Use GET for:**\n- Search queries\n- Filtering data\n- Page navigation\n- Getting information\n\n**Use POST for:**\n- User login\n- Form submissions\n- File uploads\n- Sensitive data\n- Creating/updating data",
    "type": "web",
    "tags": ["http", "methods", "forms", "security"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>GET vs POST Methods</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            background-color: #f8f9fa;\n        }\n        \n        .example {\n            margin: 20px 0;\n            padding: 20px;\n            background: white;\n            border-radius: 8px;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n        }\n        \n        .get-example {\n            border-left: 4px solid #4caf50;\n        }\n        \n        .post-example {\n            border-left: 4px solid #2196f3;\n        }\n        \n        form {\n            margin: 10px 0;\n        }\n        \n        input, button {\n            padding: 8px;\n            margin: 5px;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n        }\n        \n        button {\n            cursor: pointer;\n        }\n        \n        .get-btn {\n            background-color: #4caf50;\n            color: white;\n        }\n        \n        .post-btn {\n            background-color: #2196f3;\n            color: white;\n        }\n        \n        .url-example {\n            background-color: #f5f5f5;\n            padding: 10px;\n            border-radius: 4px;\n            font-family: monospace;\n            margin: 10px 0;\n        }\n    </style>\n</head>\n<body>\n    <h1>GET vs POST Methods</h1>\n    \n    <div class=\"example get-example\">\n        <h3>🔍 GET Method</h3>\n        <p><strong>Data sent in URL:</strong></p>\n        <div class=\"url-example\">https://example.com/search?name=John&age=20</div>\n        \n        <form method=\"GET\" action=\"#\">\n            <input name=\"search\" placeholder=\"Search term\" type=\"text\">\n            <button type=\"submit\" class=\"get-btn\">Search (GET)</button>\n        </form>\n        \n        <p><strong>Use for:</strong> Searches, filters, page navigation</p>\n        <p><strong>⚠️ Not secure:</strong> Data visible in URL</p>\n    </div>\n    \n    <div class=\"example post-example\">\n        <h3>📝 POST Method</h3>\n        <p><strong>Data sent in request body:</strong></p>\n        <div class=\"url-example\">https://example.com/login (data hidden)</div>\n        \n        <form method=\"POST\" action=\"#\">\n            <input name=\"username\" placeholder=\"Username\" type=\"text\">\n            <input name=\"password\" placeholder=\"Password\" type=\"password\">\n            <button type=\"submit\" class=\"post-btn\">Login (POST)</button>\n        </form>\n        \n        <p><strong>Use for:</strong> Logins, forms, sensitive data</p>\n        <p><strong>✅ Secure:</strong> Data not visible in URL</p>\n    </div>\n</body>\n</html>"
  },
  {
    "question": "What are some ways to change the cursor appearance when interacting with elements?",
    "answer": "**Use the `cursor` property:**\n\n```css\n.clickable {\n    cursor: pointer;\n}\n```\n\n**Cursor Types:**\n\n| Cursor Type | What it looks like | When to use |\n|-------------|-------------------|-------------|\n| `default` | Regular arrow | Normal state |\n| `pointer` | Hand icon | Clickable items (buttons, links) |\n| `text` | I-beam (text cursor) | Editable text or input fields |\n| `move` | Four arrows | Dragging or moving things |\n| `wait` | Loading spinner | When something's loading |\n| `not-allowed` | 🚫 symbol | When action isn't allowed |\n| `help` | Question mark | For help or info icons |\n| `crosshair` | + symbol | For precise selection |\n| `zoom-in` | Magnifying glass with + | For zoom functionality |\n\n**Examples:**\n```css\n.button { cursor: pointer; }\n.input { cursor: text; }\n.draggable { cursor: move; }\n.disabled { cursor: not-allowed; }\n```",
    "type": "css",
    "tags": ["css", "cursor", "interaction", "ui"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Cursor Types</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            background-color: #f8f9fa;\n        }\n        \n        .cursor-demo {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n            gap: 15px;\n            margin: 20px 0;\n        }\n        \n        .cursor-item {\n            padding: 20px;\n            background: white;\n            border-radius: 8px;\n            text-align: center;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n            border: 2px solid transparent;\n            transition: border-color 0.3s;\n        }\n        \n        .cursor-item:hover {\n            border-color: #2196f3;\n        }\n        \n        .default { cursor: default; }\n        .pointer { cursor: pointer; }\n        .text { cursor: text; }\n        .move { cursor: move; }\n        .wait { cursor: wait; }\n        .not-allowed { cursor: not-allowed; }\n        .help { cursor: help; }\n        .crosshair { cursor: crosshair; }\n        .zoom-in { cursor: zoom-in; }\n        \n        .label {\n            font-weight: bold;\n            margin-bottom: 10px;\n            color: #333;\n        }\n        \n        .description {\n            font-size: 12px;\n            color: #666;\n        }\n    </style>\n</head>\n<body>\n    <h1>CSS Cursor Types</h1>\n    <p>Hover over each element to see different cursor types:</p>\n    \n    <div class=\"cursor-demo\">\n        <div class=\"cursor-item default\">\n            <div class=\"label\">default</div>\n            <div class=\"description\">Regular arrow</div>\n        </div>\n        \n        <div class=\"cursor-item pointer\">\n            <div class=\"label\">pointer</div>\n            <div class=\"description\">Hand icon (clickable)</div>\n        </div>\n        \n        <div class=\"cursor-item text\">\n            <div class=\"label\">text</div>\n            <div class=\"description\">I-beam (editable)</div>\n        </div>\n        \n        <div class=\"cursor-item move\">\n            <div class=\"label\">move</div>\n            <div class=\"description\">Four arrows (draggable)</div>\n        </div>\n        \n        <div class=\"cursor-item wait\">\n            <div class=\"label\">wait</div>\n            <div class=\"description\">Loading spinner</div>\n        </div>\n        \n        <div class=\"cursor-item not-allowed\">\n            <div class=\"label\">not-allowed</div>\n            <div class=\"description\">🚫 symbol (disabled)</div>\n        </div>\n        \n        <div class=\"cursor-item help\">\n            <div class=\"label\">help</div>\n            <div class=\"description\">Question mark</div>\n        </div>\n        \n        <div class=\"cursor-item crosshair\">\n            <div class=\"label\">crosshair</div>\n            <div class=\"description\">+ symbol (precise)</div>\n        </div>\n        \n        <div class=\"cursor-item zoom-in\">\n            <div class=\"label\">zoom-in</div>\n            <div class=\"description\">Magnifying glass</div>\n        </div>\n    </div>\n</body>\n</html>"
  },
  {
    "question": "What is a container?",
    "answer": "**✅ A container is an HTML element (like a `<div>`) that holds other elements inside it.**\n\n**Purpose:**\n- Groups related elements together\n- Provides structure and organization\n- Makes styling easier\n- Controls layout and positioning\n\n**Common container elements:**\n```html\n<div>          <!-- Generic container -->\n<section>      <!-- Semantic container for content sections -->\n<article>       <!-- Container for articles/blog posts -->\n<header>        <!-- Container for page header -->\n<footer>        <!-- Container for page footer -->\n<nav>           <!-- Container for navigation -->\n<main>          <!-- Container for main content -->\n<aside>         <!-- Container for sidebar content -->\n```\n\n**Example:**\n```html\n<div class=\"card-container\">\n    <h2>Card Title</h2>\n    <p>Card content goes here</p>\n    <button>Click me</button>\n</div>\n```\n\n**CSS styling:**\n```css\n.card-container {\n    border: 1px solid #ccc;\n    padding: 20px;\n    margin: 10px;\n    border-radius: 8px;\n}\n```",
    "type": "html",
    "tags": ["html", "container", "structure", "layout"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>HTML Containers</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            background-color: #f8f9fa;\n        }\n        \n        .container {\n            max-width: 1200px;\n            margin: 0 auto;\n            padding: 20px;\n        }\n        \n        .card-container {\n            border: 2px solid #e0e0e0;\n            padding: 20px;\n            margin: 15px 0;\n            border-radius: 8px;\n            background: white;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n        }\n        \n        .section-container {\n            background-color: #e3f2fd;\n            padding: 20px;\n            margin: 15px 0;\n            border-radius: 8px;\n            border-left: 4px solid #2196f3;\n        }\n        \n        .article-container {\n            background-color: #f3e5f5;\n            padding: 20px;\n            margin: 15px 0;\n            border-radius: 8px;\n            border-left: 4px solid #9c27b0;\n        }\n        \n        .nav-container {\n            background-color: #e8f5e8;\n            padding: 15px;\n            margin: 15px 0;\n            border-radius: 8px;\n            border-left: 4px solid #4caf50;\n        }\n        \n        .nav-container a {\n            margin-right: 20px;\n            text-decoration: none;\n            color: #333;\n            font-weight: bold;\n        }\n        \n        .nav-container a:hover {\n            color: #2196f3;\n        }\n        \n        h1, h2 {\n            color: #333;\n        }\n        \n        p {\n            line-height: 1.6;\n            color: #666;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>HTML Container Examples</h1>\n        \n        <nav class=\"nav-container\">\n            <h2>Navigation Container</h2>\n            <a href=\"#\">Home</a>\n            <a href=\"#\">About</a>\n            <a href=\"#\">Contact</a>\n        </nav>\n        \n        <section class=\"section-container\">\n            <h2>Section Container</h2>\n            <p>This is a semantic container for grouping related content together.</p>\n        </section>\n        \n        <article class=\"article-container\">\n            <h2>Article Container</h2>\n            <p>This container holds article content like blog posts or news articles.</p>\n        </article>\n        \n        <div class=\"card-container\">\n            <h2>Generic Div Container</h2>\n            <p>This is a generic container that groups elements together for styling and layout purposes.</p>\n            <button style=\"background-color: #2196f3; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer;\">Click me</button>\n        </div>\n    </div>\n</body>\n</html>"
  }
]
