[
  {
    "question": "How do I start a new JavaScript file?",
    "answer": "// In terminal:\nnode filename.js\n\n// Or in HTML:\n<script src=\"filename.js\"></script>",
    "type": "javascript",
    "tags": ["javascript"],
    "code": "// Example JavaScript file\nconsole.log('Hello, World!');\n\n// Function example\nfunction greet(name) {\n    return `Hello, ${name}!`;\n}\n\nconsole.log(greet('EVERMIND'));"
  },
  {
    "question": "How do I start a new Python file?",
    "answer": "# In terminal:\npython filename.py\n\n# Or:\npython3 filename.py",
    "type": "python",
    "tags": ["python"],
    "code": "# Example Python file\nprint('Hello, World!')\n\n# Function example\ndef greet(name):\n    return f'Hello, {name}!'\n\nprint(greet('EVERMIND'))"
  },
  {
    "question": "How do I start a new C program/file?",
    "answer": "// Compile:\ngcc filename.c -o filename\n\n// Run:\n./filename",
    "type": "c",
    "tags": ["c"]
  },
  {
    "question": "How do I start a new C++ program/file?",
    "answer": "// Compile:\ng++ filename.cpp -o filename\n\n// Run:\n./filename",
    "type": "c",
    "tags": ["c"]
  },
  {
    "question": "How do I run programs in CMD?",
    "answer": "# Navigate to folder:\ncd path/to/folder\n\n# Run executable:\nfilename.exe\n\n# Or:\nstart filename.exe",
    "type": "shell",
    "tags": ["terminal"]
  },
  {
    "question": "How do I start a Playwright file in CMD?",
    "answer": "# Install Playwright:\nnpm install playwright\n\n# Run test:\nnpx playwright test filename.spec.js",
    "type": "javascript",
    "tags": ["javascript", "playwright"]
  },
  {
    "question": "What does API stand for?",
    "answer": "API stands for Application Programming Interface.\n\nIt's a set of rules and protocols that allows different software applications to communicate with each other.",
    "type": "html",
    "tags": ["api"]
  },
  {
    "question": "What are the names of these symbols: () [] <> {} / \\ |",
    "answer": "() - Parentheses\n[] - Square brackets / Brackets\n<> - Angle brackets\n{} - Curly braces / Braces\n/ - Forward slash\n\\ - Backslash\n| - Pipe / Vertical bar",
    "type": "html",
    "tags": ["symbols"]
  },
  {
    "question": "How do I make a commit and push changes to GitHub?",
    "answer": "git add .\ngit commit -m \"Your commit message\"\ngit push origin main",
    "type": "shell",
    "tags": ["git"]
  },
  {
    "question": "How do I see the commit history?",
    "answer": "git log\n\n# Optional for a one-line view:\ngit log --oneline",
    "type": "shell",
    "tags": ["git"]
  },
  {
    "question": "How do I view all commits?",
    "answer": "git log\n\n# Optional for a one-line view:\ngit log --oneline",
    "type": "shell",
    "tags": ["git"]
  },
  {
    "question": "How do I restore a commit?",
    "answer": "# Creates a new commit undoing the changes:\ngit revert <commit-hash>\n\n# Or reset to a previous commit (destructive):\ngit reset --hard <commit-hash>",
    "type": "shell",
    "tags": ["git"]
  },
  {
    "question": "How do I view tags?",
    "answer": "git tag",
    "type": "shell",
    "tags": ["git"]
  },
  {
    "question": "How do I create a tag?",
    "answer": "git tag <tag-name>\n\n# For annotated tag:\ngit tag -a <tag-name> -m \"Tag message\"",
    "type": "shell",
    "tags": ["git"]
  },
  {
    "question": "How do I push tags to GitHub?",
    "answer": "# Push a single tag:\ngit push origin <tag-name>\n\n# Push all tags:\ngit push origin --tags",
    "type": "shell",
    "tags": ["git"]
  },
  {
    "question": "How do I delete a tag?",
    "answer": "# Delete locally:\ngit tag -d <tag-name>\n\n# Delete remotely:\ngit push origin --delete <tag-name>",
    "type": "shell",
    "tags": ["git"]
  },
  {
    "question": "How do I check the current branch?",
    "answer": "git branch\n\n# Or just the current branch:\ngit branch --show-current",
    "type": "shell",
    "tags": ["git"]
  },
  {
    "question": "How do you open Command Prompt directly from File Explorer in a directory?",
    "answer": "Go to the folder location in File Explorer, click the address/search bar, type `cmd`, and press Enter.",
    "type": "shell",
    "tags": ["terminal", "windows"]
  },
  {
    "question": "How do you run scrcpy?",
    "answer": "Use the following steps:\n\n1. Run `adb kill-server`\n2. Run `adb start-server`\n3. Connect your device using `adb connect <ip-address>`\n4. Launch scrcpy by typing `scrcpy`",
    "type": "shell",
    "tags": ["adb", "scrcpy", "android"]
  },
  {
    "question": "How do you start a localhost server on port 8000 using Python and Node.js?",
    "answer": "* Python (Works for both Python 2 and 3):\n  Run: `python -m http.server 8000`\n  Then visit: http://localhost:8000\n\n* Node.js:\n  First install: `npm install -g http-server`\n  Then run: `http-server -p 8000`",
    "type": "shell",
    "tags": ["python", "nodejs", "server"]
  },
  {
    "question": "How do you verify if port 8000 is running?",
    "answer": "Open Command Prompt and run: `netstat -ano | findstr :8000`",
    "type": "shell",
    "tags": ["netstat", "port"]
  },
  {
    "question": "What does IP stand for?",
    "answer": "Internet Protocol.",
    "type": "networking",
    "tags": ["ip", "protocol"]
  },
  {
    "question": "What does HTTP stand for?",
    "answer": "HyperText Transfer Protocol.",
    "type": "networking",
    "tags": ["http", "protocol"]
  },
  {
    "question": "What does URL stand for?",
    "answer": "Uniform Resource Locator.",
    "type": "networking",
    "tags": ["url", "web"]
  },
  {
    "question": "What does DNS stand for, and what does it mean?",
    "answer": "Domain Name System — it translates human-readable domain names (like google.com) into IP addresses that computers use to identify each other.",
    "type": "networking",
    "tags": ["dns", "domain"]
  },
  {
    "question": "What does HTML stand for, and what does it mean?",
    "answer": "HyperText Markup Language — the standard language used to structure and display content on the web.",
    "type": "html",
    "tags": ["html", "markup"]
  },
  {
    "question": "Explain how localhost works and give examples.",
    "answer": "Localhost refers to your own computer acting as a server for testing or development. Example: visiting localhost:8000 or opening indexed.html runs the website locally.",
    "type": "networking",
    "tags": ["development"]
  },
  {
    "question": "Why should you run an HTTP server (like port 8000) for localhost to work?",
    "answer": "Because web browsers require a running HTTP service to handle requests and serve files correctly, simulating how a real server operates.",
    "type": "networking",
    "tags": ["http", "server"]
  },
  {
    "question": "Why is HTML wrapped in tags?",
    "answer": "To give semantic meaning — tags describe the purpose of content (like <header>, <main>, <footer>), making structure and accessibility clearer.",
    "type": "html",
    "tags": ["html", "semantic"]
  },
  {
    "question": "What does CSS stand for, and what does it mean?",
    "answer": "Cascading Style Sheets — it controls the layout, colors, and overall appearance of a webpage.",
    "type": "css",
    "tags": ["css", "styling"]
  },
  {
    "question": "What was the previous name of JavaScript?",
    "answer": "ECMAScript.",
    "type": "javascript",
    "tags": ["javascript", "history"]
  },
  {
    "question": "What does DOM stand for?",
    "answer": "Document Object Model.",
    "type": "javascript",
    "tags": ["dom", "web"]
  },
  {
    "question": "What does NPM stand for?",
    "answer": "Node Package Manager — it's used to install and manage packages in Node.js projects.",
    "type": "javascript",
    "tags": ["npm", "nodejs"]
  },
  {
    "question": "What does SaaS stand for, and what does it mean?",
    "answer": "Software as a Service — software delivered over the internet, usually through a subscription, like Google Docs or Slack.",
    "type": "concepts",
    "tags": ["saas", "cloud"]
  },
  {
    "question": "What does JSON mean?",
    "answer": "JavaScript Object Notation — a lightweight format for storing and transferring data between systems.",
    "type": "javascript",
    "tags": ["json", "data"]
  },
  {
    "question": "Give an example of how systems communicate.",
    "answer": "The client sends a GET request to the server. The server responds with status codes like 200 (OK), 400 (client error), or 500 (server error).",
    "type": "networking",
    "tags": ["http", "communication"]
  },
  {
    "question": "What is a tech stack, what does it stand for, and give examples.",
    "answer": "A combination of technologies used to build an application. Examples include:\n\n* LAMP: Linux, Apache, MySQL, PHP\n* MEAN: MongoDB, Express, Angular, Node.js\n  It usually includes a front-end framework, an API, and a backend layer.",
    "type": "concepts",
    "tags": ["stack", "architecture"]
  },
  {
    "question": "How do you start a localhost HTML file on Chrome?",
    "answer": "Save your file (e.g., index.html), then run a local server using a tool like VS Code's Live Server, or open it via http://localhost:8000.",
    "type": "html",
    "tags": ["html", "localhost", "development"]
  },
  {
    "question": "What does LLM stand for?",
    "answer": "Large Language Model — an AI model trained on vast amounts of text data to understand and generate human-like language.",
    "type": "ai",
    "tags": ["llm", "ai", "machine-learning"]
  },
  {
    "question": "What does 'grepped' mean? How to pronounce it and when to use it?",
    "answer": "It refers to using the command-line tool `grep` to search through text or files for specific patterns. Informally used as a verb by developers (e.g., \"I grepped the logs to find the error\").\n\n**Pronunciation:** /grɛpt/ — phonetic: grept\n\n**Example:** I grepped the codebase to find every reference to that function.",
    "type": "command-line",
    "tags": ["grep", "search", "terminal"]
  },
  {
    "question": "How do you kill an active port like localhost:8000?",
    "answer": "Use one of these methods:\n\n**Windows:**\n`netstat -ano | findstr :8000` (find the PID)\n`taskkill /PID <PID> /F` (kill the process)\n\n**Mac/Linux:**\n`lsof -ti:8000 | xargs kill -9`\n\n**Alternative:**\n`npx kill-port 8000` (if you have kill-port installed)",
    "type": "command-line",
    "tags": ["port", "kill", "terminal"]
  },
  {
    "question": "What is the git command to delete a commit?",
    "answer": "**To delete the last commit (keeps changes):**\n`git reset --soft HEAD~1`\n\n**To delete the last commit (removes changes):**\n`git reset --hard HEAD~1`\n\n**To delete a specific commit:**\n`git rebase -i HEAD~n` (interactive rebase)\n\n**To delete commits from remote:**\n`git push --force-with-lease origin branch-name`",
    "type": "git",
    "tags": ["git", "commit"]
  },
  {
    "question": "What is a CPU made up of?",
    "answer": "A CPU (Central Processing Unit) is made up of:\n\n• **Control Unit (CU)** - Manages instruction execution\n• **Arithmetic Logic Unit (ALU)** - Performs calculations and logic operations\n• **Registers** - Small, fast storage locations\n• **Cache Memory** - High-speed memory for frequently used data\n• **Clock** - Synchronizes operations\n• **Bus Interface** - Connects to other computer components",
    "type": "hardware",
    "tags": ["hardware"]
  },
  {
    "question": "What is the smallest form of data?",
    "answer": "A **bit** (binary digit) is the smallest form of data. It can only have two values: 0 or 1.",
    "type": "data",
    "tags": ["data"]
  },
  {
    "question": "How many bits make up 1 byte and how many combinations can it make?",
    "answer": "1 byte is made up of **8 bits** and can make **256 different combinations** (2^8 = 256).",
    "type": "data",
    "tags": ["data"]
  },
  {
    "question": "What are OS kernels?",
    "answer": "OS kernels are the core components of operating systems that:\n\n• **Manage hardware resources** (CPU, memory, storage)\n• **Provide system services** to applications\n• **Handle process scheduling** and multitasking\n• **Manage memory allocation** and protection\n• **Control device drivers** and hardware communication\n• **Enforce security** and access control\n\nExamples: Linux kernel, Windows NT kernel, macOS XNU kernel",
    "type": "operating-system",
    "tags": ["os"]
  },
  {
    "question": "What does SSH stand for and what does it mean?",
    "answer": "SSH stands for **Secure Shell**.\n\nIt's a network protocol that provides secure, encrypted communication between computers over an unsecured network. SSH allows you to:\n\n• **Remotely access** another computer\n• **Execute commands** on remote systems\n• **Transfer files** securely\n• **Tunnel network traffic**\n\nExample: `ssh username@hostname`",
    "type": "networking",
    "tags": ["ssh"]
  },
  {
    "question": "Explain the difference between interpreter and compiler.",
    "answer": "**Interpreter:**\n• Translates and executes code line by line\n• No separate compilation step\n• Slower execution but faster development\n• Examples: Python, JavaScript, Ruby\n\n**Compiler:**\n• Translates entire program to machine code before execution\n• Creates executable file\n• Faster execution but slower development\n• Examples: C, C++, Go, Rust\n\n**Hybrid (JIT):**\n• Compiles code at runtime\n• Examples: Java, C#",
    "type": "programming-concepts",
    "tags": ["programming"]
  },
  {
    "question": "What does EXE stand for?",
    "answer": "EXE stands for **Executable**.\n\nIt's a file extension used in Windows for executable files that contain machine code instructions that can be directly executed by the operating system.",
    "type": "file-formats",
    "tags": ["windows"]
  },
  {
    "question": "What does HTML stand for?",
    "answer": "HTML stands for **HyperText Markup Language**.\n\nIt's the standard markup language used to create and structure content on the World Wide Web. HTML uses tags to define elements like headings, paragraphs, links, images, etc.",
    "type": "html",
    "tags": ["html", "markup", "web", "hypertext"]
  },
  {
    "question": "Write the default HTML skeleton structure.",
    "answer": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n    \n</body>\n</html>\n```",
    "type": "html",
    "tags": ["html", "skeleton", "structure", "doctype"],
    "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>EVERMIND Test</title>\n</head>\n<body>\n    <h1>Welcome to EVERMIND</h1>\n    <p>This is a test HTML page.</p>\n</body>\n</html>"
  },
  {
    "question": "Why do we name files index.html?",
    "answer": "We name files `index.html` because:\n\n• **Default behavior** - Web servers automatically serve `index.html` when no specific file is requested\n• **Convention** - It's the standard name for the main/home page of a website\n• **User-friendly** - Visitors can access your site with just the domain name (e.g., `example.com` instead of `example.com/index.html`)\n• **SEO benefits** - Search engines recognize it as the primary page",
    "type": "html",
    "tags": ["html", "naming"]
  },
  {
    "question": "Explain how HTML indentation works with parent, sibling, child, and grandparent tags.",
    "answer": "**HTML Indentation Structure:**\n\n```html\n<html>                    <!-- Grandparent -->\n  <head>                  <!-- Parent of title -->\n    <title>Title</title>  <!-- Child of head, sibling of meta -->\n    <meta charset=\"UTF-8\"> <!-- Child of head, sibling of title -->\n  </head>                 <!-- Parent of title, child of html -->\n  <body>                  <!-- Parent of div, child of html -->\n    <div>                 <!-- Child of body, parent of p -->\n      <p>Text</p>         <!-- Child of div, grandchild of body -->\n    </div>\n  </body>\n</html>\n```\n\n• **Parent**: Contains other elements\n• **Child**: Nested inside another element\n• **Sibling**: Elements at the same level\n• **Grandparent**: Two levels up in the hierarchy",
    "type": "html",
    "tags": ["html", "structure"]
  },
  {
    "question": "What is the title tag used for and write a short code example?",
    "answer": "The `<title>` tag is used to:\n\n• **Set the browser tab title**\n• **Define the page title** for search engines\n• **Provide the title** when bookmarking\n• **Display in search results**\n\n**Example:**\n```html\n<title>Chuks Test</title>\n```\n\nThis will show \"Chuks Test\" in the browser tab and search results.",
    "type": "html",
    "tags": ["html", "seo"]
  },
  {
    "question": "What are meta charset and meta description used for and how do you write them?",
    "answer": "**Meta Charset:**\n• Defines the character encoding for the page\n• Prevents character display issues\n• **Code:** `<meta charset=\"UTF-8\">`\n\n**Meta Description:**\n• Provides a summary of the page content\n• Used by search engines in search results\n• **Code:** `<meta name=\"description\" content=\"Your page description here\">`\n\n**Example:**\n```html\n<meta charset=\"UTF-8\">\n<meta name=\"description\" content=\"Learn HTML basics with practical examples\">\n```",
    "type": "html",
    "tags": ["html", "meta", "seo"]
  },
  {
    "question": "How many types of headers are there in HTML and give an example?",
    "answer": "There are **6 types of headers** in HTML: `<h1>` through `<h6>`\n\n• `<h1>` - Most important (largest)\n• `<h2>` - Second level\n• `<h3>` - Third level\n• `<h4>` - Fourth level\n• `<h5>` - Fifth level\n• `<h6>` - Least important (smallest)\n\n**Example:**\n```html\n<h1>Main Title</h1>\n<h2>Section Title</h2>\n<h3>Subsection Title</h3>\n```",
    "type": "html",
    "tags": ["html", "headers"]
  },
  {
    "question": "How do you write a paragraph in HTML?",
    "answer": "Use the `<p>` tag to create paragraphs:\n\n```html\n<p>This is a paragraph of text.</p>\n<p>This is another paragraph.</p>\n```\n\nEach `<p>` tag creates a new paragraph with automatic spacing between them.",
    "type": "html",
    "tags": ["html", "text"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Paragraph Example</title>\n</head>\n<body>\n    <p>This is the first paragraph of text.</p>\n    <p>This is the second paragraph with more content.</p>\n    <p>Each paragraph appears on a new line with spacing.</p>\n</body>\n</html>"
  },
  {
    "question": "How do you make text both italic and bold in a paragraph?",
    "answer": "Use nested `<b>` and `<i>` tags:\n\n```html\n<p>This is <b><i>italic and bolded text</i></b> in a paragraph.</p>\n```\n\n**Alternative modern approach:**\n```html\n<p>This is <strong><em>italic and bolded text</em></strong> in a paragraph.</p>\n```\n\nNote: `<strong>` and `<em>` are preferred for semantic meaning.",
    "type": "html",
    "tags": ["html", "formatting"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Text Formatting</title>\n</head>\n<body>\n    <p>This is <b><i>italic and bolded text</i></b> in a paragraph.</p>\n    <p>This is <strong><em>modern semantic formatting</em></strong>.</p>\n    <p>Regular text with <b>bold</b> and <i>italic</i> separately.</p>\n</body>\n</html>"
  },
  {
    "question": "How do you create a new line in HTML?",
    "answer": "Use the `<br>` or `<br/>` tag:\n\n```html\n<p>This is the first line.<br>This is the second line.</p>\n```\n\n**Note:** `<br>` is a self-closing tag, so both `<br>` and `<br/>` work the same way.",
    "type": "html",
    "tags": ["html", "formatting"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Line Breaks</title>\n</head>\n<body>\n    <p>This is the first line.<br>This is the second line.</p>\n    <p>Line 1<br/>Line 2<br/>Line 3</p>\n    <p>Without br tags, everything stays on one line.</p>\n</body>\n</html>"
  },
  {
    "question": "How do you create a horizontal line in HTML?",
    "answer": "Use the `<hr>` or `<hr/>` tag:\n\n```html\n<p>Content above the line</p>\n<hr>\n<p>Content below the line</p>\n```\n\nThis creates a horizontal line that spans the width of its container.",
    "type": "html",
    "tags": ["html", "formatting"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Horizontal Lines</title>\n</head>\n<body>\n    <h1>Section 1</h1>\n    <p>Content above the line</p>\n    <hr>\n    <h2>Section 2</h2>\n    <p>Content below the line</p>\n    <hr/>\n    <h3>Section 3</h3>\n    <p>Another section after another line</p>\n</body>\n</html>"
  },
  {
    "question": "What is the git command to create a new branch?",
    "answer": "Use the `git switch -c` command:\n\n```bash\ngit switch -c <name-of-new-branch>\n```\n\n**Alternative methods:**\n```bash\n# Create and switch to new branch\ngit checkout -b <branch-name>\n\n# Just create branch (stay on current)\ngit branch <branch-name>\n```\n\n**Example:**\n```bash\ngit switch -c feature-login\n```",
    "type": "git",
    "tags": ["git", "branch"],
    "code": "# Create and switch to new branch\ngit switch -c feature-login\n\n# Alternative method\ngit checkout -b feature-login\n\n# Just create branch (stay on current)\ngit branch feature-login\n\n# Check current branch\ngit branch\n\n# Switch to existing branch\ngit switch main"
  },
  {
    "question": "How do you merge git branches?",
    "answer": "**To merge your branch into main:**\n\n```bash\n# Switch to main branch\ngit checkout main\n\n# Merge your branch\ngit merge new-branch-name\n\n# Push the changes\ngit push origin main\n```\n\n**Alternative (if using git switch):**\n```bash\ngit switch main\ngit merge feature-branch\ngit push origin main\n```",
    "type": "git",
    "tags": ["git", "merge"],
    "code": "# Switch to main branch\ngit checkout main\n\n# Merge your branch\ngit merge feature-login\n\n# Push the changes\ngit push origin main\n\n# Alternative using git switch\ngit switch main\ngit merge feature-login\ngit push origin main\n\n# Check merge status\ngit status"
  },
  {
    "question": "How do you make text big or small in HTML?",
    "answer": "Use the `<big>` and `<small>` tags:\n\n```html\n<p>This is <big>big text</big> and this is <small>small text</small>.</p>\n```\n\n**Note:** These tags are deprecated in HTML5. Modern approach uses CSS:\n```html\n<p>This is <span style=\"font-size: larger;\">big text</span> and this is <span style=\"font-size: smaller;\">small text</span>.</p>\n```",
    "type": "html",
    "tags": ["html", "formatting"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Text Size</title>\n</head>\n<body>\n    <p>This is <big>big text</big> and this is <small>small text</small>.</p>\n    <p>Modern approach: <span style=\"font-size: larger;\">larger text</span> and <span style=\"font-size: smaller;\">smaller text</span>.</p>\n    <p>Normal size text for comparison.</p>\n</body>\n</html>"
  },
  {
    "question": "What are subscript and superscript in HTML and give examples?",
    "answer": "**Subscript** (`<sub>`) - Text below the baseline\n**Superscript** (`<sup>`) - Text above the baseline\n\n**Examples:**\n```html\n<p>H<sub>2</sub>O (water molecule)</p>\n<p>E=mc<sup>2</sup> (Einstein's equation)</p>\n<p>2<sup>3</sup> = 8 (2 to the power of 3)</p>\n<p>CO<sub>2</sub> (carbon dioxide)</p>\n```",
    "type": "html",
    "tags": ["html", "formatting"],
    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Subscript and Superscript</title>\n</head>\n<body>\n    <h2>Chemistry Examples</h2>\n    <p>Water: H<sub>2</sub>O</p>\n    <p>Carbon dioxide: CO<sub>2</sub></p>\n    <p>Sulfuric acid: H<sub>2</sub>SO<sub>4</sub></p>\n    \n    <h2>Math Examples</h2>\n    <p>Einstein's equation: E=mc<sup>2</sup></p>\n    <p>Power of 2: 2<sup>3</sup> = 8</p>\n    <p>Square root: √<sup>2</sup></p>\n</body>\n</html>"
  },
  {
    "question": "How do you return to a previous commit in git?",
    "answer": "Use the `git reset --hard` command:\n\n```bash\ngit reset --hard <commit-hash>\n```\n\n**Example:**\n```bash\ngit reset --hard cef8caf\n```\n\n**Warning:** This permanently deletes all changes after that commit.\n\n**Safer alternative:**\n```bash\ngit reset --soft <commit-hash>  # Keeps changes staged\ngit reset --mixed <commit-hash>  # Keeps changes unstaged\n```",
    "type": "git",
    "tags": ["git", "reset"]
  },
  {
    "question": "How do you write comments in HTML?",
    "answer": "Use the `<!-- -->` syntax:\n\n```html\n<!-- This is a single-line comment -->\n\n<!--\n  This is a\n  multi-line comment\n-->\n\n<p>Visible content</p> <!-- Inline comment -->\n```\n\n**Note:** Comments are not displayed in the browser but are visible in the HTML source code.",
    "type": "html",
    "tags": ["html", "syntax"]
  },
  {
    "question": "How do you change the color of a paragraph in HTML?",
    "answer": "Use the `style` attribute with `color`:\n\n```html\n<p style=\"color: red;\">This text is red</p>\n<p style=\"color: blue;\">This text is blue</p>\n<p style=\"color: #ff0000;\">This text is red (hex)</p>\n```\n\n**Common colors:** red, blue, green, yellow, purple, orange, black, white",
    "type": "html",
    "tags": ["html", "css"]
  },
  {
    "question": "How do you change the background color of a paragraph in HTML?",
    "answer": "Use the `style` attribute with `background-color`:\n\n```html\n<p style=\"background-color: green;\">This paragraph has a green background</p>\n<p style=\"background-color: yellow;\">This paragraph has a yellow background</p>\n<p style=\"background-color: #00ff00;\">This paragraph has a green background (hex)</p>\n```\n\n**Note:** The correct property is `background-color`, not `backgrounf-color`.",
    "type": "html",
    "tags": ["html", "css"]
  },
  {
    "question": "How do you change the entire background color of a website?",
    "answer": "Add the `background-color` style to the `<body>` tag:\n\n```html\n<body style=\"background-color: lightblue;\">\n  <h1>My Website</h1>\n  <p>Content here</p>\n</body>\n```\n\n**Alternative using CSS:**\n```html\n<style>\n  body {\n    background-color: lightblue;\n  }\n</style>\n```",
    "type": "html",
    "tags": ["html", "css"]
  },
  {
    "question": "What is the proper format of HTML code with header, main, and footer?",
    "answer": "```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n    <header>\n        <h1>Website Header</h1>\n        <nav>Navigation links</nav>\n    </header>\n    \n    <main>\n        <h2>Main Content</h2>\n        <p>Your main content goes here</p>\n    </main>\n    \n    <footer>\n        <p>&copy; 2024 Your Website</p>\n    </footer>\n</body>\n</html>\n```",
    "type": "html",
    "tags": ["html", "semantic"]
  },
  {
    "question": "What HTML tag do you use for navigation items in the header?",
    "answer": "Use the `<nav>` tag for navigation items:\n\n```html\n<header>\n    <h1>My Website</h1>\n    <nav>\n        <a href=\"#home\">Home</a>\n        <a href=\"#about\">About</a>\n        <a href=\"#contact\">Contact</a>\n    </nav>\n</header>\n```\n\nThe `<nav>` tag semantically indicates that the content is for navigation purposes.",
    "type": "html",
    "tags": ["html", "semantic"]
  },
  {
    "question": "What HTML tag do you use for blog posts and how do you divide into sections?",
    "answer": "Use the `<article>` tag for blog posts and `<section>` tags to divide into sections:\n\n```html\n<article>\n    <h2>Blog Post Title</h2>\n    \n    <section>\n        <h3>Introduction</h3>\n        <p>Introduction content...</p>\n    </section>\n    \n    <section>\n        <h3>Main Content</h3>\n        <p>Main content...</p>\n    </section>\n    \n    <section>\n        <h3>Conclusion</h3>\n        <p>Conclusion content...</p>\n    </section>\n</article>\n```",
    "type": "html",
    "tags": ["html", "semantic"]
  },
  {
    "question": "What HTML tag do you use to show content that's not directly related to the main site?",
    "answer": "Use the `<aside>` tag for content not directly related to the main site:\n\n```html\n<main>\n    <article>\n        <h2>Main Article</h2>\n        <p>Main content...</p>\n    </article>\n    \n    <aside>\n        <h3>Related Links</h3>\n        <ul>\n            <li><a href=\"#\">Related Article 1</a></li>\n            <li><a href=\"#\">Related Article 2</a></li>\n        </ul>\n        \n        <h3>Advertisement</h3>\n        <p>Ad content...</p>\n    </aside>\n</main>\n```\n\nCommon uses: sidebars, advertisements, related links, author info.",
    "type": "html",
    "tags": ["html", "semantic"]
  },
  {
    "question": "Why might a website intentionally freeze when I open DevTools?",
    "answer": "Websites freeze DevTools to prevent debugging, reverse engineering, or code inspection. Common reasons:\n\n1. **Anti-debugging protection** - Prevents competitors from copying code\n2. **Security measures** - Protects sensitive algorithms or API keys\n3. **Performance monitoring** - DevTools can slow down the site\n4. **User experience** - Prevents users from accidentally breaking the site\n\n**How to bypass:**\n- Disable JavaScript\n- Use browser extensions\n- Inspect source code directly\n- Use mobile debugging tools",
    "type": "web-development",
    "tags": ["devtools", "debugging", "security"]
  },
  {
    "question": "What does the debugger command tell the browser to do?",
    "answer": "The `debugger` command tells the browser to:\n\n1. **Pause execution** at that exact line\n2. **Open DevTools** automatically (if not already open)\n3. **Enter debug mode** - you can inspect variables, step through code\n4. **Set breakpoint** - similar to clicking the line number in DevTools\n\n**Example:**\n```javascript\nfunction calculateTotal(items) {\n    let total = 0;\n    debugger; // Browser pauses here\n    for (let item of items) {\n        total += item.price;\n    }\n    return total;\n}\n```\n\n**Use cases:**\n- Debug complex functions\n- Inspect variable values\n- Step through code line by line",
    "type": "javascript",
    "tags": ["debugging", "devtools", "javascript"],
    "code": "function debugExample() {\n    let x = 10;\n    let y = 20;\n    debugger; // Browser pauses here\n    let result = x + y;\n    console.log(result);\n    return result;\n}\n\ndebugExample();"
  },
  {
    "question": "How to ping websites? Example: ping google.com",
    "answer": "**Windows Command:**\n```cmd\nping google.com\nping 8.8.8.8\n```\n\n**What ping does:**\n- Sends packets to test connectivity\n- Measures response time (latency)\n- Shows if website/server is reachable\n\n**Example output:**\n```\nPinging google.com [142.250.191.14] with 32 bytes of data:\nReply from 142.250.191.14: bytes=32 time=15ms TTL=54\nReply from 142.250.191.14: bytes=32 time=12ms TTL=54\n```\n\n**Useful options:**\n- `ping -t google.com` (continuous ping)\n- `ping -n 4 google.com` (send 4 packets)\n- `ping -l 1000 google.com` (send 1000 byte packets)",
    "type": "networking",
    "tags": ["ping", "networking", "command-line"]
  },
  {
    "question": "What's the difference between a port and a PID?",
    "answer": "**Port:**\n- Communication channel/endpoint\n- Like a door number (80, 443, 3000)\n- Used for network communication\n- Multiple processes can use same port (with different protocols)\n\n**PID (Process ID):**\n- Unique identifier for a running process\n- Like a person's ID number\n- Each process has only one PID\n- Used to identify and manage processes\n\n**Analogy:**\n- Port = Apartment building address (123 Main St)\n- PID = Specific apartment number (Apt 5B)\n\n**Example:**\n- Port 3000 = Web server communication channel\n- PID 1234 = The actual Node.js process using port 3000",
    "type": "networking",
    "tags": ["ports", "pid", "processes", "networking"]
  },
  {
    "question": "What does this command do? netstat -ano | findstr :8000",
    "answer": "**Command breakdown:**\n\n`netstat -ano`:\n- Shows all network connections\n- `-a` = all connections\n- `-n` = show addresses numerically\n- `-o` = show process ID (PID)\n\n`| findstr :8000`:\n- Filters results to only show port 8000\n- `|` = pipe (passes output to next command)\n- `findstr` = Windows search command\n\n**What it does:**\nFinds which process is using port 8000 and shows its PID\n\n**Example output:**\n```\nTCP    0.0.0.0:8000    0.0.0.0:0    LISTENING    1234\n```\n\n**Next step:**\nUse the PID (1234) to kill the process:\n`taskkill /PID 1234 /F`",
    "type": "command-line",
    "tags": ["netstat", "findstr", "ports", "windows"]
  },
  {
    "question": "Why does taskkill /PID 8000 /F fail?",
    "answer": "**The problem:**\nYou're trying to kill PID 8000, but 8000 is a **port number**, not a PID!\n\n**What happens:**\n- `taskkill /PID 8000 /F` looks for process with ID 8000\n- But 8000 is the port, not the process ID\n- Process might have PID 1234, 5678, etc.\n\n**Correct process:**\n1. **Find the PID:** `netstat -ano | findstr :8000`\n2. **Get the actual PID** (e.g., 1234)\n3. **Kill the process:** `taskkill /PID 1234 /F`\n\n**Remember:**\n- Port = communication channel (8000)\n- PID = process identifier (1234)\n- You kill processes (PIDs), not ports",
    "type": "command-line",
    "tags": ["taskkill", "pid", "ports", "troubleshooting"]
  },
  {
    "question": "What are the two steps to free a port that's in use?",
    "answer": "**Step 1: Find the PID using the port**\n```cmd\nnetstat -ano | findstr :8000\n```\n\n**Step 2: Kill the process using that PID**\n```cmd\ntaskkill /PID <PID_NUMBER> /F\n```\n\n**Complete example:**\n```cmd\n# Step 1: Find what's using port 3000\nnetstat -ano | findstr :3000\n# Output: TCP 0.0.0.0:3000 0.0.0.0:0 LISTENING 1234\n\n# Step 2: Kill process 1234\ntaskkill /PID 1234 /F\n# Output: SUCCESS: The process with PID 1234 has been terminated.\n```\n\n**Why this works:**\n- Ports are just communication channels\n- Processes are the actual programs\n- Kill the process → port becomes free",
    "type": "command-line",
    "tags": ["ports", "netstat", "taskkill", "troubleshooting"]
  },
  {
    "question": "How do you kill the process using port 8000?",
    "answer": "**Complete solution:**\n\n**Step 1:** Find the PID\n```cmd\nnetstat -ano | findstr :8000\n```\n\n**Step 2:** Kill the process\n```cmd\ntaskkill /PID <PID_FROM_STEP_1> /F\n```\n\n**Real example:**\n```cmd\n# Find process using port 8000\nnetstat -ano | findstr :8000\n# Output: TCP 0.0.0.0:8000 0.0.0.0:0 LISTENING 5678\n\n# Kill process 5678\ntaskkill /PID 5678 /F\n# Output: SUCCESS: The process with PID 5678 has been terminated.\n```\n\n**One-liner (if you know the PID):**\n```cmd\ntaskkill /PID 5678 /F\n```\n\n**Remember:**\n- Always find the PID first\n- Use `/F` for force kill\n- Port 8000 → Find PID → Kill PID",
    "type": "command-line",
    "tags": ["taskkill", "netstat", "ports", "processes"]
  },
  {
    "question": "How to check all files in a project? Use: dir",
    "answer": "**Windows Command:**\n```cmd\ndir\n```\n\n**What it shows:**\n- All files and folders in current directory\n- File sizes\n- Creation dates\n- File types\n\n**Useful variations:**\n```cmd\ndir /p          # Pause between screens\ndir /w          # Wide format\ndir *.js        # Show only .js files\ndir /s          # Show subdirectories too\ndir /a          # Show hidden files\n```\n\n**Example output:**\n```\nDirectory of C:\\MyProject\n\nindex.html    1,234 bytes  10/13/2025\nstyle.css     2,456 bytes  10/13/2025\nscript.js     3,789 bytes  10/13/2025\nREADME.md     456 bytes    10/13/2025\n```\n\n**Linux/Mac equivalent:**\n```bash\nls -la\n```",
    "type": "command-line",
    "tags": ["dir", "files", "directory", "windows"]
  },
  {
    "question": "How to check what's inside a file? Use: type filename",
    "answer": "**Windows Command:**\n```cmd\ntype filename.txt\ntype index.html\ntype script.js\n```\n\n**What it does:**\n- Displays the entire contents of a file\n- Shows text files in the terminal\n- Useful for quick file inspection\n\n**Example:**\n```cmd\ntype README.md\n```\n\n**Output:**\n```\n# My Project\nThis is a sample README file.\n\n## Features\n- Feature 1\n- Feature 2\n```\n\n**Useful for:**\n- Quick file preview\n- Checking file contents\n- Reading configuration files\n\n**Linux/Mac equivalent:**\n```bash\ncat filename\nless filename\nmore filename\n```",
    "type": "command-line",
    "tags": ["type", "files", "content", "windows"]
  },
  {
    "question": "What does 'git status porcelain' mean?",
    "answer": "**Git Status Porcelain:**\n\n**What it is:**\n- `git status --porcelain` gives machine-readable output\n- Designed for scripts and automation\n- Clean, consistent format\n\n**Regular git status:**\n```\nOn branch main\nChanges not staged for commit:\n  modified:   file.txt\n  new file:   newfile.js\n```\n\n**Porcelain format:**\n```\n M file.txt\n?? newfile.js\n```\n\n**Status codes:**\n- `M` = Modified\n- `A` = Added\n- `D` = Deleted\n- `??` = Untracked\n- `R` = Renamed\n\n**Why use it:**\n- Scripts can parse it easily\n- Consistent output format\n- No human-friendly text to filter out\n\n**Example:**\n```bash\ngit status --porcelain | grep \"^ M\"\n```",
    "type": "git",
    "tags": ["git", "status", "porcelain", "automation"]
  },
  {
    "question": "What is the Gobuster tool?",
    "answer": "**Gobuster:**\n\n**What it is:**\n- Directory/file brute-forcing tool\n- Written in Go programming language\n- Used for web application security testing\n\n**What it does:**\n- Discovers hidden directories and files\n- Brute-forces common web paths\n- Finds sensitive files (admin panels, config files)\n\n**Basic usage:**\n```bash\n# Directory brute-forcing\ngobuster dir -u http://target.com -w wordlist.txt\n\n# DNS subdomain enumeration\ngobuster dns -d target.com -w subdomains.txt\n\n# VHost enumeration\ngobuster vhost -u http://target.com -w vhosts.txt\n```\n\n**Common wordlists:**\n- `/usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt`\n- `/usr/share/wordlists/dirb/common.txt`\n\n**Example output:**\n```\n/admin (Status: 200)\n/config (Status: 403)\n/backup (Status: 200)\n```\n\n**Legal use only:**\n- Only test your own systems\n- Get permission before testing",
    "type": "security",
    "tags": ["gobuster", "security", "brute-force", "pentesting"]
  },
  {
    "question": "What is the Hydra tool?",
    "answer": "**Hydra:**\n\n**What it is:**\n- Password brute-forcing tool\n- Supports many protocols (HTTP, FTP, SSH, etc.)\n- Fast parallel attacks\n\n**What it does:**\n- Tests username/password combinations\n- Brute-forces login credentials\n- Supports various authentication methods\n\n**Basic usage:**\n```bash\n# HTTP form login\nhydra -l admin -P passwords.txt target.com http-post-form \"/login:username=^USER^&password=^PASS^:Invalid\"\n\n# SSH brute-force\nhydra -l root -P passwords.txt ssh://192.168.1.100\n\n# FTP brute-force\nhydra -l admin -P passwords.txt ftp://target.com\n```\n\n**Common options:**\n- `-l` = single username\n- `-L` = username list\n- `-p` = single password\n- `-P` = password list\n- `-t` = number of threads\n\n**Example:**\n```bash\nhydra -l admin -P /usr/share/wordlists/rockyou.txt -t 4 target.com http-post-form \"/login:user=^USER^&pass=^PASS^:Login failed\"\n```\n\n**Legal use only:**\n- Only test your own systems\n- Get permission before testing",
    "type": "security"
  },
  {
    "question": "How to add links in HTML?",
    "answer": "**Different types of links:**\n\n**Link to another website:**\n```html\n<a href=\"https://www.google.com\">Google Homepage</a>\n```\n\n**Link to another HTML file in project directory:**\n```html\n<a href=\"about.html\">About Page</a>\n```\n\n**Link to HTML file in different folder:**\n```html\n<a href=\"pages/contact.html\">Contact Page</a>\n```\n\n**Link to image in directory:**\n```html\n<a href=\"images/photo.jpg\">View Photo</a>\n```\n\n**Link to image outside HTML folder:**\n```html\n<a href=\"../assets/logo.png\">Company Logo</a>\n```\n\n**Important:** Always include `https://` for external websites!",
    "type": "html",
    "tags": ["html", "links", "anchors"]
  },
  {
    "question": "How to make links open in a new tab?",
    "answer": "Use `target=\"_blank\"` attribute:\n\n```html\n<a href=\"https://www.google.com\" target=\"_blank\">Google (New Tab)</a>\n```\n\n**What it does:**\n- Opens the link in a new browser tab\n- Keeps the original page open\n- Useful for external links",
    "type": "html",
    "tags": ["html", "links", "target"]
  },
  {
    "question": "How to create image tags in HTML?",
    "answer": "**Basic image tag:**\n```html\n<img src=\"image.jpg\" alt=\"Description\">\n```\n\n**Image from internet:**\n```html\n<img src=\"https://example.com/image.jpg\" alt=\"Online Image\">\n```\n\n**Image from directory:**\n```html\n<img src=\"images/photo.jpg\" alt=\"Local Photo\">\n```\n\n**With size control:**\n```html\n<img src=\"image.jpg\" alt=\"Description\" width=\"300\" height=\"200\">\n```\n\n**Important:** Always include `alt` attribute for accessibility!",
    "type": "html",
    "tags": ["html", "images", "alt"]
  },
  {
    "question": "How to edit image size in HTML?",
    "answer": "**Set both width and height:**\n```html\n<img src=\"image.jpg\" width=\"300\" height=\"200\" alt=\"Description\">\n```\n\n**Set only width (height auto-adjusts):**\n```html\n<img src=\"image.jpg\" width=\"300\" alt=\"Description\">\n```\n\n**Set only height (width auto-adjusts):**\n```html\n<img src=\"image.jpg\" height=\"200\" alt=\"Description\">\n```\n\n**Tips:**\n- You can check image dimensions before setting\n- Setting only one dimension maintains aspect ratio\n- `alt` is very important for accessibility",
    "type": "html",
    "tags": ["html", "images", "sizing"]
  },
  {
    "question": "How to add videos to HTML?",
    "answer": "**Basic video tag:**\n```html\n<video src=\"video.mp4\" controls width=\"400\"></video>\n```\n\n**With thumbnail (poster):**\n```html\n<video src=\"video.mp4\" poster=\"thumbnail.jpg\" controls width=\"400\"></video>\n```\n\n**Auto-play and loop:**\n```html\n<video src=\"video.mp4\" autoplay loop muted controls></video>\n```\n\n**Full example:**\n```html\n<video src=\"video.mp4\" poster=\"thumb.jpg\" controls width=\"500\" height=\"300\" autoplay loop muted>\n    Your browser doesn't support video.\n</video>\n```\n\n**Note:** Use `muted` with `autoplay` for browser compatibility",
    "type": "html",
    "tags": ["html", "video", "multimedia"]
  },
  {
    "question": "How to add YouTube videos to HTML?",
    "answer": "**Get embedded link from YouTube:**\n1. Go to YouTube video\n2. Click \"Share\" → \"Embed\"\n3. Copy the iframe code\n\n**Use the iframe code:**\n```html\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/VIDEO_ID\" frameborder=\"0\" allowfullscreen></iframe>\n```\n\n**Example:**\n```html\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/dQw4w9WgXcQ\" frameborder=\"0\" allowfullscreen></iframe>\n```\n\n**Same process as regular videos, just use the YouTube embed link!**",
    "type": "html",
    "tags": ["html", "youtube", "iframe"]
  },
  {
    "question": "How to create unordered lists in HTML?",
    "answer": "**Basic unordered list:**\n```html\n<ul>\n    <li>Item 1</li>\n    <li>Item 2</li>\n    <li>Item 3</li>\n</ul>\n```\n\n**With links:**\n```html\n<ul>\n    <li><a href=\"home.html\">Home</a></li>\n    <li><a href=\"about.html\">About</a></li>\n    <li><a href=\"contact.html\">Contact</a></li>\n</ul>\n```\n\n**When to use:**\n- Navigation menus\n- Feature lists\n- Any items without specific order\n- Bullet points",
    "type": "html",
    "tags": ["html", "lists", "navigation"]
  },
  {
    "question": "How to create ordered lists in HTML?",
    "answer": "**Basic ordered list:**\n```html\n<ol>\n    <li>First item</li>\n    <li>Second item</li>\n    <li>Third item</li>\n</ol>\n```\n\n**Different number formats:**\n```html\n<!-- Numbers (default) -->\n<ol type=\"1\">\n    <li>Item 1</li>\n    <li>Item 2</li>\n</ol>\n\n<!-- Letters -->\n<ol type=\"A\">\n    <li>Item A</li>\n    <li>Item B</li>\n</ol>\n\n<!-- Roman numerals -->\n<ol type=\"I\">\n    <li>Item I</li>\n    <li>Item II</li>\n</ol>\n```\n\n**When to use:**\n- Step-by-step instructions\n- Rankings\n- Any items with specific order",
    "type": "html",
    "tags": ["html", "lists", "ordered"]
  },
  {
    "question": "How to create description lists in HTML?",
    "answer": "**Description list structure:**\n```html\n<dl>\n    <dt>Term 1</dt>\n    <dd>Description of term 1</dd>\n    \n    <dt>Term 2</dt>\n    <dd>Description of term 2</dd>\n</dl>\n```\n\n**Example:**\n```html\n<dl>\n    <dt>HTML</dt>\n    <dd>HyperText Markup Language - used for web pages</dd>\n    \n    <dt>CSS</dt>\n    <dd>Cascading Style Sheets - used for styling</dd>\n    \n    <dt>JavaScript</dt>\n    <dd>Programming language for web interactivity</dd>\n</dl>\n```\n\n**When to use:**\n- Glossaries\n- Definitions\n- Terms with descriptions\n- FAQ sections",
    "type": "html",
    "tags": ["html", "lists", "descriptions"]
  },
  {
    "question": "How to create tables in HTML?",
    "answer": "**Basic table:**\n```html\n<table>\n    <tr>\n        <td>Cell 1</td>\n        <td>Cell 2</td>\n    </tr>\n    <tr>\n        <td>Cell 3</td>\n        <td>Cell 4</td>\n    </tr>\n</table>\n```\n\n**With headers:**\n```html\n<table>\n    <caption>Student Grades</caption>\n    <tr>\n        <th>Name</th>\n        <th>Math</th>\n        <th>Science</th>\n    </tr>\n    <tr>\n        <td>John</td>\n        <td>85</td>\n        <td>90</td>\n    </tr>\n</table>\n```\n\n**With formatting:**\n```html\n<table>\n    <thead>\n        <tr><th>Header 1</th><th>Header 2</th></tr>\n    </thead>\n    <tbody>\n        <tr><td>Data 1</td><td>Data 2</td></tr>\n    </tbody>\n</table>\n```",
    "type": "html",
    "tags": ["html", "tables", "data"]
  },
  {
    "question": "How to make table cells span multiple columns?",
    "answer": "Use `colspan` attribute:\n\n```html\n<table>\n    <tr>\n        <th>Name</th>\n        <th>Subject</th>\n        <th>Grade</th>\n    </tr>\n    <tr>\n        <td>John</td>\n        <td colspan=\"2\">Math - A</td>\n    </tr>\n    <tr>\n        <td>Jane</td>\n        <td>Science</td>\n        <td>B+</td>\n    </tr>\n</table>\n```\n\n**What `colspan=\"2\"` does:**\n- Makes the cell span 2 columns\n- Useful for headers that cover multiple columns\n- Adjusts the table layout automatically",
    "type": "html",
    "tags": ["html", "tables", "colspan"]
  },
  {
    "question": "What's the difference between inline and block elements?",
    "answer": "**Inline Elements:**\n- Stay next to each other on the same line\n- Only take up as much space as needed\n- Examples: `<a>`, `<span>`, `<img>`, `<strong>`\n\n```html\n<a href=\"#\">Link 1</a>\n<a href=\"#\">Link 2</a>\n<!-- These stay on the same line -->\n```\n\n**Block Elements:**\n- Take up the entire width of their container\n- Start on a new line\n- Examples: `<p>`, `<div>`, `<h1>`, `<ul>`\n\n```html\n<p>Paragraph 1</p>\n<p>Paragraph 2</p>\n<!-- These are on separate lines -->\n```\n\n**Containers:**\n- `<span>` = inline container\n- `<div>` = block container\n\nBoth can be used to group and style content!",
    "type": "html",
    "tags": ["html", "inline", "block", "elements"]
  },
  {
    "question": "How to create different input types in HTML forms?",
    "answer": "**Text inputs:**\n```html\n<!-- Text -->\n<input type=\"text\" placeholder=\"Enter your name\">\n\n<!-- Password -->\n<input type=\"password\" placeholder=\"Enter password\">\n\n<!-- Email -->\n<input type=\"email\" placeholder=\"Enter email\">\n\n<!-- Phone -->\n<input type=\"tel\" placeholder=\"Enter phone number\">\n\n<!-- Date -->\n<input type=\"date\">\n\n<!-- Number -->\n<input type=\"number\" min=\"1\" max=\"100\">\n\n<!-- Range -->\n<input type=\"range\" min=\"0\" max=\"100\">\n\n<!-- File -->\n<input type=\"file\">\n\n<!-- Checkbox -->\n<input type=\"checkbox\" id=\"agree\">\n<label for=\"agree\">I agree</label>\n\n<!-- Radio buttons -->\n<input type=\"radio\" name=\"gender\" value=\"male\"> Male\n<input type=\"radio\" name=\"gender\" value=\"female\"> Female\n\n<!-- Button -->\n<input type=\"submit\" value=\"Submit\">\n```\n\n**Default values:**\n```html\n<input type=\"text\" value=\"Default text\">\n```\n\n**Note:** Radio buttons with the same `name` allow only one selection!",
    "type": "html",
    "tags": ["html", "forms", "input", "validation"]
  },
  {
    "question": "What is a textarea used for in HTML?",
    "answer": "**Textarea is used for:**\n- Multi-line text input\n- Comments, messages, descriptions\n- Longer text that doesn't fit in regular input\n\n**How to write it:**\n```html\n<textarea rows=\"4\" cols=\"50\" placeholder=\"Enter your message here...\"></textarea>\n```\n\n**With default text:**\n```html\n<textarea rows=\"4\" cols=\"50\">Default message text</textarea>\n```\n\n**Attributes:**\n- `rows` = number of visible lines\n- `cols` = number of visible characters per line\n- `placeholder` = hint text\n- `maxlength` = maximum characters allowed\n\n**Example:**\n```html\n<label for=\"comment\">Your Comment:</label>\n<textarea id=\"comment\" name=\"comment\" rows=\"5\" cols=\"40\" placeholder=\"Write your comment here...\"></textarea>\n```",
    "type": "html",
    "tags": ["html", "forms", "textarea", "multiline"]
  },
  {
    "question": "What is a form in HTML and how to write it?",
    "answer": "**What forms are used for:**\n- Collecting user input\n- Submitting data to servers\n- User registration, contact forms, surveys\n\n**Basic form structure:**\n```html\n<form action=\"submit.php\" method=\"POST\">\n    <label for=\"name\">Name:</label>\n    <input type=\"text\" id=\"name\" name=\"name\" required>\n    \n    <label for=\"email\">Email:</label>\n    <input type=\"email\" id=\"email\" name=\"email\" required>\n    \n    <label for=\"message\">Message:</label>\n    <textarea id=\"message\" name=\"message\" rows=\"4\"></textarea>\n    \n    <input type=\"submit\" value=\"Send Message\">\n</form>\n```\n\n**Form attributes:**\n- `action` = where to send the data\n- `method` = GET or POST\n- `required` = makes field mandatory\n\n**Example with different inputs:**\n```html\n<form action=\"process.php\" method=\"POST\">\n    <input type=\"text\" name=\"username\" placeholder=\"Username\">\n    <input type=\"password\" name=\"password\" placeholder=\"Password\">\n    <input type=\"checkbox\" name=\"remember\"> Remember me\n    <input type=\"submit\" value=\"Login\">\n</form>\n```",
    "type": "html",
    "tags": ["html", "forms", "submission", "data"]
  },
  {
    "question": "What is an iframe in HTML?",
    "answer": "**What iframe does:**\n- Embeds another webpage inside your page\n- Creates a \"window\" to another site\n- Useful for videos, maps, external content\n\n**Basic iframe:**\n```html\n<iframe src=\"https://www.example.com\" width=\"600\" height=\"400\" frameborder=\"0\"></iframe>\n```\n\n**With fallback text:**\n```html\n<iframe src=\"https://www.example.com\" width=\"600\" height=\"400\" frameborder=\"0\">\n    Your browser doesn't support iframes.\n</iframe>\n```\n\n**Common uses:**\n- YouTube videos\n- Google Maps\n- External widgets\n- Embedded content\n\n**Important:**\n- Some websites block iframe embedding (like Amazon)\n- Always include fallback text\n- Use `frameborder=\"0\"` for cleaner look\n\n**Example:**\n```html\n<iframe src=\"https://www.google.com/maps/embed?pb=...\" width=\"400\" height=\"300\" frameborder=\"0\" allowfullscreen></iframe>\n```",
    "type": "html",
    "tags": ["html", "iframe", "embedding", "external"]
  },
  {
    "question": "What are meta tags in HTML?",
    "answer": "**Meta tags provide information about the webpage:**\n\n**Character encoding:**\n```html\n<meta charset=\"UTF-8\">\n```\n\n**Page description:**\n```html\n<meta name=\"description\" content=\"This is a great website about programming\">\n```\n\n**Author information:**\n```html\n<meta name=\"author\" content=\"John Doe\">\n```\n\n**Keywords for SEO:**\n```html\n<meta name=\"keywords\" content=\"html, css, javascript, web development\">\n```\n\n**Viewport for mobile:**\n```html\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n```\n\n**Complete example:**\n```html\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"description\" content=\"Learn HTML, CSS, and JavaScript\">\n    <meta name=\"author\" content=\"Web Developer\">\n    <meta name=\"keywords\" content=\"html, css, javascript\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>My Website</title>\n</head>\n```\n\n**Purpose:**\n- SEO optimization\n- Browser compatibility\n- Mobile responsiveness\n- Search engine information",
    "type": "html",
    "tags": ["html", "meta", "seo", "head"]
  },
  {
    "question": "What is the difference between Git and GitHub?",
    "answer": "**Git:**\n- Free, open-source version control system\n- Runs on your local computer\n- Tracks changes in your code\n- Command-line tool\n\n**GitHub:**\n- Online platform that hosts Git repositories\n- Web-based service\n- Provides collaboration features\n- Stores your code in the cloud\n\n**Analogy:**\n- Git = The engine of a car (does the work)\n- GitHub = The garage where you park the car (stores it)\n\n**Git manages your code changes locally**\n**GitHub stores and shares your code online**\n\n**Think of it like:**\n- Git = Your personal filing system\n- GitHub = The shared office where everyone can access files",
    "type": "git",
    "tags": ["git", "github", "version-control", "collaboration"]
  },
  {
    "question": "What is Git?",
    "answer": "**Git is:**\n- A free, open-source version control system\n- A tool that tracks changes in your code\n- Created by Linus Torvalds (Linux creator)\n- Used by developers worldwide\n\n**What Git does:**\n- Saves snapshots of your code\n- Tracks who made what changes\n- Allows you to go back to previous versions\n- Helps manage different versions of your project\n\n**Think of Git like:**\n- A time machine for your code\n- A backup system that remembers every change\n- A collaboration tool for teams\n\n**Why use Git:**\n- Never lose your work\n- Work with others easily\n- Experiment without fear\n- Keep track of project history",
    "type": "git",
    "tags": ["git", "version-control", "tracking", "history"]
  },
  {
    "question": "What is version control?",
    "answer": "**Version control is:**\nThe management of changes to documents, computer programs, large websites, and other collections of information.\n\n**What it does:**\n- Tracks every change you make\n- Saves different versions of your work\n- Allows you to go back to any previous version\n- Helps teams work together without conflicts\n\n**Real-world analogy:**\n- Like saving different drafts of a document\n- Like having multiple backup copies\n- Like a timeline of all your changes\n\n**Benefits:**\n- Never lose your work\n- See what changed and when\n- Work with others safely\n- Experiment without fear\n\n**Examples:**\n- Google Docs (saves versions automatically)\n- Microsoft Word (track changes)\n- Git (for code)\n\n**Version control = Time travel for your files!**",
    "type": "git",
    "tags": ["version-control", "tracking", "history", "management"]
  },
  {
    "question": "Explain these Git terms simply:",
    "answer": "**Directory:**\nA folder on your computer that contains files and other folders.\n\n**Terminal/Command Line:**\nA text-based way to interact with your computer (like talking to your computer with text commands).\n\n**CLI:**\nCommand Line Interface - another name for terminal/command line.\n\n**cd (Change Directory):**\nCommand to move between folders: `cd folder-name`\n\n**Code Editor:**\nA program for writing code (like VS Code, Sublime Text, Atom).\n\n**Repository:**\nA project folder that Git is tracking (contains your code and Git history).\n\n**GitHub:**\nOnline platform where you can store and share your Git repositories.\n\n**README.md:**\nA file that explains what your project is about (like a project description).",
    "type": "git",
    "tags": ["git", "terminology", "basics", "concepts"]
  },
  {
    "question": "Explain these Git commands simply:",
    "answer": "**Clone:**\n`git clone` - Downloads a copy of a repository from GitHub to your computer.\n\n**Add:**\n`git add` - Tells Git to start tracking changes in your files (stages them).\n\n**Commit:**\n`git commit` - Saves your changes with a message (like saving a snapshot).\n\n**Push:**\n`git push` - Uploads your local changes to GitHub (sends your work to the cloud).\n\n**Pull:**\n`git pull` - Downloads the latest changes from GitHub to your computer.\n\n**Simple workflow:**\n1. `git add .` (stage changes)\n2. `git commit -m \"message\"` (save snapshot)\n3. `git push` (upload to GitHub)\n\n**Think of it like:**\n- Add = Put items in a box\n- Commit = Seal the box with a label\n- Push = Send the box to storage\n- Pull = Get the latest box from storage",
    "type": "git",
    "tags": ["git", "commands", "workflow", "basics"]
  },
  {
    "question": "How to check if Git is installed?",
    "answer": "**Command:**\n```bash\ngit --version\n```\n\n**What it shows:**\n- If Git is installed: Shows version number (e.g., `git version 2.34.1`)\n- If Git is NOT installed: Shows error message\n\n**Example output:**\n```bash\n$ git --version\ngit version 2.34.1\n```\n\n**If Git is not installed:**\n- Download from: https://git-scm.com/\n- Install the program\n- Restart your terminal\n- Run `git --version` again\n\n**This is the first command to run when learning Git!**",
    "type": "git",
    "tags": ["git", "installation", "check", "version"]
  },
  {
    "question": "How to show hidden files in directory?",
    "answer": "**Command:**\n```bash\nls -la\n```\n\n**What it does:**\n- `ls` = list files\n- `-l` = long format (shows details)\n- `-a` = all files (including hidden ones)\n\n**What you'll see:**\n- Regular files and folders\n- Hidden files (starting with `.`)\n- File permissions, sizes, dates\n\n**Example output:**\n```bash\n$ ls -la\ndrwxr-xr-x  user  staff  4096 Oct 13 10:30 .\ndrwxr-xr-x  user  staff  4096 Oct 13 10:30 ..\n-rw-r--r--  user  staff   123 Oct 13 10:30 .gitignore\n-rw-r--r--  user  staff   456 Oct 13 10:30 index.html\n```\n\n**Hidden files start with a dot (.)**\n- `.git` = Git repository folder\n- `.gitignore` = Files to ignore\n- `.env` = Environment variables",
    "type": "git",
    "tags": ["git", "files", "hidden", "directory"]
  },
  {
    "question": "How to check files that haven't been committed yet?",
    "answer": "**Command:**\n```bash\ngit status\n```\n\n**What it shows:**\n- Files that are modified but not staged\n- Files that are staged but not committed\n- Files that are untracked (new files)\n\n**Example output:**\n```bash\n$ git status\nOn branch main\nChanges not staged for commit:\n  modified:   index.html\n  modified:   style.css\n\nUntracked files:\n  new-file.js\n\nChanges to be committed:\n  modified:   README.md\n```\n\n**What the colors mean:**\n- **Red** = Modified but not staged\n- **Green** = Staged and ready to commit\n- **Untracked** = New files Git doesn't know about\n\n**This is your Git dashboard - shows what's changed!**",
    "type": "git",
    "tags": ["git", "status", "tracking", "changes"]
  },
  {
    "question": "How to add files in Git?",
    "answer": "**Add individual file:**\n```bash\ngit add filename.html\n```\n\n**Add all files:**\n```bash\ngit add .\n```\n\n**Examples:**\n```bash\n# Add specific file\ngit add index.html\n\n# Add all files in current directory\ngit add .\n\n# Add all HTML files\ngit add *.html\n\n# Add all files in a folder\ngit add css/\n```\n\n**What `git add` does:**\n- Stages files for commit\n- Tells Git \"I want to save these changes\"\n- Prepares files to be committed\n\n**Think of it like:**\n- Putting items in a shopping cart\n- Selecting files to save\n- Preparing for checkout (commit)\n\n**After `git add`, use `git commit` to save!**",
    "type": "git",
    "tags": ["git", "add", "staging", "files"]
  },
  {
    "question": "How does the /folder/ path work to move between files?",
    "answer": "**Path navigation explained:**\n\n**Current directory:**\n```bash\n.\n```\n\n**Parent directory (go up one level):**\n```bash\n..\n```\n\n**Examples:**\n```bash\n# Go to parent directory\ncd ..\n\n# Go to grandparent directory\ncd ../..\n\n# Go to sibling directory\ncd ../sibling-folder\n\n# Go to specific path\ncd ../demo-repo2\n```\n\n**Real-world analogy:**\n- Think of folders like rooms in a house\n- `.` = current room\n- `..` = parent room (one level up)\n- `../..` = grandparent room (two levels up)\n\n**File structure example:**\n```\nhome/\n├── user/\n│   ├── project1/\n│   └── project2/\n└── documents/\n```\n\n**From project1 to project2:**\n```bash\ncd ../project2\n```\n\n**From project1 to documents:**\n```bash\ncd ../../documents\n```",
    "type": "git",
    "tags": ["git", "paths", "navigation", "directories"]
  },
  {
    "question": "How to solve 'origin does not appear to be a git repo' error?",
    "answer": "**The error means:**\nGit doesn't know where to send your code (no remote repository set up).\n\n**How to solve:**\n\n**Step 1: Create repository on GitHub**\n- Go to GitHub.com\n- Click \"New repository\"\n- Give it a name\n- Click \"Create repository\"\n\n**Step 2: Copy the repository URL**\n- Copy the HTTPS or SSH URL from GitHub\n- Example: `https://github.com/username/repo-name.git`\n\n**Step 3: Connect your local repo to GitHub**\n```bash\ngit remote add origin https://github.com/username/repo-name.git\n```\n\n**Step 4: Verify it worked**\n```bash\ngit remote -v\n```\n\n**Step 5: Push your code**\n```bash\ngit push -u origin main\n```\n\n**What this does:**\n- `remote add origin` = tells Git where GitHub repo is\n- `remote -v` = shows connected repositories\n- `push -u origin main` = uploads code and sets default branch",
    "type": "git",
    "tags": ["git", "error", "origin", "remote", "github"]
  },
  {
    "question": "How to set shortcut so you don't always type 'origin main'?",
    "answer": "**Use the `-u` flag:**\n```bash\ngit push -u origin main\n```\n\n**What `-u` does:**\n- Sets up tracking between local and remote branch\n- Creates a shortcut for future pushes\n- Links your local `main` branch to `origin/main`\n\n**After using `-u` once:**\n```bash\n# Instead of this:\ngit push origin main\n\n# You can just do:\ngit push\n```\n\n**Same works for pull:**\n```bash\n# Instead of:\ngit pull origin main\n\n# You can do:\ngit pull\n```\n\n**Think of `-u` as:**\n- Setting up a \"favorite\" connection\n- Creating a shortcut\n- Telling Git \"remember this connection\"\n\n**One-time setup, then simple commands forever!**",
    "type": "git",
    "tags": ["git", "shortcut", "upstream", "tracking"]
  },
  {
    "question": "How to switch between branches and check differences?",
    "answer": "**Switch to existing branch:**\n```bash\ngit checkout branch-name\n```\n\n**Create and switch to new branch:**\n```bash\ngit checkout -b new-branch-name\n```\n\n**Check differences between branches:**\n```bash\ngit diff feature-branch\n```\n\n**Examples:**\n```bash\n# Switch to main branch\ngit checkout main\n\n# Switch to feature branch\ngit checkout feature-login\n\n# Create new branch\ngit checkout -b feature-signup\n\n# See what's different\ngit diff main\n```\n\n**What `git diff` shows:**\n- Lines added (+)\n- Lines removed (-)\n- Files that changed\n- Detailed differences\n\n**Think of branches like:**\n- Different versions of your project\n- Parallel universes\n- Separate workspaces\n\n**Use `git branch` to see all branches!**",
    "type": "git",
    "tags": ["git", "branches", "switching", "differences"]
  },
  {
    "question": "What is a Pull Request (PR) and how does it work?",
    "answer": "**What is a Pull Request:**\nA way to propose changes to a project and get them reviewed before merging.\n\n**Sample scenario:**\n\n**1. You make changes:**\n```bash\ngit checkout -b feature-login\ngit add .\ngit commit -m \"Add login form\"\ngit push origin feature-login\n```\n\n**2. Create PR on GitHub:**\n- Go to your repository\n- Click \"Compare & pull request\"\n- Add description of changes\n- Click \"Create pull request\"\n\n**3. Team reviews:**\n- Others can see your changes\n- Leave comments and suggestions\n- Approve or request changes\n\n**4. Merge the PR:**\n- Once approved, merge into main branch\n- Your changes become part of the project\n\n**Why use PRs:**\n- Code review before merging\n- Discussion about changes\n- Quality control\n- Team collaboration\n\n**Think of PR as:**\n- Asking permission to add your changes\n- Getting feedback before finalizing\n- Professional way to contribute",
    "type": "git",
    "tags": ["git", "pull-request", "collaboration", "review"]
  },
  {
    "question": "How to delete branches in Git?",
    "answer": "**Delete local branch:**\n```bash\ngit branch -d branch-name\n```\n\n**Force delete (if branch has unmerged changes):**\n```bash\ngit branch -D branch-name\n```\n\n**Delete remote branch:**\n```bash\ngit push origin --delete branch-name\n```\n\n**Examples:**\n```bash\n# Delete local feature branch\ngit branch -d feature-login\n\n# Force delete (careful!)\ngit branch -D old-feature\n\n# Delete remote branch\ngit push origin --delete feature-signup\n```\n\n**What happens:**\n- `-d` = safe delete (only if merged)\n- `-D` = force delete (even if not merged)\n- Remote delete = removes from GitHub\n\n**Best practice:**\n- Delete branches after merging\n- Keep main branches (main, develop)\n- Clean up old feature branches\n\n**Think of it like:**\n- Throwing away old drafts\n- Cleaning up your workspace\n- Keeping only what you need",
    "type": "git",
    "tags": ["git", "branches", "delete", "cleanup"]
  },
  {
    "question": "What is the shortcut to upload modified files to Git?",
    "answer": "**Shortcut command:**\n```bash\ngit commit -am \"Your message\"\n```\n\n**What `-am` does:**\n- `-a` = automatically add all modified files\n- `-m` = add commit message\n- Skips the `git add` step\n\n**Regular way:**\n```bash\ngit add .\ngit commit -m \"Your message\"\n```\n\n**Shortcut way:**\n```bash\ngit commit -am \"Your message\"\n```\n\n**Important:**\n- Only works for **modified** files\n- Does NOT add **new** files\n- For new files, still need `git add`\n\n**Examples:**\n```bash\n# Modified existing files\ngit commit -am \"Fixed login bug\"\n\n# New files need separate add\ngit add new-file.js\ngit commit -m \"Added new feature\"\n```\n\n**Think of `-am` as:**\n- \"Add and commit modified files\"\n- One-step process for changes\n- Time saver for quick updates",
    "type": "git",
    "tags": ["git", "shortcut", "commit", "modified"]
  },
  {
    "question": "How to undo staging in Git?",
    "answer": "**Undo staging for single file:**\n```bash\ngit reset filename\n```\n\n**Undo staging for all files:**\n```bash\ngit reset\n```\n\n**Examples:**\n```bash\n# Unstage specific file\ngit reset index.html\n\n# Unstage all files\ngit reset\n\n# Unstage all files in directory\ngit reset css/\n```\n\n**What `git reset` does:**\n- Removes files from staging area\n- Files go back to \"modified\" status\n- Changes are still there, just not staged\n\n**Before reset:**\n```bash\n$ git status\nChanges to be committed:\n  modified:   index.html\n  modified:   style.css\n```\n\n**After `git reset index.html`:**\n```bash\n$ git status\nChanges to be committed:\n  modified:   style.css\n\nChanges not staged for commit:\n  modified:   index.html\n```\n\n**Think of it like:**\n- Taking items out of shopping cart\n- Unchecking files you don't want to commit\n- Going back to \"modified\" status",
    "type": "git",
    "tags": ["git", "reset", "unstage", "undo"]
  },
  {
    "question": "How to undo a commit in Git?",
    "answer": "**Undo last commit (keep changes):**\n```bash\ngit reset HEAD~1\n```\n\n**Undo last commit (discard changes):**\n```bash\ngit reset --hard HEAD~1\n```\n\n**What this means:**\n- `HEAD~1` = go back one commit\n- `--hard` = also discard all changes\n- Without `--hard` = keep changes but unstage them\n\n**Examples:**\n```bash\n# Undo last commit, keep changes\ngit reset HEAD~1\n\n# Undo last commit, lose all changes\ngit reset --hard HEAD~1\n\n# Undo last 2 commits\ngit reset HEAD~2\n```\n\n**What happens:**\n- Commit is removed from history\n- Files go back to previous state\n- `--hard` = changes are lost forever\n- Without `--hard` = changes become unstaged\n\n**Be careful with `--hard`!**\n- It permanently deletes your changes\n- Use only if you're sure\n- Consider `git stash` to save changes first\n\n**Think of it like:**\n- Undoing the last save\n- Going back in time\n- `--hard` = throwing away your work",
    "type": "git",
    "tags": ["git", "reset", "undo", "commit", "history"]
  },
  {
    "question": "What is forking code and give a simple analogy?",
    "answer": "**What is forking:**\nCreating your own copy of someone else's project that you can modify independently.\n\n**Simple analogy:**\n**Forking is like photocopying a recipe book:**\n\n1. **Original recipe book** = Someone else's project on GitHub\n2. **Photocopy the book** = Fork their repository\n3. **Your copy** = You can now modify recipes without affecting the original\n4. **Make changes** = Add your own recipes or modify existing ones\n5. **Share back** = Send your improvements back to the original author\n\n**Real example:**\n- You find a cool open-source project on GitHub\n- You fork it (copy to your account)\n- You make improvements or add features\n- You can submit a pull request to share your changes\n\n**Why fork:**\n- Contribute to open-source projects\n- Use someone's code as a starting point\n- Experiment without affecting the original\n- Learn from other people's code\n\n**Fork = Personal copy you can modify!**",
    "type": "git",
    "tags": ["git", "forking", "copying", "collaboration"]
  },
  {
    "question": "When should you encode passwords?",
    "answer": "**Always encode passwords when:**\n- Storing them in databases\n- Sending them over networks\n- Comparing them for login\n- Handling them in any way\n\n**Never store passwords in plain text!**\n\n**Common encoding methods:**\n- **Hashing** (one-way, can't be reversed)\n- **Encryption** (two-way, can be decrypted)\n- **Salting** (adds random data before hashing)\n\n**Examples:**\n```javascript\n// BAD - Never do this!\npassword = \"mypassword123\"\n\n// GOOD - Hash the password\nhashedPassword = hash(\"mypassword123\")\n```\n\n**Why encode:**\n- Security if database is compromised\n- Protection against data breaches\n- Industry best practice\n- User privacy protection\n\n**Think of it like:**\n- Putting money in a safe instead of leaving it out\n- Locking your house when you leave\n- Basic security measure\n\n**Rule: If it's a password, encode it!**",
    "type": "security",
    "tags": ["security", "passwords", "hashing", "encryption"]
  },
  {
    "question": "How to kill a Node.js process?",
    "answer": "**Windows command:**\n```cmd\ntaskkill /F /IM node.exe\n```\n\n**What this does:**\n- `taskkill` = terminate processes\n- `/F` = force kill (no confirmation)\n- `/IM node.exe` = target Node.js processes\n\n**Alternative methods:**\n\n**Find and kill specific process:**\n```cmd\n# Find Node processes\ntasklist | findstr node\n\n# Kill specific process by PID\ntaskkill /F /PID 1234\n```\n\n**Using PowerShell:**\n```powershell\nGet-Process node | Stop-Process -Force\n```\n\n**Why you might need this:**\n- Server won't stop normally\n- Port is still in use\n- Node process is stuck\n- Need to restart development server\n\n**Common scenario:**\n- You start a server with `npm start`\n- It gets stuck or won't stop\n- Use `taskkill /F /IM node.exe` to force stop\n\n**Think of it like:**\n- Force-quitting an unresponsive app\n- Emergency stop button\n- Nuclear option for stuck processes",
    "type": "nodejs",
    "tags": ["nodejs", "process", "kill", "windows"]
  },
  {
    "question": "What is dotenv?",
    "answer": "**What dotenv is:**\nA package that loads environment variables from a `.env` file into your application.\n\n**What it does:**\n- Reads variables from `.env` file\n- Makes them available in your code\n- Keeps sensitive data separate from code\n\n**How to use:**\n\n**1. Install dotenv:**\n```bash\nnpm install dotenv\n```\n\n**2. Create .env file:**\n```env\nDATABASE_URL=mongodb://localhost:27017/myapp\nAPI_KEY=your-secret-key-here\nPORT=3000\n```\n\n**3. Load in your code:**\n```javascript\nrequire('dotenv').config();\n\n// Now you can use:\nconst dbUrl = process.env.DATABASE_URL;\nconst apiKey = process.env.API_KEY;\nconst port = process.env.PORT;\n```\n\n**Why use dotenv:**\n- Keep secrets out of your code\n- Different settings for different environments\n- Easy to change without editing code\n- Security best practice\n\n**Think of .env like:**\n- A settings file\n- A configuration file\n- A way to store secrets safely\n\n**Never commit .env files to Git!**",
    "type": "nodejs",
    "tags": ["nodejs", "dotenv", "environment", "variables"]
  },
  {
    "question": "What does '$ echo %port%' do?",
    "answer": "**What it does:**\nDisplays the value of the `PORT` environment variable.\n\n**Command breakdown:**\n- `echo` = print/display text\n- `%port%` = Windows environment variable syntax\n- Shows the current value of PORT variable\n\n**Examples:**\n```cmd\n# If PORT=3000\necho %port%\n# Output: 3000\n\n# If PORT is not set\necho %port%\n# Output: %port%\n```\n\n**Common use cases:**\n- Check what port your app is using\n- Debug environment variables\n- Verify configuration\n\n**In different systems:**\n- **Windows:** `echo %PORT%`\n- **Linux/Mac:** `echo $PORT`\n- **PowerShell:** `echo $env:PORT`\n\n**Real example:**\n```cmd\n# Check if port is set\necho %PORT%\n\n# Set port if not set\nset PORT=3000\necho %PORT%\n```\n\n**Think of it like:**\n- Checking a setting\n- Reading a configuration value\n- Debugging environment variables\n\n**Useful for troubleshooting!**",
    "type": "command-line",
    "tags": ["command-line", "environment", "variables", "windows"]
  }
]
