[
  {
    "question": "What does the term 'raw packet sniffing' mean and what tool is commonly used?",
    "answer": "**Raw Packet Sniffing:**\n\nRaw packet sniffing is the process of capturing and analyzing network traffic at the packet level. It involves intercepting data packets as they travel across a network.\n\n**Wireshark** is the most commonly used tool for packet sniffing and network analysis.\n\n**What it does:**\n- Captures live network traffic\n- Analyzes packet contents\n- Decodes various network protocols\n- Identifies network issues and security threats\n\n**Common uses:**\n- Network troubleshooting\n- Security analysis\n- Protocol analysis\n- Performance monitoring",
    "type": "cybersec",
    "tags": ["packet-sniffing", "wireshark", "network-analysis"],
    "code": "// Wireshark filters:\n// ip.addr == 192.168.1.1 - Filter by IP\n// tcp.port == 80 - Filter by port\n// http - Show only HTTP traffic\n// dns - Show only DNS queries\n// tcp.flags.syn == 1 - Show SYN packets"
  },
  {
    "question": "What are Nmap and Masscan used for?",
    "answer": "**Nmap / Masscan – Port Scanning & Service Enumeration**\n\n**Nmap (Network Mapper):**\n- Port scanning and service enumeration\n- Network discovery and security auditing\n- OS detection and service version detection\n- Scriptable with NSE (Nmap Scripting Engine)\n\n**Masscan:**\n- High-speed port scanner\n- Can scan the entire internet in minutes\n- Faster than Nmap but less feature-rich\n- Good for large-scale network scanning\n\n**Common uses:**\n- Network reconnaissance\n- Security assessments\n- Service discovery\n- Vulnerability scanning",
    "type": "cybersec",
    "tags": ["port-scanning", "nmap", "masscan", "enumeration"],
    "code": "// Nmap commands:\n// nmap -sS target.com - Stealth scan\n// nmap -sV target.com - Service version detection\n// nmap -O target.com - OS detection\n// nmap -A target.com - Aggressive scan\n// nmap -p 1-1000 target.com - Port range scan\n\n// Masscan commands:\n// masscan -p80,443 192.168.1.0/24 - Port scan\n// masscan --rate=1000 -p1-65535 target.com - High speed scan"
  },
  {
    "question": "What are Ettercap and Bettercap used for?",
    "answer": "**Ettercap / Bettercap – MITM & ARP Spoofing**\n\n**Ettercap:**\n- Man-in-the-Middle (MITM) attacks\n- ARP spoofing and poisoning\n- Network traffic interception\n- Password sniffing\n- DNS spoofing\n\n**Bettercap:**\n- Modern replacement for Ettercap\n- More features and better interface\n- WiFi and Bluetooth attacks\n- Real-time network manipulation\n- Modular architecture\n\n**Common attacks:**\n- ARP poisoning\n- DNS hijacking\n- SSL stripping\n- Credential harvesting\n- Session hijacking",
    "type": "cybersec",
    "tags": ["mitm", "arp-spoofing", "ettercap", "bettercap"],
    "code": "// Ettercap commands:\n// ettercap -T -M arp:remote /target/ //gateway// - ARP poisoning\n// ettercap -T -M arp:remote /192.168.1.100/ //192.168.1.1// - Target specific IP\n\n// Bettercap commands:\n// bettercap -iface eth0 -caplet hstshijack/hstshijack - SSL stripping\n// bettercap -iface wlan0 -wifi - WiFi attacks\n// bettercap -iface eth0 -sniff - Network sniffing"
  },
  {
    "question": "What is Responder used for?",
    "answer": "**Responder – Network-Level Credential Theft**\n\n**What Responder does:**\n- Performs LLMNR, NBT-NS, and MDNS poisoning\n- Captures network authentication attempts\n- Steals Windows credentials (NTLM hashes)\n- Performs SMB and HTTP authentication attacks\n- Creates fake authentication servers\n\n**How it works:**\n1. Listens for network name resolution requests\n2. Responds with fake services\n3. Captures authentication attempts\n4. Extracts credentials and hashes\n\n**Common targets:**\n- Windows networks\n- SMB shares\n- HTTP authentication\n- SQL Server authentication\n- LDAP authentication",
    "type": "cybersec",
    "tags": ["responder", "credential-theft", "ntlm", "llmnr"],
    "code": "// Responder commands:\n// responder -I eth0 - Start on interface\n// responder -I eth0 -rdw - Enable all modules\n// responder -I eth0 -A - Analyze mode\n// responder -I eth0 -Pv - Verbose output\n\n// Common captured hashes:\n// NTLMv1/NTLMv2 - Windows authentication\n// LM - Legacy Windows authentication\n// Basic Auth - HTTP authentication"
  },
  {
    "question": "What are Metasploit and Cobalt Strike used for?",
    "answer": "**Metasploit / Cobalt Strike – Exploit & Post-Exploitation Framework**\n\n**Metasploit:**\n- Open-source penetration testing framework\n- Exploit development and execution\n- Post-exploitation modules\n- Payload generation\n- Social engineering tools\n\n**Cobalt Strike:**\n- Commercial penetration testing platform\n- Advanced persistent threat (APT) simulation\n- Team collaboration features\n- Malleable C2 profiles\n- Beacon payload system\n\n**Common capabilities:**\n- Vulnerability exploitation\n- Privilege escalation\n- Lateral movement\n- Data exfiltration\n- Persistence mechanisms",
    "type": "cybersec",
    "tags": ["metasploit", "cobalt-strike", "exploitation", "post-exploitation"],
    "code": "// Metasploit commands:\n// msfconsole - Start Metasploit\n// use exploit/windows/smb/ms17_010_eternalblue - Select exploit\n// set RHOSTS target.com - Set target\n// exploit - Run exploit\n// sessions -l - List active sessions\n\n// Cobalt Strike commands:\n// ./teamserver server password - Start team server\n// ./cobaltstrike - Connect to team server\n// beacon> help - Show beacon commands\n// beacon> shell - Execute shell commands"
  },
  {
    "question": "What is JTAG and UART debugging used for?",
    "answer": "**JTAG / UART Debugging – Hardware Analysis**\n\n**JTAG (Joint Test Action Group):**\n- Hardware debugging interface\n- Direct access to processor internals\n- Bypass security mechanisms\n- Extract firmware and data\n- Modify device behavior\n\n**UART (Universal Asynchronous Receiver-Transmitter):**\n- Serial communication interface\n- Console access to embedded devices\n- Bootloader interaction\n- Firmware extraction\n- Command injection\n\n**Common targets:**\n- Routers and IoT devices\n- Embedded systems\n- Mobile devices\n- Industrial control systems\n- Automotive systems",
    "type": "cybersec",
    "tags": ["jtag", "uart", "hardware", "debugging"],
    "code": "// JTAG tools:\n// OpenOCD - Open On-Chip Debugger\n// J-Link - Segger debugger\n// Bus Pirate - Multi-protocol tool\n// JTAGulator - JTAG pinout finder\n\n// UART tools:\n// PuTTY - Serial terminal\n// minicom - Linux serial terminal\n// screen /dev/ttyUSB0 115200 - Linux UART access\n// Arduino IDE Serial Monitor - Basic UART tool"
  },
  {
    "question": "What is Binwalk used for?",
    "answer": "**Binwalk – Firmware Extraction**\n\n**What Binwalk does:**\n- Analyzes binary files for embedded data\n- Extracts firmware from devices\n- Identifies file systems and compression\n- Recovers deleted or hidden files\n- Analyzes firmware structure\n\n**Common uses:**\n- Firmware reverse engineering\n- IoT device analysis\n- Router firmware extraction\n- Embedded system analysis\n- Digital forensics\n\n**File types it can extract:**\n- SquashFS filesystems\n- CramFS filesystems\n- JFFS2 filesystems\n- Compressed archives\n- Executable files",
    "type": "cybersec",
    "tags": ["binwalk", "firmware", "extraction", "iot"],
    "code": "// Binwalk commands:\n// binwalk firmware.bin - Analyze firmware\n// binwalk -e firmware.bin - Extract files\n// binwalk -A firmware.bin - Analyze architecture\n// binwalk -f signatures.txt firmware.bin - Custom signatures\n// binwalk -B firmware.bin - Binary diffing\n\n// Common extracted files:\n// /bin/ - Binary executables\n// /etc/ - Configuration files\n// /lib/ - Shared libraries\n// /usr/ - User programs"
  },
  {
    "question": "What is ChipWhisperer used for?",
    "answer": "**ChipWhisperer – Side-Channel Attacks**\n\n**What ChipWhisperer does:**\n- Performs side-channel analysis attacks\n- Power analysis and electromagnetic analysis\n- Timing attacks on cryptographic implementations\n- Fault injection attacks\n- Hardware security research\n\n**Attack types:**\n- **DPA (Differential Power Analysis)** - Extract keys from power consumption\n- **CPA (Correlation Power Analysis)** - Statistical power analysis\n- **Template Attacks** - Machine learning-based attacks\n- **Fault Injection** - Glitch attacks to bypass security\n\n**Common targets:**\n- Smart cards\n- IoT devices\n- Cryptographic chips\n- Secure elements\n- Hardware security modules",
    "type": "cybersec",
    "tags": ["chipwhisperer", "side-channel", "power-analysis", "hardware"],
    "code": "// ChipWhisperer workflow:\n// 1. Capture power traces during encryption\n// 2. Analyze power consumption patterns\n// 3. Correlate with known plaintext/ciphertext\n// 4. Extract secret keys\n\n// Common attack scenarios:\n// AES key extraction from smart cards\n// RSA private key recovery\n// ECC key extraction\n// Fault injection to bypass authentication"
  },
  {
    "question": "What is PCILeech used for?",
    "answer": "**PCILeech – DMA Memory Attacks**\n\n**What PCILeech does:**\n- Performs Direct Memory Access (DMA) attacks\n- Accesses system memory through PCIe devices\n- Bypasses operating system security\n- Extracts memory contents and secrets\n- Performs hardware-based attacks\n\n**How it works:**\n1. Attach PCIe device to target system\n2. Use DMA to access physical memory\n3. Bypass OS security mechanisms\n4. Extract sensitive data from memory\n5. Modify system behavior\n\n**Common attacks:**\n- Memory dumping\n- Credential extraction\n- Kernel bypass\n- Hypervisor attacks\n- Secure boot bypass",
    "type": "cybersec",
    "tags": ["pcilench", "dma", "memory-attacks", "hardware"],
    "code": "// PCILeech setup:\n// 1. FPGA board with PCIe interface\n// 2. Custom firmware for DMA operations\n// 3. Software tools for memory analysis\n\n// Common targets:\n// Windows systems with DMA-enabled ports\n// Linux systems with Thunderbolt/USB-C\n// Virtual machines with PCIe passthrough\n// Embedded systems with PCIe interfaces"
  },
  {
    "question": "What is SQL injection and give examples?",
    "answer": "**SQL Injection – Database Attack**\n\n**What SQL injection is:**\nSQL injection is a code injection technique where malicious SQL statements are inserted into input fields, allowing attackers to manipulate databases.\n\n**How it works:**\n1. Attacker inputs malicious SQL code\n2. Application concatenates input into SQL query\n3. Database executes malicious query\n4. Attacker gains unauthorized access\n\n**Example attack:**\n```sql\n-- Login bypass:\nUsername: admin' OR '1'='1' --\nPassword: anything\n\n-- This creates:\nSELECT * FROM users WHERE username='admin' OR '1'='1' --' AND password='anything'\n```\n\n**Common payloads:**\n- `' OR '1'='1` - Always true condition\n- `'; DROP TABLE users; --` - Table deletion\n- `' UNION SELECT * FROM passwords --` - Data extraction",
    "type": "cybersec",
    "tags": ["sql-injection", "database", "web-security"],
    "code": "// SQL injection examples:\n// Basic bypass: ' OR '1'='1' --\n// Union attack: ' UNION SELECT username,password FROM users --\n// Time-based: '; WAITFOR DELAY '00:00:05' --\n// Boolean-based: ' AND (SELECT COUNT(*) FROM users) > 0 --\n\n// Prevention:\n// Use parameterized queries\n// Input validation and sanitization\n// Least privilege principle\n// Web Application Firewall (WAF)"
  },
  {
    "question": "What is brute forcing?",
    "answer": "**Brute Forcing – Password Attack**\n\n**What brute forcing is:**\nBrute forcing is an attack method that tries all possible combinations of characters to guess passwords or encryption keys.\n\n**Types of brute force attacks:**\n- **Dictionary Attack** - Uses common passwords\n- **Rainbow Table** - Precomputed hash tables\n- **Hybrid Attack** - Combines dictionary and brute force\n- **Credential Stuffing** - Uses leaked credentials\n\n**Common targets:**\n- Login pages\n- Encrypted files\n- WiFi networks\n- SSH/FTP services\n- Database passwords\n\n**Prevention methods:**\n- Account lockout policies\n- CAPTCHA challenges\n- Rate limiting\n- Strong password policies\n- Multi-factor authentication",
    "type": "cybersec",
    "tags": ["brute-force", "password-attack", "authentication"],
    "code": "// Brute force tools:\n// Hydra - Network login cracker\n// John the Ripper - Password cracker\n// Hashcat - GPU-accelerated cracking\n// Aircrack-ng - WiFi password cracking\n// Medusa - Parallel login brute forcer\n\n// Example Hydra command:\n// hydra -l admin -P passwords.txt ssh://target.com\n// hydra -L users.txt -p password123 http-post-form://target.com/login:username=^USER^&password=^PASS^:error"
  },
  {
    "question": "What are different HTTP status codes and their meanings?",
    "answer": "**HTTP Status Codes – Web Response Codes**\n\n**1xx Informational:**\n- **100** - Continue\n- **101** - Switching Protocols\n\n**2xx Success:**\n- **200** - OK (Request successful)\n- **201** - Created (Resource created)\n- **204** - No Content (Success, no content)\n\n**3xx Redirection:**\n- **301** - Moved Permanently\n- **302** - Found (Temporary redirect)\n- **304** - Not Modified (Cached version)\n\n**4xx Client Error:**\n- **400** - Bad Request (Invalid request)\n- **401** - Unauthorized (Authentication required)\n- **403** - Forbidden (Access denied)\n- **404** - Not Found (Resource not found)\n- **429** - Too Many Requests (Rate limited)\n\n**5xx Server Error:**\n- **500** - Internal Server Error\n- **502** - Bad Gateway\n- **503** - Service Unavailable\n- **504** - Gateway Timeout",
    "type": "cybersec",
    "tags": ["http-status", "web-security", "response-codes"],
    "code": "// Common status codes in security testing:\n// 200 - Successful request\n// 301/302 - Redirects (potential security issues)\n// 401 - Authentication required\n// 403 - Access denied (forbidden)\n// 404 - Not found (information disclosure)\n// 500 - Server error (potential vulnerability)\n\n// Security implications:\n// 401 - Weak authentication\n// 403 - Access control issues\n// 500 - Information disclosure\n// 429 - Rate limiting bypass"
  },
  {
    "question": "What is phishing?",
    "answer": "**Phishing – Social Engineering Attack**\n\n**What phishing is:**\nPhishing is a social engineering attack where attackers impersonate legitimate entities to steal sensitive information like passwords, credit card numbers, or personal data.\n\n**Common phishing methods:**\n- **Email Phishing** - Fake emails from trusted sources\n- **Spear Phishing** - Targeted attacks on specific individuals\n- **Whaling** - Attacks on high-profile targets\n- **Smishing** - SMS-based phishing\n- **Vishing** - Voice call phishing\n\n**Red flags to watch for:**\n- Urgent or threatening language\n- Suspicious sender addresses\n- Poor grammar and spelling\n- Requests for sensitive information\n- Suspicious links or attachments\n\n**Prevention:**\n- Verify sender identity\n- Don't click suspicious links\n- Use multi-factor authentication\n- Keep software updated\n- Educate users about phishing",
    "type": "cybersec",
    "tags": ["phishing", "social-engineering", "email-security"],
    "code": "// Common phishing indicators:\n// Suspicious URLs (amaz0n.com vs amazon.com)\n// Urgent language (\"Act now!\", \"Your account will be closed\")\n// Requests for sensitive data (passwords, SSN, credit cards)\n// Poor grammar and spelling\n// Suspicious attachments (.exe, .zip files)\n\n// Protection measures:\n// Email filtering and spam detection\n// User awareness training\n// Multi-factor authentication\n// Regular security updates\n// Incident response procedures"
  },
  {
    "question": "What is the Gobuster tool?",
    "answer": "**Gobuster:**\n\n**What it is:**\n- Directory/file brute-forcing tool\n- Written in Go programming language\n- Used for web application security testing\n\n**What it does:**\n- Discovers hidden directories and files\n- Brute-forces common web paths\n- Finds sensitive files (admin panels, config files)\n\n**Basic usage:**\n```bash\n# Directory brute-forcing\ngobuster dir -u http://target.com -w wordlist.txt\n\n# DNS subdomain enumeration\ngobuster dns -d target.com -w subdomains.txt\n\n# VHost enumeration\ngobuster vhost -u http://target.com -w vhosts.txt\n```\n\n**Common wordlists:**\n- `/usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt`\n- `/usr/share/wordlists/dirb/common.txt`\n\n**Example output:**\n```\n/admin (Status: 200)\n/config (Status: 403)\n/backup (Status: 200)\n```\n\n**Legal use only:**\n- Only test your own systems\n- Get permission before testing",
    "type": "security",
    "tags": ["gobuster", "security", "brute-force", "pentesting"]
  },
  {
    "question": "What is the Hydra tool?",
    "answer": "**Hydra:**\n\n**What it is:**\n- Password brute-forcing tool\n- Supports many protocols (HTTP, FTP, SSH, etc.)\n- Fast parallel attacks\n\n**What it does:**\n- Tests username/password combinations\n- Brute-forces login credentials\n- Supports various authentication methods\n\n**Basic usage:**\n```bash\n# HTTP form login\nhydra -l admin -P passwords.txt target.com http-post-form \"/login:username=^USER^&password=^PASS^:Invalid\"\n\n# SSH brute-force\nhydra -l root -P passwords.txt ssh://192.168.1.100\n\n# FTP brute-force\nhydra -l admin -P passwords.txt ftp://target.com\n```\n\n**Common options:**\n- `-l` = single username\n- `-L` = username list\n- `-p` = single password\n- `-P` = password list\n- `-t` = number of threads\n\n**Example:**\n```bash\nhydra -l admin -P /usr/share/wordlists/rockyou.txt -t 4 target.com http-post-form \"/login:user=^USER^&pass=^PASS^:Login failed\"\n```\n\n**Legal use only:**\n- Only test your own systems\n- Get permission before testing",
    "type": "security"
  },
  {
    "question": "What is a shell in cybersecurity?",
    "answer": "**Shell:**\n\n**What it is:**\n- Command-line interface between user and operating system\n- Interprets and executes commands\n- Acts as a bridge between user and kernel\n\n**Types:**\n- **Bash** (Bourne Again Shell) - Most common on Linux\n- **PowerShell** - Windows command shell\n- **Zsh** - Advanced shell with features\n- **Cmd** - Windows command prompt\n\n**In Cybersecurity:**\n- Used for system administration\n- Scripting and automation\n- Penetration testing\n- System monitoring\n\n**Common shells:**\n- `/bin/bash` - Linux default\n- `/bin/sh` - POSIX shell\n- `powershell.exe` - Windows PowerShell\n- `cmd.exe` - Windows command prompt"
  },
  {
    "question": "What is shell scripting and give examples?",
    "answer": "**Shell Scripting:**\n\n**What it is:**\n- Writing scripts using shell commands\n- Automating repetitive tasks\n- Creating executable files with shell commands\n\n**Basic Examples:**\n\n**1. Simple Script:**\n```bash\n#!/bin/bash\necho \"Hello World\"\ndate\nwhoami\n```\n\n**2. File Operations:**\n```bash\n#!/bin/bash\n# Backup script\ncp important.txt backup/\ndate >> backup/log.txt\n```\n\n**3. Loop Example:**\n```bash\n#!/bin/bash\nfor i in {1..5}\ndo\n    echo \"Count: $i\"\ndone\n```\n\n**4. Conditional:**\n```bash\n#!/bin/bash\nif [ -f \"file.txt\" ]\nthen\n    echo \"File exists\"\nelse\n    echo \"File not found\"\nfi\n```\n\n**Making executable:**\n```bash\nchmod +x script.sh\n./script.sh\n```"
  },
  {
    "question": "What is shellcheck and give examples?",
    "answer": "**Shellcheck:**\n\n**What it is:**\n- Static analysis tool for shell scripts\n- Finds bugs and potential issues\n- Suggests improvements\n- Supports bash, sh, dash, ksh\n\n**Installation:**\n```bash\n# Ubuntu/Debian\nsudo apt install shellcheck\n\n# macOS\nbrew install shellcheck\n\n# Windows\nscoop install shellcheck\n```\n\n**Usage:**\n```bash\n# Check a script\nshellcheck script.sh\n\n# Check with specific shell\nshellcheck -s bash script.sh\n\n# Fix suggestions\nshellcheck -f gcc script.sh\n```\n\n**Example Issues Found:**\n```bash\n# Problem: Unquoted variable\necho $USER\n\n# Shellcheck suggests:\necho \"$USER\"\n\n# Problem: Missing shebang\n#!/bin/bash\n\n# Shellcheck suggests:\n#!/usr/bin/env bash\n```\n\n**Common Checks:**\n- Unquoted variables\n- Missing shebang\n- Incorrect comparisons\n- Unused variables\n- Syntax errors"
  },
  {
    "question": "What is CDN?",
    "answer": "**CDN (Content Delivery Network):**\n\n**What it is:**\n- Network of distributed servers\n- Delivers content from locations closest to users\n- Reduces latency and improves performance\n\n**How it works:**\n- Caches content on multiple servers worldwide\n- Routes users to nearest server\n- Reduces load on origin server\n\n**Benefits:**\n- Faster content delivery\n- Reduced bandwidth costs\n- Better user experience\n- Improved reliability\n\n**Popular CDNs:**\n- **Cloudflare** - Security + performance\n- **AWS CloudFront** - Amazon's CDN\n- **Akamai** - Enterprise CDN\n- **MaxCDN** - Simple CDN service\n\n**Security Features:**\n- DDoS protection\n- SSL/TLS termination\n- Web application firewall\n- Bot protection"
  },
  {
    "question": "What is DSS?",
    "answer": "**DSS (Digital Signature Standard):**\n\n**What it is:**\n- Federal standard for digital signatures\n- Uses cryptographic algorithms\n- Ensures data integrity and authentication\n\n**Components:**\n- **DSA (Digital Signature Algorithm)**\n- **RSA** - Rivest-Shamir-Adleman\n- **ECDSA** - Elliptic Curve Digital Signature\n\n**How it works:**\n1. Create hash of message\n2. Sign hash with private key\n3. Verify with public key\n4. Confirm message integrity\n\n**Uses:**\n- Email authentication\n- Software distribution\n- Document signing\n- Certificate authorities\n\n**Security Features:**\n- Non-repudiation\n- Data integrity\n- Authentication\n- Tamper detection"
  },
  {
    "question": "What is a firewall?",
    "answer": "**Firewall:**\n\n**What it is:**\n- Network security device\n- Monitors and controls traffic\n- Acts as barrier between networks\n\n**Types:**\n- **Packet Filtering** - Examines packet headers\n- **Stateful** - Tracks connection state\n- **Application Layer** - Deep packet inspection\n- **Next-Generation** - Advanced features\n\n**Functions:**\n- Block unauthorized access\n- Allow legitimate traffic\n- Monitor network activity\n- Log security events\n\n**Deployment:**\n- **Network Firewall** - Between networks\n- **Host Firewall** - On individual devices\n- **Cloud Firewall** - Virtual firewall\n\n**Rules:**\n- Allow/deny based on IP, port, protocol\n- Time-based rules\n- User-based rules\n- Application-based rules"
  },
  {
    "question": "What does port scanning mean?",
    "answer": "**Port Scanning:**\n\n**What it is:**\n- Technique to discover open ports on a system\n- Identifies services running on target\n- Maps network attack surface\n\n**Types:**\n- **TCP Connect** - Full connection attempt\n- **TCP SYN** - Half-open connection\n- **UDP Scan** - UDP port discovery\n- **Stealth Scan** - Avoid detection\n\n**Common Tools:**\n- **Nmap** - Most popular scanner\n- **Masscan** - High-speed scanning\n- **Zmap** - Internet-wide scanning\n\n**Scan Types:**\n```bash\n# TCP SYN scan\nnmap -sS target.com\n\n# UDP scan\nnmap -sU target.com\n\n# Service detection\nnmap -sV target.com\n\n# OS detection\nnmap -O target.com\n```\n\n**Legal Considerations:**\n- Only scan your own systems\n- Get permission before scanning\n- Follow responsible disclosure"
  },
  {
    "question": "What does service enumeration mean?",
    "answer": "**Service Enumeration:**\n\n**What it is:**\n- Process of identifying services running on target\n- Discovering service versions and configurations\n- Mapping attack surface\n\n**Methods:**\n- **Banner Grabbing** - Service identification\n- **Version Detection** - Service versions\n- **Service Fingerprinting** - Detailed analysis\n\n**Tools:**\n- **Nmap** - Service detection\n- **Banner Grabbing** - Manual testing\n- **Nessus** - Vulnerability scanning\n\n**Common Services:**\n- **HTTP/HTTPS** - Web servers\n- **SSH** - Secure shell\n- **FTP** - File transfer\n- **SMTP** - Email\n- **DNS** - Domain name system\n\n**Information Gathered:**\n- Service name and version\n- Open ports\n- Service configuration\n- Potential vulnerabilities\n\n**Example:**\n```bash\n# Service detection\nnmap -sV target.com\n\n# Script scanning\nnmap --script vuln target.com\n```"
  },
  {
    "question": "What is LLMNR?",
    "answer": "**LLMNR (Link-Local Multicast Name Resolution):**\n\n**What it is:**\n- Protocol for name resolution on local networks\n- Windows alternative to DNS\n- Uses multicast for name queries\n\n**How it works:**\n- Sends multicast queries to local network\n- Receives responses from local hosts\n- Resolves names without DNS server\n\n**Port:**\n- **UDP 5355** - LLMNR traffic\n\n**Security Issues:**\n- **LLMNR Poisoning** - Attackers respond to queries\n- **Credential Harvesting** - Steal authentication\n- **Man-in-the-Middle** - Intercept traffic\n\n**Attack Scenario:**\n1. Attacker listens for LLMNR queries\n2. Responds with malicious IP\n3. Redirects traffic to attacker\n4. Harvests credentials\n\n**Defense:**\n- Disable LLMNR if not needed\n- Use DNS instead\n- Monitor network traffic\n- Implement network segmentation"
  },
  {
    "question": "What is NBT-NS?",
    "answer": "**NBT-NS (NetBIOS Name Service):**\n\n**What it is:**\n- Legacy name resolution protocol\n- Used in Windows networks\n- Resolves NetBIOS names to IP addresses\n\n**How it works:**\n- Broadcasts name queries on local network\n- Receives responses from hosts\n- Maps NetBIOS names to IPs\n\n**Ports:**\n- **UDP 137** - NetBIOS Name Service\n- **UDP 138** - NetBIOS Datagram Service\n- **TCP 139** - NetBIOS Session Service\n\n**Security Issues:**\n- **NBT-NS Poisoning** - Similar to LLMNR\n- **Credential Harvesting** - Steal authentication\n- **Network Reconnaissance** - Discover hosts\n\n**Attack Methods:**\n- Respond to name queries\n- Redirect traffic to attacker\n- Harvest authentication data\n\n**Defense:**\n- Disable NetBIOS if not needed\n- Use DNS for name resolution\n- Monitor network traffic\n- Implement proper network segmentation"
  },
  {
    "question": "What is mDNS poisoning?",
    "answer": "**mDNS Poisoning:**\n\n**What it is:**\n- Attack on multicast DNS (mDNS) protocol\n- Redirects traffic to attacker\n- Similar to LLMNR/NBT-NS poisoning\n\n**mDNS Protocol:**\n- Used by Apple devices (Bonjour)\n- Resolves names on local networks\n- Uses multicast for queries\n\n**Port:**\n- **UDP 5353** - mDNS traffic\n\n**Attack Process:**\n1. Attacker listens for mDNS queries\n2. Responds with malicious IP\n3. Redirects traffic to attacker\n4. Harvests credentials or data\n\n**Targets:**\n- Apple devices (Mac, iPhone, iPad)\n- Linux systems with Avahi\n- IoT devices\n\n**Tools:**\n- **Responder** - Multi-protocol poisoner\n- **Ettercap** - Network attack tool\n\n**Defense:**\n- Disable mDNS if not needed\n- Use DNS for name resolution\n- Monitor network traffic\n- Implement network segmentation"
  },
  {
    "question": "What does SMB stand for?",
    "answer": "**SMB (Server Message Block):**\n\n**What it is:**\n- Network file sharing protocol\n- Allows access to files and printers\n- Used in Windows networks\n\n**Versions:**\n- **SMB 1.0** - Legacy, insecure\n- **SMB 2.0** - Improved performance\n- **SMB 3.0** - Enhanced security\n- **SMB 3.1.1** - Latest version\n\n**Ports:**\n- **TCP 445** - Direct SMB\n- **TCP 139** - NetBIOS over TCP\n\n**Uses:**\n- File sharing\n- Printer sharing\n- Remote administration\n- Network authentication\n\n**Security Issues:**\n- **EternalBlue** - SMB vulnerability\n- **WannaCry** - Ransomware using SMB\n- **Pass-the-Hash** - Authentication bypass\n\n**Defense:**\n- Disable SMB 1.0\n- Use SMB 3.0+\n- Implement network segmentation\n- Regular security updates"
  },
  {
    "question": "What does SQL stand for?",
    "answer": "**SQL (Structured Query Language):**\n\n**What it is:**\n- Programming language for databases\n- Manages and manipulates data\n- Standard for relational databases\n\n**Types:**\n- **MySQL** - Open source database\n- **PostgreSQL** - Advanced open source\n- **SQL Server** - Microsoft database\n- **Oracle** - Enterprise database\n\n**Common Operations:**\n- **SELECT** - Retrieve data\n- **INSERT** - Add data\n- **UPDATE** - Modify data\n- **DELETE** - Remove data\n\n**Security Issues:**\n- **SQL Injection** - Code injection attack\n- **Privilege Escalation** - Unauthorized access\n- **Data Breaches** - Unauthorized data access\n\n**Example:**\n```sql\nSELECT * FROM users WHERE username = 'admin';\nINSERT INTO users (username, password) VALUES ('user', 'pass');\n```\n\n**Defense:**\n- Use parameterized queries\n- Input validation\n- Least privilege access\n- Regular security updates"
  },
  {
    "question": "What does LDAP stand for?",
    "answer": "**LDAP (Lightweight Directory Access Protocol):**\n\n**What it is:**\n- Protocol for accessing directory services\n- Manages user accounts and resources\n- Used for authentication and authorization\n\n**How it works:**\n- Client connects to LDAP server\n- Searches directory for information\n- Authenticates users\n- Manages access control\n\n**Ports:**\n- **TCP 389** - Standard LDAP\n- **TCP 636** - LDAPS (secure)\n\n**Uses:**\n- User authentication\n- Directory services\n- Single sign-on (SSO)\n- Network management\n\n**Common Implementations:**\n- **Active Directory** - Microsoft\n- **OpenLDAP** - Open source\n- **389 Directory Server** - Red Hat\n\n**Security Issues:**\n- **LDAP Injection** - Code injection\n- **Credential Theft** - Authentication bypass\n- **Privilege Escalation** - Unauthorized access\n\n**Defense:**\n- Use LDAPS (encrypted)\n- Input validation\n- Access control\n- Regular security updates"
  },
  {
    "question": "What is a man-in-the-middle attack?",
    "answer": "**Man-in-the-Middle (MITM) Attack:**\n\n**What it is:**\n- Attack where attacker intercepts communication\n- Positions between two communicating parties\n- Can read, modify, or inject data\n\n**How it works:**\n1. Attacker intercepts communication\n2. Relays messages between parties\n3. Parties think they're communicating directly\n4. Attacker can modify or steal data\n\n**Types:**\n- **ARP Spoofing** - Layer 2 attack\n- **DNS Spoofing** - Redirect DNS queries\n- **SSL Stripping** - Remove encryption\n- **WiFi MITM** - Attack wireless networks\n\n**Tools:**\n- **Ettercap** - Network attack tool\n- **Bettercap** - Modern MITM framework\n- **Wireshark** - Traffic analysis\n\n**Targets:**\n- Web traffic\n- Email communication\n- Banking transactions\n- Corporate networks\n\n**Defense:**\n- Use HTTPS/TLS\n- Certificate pinning\n- VPN connections\n- Network monitoring"
  },
  {
    "question": "What is Burp Suite used for?",
    "answer": "**Burp Suite:**\n\n**What it is:**\n- Web application security testing platform\n- Comprehensive toolkit for penetration testing\n- Industry standard for web security\n\n**Main Components:**\n- **Proxy** - Intercept and modify traffic\n- **Scanner** - Automated vulnerability scanning\n- **Intruder** - Custom attack automation\n- **Repeater** - Manual request testing\n\n**Features:**\n- **Traffic Interception** - Capture HTTP/HTTPS\n- **Vulnerability Scanning** - Automated testing\n- **Manual Testing** - Custom attacks\n- **Report Generation** - Professional reports\n\n**Common Uses:**\n- Web application testing\n- API security testing\n- Authentication bypass\n- Input validation testing\n\n**Attack Types:**\n- SQL injection\n- Cross-site scripting (XSS)\n- Authentication bypass\n- Business logic flaws\n\n**Legal Use:**\n- Only test authorized systems\n- Get permission before testing\n- Follow responsible disclosure"
  }
]
