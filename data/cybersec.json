[

  {
    "question": "What are different HTTP status codes and their meanings?",
    "answer": "**HTTP Status Codes – Web Response Codes**\n\n**1xx Informational:**\n- **100** - Continue\n- **101** - Switching Protocols\n\n**2xx Success:**\n- **200** - OK (Request successful)\n- **201** - Created (Resource created)\n- **204** - No Content (Success, no content)\n\n**3xx Redirection:**\n- **301** - Moved Permanently\n- **302** - Found (Temporary redirect)\n- **304** - Not Modified (Cached version)\n\n**4xx Client Error:**\n- **400** - Bad Request (Invalid request)\n- **401** - Unauthorized (Authentication required)\n- **403** - Forbidden (Access denied)\n- **404** - Not Found (Resource not found)\n- **429** - Too Many Requests (Rate limited)\n\n**5xx Server Error:**\n- **500** - Internal Server Error\n- **502** - Bad Gateway\n- **503** - Service Unavailable\n- **504** - Gateway Timeout",
    "type": "cybersec",
    "tags": ["http-status", "web-security", "response-codes"],
    "code": "// Common status codes in security testing:\n// 200 - Successful request\n// 301/302 - Redirects (potential security issues)\n// 401 - Authentication required\n// 403 - Access denied (forbidden)\n// 404 - Not found (information disclosure)\n// 500 - Server error (potential vulnerability)\n\n// Security implications:\n// 401 - Weak authentication\n// 403 - Access control issues\n// 500 - Information disclosure\n// 429 - Rate limiting bypass"
  },
  {
    "question": "What is Burp Suite used for?",
    "answer": "**Burp Suite:**\n\n**What it is:**\n- Web application security testing platform\n- Comprehensive toolkit for penetration testing\n- Industry standard for web security\n\n**Main Components:**\n- **Proxy** - Intercept and modify traffic\n- **Scanner** - Automated vulnerability scanning\n- **Intruder** - Custom attack automation\n- **Repeater** - Manual request testing\n\n**Features:**\n- **Traffic Interception** - Capture HTTP/HTTPS\n- **Vulnerability Scanning** - Automated testing\n- **Manual Testing** - Custom attacks\n- **Report Generation** - Professional reports\n\n**Common Uses:**\n- Web application testing\n- API security testing\n- Authentication bypass\n- Input validation testing\n\n**Attack Types:**\n- SQL injection\n- Cross-site scripting (XSS)\n- Authentication bypass\n- Business logic flaws\n\n**Legal Use:**\n- Only test authorized systems\n- Get permission before testing\n- Follow responsible disclosure"
  },

  {
    "question": "What is the Intercept tool in Burp Suite and how to use it?",
    "answer": "**Burp Suite Intercept Tool**\n\n**What it is:**\nThe Intercept tool in Burp Suite is used to intercept HTTP/HTTPS requests and responses between your browser and the target server before they reach their destination.\n\n**How to use it:**\n1. **Enable Proxy** - Turn on Burp's proxy (usually 127.0.0.1:8080)\n2. **Configure Browser** - Set browser to use Burp as proxy\n3. **Start Intercepting** - Click 'Intercept is on' button\n4. **Browse Target Site** - Navigate to the application\n5. **Modify Requests** - Edit intercepted requests before forwarding\n6. **Forward/Drop** - Send modified request or drop it\n\n**Common use cases:**\n- Modify parameters in requests\n- Change HTTP methods (GET to POST)\n- Add/remove headers\n- Test for vulnerabilities\n- Bypass client-side validation\n\n**Example workflow:**\n1. Intercept login request\n2. Modify username parameter\n3. Forward modified request\n4. Analyze server response",
    "type": "cybersec",
    "tags": ["burp-suite", "intercept", "proxy", "web-testing"],
    "code": "// Burp Suite Intercept Workflow:\n// 1. Configure proxy: 127.0.0.1:8080\n// 2. Install Burp certificate for HTTPS\n// 3. Enable 'Intercept is on'\n// 4. Browse target application\n// 5. Modify intercepted requests:\n//    - Change parameters\n//    - Add headers\n//    - Modify HTTP method\n// 6. Forward or drop requests\n\n// Common modifications:\n// Original: username=admin&password=123\n// Modified: username=admin' OR '1'='1' --&password=anything\n// Add header: X-Forwarded-For: 127.0.0.1\n// Change method: GET → POST"
  },

  {
    "question": "What is the Comparer tool in Burp Suite?",
    "answer": "**Burp Suite Comparer Tool**\n\n**What it is:**\nThe Comparer tool allows you to compare two pieces of data (requests, responses, or text) to identify differences between them.\n\n**How to use it:**\n1. **Load Data** - Paste or load two pieces of data to compare\n2. **Choose Comparison** - Select 'Words' or 'Bytes' comparison\n3. **Analyze Differences** - View highlighted differences\n4. **Export Results** - Save comparison results\n\n**Common use cases:**\n- Compare responses before/after parameter changes\n- Identify differences in error messages\n- Analyze authentication responses\n- Compare different user roles\n- Detect information leakage\n\n**Comparison types:**\n- **Words**: Compares text content word by word\n- **Bytes**: Compares raw byte-level differences\n\n**Example scenarios:**\n- Compare login success vs failure responses\n- Analyze different user privilege levels\n- Detect hidden parameters in responses\n- Identify timing differences",
    "type": "cybersec",
    "tags": ["burp-suite", "comparer", "analysis", "web-testing"],
    "code": "// Burp Suite Comparer Examples:\n// 1. Load two HTTP responses\n// 2. Select 'Words' comparison\n// 3. Analyze highlighted differences\n\n// Common comparisons:\n// - Valid vs invalid login responses\n// - Admin vs user account responses\n// - Before/after parameter modifications\n// - Different HTTP methods responses\n\n// What to look for:\n// - Different error messages\n// - Hidden parameters\n// - Timing differences\n// - Information leakage\n// - Authentication bypasses"
  },

  {
    "question": "How to use Burp Suite Repeater?",
    "answer": "**Burp Suite Repeater Tool**\n\n**What it is:**\nRepeater allows you to manually modify and re-send individual HTTP requests to analyze how the application responds to different inputs.\n\n**How to use it:**\n1. **Send Request** - Right-click request in Proxy/Scanner → 'Send to Repeater'\n2. **Modify Parameters** - Edit request parameters, headers, or body\n3. **Send Request** - Click 'Send' button to execute\n4. **Analyze Response** - Review server response\n5. **Iterate** - Make changes and send again\n\n**Key features:**\n- **Manual Testing** - Full control over request modification\n- **Iterative Testing** - Send multiple variations\n- **Response Analysis** - Detailed response inspection\n- **Request History** - Track all sent requests\n\n**Common use cases:**\n- Test SQL injection payloads\n- Analyze authentication mechanisms\n- Test for authorization bypasses\n- Parameter fuzzing\n- Session management testing\n\n**Workflow example:**\n1. Capture login request in Proxy\n2. Send to Repeater\n3. Modify username parameter\n4. Send and analyze response\n5. Try different payloads",
    "type": "cybersec",
    "tags": ["burp-suite", "repeater", "manual-testing", "web-testing"],
    "code": "// Burp Suite Repeater Workflow:\n// 1. Right-click request → 'Send to Repeater'\n// 2. Modify request parameters:\n//    - Change parameter values\n//    - Add/remove headers\n//    - Modify request body\n// 3. Click 'Send' to execute\n// 4. Analyze response:\n//    - Status code\n//    - Response headers\n//    - Response body\n// 5. Iterate with different values\n\n// Common modifications:\n// Original: username=admin\n// Modified: username=admin' OR '1'='1' --\n// Add header: X-Forwarded-For: 127.0.0.1\n// Change method: GET → POST"
  }
]
