[
  {
    "question": "CSS Units: What are px, em, fr, and rem?",
    "answer": "**CSS Units Comparison:**\n\n**1. px (Pixels):**\n- Absolute unit, fixed size\n- Use for borders, precise positioning\n- Example: `width: 200px`\n- Not responsive to font size\n\n**2. em:**\n- Relative to parent's font-size\n- Scales with parent element\n- Example: `font-size: 1.5em` (1.5 × parent)\n- Use for scalable typography\n\n**3. rem:**\n- Relative to root element's font-size\n- Always scales with root, not parent\n- Example: `font-size: 1.5rem` (1.5 × root)\n- Use for consistent sizing across nested elements\n\n**4. fr (Fractional):**\n- Fractional unit for CSS Grid\n- Takes available space proportionally\n- Example: `grid-template-columns: 1fr 2fr 1fr`\n- Use for flexible grid layouts",
    "type": "css",
    "tags": ["css", "units", "px", "em", "rem", "fr"]
  },
  {
    "question": "How to link JavaScript files in HTML with regular scripts and ES6 modules?",
    "answer": "**Regular Script Tag:**\n```html\n<script src=\"file.js\"></script>\n```\n\n**Placement options:**\n- Inside `<head>`: Loads before page renders\n- Before `</body>` (recommended): Loads after page content\n\n**Module Script (ES6):**\n```html\n<script type=\"module\" src=\"module.js\"></script>\n```\n\n**Module features:**\n- Import/export functionality\n- Strict mode by default\n- Top-level await support\n- Automatic defer loading\n- Scoped by default\n\n**Example module:**\n```javascript\n// module.js\nexport function greet(name) {\n    return `Hello, ${name}!`;\n}\n```\n\n**Why modules:**\n- Better code organization\n- Avoid global namespace pollution\n- Enable modern JavaScript features",
    "type": "html",
    "tags": ["html", "javascript", "module", "es6", "script-tag", "linking"]
  },
  {
    "question": "How to create line breaks in HTML and JavaScript?",
    "answer": "**HTML Line Breaks:**\n\n**New line:**\n```html\n<br> or <br/>\n```\n\n**Example:**\n```html\n<p>Line 1<br>Line 2</p>\n```\n\n**Horizontal line:**\n```html\n<hr> or <hr/>\n```\n\n**Example:**\n```html\n<p>Content above</p>\n<hr>\n<p>Content below</p>\n```\n\n**JavaScript Escape Sequences:**\n\n**New line:** `\\n`\n**Tab:** `\\t`\n\n**Examples:**\n```javascript\nconsole.log(\"Line 1\\nLine 2\");\n// Output:\n// Line 1\n// Line 2\n\nconsole.log(\"Name:\\tJohn\");\n// Output: Name:    John\n\n// Combined\nconsole.log(\"Name:\\tJohn\\nAge:\\t25\");\n```",
    "type": "html",
    "tags": ["html", "javascript", "formatting", "line-breaks", "escape-sequences"]
  },
  {
    "question": "How to create ordered and unordered HTML lists?",
    "answer": "**Unordered Lists (<ul>):**\n```html\n<ul>\n    <li>Item 1</li>\n    <li>Item 2</li>\n    <li>Item 3</li>\n</ul>\n```\n\n**Ordered Lists (<ol>):**\n```html\n<!-- Numbers (default) -->\n<ol type=\"1\">\n    <li>First item</li>\n    <li>Second item</li>\n</ol>\n\n<!-- Letters -->\n<ol type=\"A\">\n    <li>Item A</li>\n    <li>Item B</li>\n</ol>\n\n<!-- Roman numerals -->\n<ol type=\"I\">\n    <li>Item I</li>\n    <li>Item II</li>\n</ol>\n```\n\n**Use cases:**\n- Unordered: Navigation, features, bullet points\n- Ordered: Instructions, rankings, numbered steps",
    "type": "html",
    "tags": ["html", "lists", "navigation", "ordered", "unordered"]
  },
  {
    "question": "How to create HTML tables with colspan attribute?",
    "answer": "**Basic Table:**\n```html\n<table>\n    <tr>\n        <th>Name</th>\n        <th>Math</th>\n        <th>Science</th>\n    </tr>\n    <tr>\n        <td>John</td>\n        <td>85</td>\n        <td>90</td>\n    </tr>\n</table>\n```\n\n**With colspan:**\n```html\n<table>\n    <tr>\n        <th>Name</th>\n        <th>Subject</th>\n        <th>Grade</th>\n    </tr>\n    <tr>\n        <td>John</td>\n        <td colspan=\"2\">Math - A</td>\n    </tr>\n    <tr>\n        <td>Jane</td>\n        <td>Science</td>\n        <td>B+</td>\n    </tr>\n</table>\n```\n\n**What colspan does:**\n- Makes cell span multiple columns\n- Useful for headers covering multiple columns\n- Automatically adjusts table layout",
    "type": "html",
    "tags": ["html", "tables", "colspan", "data"]
  },
  {
    "question": "HTML Forms: How to create forms with different input types?",
    "answer": "**Common Input Types:**\n```html\n<input type=\"text\" placeholder=\"Enter name\">\n<input type=\"password\" placeholder=\"Password\">\n<input type=\"email\" placeholder=\"Email\">\n<input type=\"tel\" placeholder=\"Phone\">\n<input type=\"date\">\n<input type=\"number\" min=\"1\" max=\"100\">\n<input type=\"range\" min=\"0\" max=\"100\">\n<input type=\"file\">\n<input type=\"checkbox\" id=\"agree\">\n<input type=\"radio\" name=\"gender\" value=\"male\">\n<input type=\"submit\" value=\"Submit\">\n```\n\n**Basic Form Structure:**\n```html\n<form action=\"submit.php\" method=\"POST\">\n    <label for=\"name\">Name:</label>\n    <input type=\"text\" id=\"name\" name=\"name\" required>\n    \n    <label for=\"email\">Email:</label>\n    <input type=\"email\" id=\"email\" name=\"email\" required>\n    \n    <input type=\"submit\" value=\"Send\">\n</form>\n```\n\n**Form attributes:**\n- `action` - Where to send data\n- `method` - GET or POST\n- `required` - Makes field mandatory\n- `name` - Identifies input for submission",
    "type": "html",
    "tags": ["html", "forms", "input", "submission"]
  },
  {
    "question": "Git Basics: Terminology and common commands explained",
    "answer": "**Git Terms:**\n- **Directory:** Folder containing files\n- **Terminal/CLI:** Text-based computer interface\n- **Repository:** Project folder tracked by Git\n- **GitHub:** Online platform for Git repositories\n- **README.md:** Project description file\n\n**Common Commands:**\n- `git clone` - Download repository from GitHub\n- `git add` - Stage files for commit\n- `git commit -m \"message\"` - Save snapshot with message\n- `git push` - Upload changes to GitHub\n- `git pull` - Download latest changes\n\n**Simple Workflow:**\n```bash\ngit add .\ngit commit -m \"description\"\ngit push\n```",
    "type": "git",
    "tags": ["git", "terminology", "commands", "basics"]
  },
  {
    "question": "Git Error Solutions: How to fix common Git errors?",
    "answer": "**Error: 'origin does not appear to be a git repo'**\n\n**Solution:**\n1. Create repository on GitHub\n2. Copy repository URL\n3. Connect local repo:\n```bash\ngit remote add origin https://github.com/username/repo.git\n```\n4. Verify:\n```bash\ngit remote -v\n```\n5. Push code:\n```bash\ngit push -u origin main\n```\n\n**How to undo staging:**\n```bash\ngit reset filename    # Single file\ngit reset              # All files\n```\n\n**How to delete branches:**\n```bash\ngit branch -d branch-name        # Safe delete\ngit branch -D branch-name        # Force delete\ngit push origin --delete branch-name  # Remote delete\n```",
    "type": "git",
    "tags": ["git", "error", "branches", "reset", "troubleshooting"]
  },
  {
    "question": "JavaScript: What is camelCase naming convention?",
    "answer": "**CamelCase Format:**\n- Start with lowercase letter\n- Capitalize first letter of each new word\n- No spaces or underscores\n\n**Example:**\n```javascript\nvar firstName = \"John\";\nvar lastName = \"Doe\";\nvar myAge = 25;\nvar userEmailAddress = \"john@example.com\";\n\nfunction calculateTotalPrice() {\n    // code here\n}\n\nfunction getUserData() {\n    // code here\n}\n```\n\n**Why use camelCase:**\n- Standard convention in JavaScript\n- Easy to read without spaces\n- Distinguishes variables (camelCase) from constants (UPPER_CASE)\n- Distinguishes from classes (PascalCase)",
    "type": "javascript",
    "tags": ["javascript", "naming", "conventions", "camelCase"]
  },
  {
    "question": "JavaScript Arithmetic: Operators and shorthand assignment?",
    "answer": "**Basic Arithmetic Operators:**\n```javascript\n+  // Addition\n-  // Subtraction\n*  // Multiplication\n/  // Division\n%  // Modulus (remainder)\n** // Exponentiation (power)\n```\n\n**Examples:**\n```javascript\nvar sum = 10 + 5;        // 15\nvar difference = 10 - 5; // 5\nvar product = 10 * 5;    // 50\nvar quotient = 10 / 5;   // 2\nvar remainder = 10 % 3;  // 1\nvar power = 2 ** 3;      // 8\n```\n\n**Shorthand Assignment Operators:**\n```javascript\nx += 5;  // Same as: x = x + 5\nx -= 3;  // Same as: x = x - 3\nx *= 2;  // Same as: x = x * 2\nx /= 4;  // Same as: x = x / 4\nx %= 3;  // Same as: x = x % 3\nx **= 2; // Same as: x = x ** 2\n```",
    "type": "javascript",
    "tags": ["javascript", "arithmetic", "operators", "assignment", "shorthand"]
  }
]
