
  {
    "question": "How to create different input types in HTML forms?",
    "answer": "**Text inputs:**\n```html\n<!-- Text -->\n<input type=\"text\" placeholder=\"Enter your name\">\n\n<!-- Password -->\n<input type=\"password\" placeholder=\"Enter password\">\n\n<!-- Email -->\n<input type=\"email\" placeholder=\"Enter email\">\n\n<!-- Phone -->\n<input type=\"tel\" placeholder=\"Enter phone number\">\n\n<!-- Date -->\n<input type=\"date\">\n\n<!-- Number -->\n<input type=\"number\" min=\"1\" max=\"100\">\n\n<!-- Range -->\n<input type=\"range\" min=\"0\" max=\"100\">\n\n<!-- File -->\n<input type=\"file\">\n\n<!-- Checkbox -->\n<input type=\"checkbox\" id=\"agree\">\n<label for=\"agree\">I agree</label>\n\n<!-- Radio buttons -->\n<input type=\"radio\" name=\"gender\" value=\"male\"> Male\n<input type=\"radio\" name=\"gender\" value=\"female\"> Female\n\n<!-- Button -->\n<input type=\"submit\" value=\"Submit\">\n```\n\n**Default values:**\n```html\n<input type=\"text\" value=\"Default text\">\n```\n\n**Note:** Radio buttons with the same `name` allow only one selection!",
    "type": "html",
    "tags": ["html", "forms", "input", "validation"]
  },
&&
  {
    "question": "What is a form in HTML and how to write it?",
    "answer": "**What forms are used for:**\n- Collecting user input\n- Submitting data to servers\n- User registration, contact forms, surveys\n\n**Basic form structure:**\n```html\n<form action=\"submit.php\" method=\"POST\">\n    <label for=\"name\">Name:</label>\n    <input type=\"text\" id=\"name\" name=\"name\" required>\n    \n    <label for=\"email\">Email:</label>\n    <input type=\"email\" id=\"email\" name=\"email\" required>\n    \n    <label for=\"message\">Message:</label>\n    <textarea id=\"message\" name=\"message\" rows=\"4\"></textarea>\n    \n    <input type=\"submit\" value=\"Send Message\">\n</form>\n```\n\n**Form attributes:**\n- `action` = where to send the data\n- `method` = GET or POST\n- `required` = makes field mandatory\n\n**Example with different inputs:**\n```html\n<form action=\"process.php\" method=\"POST\">\n    <input type=\"text\" name=\"username\" placeholder=\"Username\">\n    <input type=\"password\" name=\"password\" placeholder=\"Password\">\n    <input type=\"checkbox\" name=\"remember\"> Remember me\n    <input type=\"submit\" value=\"Login\">\n</form>\n```",
    "type": "html",
    "tags": ["html", "forms", "submission", "data"]
  },
  ----------------------------------
    {
    "question": "Explain these Git terms simply:",
    "answer": "**Directory:**\nA folder on your computer that contains files and other folders.\n\n**Terminal/Command Line:**\nA text-based way to interact with your computer (like talking to your computer with text commands).\n\n**CLI:**\nCommand Line Interface - another name for terminal/command line.\n\n**cd (Change Directory):**\nCommand to move between folders: `cd folder-name`\n\n**Code Editor:**\nA program for writing code (like VS Code, Sublime Text, Atom).\n\n**Repository:**\nA project folder that Git is tracking (contains your code and Git history).\n\n**GitHub:**\nOnline platform where you can store and share your Git repositories.\n\n**README.md:**\nA file that explains what your project is about (like a project description).",
    "type": "git",
    "tags": ["git", "terminology", "basics", "concepts"]
  },
  &&
  {
    "question": "Explain these Git commands simply:",
    "answer": "**Clone:**\n`git clone` - Downloads a copy of a repository from GitHub to your computer.\n\n**Add:**\n`git add` - Tells Git to start tracking changes in your files (stages them).\n\n**Commit:**\n`git commit` - Saves your changes with a message (like saving a snapshot).\n\n**Push:**\n`git push` - Uploads your local changes to GitHub (sends your work to the cloud).\n\n**Pull:**\n`git pull` - Downloads the latest changes from GitHub to your computer.\n\n**Simple workflow:**\n1. `git add .` (stage changes)\n2. `git commit -m \"message\"` (save snapshot)\n3. `git push` (upload to GitHub)\n\n**Think of it like:**\n- Add = Put items in a box\n- Commit = Seal the box with a label\n- Push = Send the box to storage\n- Pull = Get the latest box from storage",
    "type": "git",
    "tags": ["git", "commands", "workflow", "basics"]
  },
  &&
    {
    "question": "How to solve 'origin does not appear to be a git repo' error?",
    "answer": "**The error means:**\nGit doesn't know where to send your code (no remote repository set up).\n\n**How to solve:**\n\n**Step 1: Create repository on GitHub**\n- Go to GitHub.com\n- Click \"New repository\"\n- Give it a name\n- Click \"Create repository\"\n\n**Step 2: Copy the repository URL**\n- Copy the HTTPS or SSH URL from GitHub\n- Example: `https://github.com/username/repo-name.git`\n\n**Step 3: Connect your local repo to GitHub**\n```bash\ngit remote add origin https://github.com/username/repo-name.git\n```\n\n**Step 4: Verify it worked**\n```bash\ngit remote -v\n```\n\n**Step 5: Push your code**\n```bash\ngit push -u origin main\n```\n\n**What this does:**\n- `remote add origin` = tells Git where GitHub repo is\n- `remote -v` = shows connected repositories\n- `push -u origin main` = uploads code and sets default branch",
    "type": "git",
    "tags": ["git", "error", "origin", "remote", "github"]
  },
  &&
    {
    "question": "How to undo staging in Git?",
    "answer": "**Undo staging for single file:**\n```bash\ngit reset filename\n```\n\n**Undo staging for all files:**\n```bash\ngit reset\n```\n\n**Examples:**\n```bash\n# Unstage specific file\ngit reset index.html\n\n# Unstage all files\ngit reset\n\n# Unstage all files in directory\ngit reset css/\n```\n\n**What `git reset` does:**\n- Removes files from staging area\n- Files go back to \"modified\" status\n- Changes are still there, just not staged\n\n**Before reset:**\n```bash\n$ git status\nChanges to be committed:\n  modified:   index.html\n  modified:   style.css\n```\n\n**After `git reset index.html`:**\n```bash\n$ git status\nChanges to be committed:\n  modified:   style.css\n\nChanges not staged for commit:\n  modified:   index.html\n```\n\n**Think of it like:**\n- Taking items out of shopping cart\n- Unchecking files you don't want to commit\n- Going back to \"modified\" status",
    "type": "git",
    "tags": ["git", "reset", "unstage", "undo"]
  },
  &&
    {
    "question": "How to delete branches in Git?",
    "answer": "**Delete local branch:**\n```bash\ngit branch -d branch-name\n```\n\n**Force delete (if branch has unmerged changes):**\n```bash\ngit branch -D branch-name\n```\n\n**Delete remote branch:**\n```bash\ngit push origin --delete branch-name\n```\n\n**Examples:**\n```bash\n# Delete local feature branch\ngit branch -d feature-login\n\n# Force delete (careful!)\ngit branch -D old-feature\n\n# Delete remote branch\ngit push origin --delete feature-signup\n```\n\n**What happens:**\n- `-d` = safe delete (only if merged)\n- `-D` = force delete (even if not merged)\n- Remote delete = removes from GitHub\n\n**Best practice:**\n- Delete branches after merging\n- Keep main branches (main, develop)\n- Clean up old feature branches\n\n**Think of it like:**\n- Throwing away old drafts\n- Cleaning up your workspace\n- Keeping only what you need",
    "type": "git",
    "tags": ["git", "branches", "delete", "cleanup"]
  },
  ---------------------------  

  {
    "question": "How do you write in camelCase?",
    "answer": "**CamelCase Naming Convention**\n\n**Format:**\n- Start with lowercase letter\n- Capitalize the first letter of each new word\n- No spaces or underscores\n\n**Example:**\n```javascript\nweWriteItLikeThis\n```\n\n**Common uses:**\n```javascript\nvar firstName = \"John\";\nvar lastName = \"Doe\";\nvar myAge = 25;\nvar userEmailAddress = \"john@example.com\";\n\nfunction calculateTotalPrice() {\n    // code here\n}\n\nfunction getUserData() {\n    // code here\n}\n```\n\n**Why use camelCase:**\n- Standard convention in JavaScript\n- Easy to read without spaces\n- Distinguishes variables from constants (UPPER_CASE)\n- Distinguishes from classes (PascalCase)",
    "type": "javascript",
    "tags": ["javascript", "naming", "conventions", "camelCase"],
    "code": "// ✅ CORRECT: camelCase examples\nvar firstName = \"John\";\nvar lastName = \"Doe\";\nvar myAge = 25;\nvar userEmailAddress = \"john@example.com\";\nvar numberOfStudents = 30;\nvar isLoggedIn = true;\n\nfunction calculateTotalPrice(price, tax) {\n    return price + tax;\n}\n\nfunction getUserData() {\n    return {firstName: \"John\", lastName: \"Doe\"};\n}\n\n// ❌ WRONG: Not camelCase\nvar first_name = \"John\"; // snake_case (Python style)\nvar First_Name = \"John\"; // Mixed\nvar firstname = \"John\"; // All lowercase (hard to read)\nvar FIRSTNAME = \"John\"; // All uppercase (for constants only)\n\n// PascalCase (for classes/constructors)\nclass UserProfile {\n    constructor(name) {\n        this.name = name;\n    }\n}"
  }, Add snake case and the other one used for css
  ------------------------------
    {
    "question": "How to perform addition, subtraction, multiplication, and division in JavaScript?",
    "answer": "**Arithmetic Operators in JavaScript**\n\n**Basic operators:**\n```javascript\n+ // Addition\n- // Subtraction\n* // Multiplication\n/ // Division\n```\n\n**Examples:**\n```javascript\nvar sum = 10 + 5;        // 15 (addition)\nvar difference = 10 - 5; // 5 (subtraction)\nvar product = 10 * 5;    // 50 (multiplication)\nvar quotient = 10 / 5;   // 2 (division)\n```\n\n**Additional operators:**\n```javascript\n% // Modulus (remainder)\n** // Exponentiation (power)\n```\n\n**Examples:**\n```javascript\nvar remainder = 10 % 3;  // 1 (10 divided by 3, remainder 1)\nvar power = 2 ** 3;      // 8 (2 to the power of 3)\n```",
    "type": "javascript",
    "tags": ["javascript", "arithmetic", "operators", "math"],
    "code": "// Basic arithmetic operations\nvar a = 10;\nvar b = 5;\n\n// Addition\nvar sum = a + b;\nconsole.log(\"Addition: \" + a + \" + \" + b + \" = \" + sum); // 15\n\n// Subtraction\nvar difference = a - b;\nconsole.log(\"Subtraction: \" + a + \" - \" + b + \" = \" + difference); // 5\n\n// Multiplication\nvar product = a * b;\nconsole.log(\"Multiplication: \" + a + \" * \" + b + \" = \" + product); // 50\n\n// Division\nvar quotient = a / b;\nconsole.log(\"Division: \" + a + \" / \" + b + \" = \" + quotient); // 2\n\n// Modulus (remainder)\nvar remainder = 10 % 3;\nconsole.log(\"Modulus: 10 % 3 = \" + remainder); // 1\n\n// Exponentiation (power)\nvar power = 2 ** 3;\nconsole.log(\"Exponentiation: 2 ** 3 = \" + power); // 8\n\n// Order of operations (PEMDAS)\nvar result = (10 + 5) * 2 / 3;\nconsole.log(\"Order of operations: (10 + 5) * 2 / 3 = \" + result); // 10"
  },
  &&
  {
    "question": "What are the shorthand assignment operators in JavaScript?",
    "answer": "**Shorthand Assignment Operators**\n\n**Basic operators:**\n```javascript\n+= // Add and assign\n-= // Subtract and assign\n*= // Multiply and assign\n/= // Divide and assign\n```\n\n**How they work:**\n```javascript\nx += 5;  // Same as: x = x + 5\nx -= 3;  // Same as: x = x - 3\nx *= 2;  // Same as: x = x * 2\nx /= 4;  // Same as: x = x / 4\n```\n\n**Additional operators:**\n```javascript\n%= // Modulus and assign\n**= // Exponentiation and assign\n```\n\n**Examples:**\n```javascript\nvar num = 10;\nnum %= 3;   // num = num % 3 (remainder)\nnum **= 2;  // num = num ** 2 (power)\n```",
    "type": "javascript",
    "tags": ["javascript", "operators", "assignment", "shorthand"],
    "code": "// Shorthand assignment operators examples\n\n// Addition assignment\nvar x = 10;\nx += 5;  // Same as: x = x + 5\nconsole.log(x); // 15\n\n// Subtraction assignment\nvar y = 20;\ny -= 8;  // Same as: y = y - 8\nconsole.log(y); // 12\n\n// Multiplication assignment\nvar z = 5;\nz *= 3;  // Same as: z = z * 3\nconsole.log(z); // 15\n\n// Division assignment\nvar a = 20;\na /= 4;  // Same as: a = a / 4\nconsole.log(a); // 5\n\n// Modulus assignment\nvar b = 10;\nb %= 3;  // Same as: b = b % 3\nconsole.log(b); // 1\n\n// Exponentiation assignment\nvar c = 2;\nc **= 3;  // Same as: c = c ** 3\nconsole.log(c); // 8\n\n// Practical example\nvar score = 100;\nscore += 50;  // Earned 50 points\nscore -= 20;  // Lost 20 points\nscore *= 2;   // Double points bonus\nconsole.log(\"Final score: \" + score); // 260"
  },
  ---------------------
  {
    "question": "What is an array in JavaScript and how to create one?",
    "answer": "**JavaScript Arrays**\n\n**What is an array:**\nArrays allow you to store several pieces of data in one variable. You can store different types of data together (strings, numbers, booleans, etc.).\n\n**How to create an array:**\n```javascript\nvar ourarray = [\"john\", \"mary\", \"gambit\", 23, 22, 10];\nconsole.log(ourarray);\n```\n\n**Key points:**\n- Arrays use square brackets `[]`\n- Items are separated by commas\n- Can contain different data types\n- Items are stored in order\n- Access items by index (starting at 0)\n\n**Examples:**\n```javascript\nvar numbers = [1, 2, 3, 4, 5];\nvar names = [\"Alice\", \"Bob\", \"Charlie\"];\nvar mixed = [\"text\", 42, true, null];\n```",
    "type": "javascript",
    "tags": ["javascript", "arrays", "data-structures"],
    "code": "// Basic array\nvar ourarray = [\"john\", \"mary\", \"gambit\", 23, 22, 10];\nconsole.log(ourarray);\n// Output: [\"john\", \"mary\", \"gambit\", 23, 22, 10]\n\n// Arrays of different types\nvar numbers = [1, 2, 3, 4, 5];\nvar names = [\"Alice\", \"Bob\", \"Charlie\"];\nvar booleans = [true, false, true];\nvar mixed = [\"text\", 42, true, null, [1, 2]];\n\n// Empty array\nvar empty = [];\n\n// Array with one item\nvar single = [\"only one\"];\n\n// Accessing array items\nvar fruits = [\"apple\", \"banana\", \"orange\"];\nconsole.log(fruits[0]); // \"apple\"\nconsole.log(fruits[1]); // \"banana\"\nconsole.log(fruits[2]); // \"orange\"\n\n// Array length\nconsole.log(fruits.length); // 3"
  },
  &&
  {
    "question": "What is a nested array (multi-dimensional array)?",
    "answer": "**Nested Arrays**\n\n**What is a nested array:**\nA nested array is an array within an array. It's also known as a multi-dimensional array.\n\n**Example:**\n```javascript\nvar ourarray = [\n    [\"john\", \"mary\", \"gambit\", 23, 22, 10],\n    [\"alice\", \"bob\", \"charlie\", 30, 35, 40],\n    [\"x\", \"y\", \"z\", 1, 2, 3]\n];\n```\n\n**Why use nested arrays:**\n- Store related groups of data\n- Create tables or grids\n- Represent 2D or 3D data\n- Organize complex data structures\n\n**Accessing nested arrays:**\n```javascript\nourarray[0]       // First inner array\nourarray[0][0]    // First item of first array\nourarray[1][2]    // Third item of second array\n```",
    "type": "javascript",
    "tags": ["javascript", "arrays", "nested-arrays", "multidimensional"],
    "code": "// Nested array example\nvar ourarray = [\n    [\"john\", \"mary\", \"gambit\", 23, 22, 10],\n    [\"alice\", \"bob\", \"charlie\", 30, 35, 40],\n    [\"x\", \"y\", \"z\", 1, 2, 3]\n];\n\nconsole.log(ourarray);\n\n// Accessing outer arrays\nconsole.log(ourarray[0]); // [\"john\", \"mary\", \"gambit\", 23, 22, 10]\nconsole.log(ourarray[1]); // [\"alice\", \"bob\", \"charlie\", 30, 35, 40]\nconsole.log(ourarray[2]); // [\"x\", \"y\", \"z\", 1, 2, 3]\n\n// Accessing individual elements\nconsole.log(ourarray[0][0]); // \"john\"\nconsole.log(ourarray[0][1]); // \"mary\"\nconsole.log(ourarray[1][2]); // \"charlie\"\nconsole.log(ourarray[2][3]); // 1\n\n// Practical example: grid/table\nvar grid = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\n\nconsole.log(grid[1][1]); // 5 (center of grid)\n\n// Student grades example\nvar studentGrades = [\n    [\"Alice\", 90, 85, 92],\n    [\"Bob\", 75, 80, 78],\n    [\"Charlie\", 95, 88, 91]\n];\n\nconsole.log(studentGrades[0][0] + \"'s first grade: \" + studentGrades[0][1]);\n// Output: Alice's first grade: 90"
  },
  ---------------------

    {
    "question": "What is bracket notation in JavaScript?",
    "answer": "**Bracket Notation for Strings**\n\n**What it is:**\nBracket notation allows you to access individual characters in a string using their index position.\n\n**How it works:**\n```javascript\nvar firstName = \"Jack\";\nvar firstLetter = firstName[0];  // \"J\"\nvar secondLetter = firstName[1]; // \"a\"\n```\n\n**Key points:**\n- Indexing starts at 0 (first character is index 0)\n- Returns the character at that position\n- Returns `undefined` if index doesn't exist\n- Strings are zero-indexed\n\n**Index positions:**\n```\n\"Jack\"\n J a c k\n 0 1 2 3\n```",
    "type": "javascript",
    "tags": ["javascript", "strings", "bracket-notation", "indexing"],
    "code": "// Basic bracket notation\nvar firstName = \"Jack\";\nvar firstLetter = firstName[0];  // \"J\"\nvar secondLetter = firstName[1]; // \"a\"\nvar thirdLetter = firstName[2];  // \"c\"\nvar fourthLetter = firstName[3]; // \"k\"\n\nconsole.log(firstLetter);  // J\nconsole.log(secondLetter); // a\nconsole.log(thirdLetter);  // c\nconsole.log(fourthLetter); // k\n\n// Out of bounds\nconsole.log(firstName[10]); // undefined\n\n// Practical example\nvar name = \"JavaScript\";\nconsole.log(\"First letter: \" + name[0]); // J\nconsole.log(\"Second letter: \" + name[1]); // a\nconsole.log(\"Last letter: \" + name[name.length - 1]); // t\n\n// Get initials\nvar fullName = \"John Doe\";\nvar firstInitial = fullName[0];\nvar lastInitial = fullName[5];\nconsole.log(\"Initials: \" + firstInitial + \".\" + lastInitial + \".\"); // J.D."
  },
&&
    {
    "question": "How to access elements in arrays and nested arrays with bracket notation?",
    "answer": "**Accessing Array Elements**\n\n**Single array:**\n```javascript\nvar ourarray = [\"john\", \"mary\", \"gambit\", 23, 22, 10];\nvar item = ourarray[1];  // \"mary\"\n```\n\n**Nested array:**\n```javascript\nvar nestedArray = [\n    [\"john\", \"mary\"],\n    [\"gambit\", 23, 22, 10]\n];\nvar lastArray = nestedArray[nestedArray.length - 1];\n// Gets the last inner array\n```\n\n**Individual elements in nested arrays:**\n```javascript\nvar element = ourarray[0][1];  // \"mary\"\n// [0] = first inner array\n// [1] = second element in that array\n```\n\n**Using length property:**\n```javascript\nnestedArray[nestedArray.length - 1]  // Last array\nourarray[ourarray.length - 1]        // Last element\n```",
    "type": "javascript",
    "tags": ["javascript", "arrays", "bracket-notation", "indexing"],
    "code": "// Single array access\nvar ourarray = [\"john\", \"mary\", \"gambit\", 23, 22, 10];\nvar item = ourarray[1];\nconsole.log(item); // \"mary\"\n\nconsole.log(ourarray[0]); // \"john\"\nconsole.log(ourarray[3]); // 23\nconsole.log(ourarray[ourarray.length - 1]); // 10 (last item)\n\n// Nested array access\nvar nestedArray = [\n    [\"john\", \"mary\", \"gambit\", 23, 22, 10],\n    [\"alice\", \"bob\"],\n    [\"x\", \"y\", \"z\"]\n];\n\n// Access inner arrays\nconsole.log(nestedArray[0]); // [\"john\", \"mary\", \"gambit\", 23, 22, 10]\nconsole.log(nestedArray[1]); // [\"alice\", \"bob\"]\nconsole.log(nestedArray[nestedArray.length - 1]); // [\"x\", \"y\", \"z\"] (last array)\n\n// Access individual elements\nvar access = nestedArray[0][1];\nconsole.log(access); // \"mary\"\n\nconsole.log(nestedArray[0][0]); // \"john\"\nconsole.log(nestedArray[1][1]); // \"bob\"\nconsole.log(nestedArray[2][2]); // \"z\"\n\n// Dynamic access\nvar outerIndex = 0;\nvar innerIndex = 2;\nconsole.log(nestedArray[outerIndex][innerIndex]); // \"gambit\""
  
  },
  &&
    {
    "question": "How do you access the values of objects in JavaScript?",
    "answer": "**Accessing Object Properties**\n\n**Two main ways:**\n\n**1. Dot Notation:**\n```javascript\nobject.property\n```\n\n**2. Bracket Notation:**\n```javascript\nobject[\"property\"]\n```\n\n**When to use each:**\n- **Dot notation:** When property name is simple (no spaces, starts with letter)\n- **Bracket notation:** When property has spaces, special characters, or is stored in a variable\n\n**Examples:**\n```javascript\nvar testObj = {\n    \"Shirt\": \"blue\",\n    \"Trousers\": \"red\",\n    \"Cap\": \"orange\"\n};\n\nvar shirtColor = testObj.Cap;  // Dot notation\nvar capColor = testObj[\"The Cap\"]; // Bracket notation\n```",
    "type": "javascript",
    "tags": ["javascript", "objects", "access", "properties"],
    "code": "// Dot notation example\nvar testObj = {\n    Shirt: \"blue\",\n    Trousers: \"red\",\n    Cap: \"orange\"\n};\n\nvar shirtColor = testObj.Cap;\nconsole.log(JSON.stringify(shirtColor)); // \"orange\"\nconsole.log(JSON.stringify(testObj.Shirt)); // \"blue\"\n\n// Bracket notation example\nvar testObj2 = {\n    \"The Trousers\": \"red\",\n    \"The Cap\": \"orange\",\n    \"The Shirt\": \"blue\"\n};\n\nvar capColor = testObj2[\"The Cap\"];\nconsole.log(capColor); // \"orange\"\n\n// When to use bracket notation\nvar propertyName = \"The Shirt\";\nvar shirtColor2 = testObj2[propertyName];\nconsole.log(shirtColor2); // \"blue\"\n\n// Accessing with variables\nvar testObj3 = {\n    \"The Trousers\": \"red\",\n    \"The Cap\": \"orange\",\n    \"The Shirt\": \"blue\",\n    16: \"A Number\"\n};\n\nvar playerNumber = 16;\nvar player = testObj3[playerNumber];\nconsole.log(player); // \"A Number\"\n\nvar capColor3 = testObj3[\"The Cap\"];\nconsole.log(capColor3); // \"orange\""
  },
  ------------------------
  
  {
    "question": "How to add elements to an array with push()?",
    "answer": "**Array push() Method**\n\n**What it does:**\nAdds one or more elements to the END of an array.\n\n**Syntax:**\n```javascript\narray.push(element1, element2, ...);\n```\n\n**Example:**\n```javascript\nvar ourarray = [[\"john\", \"mary\", \"gambit\", 23, 22, 10]];\nourarray.push([42, 48]);\n// Now: [[\"john\", \"mary\", \"gambit\", 23, 22, 10], [42, 48]]\n```\n\n**Key points:**\n- Adds to the end of array\n- Can add multiple items at once\n- Modifies the original array\n- Returns new length of array\n\n**Common uses:**\n- Building arrays dynamically\n- Adding items to a list\n- Queue operations",
    "type": "javascript",
    "tags": ["javascript", "arrays", "push", "methods"],
    "code": "// Basic push example\nvar ourarray = [[\"john\", \"mary\", \"gambit\", 23, 22, 10]];\nconsole.log(\"Before:\", ourarray);\n\nourarray.push([42, 48]);\nconsole.log(\"After:\", ourarray);\n// [[\"john\", \"mary\", \"gambit\", 23, 22, 10], [42, 48]]\n\n// Push single items\nvar numbers = [1, 2, 3];\nnumbers.push(4);\nconsole.log(numbers); // [1, 2, 3, 4]\n\nnumbers.push(5);\nconsole.log(numbers); // [1, 2, 3, 4, 5]\n\n// Push multiple items\nvar fruits = [\"apple\"];\nfruits.push(\"banana\", \"orange\", \"grape\");\nconsole.log(fruits); // [\"apple\", \"banana\", \"orange\", \"grape\"]\n\n// Push returns new length\nvar letters = [\"a\", \"b\"];\nvar newLength = letters.push(\"c\", \"d\");\nconsole.log(\"New length:\", newLength); // 4\nconsole.log(\"Array:\", letters); // [\"a\", \"b\", \"c\", \"d\"]\n\n// Practical example: building a todo list\nvar todos = [];\ntodos.push(\"Buy groceries\");\ntodos.push(\"Walk dog\");\ntodos.push(\"Study JavaScript\");\nconsole.log(todos);\n// [\"Buy groceries\", \"Walk dog\", \"Study JavaScript\"]"
  },
  {
    "question": "How to remove elements from an array with pop()?",
    "answer": "**Array pop() Method**\n\n**What it does:**\nRemoves the LAST element from an array and returns it.\n\n**Syntax:**\n```javascript\nvar removed = array.pop();\n```\n\n**Example:**\n```javascript\nvar ourarray = [\"john\", \"mary\", \"gambit\", 23, 22, 10];\nvar remove = ourarray.pop();\nconsole.log(remove);  // 10 (removed item)\nconsole.log(ourarray); // [\"john\", \"mary\", \"gambit\", 23, 22]\n```\n\n**Nested arrays:**\n```javascript\nvar nestedArray = [[\"john\", \"mary\"], [\"gambit\", 23, 22, 10]];\nvar remove = nestedArray.pop();\n// remove = [\"gambit\", 23, 22, 10]\n// nestedArray = [[\"john\", \"mary\"]]\n```\n\n**Key points:**\n- Removes from the end\n- Returns the removed element\n- Modifies the original array\n- Returns `undefined` if array is empty",
    "type": "javascript",
    "tags": ["javascript", "arrays", "pop", "methods"],
    "code": "// Basic pop example\nvar ourarray = [\"john\", \"mary\", \"gambit\", 23, 22, 10];\nconsole.log(\"Before:\", ourarray);\n\nvar remove = ourarray.pop();\nconsole.log(\"Removed:\", remove); // 10\nconsole.log(\"After:\", ourarray);\n// [\"john\", \"mary\", \"gambit\", 23, 22]\n\n// Nested array pop\nvar nestedArray = [[\"john\", \"mary\"], [\"gambit\", 23, 22, 10]];\nvar remove1 = nestedArray.pop();\nconsole.log(\"Removed array:\", remove1); // [\"gambit\", 23, 22, 10]\nconsole.log(\"Remaining:\", nestedArray); // [[\"john\", \"mary\"]]\n\n// Multiple pops\nvar numbers = [1, 2, 3, 4, 5];\nconsole.log(numbers.pop()); // 5\nconsole.log(numbers.pop()); // 4\nconsole.log(numbers.pop()); // 3\nconsole.log(numbers); // [1, 2]\n\n// Empty array\nvar empty = [];\nconsole.log(empty.pop()); // undefined\n\n// Practical example: undo functionality\nvar history = [\"action1\", \"action2\", \"action3\"];\nfunction undo() {\n    var lastAction = history.pop();\n    console.log(\"Undoing:\", lastAction);\n    return lastAction;\n}\nundo(); // \"Undoing: action3\"\nconsole.log(history); // [\"action1\", \"action2\"]"
  },
  {
    "question": "How to use shift() to remove elements from the beginning of an array?",
    "answer": "**Array shift() Method**\n\n**What it does:**\nRemoves the FIRST element from an array and returns it.\n\n**Syntax:**\n```javascript\nvar removed = array.shift();\n```\n\n**Example:**\n```javascript\nvar ourarray = [\"john\", \"mary\", \"gambit\", 23, 22, 10];\nvar remove = ourarray.shift();\nconsole.log(remove);   // \"john\" (removed item)\nconsole.log(ourarray); // [\"mary\", \"gambit\", 23, 22, 10]\n```\n\n**Nested arrays:**\n```javascript\nvar nestedArray = [[\"john\", \"mary\"], [\"gambit\", 23, 22, 10], [\"x\", \"y\"]];\nvar remove1 = nestedArray.shift();\n// remove1 = [\"john\", \"mary\"]\n// nestedArray = [[\"gambit\", 23, 22, 10], [\"x\", \"y\"]]\n```\n\n**Key differences:**\n- `pop()` - Removes from END\n- `shift()` - Removes from BEGINNING",
    "type": "javascript",
    "tags": ["javascript", "arrays", "shift", "methods"],
    "code": "// Basic shift example\nvar ourarray = [\"john\", \"mary\", \"gambit\", 23, 22, 10];\nconsole.log(\"Before:\", ourarray);\n\nvar remove = ourarray.shift();\nconsole.log(\"Removed:\", remove); // \"john\"\nconsole.log(\"After:\", ourarray);\n// [\"mary\", \"gambit\", 23, 22, 10]\n\n// Nested array shift\nvar nestedArray = [\n    [\"john\", \"mary\"],\n    [\"gambit\", 23, 22, 10],\n    [\"x\", \"y\"]\n];\n\nvar remove1 = nestedArray.shift();\nconsole.log(\"Removed:\", remove1); // [\"john\", \"mary\"]\nconsole.log(\"Remaining:\", nestedArray);\n// [[\"gambit\", 23, 22, 10], [\"x\", \"y\"]]\n\n// Multiple shifts\nvar numbers = [1, 2, 3, 4, 5];\nconsole.log(numbers.shift()); // 1\nconsole.log(numbers.shift()); // 2\nconsole.log(numbers); // [3, 4, 5]\n\n// Practical example: queue (FIFO - First In First Out)\nvar queue = [\"first\", \"second\", \"third\"];\nvar served = queue.shift();\nconsole.log(\"Serving:\", served); // \"first\"\nconsole.log(\"Remaining in queue:\", queue);\n// [\"second\", \"third\"]"
  },
  {
    "question": "How to use unshift() to add elements to the beginning of an array?",
    "answer": "**Array unshift() Method**\n\n**What it does:**\nAdds one or more elements to the BEGINNING of an array.\n\n**Syntax:**\n```javascript\narray.unshift(element1, element2, ...);\n```\n\n**Example:**\n```javascript\nvar ourarray = [\"mary\", \"gambit\"];\nourarray.unshift(\"John\");\n// Now: [\"John\", \"mary\", \"gambit\"]\n```\n\n**With shift() and unshift():**\n```javascript\nvar ourarray = [\"john\", \"mary\", \"gambit\"];\nvar remove = ourarray.shift();  // Removes \"john\"\nourarray.unshift(\"John\");       // Adds \"John\" at start\n// Result: [\"John\", \"mary\", \"gambit\"]\n```\n\n**Nested arrays:**\n```javascript\nvar nestedArray = [[\"gambit\", 23], [\"x\", \"y\"]];\nnestedArray.unshift([\"Text1\", \"Text2\"]);\n// [[\"Text1\", \"Text2\"], [\"gambit\", 23], [\"x\", \"y\"]]\n```\n\n**Key differences:**\n- `push()` - Adds to END\n- `unshift()` - Adds to BEGINNING",
    "type": "javascript",
    "tags": ["javascript", "arrays", "unshift", "methods"],
    "code": "// Basic unshift example\nvar ourarray = [\"mary\", \"gambit\", 23, 22, 10];\nconsole.log(\"Before:\", ourarray);\n\nvar add = ourarray.unshift(\"John\");\nconsole.log(\"After:\", ourarray);\n// [\"John\", \"mary\", \"gambit\", 23, 22, 10]\nconsole.log(\"New length:\", add);\n\n// Shift then unshift\nvar ourarray2 = [\"john\", \"mary\", \"gambit\", 23, 22, 10];\nvar remove = ourarray2.shift();\nconsole.log(\"Removed:\", remove); // \"john\"\nconsole.log(\"After shift:\", ourarray2);\n\nvar add2 = ourarray2.unshift(\"John\");\nconsole.log(\"After unshift:\", ourarray2);\n// [\"John\", \"mary\", \"gambit\", 23, 22, 10]\n\n// Nested array unshift\nvar nestedArray = [[\"gambit\", 23, 22, 10], [\"x\", \"y\"]];\nconsole.log(\"Before:\", nestedArray);\n\nnestedArray.shift(); // Remove first\nconsole.log(\"After shift:\", nestedArray);\n\nnestedArray.unshift([\"Text1\", \"Text2\"]);\nconsole.log(\"After unshift:\", nestedArray);\n// [[\"Text1\", \"Text2\"], [\"x\", \"y\"]]\n\n// Multiple items\nvar numbers = [3, 4, 5];\nnumbers.unshift(1, 2);\nconsole.log(numbers); // [1, 2, 3, 4, 5]"
  },
  ----------------------------
    {
    "question": "How to use comparison operators (==, !=, >, <, >=, <=) in JavaScript?",
    "answer": "**Comparison Operators**\n\n**Equality operators:**\n- `==` - Equal to (loose equality)\n- `!=` - Not equal to\n- `===` - Strict equal to (same value AND type)\n\n**Relational operators:**\n- `>` - Greater than\n- `<` - Less than\n- `>=` - Greater than or equal to\n- `<=` - Less than or equal to\n\n**Examples:**\n\n**Equality (==):**\n```javascript\nfunction equality(val) {\n    if (val == 12) {\n        return \"yes the number is 12\";\n    }\n    return \"no its not 12\";\n}\n```\n\n**Comparison (==):**\n```javascript\nfunction equality(a, b) {\n    if (a == b) {\n        return \"Equal\";\n    }\n    return \"Not equal\";\n}\nequality(1, \"1\"); // \"Equal\" (loose equality)\n```\n\n**Inequality (!=):**\n```javascript\nfunction equality(a, b) {\n    if (a != b) {\n        return \"Its Not Equal To\";\n    }\n    return \"It Is Equal To\";\n}\n```\n\n**Greater/Less Than:**\n```javascript\nfunction equality(val) {\n    if (val >= 12) {\n        return \"IT IS GREATER THAN OR EQUAL TO 12\";\n    }\n    return \"IT IS LESS THAN 12\";\n}\n```\n\n**Note:** For strict comparison (type + value), use `===` instead of `==`:\n```javascript\nif (val === 12) // Only true for number 12, not string \"12\"\n```",
    "type": "javascript",
    "tags": ["javascript", "operators", "comparison", "conditionals"],
    "code": "// Equality operator (==)\nfunction testEquality(val) {\n    if (val == 12) {\n        return \"yes the number is 12\";\n    }\n    return \"no its not 12\";\n}\nconsole.log(testEquality(12)); // \"yes the number is 12\"\n\n// Comparison\nfunction compare(a, b) {\n    if (a == b) {\n        return \"Equal\";\n    }\n    return \"Not equal\";\n}\nconsole.log(compare(1, \"1\")); // \"Equal\" (loose equality)\n\n// Inequality (!=)\nfunction testInequality(a, b) {\n    if (a != b) {\n        return \"Its Not Equal To\";\n    }\n    return \"It Is Equal To\";\n}\nconsole.log(testInequality(1, 2)); // \"Its Not Equal To\"\n\n// Greater than or equal (>=)\nfunction testGreaterOrEqual(val) {\n    if (val >= 12) {\n        return \"IT IS GREATER THAN OR EQUAL TO 12\";\n    }\n    return \"IT IS LESS THAN 12\";\n}\nconsole.log(testGreaterOrEqual(12)); // \"IT IS GREATER THAN OR EQUAL TO 12\"\n\n// Strict equality (===)\nfunction strictEquality(val) {\n    if (val === 12) {\n        return \"Strictly equal to 12\";\n    }\n    return \"Not strictly equal\";\n}\nconsole.log(strictEquality(12));   // \"Strictly equal to 12\"\nconsole.log(strictEquality(\"12\")); // \"Not strictly equal\""
  },
&&  
  {
    "question": "How to use logical operators (AND &&, OR ||) in JavaScript?",
    "answer": "**Logical Operators**\n\n**AND operator (&&):**\n- Returns `true` if BOTH conditions are true\n- Otherwise returns `false`\n\n```javascript\nfunction testAnd(val) {\n    if (val >= 12 && val >= 8) {\n        return \"GOOD\";\n    }\n    return \"BAD\";\n}\ntestAnd(20); // \"GOOD\" (20 is >= 12 AND >= 8)\n```\n\n**OR operator (||):**\n- Returns `true` if AT LEAST ONE condition is true\n- Returns `false` only if BOTH are false\n\n```javascript\nfunction testOr(val) {\n    if (val > 20 || val < 10) {\n        return \"OUTSIDE\";\n    }\n    return \"INSIDE\";\n}\ntestOr(30); // \"OUTSIDE\" (30 > 20)\n```\n\n**Truth tables:**\n\n**AND (&&):**\n- true && true = true\n- true && false = false\n- false && true = false\n- false && false = false\n\n**OR (||):**\n- true || true = true\n- true || false = true\n- false || true = true\n- false || false = false",
    "type": "javascript",
    "tags": ["javascript", "operators", "logical", "and", "or"],
    "code": "// AND operator (&&)\nfunction testAnd(val) {\n    if (val >= 12 && val >= 8) {\n        return \"GOOD\";\n    }\n    return \"BAD\";\n}\nconsole.log(testAnd(20)); // \"GOOD\" (20 >= 12 AND 20 >= 8)\nconsole.log(testAnd(5));  // \"BAD\" (5 >= 12 is false)\n\n// OR operator (||)\nfunction testOr(val) {\n    if (val > 20 || val < 10) {\n        return \"OUTSIDE\";\n    }\n    return \"INSIDE\";\n}\nconsole.log(testOr(30)); // \"OUTSIDE\" (30 > 20 is true)\nconsole.log(testOr(5));  // \"OUTSIDE\" (5 < 10 is true)\nconsole.log(testOr(15)); // \"INSIDE\" (both conditions false)\n\n// Complex conditions\nfunction checkAge(age, hasPermission) {\n    if (age >= 18 && hasPermission) {\n        return \"Access granted\";\n    }\n    return \"Access denied\";\n}\nconsole.log(checkAge(20, true));  // \"Access granted\"\nconsole.log(checkAge(20, false)); // \"Access denied\"\n\n// Multiple OR conditions\nfunction checkDay(day) {\n    if (day === \"Saturday\" || day === \"Sunday\") {\n        return \"Weekend\";\n    }\n    return \"Weekday\";\n}\nconsole.log(checkDay(\"Saturday\")); // \"Weekend\"\nconsole.log(checkDay(\"Monday\"));   // \"Weekday\""
  },
  ---------------------------
    {
    "question": "What is a switch statement and how to use it?",
    "answer": "**Switch Statement**\n\n**What it is:**\nA switch statement tests a value against multiple cases. It's an alternative to multiple if/else statements.\n\n**Basic syntax:**\n```javascript\nswitch (val) {\n    case 1:\n        answer = \"alpha\";\n        break;\n    case 2:\n        answer = \"beta\";\n        break;\n    default:\n        answer = \"unknown\";\n}\n```\n\n**Key points:**\n- Each `case` tests for a specific value\n- `break` prevents fall-through to next case\n- `default` runs if no cases match\n- Without `break`, execution continues to next case\n\n**Example:**\n```javascript\nfunction caseInSwitch(val) {\n    var answer = \"\";\n    switch (val) {\n        case 1:\n            answer = \"alpha\";\n            break;\n        case 2:\n            answer = \"beta\";\n            break;\n        case 3:\n            answer = \"gamma\";\n            break;\n        case 4:\n            answer = \"delta\";\n            break;\n        default:\n            answer = \"Stuff\";\n    }\n    return answer;\n}\n```",
    "type": "javascript",
    "tags": ["javascript", "switch", "conditionals", "control-flow"],
    "code": "// Basic switch statement\nfunction caseInSwitch(val) {\n    var answer = \"\";\n    switch (val) {\n        case 1:\n            answer = \"alpha\";\n            break;\n        case 2:\n            answer = \"beta\";\n            break;\n        case 3:\n            answer = \"gamma\";\n            break;\n        case 4:\n            answer = \"delta\";\n            break;\n        default:\n            answer = \"Stuff\";\n    }\n    return answer;\n}\n\nconsole.log(caseInSwitch(1)); // \"alpha\"\nconsole.log(caseInSwitch(2)); // \"beta\"\nconsole.log(caseInSwitch(5)); // \"Stuff\" (default)\n\n// Practical example: days of week\nfunction getDayType(day) {\n    var type;\n    switch (day) {\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n        case 5:\n            type = \"Weekday\";\n            break;\n        case 6:\n        case 7:\n            type = \"Weekend\";\n            break;\n        default:\n            type = \"Invalid day\";\n    }\n    return type;\n}\n\nconsole.log(getDayType(1)); // \"Weekday\"\nconsole.log(getDayType(6)); // \"Weekend\"\nconsole.log(getDayType(8)); // \"Invalid day\""
  },
  &&
  {
    "question": "How to use switch statement with multiple cases?",
    "answer": "**Switch with Multiple Cases**\n\n**What it does:**\nMultiple cases can share the same code block by omitting `break` statements between them.\n\n**Syntax:**\n```javascript\nswitch (val) {\n    case 1:\n    case 2:\n    case 3:\n        answer = \"low\";\n        break;\n    case 4:\n    case 5:\n    case 6:\n        answer = \"medium\";\n        break;\n    default:\n        answer = \"unknown\";\n}\n```\n\n**Example:**\n```javascript\nfunction sequentialSizes(val) {\n    var answer = \"\";\n    switch (val) {\n        case 1:\n        case 2:\n        case 3:\n            answer = \"low\";\n            break;\n        case 4:\n        case 5:\n        case 6:\n            answer = \"medium\";\n            break;\n        case 7:\n        case 8:\n        case 9:\n            answer = \"high\";\n            break;\n        default:\n            answer = \"unknown\";\n            break;\n    }\n    return answer;\n}\n```\n\n**How it works:**\n- If val is 1, 2, or 3 → \"low\"\n- If val is 4, 5, or 6 → \"medium\"\n- If val is 7, 8, or 9 → \"high\"\n- Otherwise → \"unknown\"",
    "type": "javascript",
    "tags": ["javascript", "switch", "multiple-cases", "conditionals"],
    "code": "// Switch with multiple cases\nfunction sequentialSizes(val) {\n    var answer = \"\";\n    switch (val) {\n        case 1:\n        case 2:\n        case 3:\n            answer = \"low\";\n            break;\n        case 4:\n        case 5:\n        case 6:\n            answer = \"medium\";\n            break;\n        case 7:\n        case 8:\n        case 9:\n            answer = \"high\";\n            break;\n        default:\n            answer = \"unknown\";\n            break;\n    }\n    return answer;\n}\n\nconsole.log(sequentialSizes(1)); // \"low\"\nconsole.log(sequentialSizes(2)); // \"low\"\nconsole.log(sequentialSizes(5)); // \"medium\"\nconsole.log(sequentialSizes(8)); // \"high\"\nconsole.log(sequentialSizes(10)); // \"unknown\"\n\n// Practical example: grade ranges\nfunction getGrade(score) {\n    switch (true) {\n        case score >= 90:\n            return \"A\";\n        case score >= 80:\n            return \"B\";\n        case score >= 70:\n            return \"C\";\n        case score >= 60:\n            return \"D\";\n        default:\n            return \"F\";\n    }\n}\n\nconsole.log(getGrade(95)); // \"A\"\nconsole.log(getGrade(75)); // \"C\"\nconsole.log(getGrade(55)); // \"F\""
  },
  -----------------------
    {
    "question": "How do you generate random whole numbers within a range?",
    "answer": "**Random Numbers Within a Range**\n\n```javascript\nfunction withinRange(myMin, myMax){\n    var rD = Math.floor(Math.random() * (myMax - myMin + 1) + myMin);\n    return rD;\n}\n\nconsole.log(withinRange(1, 10));\n```\n\n**Formula breakdown:**\n- **myMax - myMin + 1:** Total number of possible values\n- **Math.random() * (myMax - myMin + 1):** Random decimal 0 to range\n- **+ myMin:** Shifts range to start from myMin\n- **Math.floor():** Converts to whole number\n\n**Examples:**\n- Range 1-10: Math.floor(Math.random() * 10 + 1)\n- Range 5-15: Math.floor(Math.random() * 11 + 5)\n- Range 0-9: Math.floor(Math.random() * 10)",
    "type": "javascript",
    "tags": ["javascript", "math", "random", "range", "numbers"],
    "code": "// Random number within range function\nfunction withinRange(myMin, myMax){\n    var rD = Math.floor(Math.random() * (myMax - myMin + 1) + myMin);\n    return rD;\n}\n\n// Test the function\nconsole.log(\"Random 1-10:\", withinRange(1, 10));\nconsole.log(\"Random 1-10:\", withinRange(1, 10));\nconsole.log(\"Random 1-10:\", withinRange(1, 10));\n\n// More examples\nconsole.log(\"Random 5-15:\", withinRange(5, 15));\nconsole.log(\"Random 0-9:\", withinRange(0, 9));\nconsole.log(\"Random 10-20:\", withinRange(10, 20));\nconsole.log(\"Random -5 to 5:\", withinRange(-5, 5));\n\n// Practical examples\n// Roll a die (1-6)\nfunction rollDie() {\n    return withinRange(1, 6);\n}\nconsole.log(\"Die roll:\", rollDie());\n\n// Pick random month (1-12)\nfunction randomMonth() {\n    return withinRange(1, 12);\n}\nconsole.log(\"Random month:\", randomMonth());\n\n// Random year between 1990-2023\nfunction randomYear() {\n    return withinRange(1990, 2023);\n}\nconsole.log(\"Random year:\", randomYear());\n\n// Random letter (A-Z)\nfunction randomLetter() {\n    var letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    var randomIndex = withinRange(0, 25);\n    return letters[randomIndex];\n}\nconsole.log(\"Random letter:\", randomLetter());\n\n// Random password generator\nfunction generatePassword(length) {\n    var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var password = '';\n    for (var i = 0; i < length; i++) {\n        var randomIndex = withinRange(0, chars.length - 1);\n        password += chars[randomIndex];\n    }\n    return password;\n}\nconsole.log(\"Random password:\", generatePassword(8));\n\n// Lottery number generator\nfunction lotteryNumbers(count, max) {\n    var numbers = [];\n    for (var i = 0; i < count; i++) {\n        numbers.push(withinRange(1, max));\n    }\n    return numbers;\n}\nconsole.log(\"Lottery numbers:\", lotteryNumbers(6, 49));"
  },
  &&
  
    {
    "question": "How do you generate random decimals and whole numbers in JavaScript?",
    "answer": "**Generating Random Numbers**\n\n**Random Decimals:**\n```javascript\nfunction randomFunction(){\n    return Math.random(); // Returns decimal between 0 and 1\n}\n```\n\n**Random Whole Numbers:**\n```javascript\nvar randomNumber = Math.floor(Math.random() * 20);\n// OR\nfunction randomDigit(){\n    var rD = Math.floor(Math.random() * 10);\n    return rD;\n}\n```\n\n**Key concepts:**\n- **Math.random():** Returns decimal between 0 (inclusive) and 1 (exclusive)\n- **Math.floor():** Rounds down to nearest whole number\n- **Math.random() * 20:** Scales to range 0-19.999...\n- **Math.floor(Math.random() * 20):** Gives integers 0-19",
    "type": "javascript",
    "tags": ["javascript", "math", "random", "numbers"],
    "code": "// Random decimal between 0 and 1\nfunction randomFunction(){\n    return Math.random();\n}\n\nconsole.log(\"Random decimal:\", randomFunction());\nconsole.log(\"Random decimal:\", randomFunction());\nconsole.log(\"Random decimal:\", randomFunction());\n\n// Random whole number between 0 and 19\nvar randomNumber = Math.floor(Math.random() * 20);\nconsole.log(\"Random whole number (0-19):\", randomNumber);\n\n// Random digit between 0 and 9\nfunction randomDigit(){\n    var rD = Math.floor(Math.random() * 10);\n    return rD;\n}\n\nconsole.log(\"Random digit (0-9):\", randomDigit());\nconsole.log(\"Random digit (0-9):\", randomDigit());\n\n// More examples\n// Random number between 1 and 10\nvar random1to10 = Math.floor(Math.random() * 10) + 1;\nconsole.log(\"Random 1-10:\", random1to10);\n\n// Random number between 5 and 15\nvar random5to15 = Math.floor(Math.random() * 11) + 5;\nconsole.log(\"Random 5-15:\", random5to15);\n\n// Random decimal between 0 and 100\nvar randomDecimal = Math.random() * 100;\nconsole.log(\"Random decimal 0-100:\", randomDecimal);\n\n// Random boolean (true/false)\nvar randomBoolean = Math.random() > 0.5;\nconsole.log(\"Random boolean:\", randomBoolean);\n\n// Random array element\nvar colors = [\"red\", \"blue\", \"green\", \"yellow\", \"purple\"];\nvar randomColor = colors[Math.floor(Math.random() * colors.length)];\nconsole.log(\"Random color:\", randomColor);\n\n// Dice roll simulation\nfunction rollDice() {\n    return Math.floor(Math.random() * 6) + 1;\n}\n\nconsole.log(\"Dice roll:\", rollDice());\nconsole.log(\"Dice roll:\", rollDice());\nconsole.log(\"Dice roll:\", rollDice());"
  },
  ----------------------------
    {
    "question": "What are parameters and arguments in JavaScript?",
    "answer": "**Parameters vs Arguments**\n\n**Parameters:**\nParameters are the named boxes that a function asks for. You list them in the function's definition (when you make the function).\n\n**Example:**\n```javascript\nfunction add(x, y) {\n    return x + y;\n}\n```\nHere, `x` and `y` are parameters. They're like buckets waiting to be filled.\n\n**Arguments:**\nArguments are the actual values you put into the function's boxes when you call it.\n\n**Example:**\n```javascript\nadd(2, 3);\n```\nHere, `2` and `3` are arguments. You're saying, \"Hey add function, put 2 in the first bucket (x), and 3 in the second (y).\"\n\n**Key concepts:**\n- **Parameters:** Defined in function declaration\n- **Arguments:** Passed when calling the function\n- **Order matters:** Arguments are assigned to parameters in order\n- **Can be different types:** Numbers, strings, objects, arrays, etc.",
    "type": "javascript",
    "tags": ["javascript", "parameters", "arguments", "functions"],
    "code": "// Parameters in function definition\nfunction add(x, y) {\n    return x + y;\n}\n\n// Arguments when calling the function\nconsole.log(\"add(2, 3):\", add(2, 3)); // 5\nconsole.log(\"add(10, 5):\", add(10, 5)); // 15\n\n// More examples\nfunction greet(name, age) {\n    return \"Hello, \" + name + \"! You are \" + age + \" years old.\";\n}\n\n// Different arguments\nconsole.log(greet(\"Alice\", 25)); // \"Hello, Alice! You are 25 years old.\"\nconsole.log(greet(\"Bob\", 30));   // \"Hello, Bob! You are 30 years old.\"\n\n// Function with multiple parameters\nfunction createUser(firstName, lastName, age, isActive) {\n    return {\n        firstName: firstName,\n        lastName: lastName,\n        age: age,\n        isActive: isActive,\n        fullName: firstName + \" \" + lastName\n    };\n}\n\n// Calling with arguments\nvar user1 = createUser(\"John\", \"Doe\", 25, true);\nvar user2 = createUser(\"Jane\", \"Smith\", 30, false);\n\nconsole.log(\"User 1:\", user1);\nconsole.log(\"User 2:\", user2);\n\n// Parameters can have default values\nfunction multiply(a, b = 1) {\n    return a * b;\n}\n\nconsole.log(\"multiply(5):\", multiply(5));     // 5 (b defaults to 1)\nconsole.log(\"multiply(5, 3):\", multiply(5, 3)); // 15\n\n// Parameters vs Arguments in practice\nfunction calculateArea(length, width) {\n    // length and width are PARAMETERS\n    return length * width;\n}\n\n// 10 and 5 are ARGUMENTS\nvar area = calculateArea(10, 5);\nconsole.log(\"Area:\", area); // 50\n\n// Function with array parameter\nfunction sumArray(numbers) {\n    var total = 0;\n    for (var i = 0; i < numbers.length; i++) {\n        total += numbers[i];\n    }\n    return total;\n}\n\n// Array as argument\nvar numbers = [1, 2, 3, 4, 5];\nconsole.log(\"Sum of array:\", sumArray(numbers)); // 15\n\n// Function with object parameter\nfunction processUser(user) {\n    return {\n        ...user,\n        processed: true,\n        processedAt: new Date()\n    };\n}\n\n// Object as argument\nvar userData = {\n    name: \"Alice\",\n    email: \"alice@example.com\"\n};\n\nconsole.log(\"Processed user:\", processUser(userData));\n\n// Rest parameters (collects multiple arguments)\nfunction sumAll(...numbers) {\n    var total = 0;\n    for (var i = 0; i < numbers.length; i++) {\n        total += numbers[i];\n    }\n    return total;\n}\n\nconsole.log(\"sumAll(1, 2, 3):\", sumAll(1, 2, 3)); // 6\nconsole.log(\"sumAll(1, 2, 3, 4, 5):\", sumAll(1, 2, 3, 4, 5)); // 15"
  },
  &&
    {
    "question": "How do you use default parameters in JavaScript?",
    "answer": "**Default Parameters**\n\nDefault parameters allow you to set default values for function parameters. If an argument is not provided or is undefined, the default value is used.\n\n**Syntax:**\n```javascript\nfunction functionName(param1 = defaultValue1, param2 = defaultValue2) {\n    // function body\n}\n```\n\n**Example:**\n```javascript\nfunction greet(name = \"Guest\") {\n    return \"Hello, \" + name + \"!\";\n}\n\nconsole.log(greet()); // \"Hello, Guest!\"\nconsole.log(greet(\"Alice\")); // \"Hello, Alice!\"\n```\n\n**Key concepts:**\n- **Fallback values:** Used when arguments are missing\n- **Undefined triggers default:** Only undefined values use defaults\n- **Order matters:** Default parameters can be followed by non-default ones\n- **Expressions allowed:** Defaults can be expressions or function calls",
    "type": "javascript",
    "tags": ["javascript", "default-parameters", "functions", "es6"],
    "code": "// Basic default parameters\nfunction greet(name = \"Guest\") {\n    return \"Hello, \" + name + \"!\";\n}\n\nconsole.log(\"greet():\", greet()); // \"Hello, Guest!\"\nconsole.log(\"greet('Alice'):\", greet(\"Alice\")); // \"Hello, Alice!\"\nconsole.log(\"greet(undefined):\", greet(undefined)); // \"Hello, Guest!\"\nconsole.log(\"greet(null):\", greet(null)); // \"Hello, null!\" (null is not undefined)\n\n// Multiple default parameters\nfunction createUser(name = \"Anonymous\", age = 18, isActive = true) {\n    return {\n        name: name,\n        age: age,\n        isActive: isActive\n    };\n}\n\nconsole.log(\"createUser():\", createUser());\nconsole.log(\"createUser('John'):\", createUser(\"John\"));\nconsole.log(\"createUser('Jane', 25):\", createUser(\"Jane\", 25));\nconsole.log(\"createUser('Bob', 30, false):\", createUser(\"Bob\", 30, false));\n\n// Default parameters with expressions\nfunction calculateArea(length = 10, width = length) {\n    return length * width;\n}\n\nconsole.log(\"calculateArea():\", calculateArea()); // 100 (10 * 10)\nconsole.log(\"calculateArea(5):\", calculateArea(5)); // 25 (5 * 5)\nconsole.log(\"calculateArea(5, 3):\", calculateArea(5, 3)); // 15 (5 * 3)\n\n// Default parameters with function calls\nfunction getCurrentYear() {\n    return new Date().getFullYear();\n}\n\nfunction createProfile(name, birthYear = getCurrentYear() - 25) {\n    return {\n        name: name,\n        birthYear: birthYear,\n        age: getCurrentYear() - birthYear\n    };\n}\n\nconsole.log(\"createProfile('Alice'):\", createProfile(\"Alice\"));\nconsole.log(\"createProfile('Bob', 1990):\", createProfile(\"Bob\", 1990));\n\n// Default parameters with arrays and objects\nfunction processData(data = [], options = {}) {\n    return {\n        data: data,\n        options: {\n            sort: false,\n            filter: false,\n            ...options\n        }\n    };\n}\n\nconsole.log(\"processData():\", processData());\nconsole.log(\"processData([1, 2, 3]):\", processData([1, 2, 3]));\nconsole.log(\"processData([1, 2, 3], {sort: true}):\", processData([1, 2, 3], {sort: true}));\n\n// Practical examples\n// Math operations with defaults\nfunction multiply(a = 1, b = 1) {\n    return a * b;\n}\n\nconsole.log(\"multiply():\", multiply()); // 1\nconsole.log(\"multiply(5):\", multiply(5)); // 5\nconsole.log(\"multiply(5, 3):\", multiply(5, 3)); // 15\n\n// String formatting with defaults\nfunction formatMessage(message = \"No message\", type = \"info\") {\n    return `[${type.toUpperCase()}] ${message}`;\n}\n\nconsole.log(\"formatMessage():\", formatMessage());\nconsole.log(\"formatMessage('Hello'):\", formatMessage(\"Hello\"));\nconsole.log(\"formatMessage('Error occurred', 'error'):\", formatMessage(\"Error occurred\", \"error\"));\n\n// Configuration objects with defaults\nfunction createConfig(apiUrl = \"https://api.example.com\", timeout = 5000, retries = 3) {\n    return {\n        apiUrl: apiUrl,\n        timeout: timeout,\n        retries: retries\n    };\n}\n\nconsole.log(\"Default config:\", createConfig());\nconsole.log(\"Custom config:\", createConfig(\"https://custom.api.com\", 10000, 5));\n\n// Default parameters in arrow functions\nconst add = (a = 0, b = 0) => a + b;\n\nconsole.log(\"add():\", add()); // 0\nconsole.log(\"add(5):\", add(5)); // 5\nconsole.log(\"add(5, 3):\", add(5, 3)); // 8\n\n// Destructuring with default parameters\nfunction processUser({name = \"Anonymous\", age = 18, email = \"no-email@example.com\"} = {}) {\n    return `User: ${name}, Age: ${age}, Email: ${email}`;\n}\n\nconsole.log(\"processUser():\", processUser());\nconsole.log(\"processUser({name: 'John'}):\", processUser({name: 'John'}));\nconsole.log(\"processUser({name: 'Jane', age: 25}):\", processUser({name: 'Jane', age: 25}));\n\n// Rest parameters with defaults\nfunction sumAll(first = 0, ...rest) {\n    return rest.reduce((total, num) => total + num, first);\n}\n\nconsole.log(\"sumAll():\", sumAll()); // 0\nconsole.log(\"sumAll(1, 2, 3):\", sumAll(1, 2, 3)); // 6\nconsole.log(\"sumAll(undefined, 2, 3):\", sumAll(undefined, 2, 3)); // 5 (0 + 2 + 3)"
  },
  ------------------------

    {
    "question": "What is a media query, why is it called that, and what does it do in the code?",
    "answer": "**CSS Media Queries:**\n\n**What is a Media Query?**\nA CSS feature that allows you to apply styles conditionally based on device characteristics.\n\n**Why is it called \"Media Query\"?**\n- **Media:** Refers to the output medium (screen, print, etc.)\n- **Query:** Asks questions about device capabilities\n- **Media Query:** \"Query the media about its characteristics\"\n\n**What Media Queries Do:**\n- **Responsive Design:** Adapt layout to different screen sizes\n- **Device Targeting:** Apply styles for specific devices\n- **Feature Detection:** Check for device capabilities\n- **Print Styles:** Different styles for printing\n- **Accessibility:** High contrast, reduced motion\n\n**Complete Media Query Syntax:**\n```css\n@media media-type and (condition) {\n    /* CSS rules */\n}\n```\n\n**Media Types:**\n- `all` - All media types (default)\n- `screen` - Computer screens, tablets, phones\n- `print` - Printers and print preview\n- `speech` - Screen readers\n- `handheld` - Handheld devices (deprecated)\n\n**Common Media Features:**\n- `width` - Viewport width\n- `height` - Viewport height\n- `min-width` - Minimum viewport width\n- `max-width` - Maximum viewport width\n- `orientation` - Portrait or landscape\n- `resolution` - Device pixel ratio\n- `aspect-ratio` - Width to height ratio\n- `color` - Number of color bits\n- `hover` - Hover capability\n- `pointer` - Pointer type (coarse, fine)\n\n**Breakpoint Examples:**\n- **Mobile:** `@media (max-width: 767px)`\n- **Tablet:** `@media (min-width: 768px) and (max-width: 1023px)`\n- **Desktop:** `@media (min-width: 1024px)`\n- **Large Desktop:** `@media (min-width: 1440px)`",
    "type": "css",
    "tags": ["css", "media-queries", "responsive", "breakpoints"],
    "code": "<!DOCTYPE html><html><head><title>CSS Media Queries Guide</title><style>body{font-family:Arial,sans-serif;margin:20px;background:#f8f9fa}.container{max-width:1000px;margin:0 auto}.demo-section{background:white;padding:25px;margin:20px 0;border-radius:10px;box-shadow:0 2px 5px rgba(0,0,0,0.1)}.demo-title{color:#2c3e50;font-size:20px;font-weight:bold;margin-bottom:15px}.responsive-demo{background:#e3f2fd;padding:20px;border-radius:8px;margin:15px 0;border:2px solid #2196f3;text-align:center}.code-block{background:#2c3e50;color:#ecf0f1;padding:15px;border-radius:5px;font-family:monospace;margin:15px 0;overflow-x:auto}.breakpoint-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(200px,1fr));gap:15px;margin:20px 0}.breakpoint-card{background:#f8f9fa;padding:15px;border-radius:5px;border-left:4px solid #007bff}.breakpoint-title{font-weight:bold;color:#2c3e50;margin-bottom:10px}.feature-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(250px,1fr));gap:15px;margin:20px 0}.feature-card{background:#fff3cd;padding:15px;border-radius:5px;border-left:4px solid #ffc107}.feature-title{font-weight:bold;color:#2c3e50;margin-bottom:10px}.example-section{background:#e8f5e8;padding:20px;border-radius:5px;margin:20px 0;border-left:4px solid #27ae60}.example-title{font-weight:bold;color:#2c3e50;margin-bottom:15px}.current-size{background:#ff6b6b;color:white;padding:10px;border-radius:5px;margin:10px 0;font-weight:bold}</style></head><body><div class=\"container\"><h1 style=\"text-align:center;color:#2c3e50\">📱 CSS Media Queries Complete Guide</h1><div class=\"demo-section\"><div class=\"demo-title\">What is a Media Query?</div><p>A CSS feature that allows you to apply styles conditionally based on device characteristics like screen size, orientation, and capabilities.</p><div class=\"responsive-demo\"><div class=\"current-size\" id=\"currentSize\">Current Viewport: <span id=\"viewportSize\">Loading...</span></div><div style=\"background:#4ecdc4;color:white;padding:15px;border-radius:5px;margin:10px 0\">This content changes based on screen size!</div></div></div><div class=\"demo-section\"><div class=\"demo-title\">Why is it called \"Media Query\"?</div><div class=\"feature-grid\"><div class=\"feature-card\"><div class=\"feature-title\">Media</div><p>Refers to the output medium (screen, print, speech, etc.)</p></div><div class=\"feature-card\"><div class=\"feature-title\">Query</div><p>Asks questions about device capabilities and characteristics</p></div><div class=\"feature-card\"><div class=\"feature-title\">Media Query</div><p>\"Query the media about its characteristics\"</p></div></div></div><div class=\"demo-section\"><div class=\"demo-title\">What Media Queries Do</div><div class=\"feature-grid\"><div class=\"feature-card\"><div class=\"feature-title\">Responsive Design</div><p>Adapt layout to different screen sizes</p></div><div class=\"feature-card\"><div class=\"feature-title\">Device Targeting</div><p>Apply styles for specific devices</p></div><div class=\"feature-card\"><div class=\"feature-title\">Feature Detection</div><p>Check for device capabilities</p></div><div class=\"feature-card\"><div class=\"feature-title\">Print Styles</div><p>Different styles for printing</p></div><div class=\"feature-card\"><div class=\"feature-title\">Accessibility</div><p>High contrast, reduced motion</p></div></div></div><div class=\"demo-section\"><div class=\"demo-title\">Media Query Syntax</div><div class=\"code-block\">@media media-type and (condition) {<br>&nbsp;&nbsp;/* CSS rules */<br>}</div><div class=\"example-section\"><div class=\"example-title\">Basic Examples:</div><div class=\"code-block\">/* All devices */<br>@media all {<br>&nbsp;&nbsp;body { font-size: 16px; }<br>}<br><br>/* Screen devices only */<br>@media screen {<br>&nbsp;&nbsp;body { background: white; }<br>}<br><br>/* Print media */<br>@media print {<br>&nbsp;&nbsp;body { background: white; color: black; }<br>}</div></div></div><div class=\"demo-section\"><div class=\"demo-title\">Common Breakpoints</div><div class=\"breakpoint-grid\"><div class=\"breakpoint-card\"><div class=\"breakpoint-title\">Mobile</div><div class=\"code-block\">@media (max-width: 767px) {<br>&nbsp;&nbsp;/* Mobile styles */<br>}</div></div><div class=\"breakpoint-card\"><div class=\"breakpoint-title\">Tablet</div><div class=\"code-block\">@media (min-width: 768px) and (max-width: 1023px) {<br>&nbsp;&nbsp;/* Tablet styles */<br>}</div></div><div class=\"breakpoint-card\"><div class=\"breakpoint-title\">Desktop</div><div class=\"code-block\">@media (min-width: 1024px) {<br>&nbsp;&nbsp;/* Desktop styles */<br>}</div></div><div class=\"breakpoint-card\"><div class=\"breakpoint-title\">Large Desktop</div><div class=\"code-block\">@media (min-width: 1440px) {<br>&nbsp;&nbsp;/* Large desktop styles */<br>}</div></div></div></div><div class=\"demo-section\"><div class=\"demo-title\">Media Features</div><div class=\"code-block\">/* Width-based */<br>@media (min-width: 768px) { }<br>@media (max-width: 1024px) { }<br>@media (width: 800px) { }<br><br>/* Orientation */<br>@media (orientation: portrait) { }<br>@media (orientation: landscape) { }<br><br>/* Resolution */<br>@media (min-resolution: 2dppx) { }<br>@media (-webkit-min-device-pixel-ratio: 2) { }<br><br>/* Hover capability */<br>@media (hover: hover) { }<br>@media (hover: none) { }<br><br>/* Pointer type */<br>@media (pointer: coarse) { }<br>@media (pointer: fine) { }</div></div><div class=\"demo-section\"><div class=\"demo-title\">Complete Responsive Example</div><div class=\"code-block\">/* Mobile First Approach */<br>.container {<br>&nbsp;&nbsp;width: 100%;<br>&nbsp;&nbsp;padding: 10px;<br>}<br><br>/* Tablet */<br>@media (min-width: 768px) {<br>&nbsp;&nbsp;.container {<br>&nbsp;&nbsp;&nbsp;&nbsp;width: 80%;<br>&nbsp;&nbsp;&nbsp;&nbsp;padding: 20px;<br>&nbsp;&nbsp;}<br>}<br><br>/* Desktop */<br>@media (min-width: 1024px) {<br>&nbsp;&nbsp;.container {<br>&nbsp;&nbsp;&nbsp;&nbsp;width: 1200px;<br>&nbsp;&nbsp;&nbsp;&nbsp;margin: 0 auto;<br>&nbsp;&nbsp;&nbsp;&nbsp;padding: 30px;<br>&nbsp;&nbsp;}<br>}</div></div></div><script>function updateViewportSize(){const width=window.innerWidth;const height=window.innerHeight;document.getElementById('viewportSize').textContent=`${width}px × ${height}px`;let device='Mobile';if(width>=1440){device='Large Desktop';}else if(width>=1024){device='Desktop';}else if(width>=768){device='Tablet';}document.getElementById('currentSize').innerHTML=`Current Viewport: <span id=\"viewportSize\">${width}px × ${height}px</span> - ${device}`;}window.addEventListener('resize',updateViewportSize);updateViewportSize();</script></body></html>"
  },
  Edit the Common Media Features part 
- `width` - Viewport width  , min & max
- `height` - Viewport height min & max
- `min-width` - Minimum viewport width Remove
- `max-width` - Maximum viewport width Remove
- `orientation` - Portrait or landscape 
- `resolution` - Device pixel ratio dppx OR DPI
- `aspect-ratio` - Width to height ratio 
- `color` - Number of color bits , usually 8 
- `hover` - Hover capability hover:hover , hover:none 
- `pointer` - Pointer type (coarse, fine,none) 

Correct Syntax for not  -- it should be in the beginning immediately after @media
-------------------------------
This is the end of the list , be sure to update teh media query question also , i want to edit just that last part of the question